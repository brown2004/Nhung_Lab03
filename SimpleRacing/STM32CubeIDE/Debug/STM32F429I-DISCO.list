
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014654  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  08014804  08014804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000053d2  0801611c  0801611c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001c0  0801b4f0  0801b4f0  0001c4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000060  0801b6b0  0801b6b0  0001c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000d6370  0801b710  0801b710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f1a80  080f1a80  000f30f0  2**0
                  CONTENTS
  8 .ARM          00000008  080f1a80  080f1a80  000f2a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f1a88  080f1a88  000f30f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f1a88  080f1a88  000f2a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f1a9c  080f1a9c  000f2a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080f1aa4  000f3000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00012864  200000f0  080f1b94  000f30f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  20012954  080f1b94  000f3954  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000f30f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000f4000  2**2
                  ALLOC
 17 .debug_line   0004cf7a  00000000  00000000  000f3120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005d  00000000  00000000  0014009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000af180  00000000  00000000  001400f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000147a0  00000000  00000000  001ef277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002fc0  00000000  00000000  00203a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011afb6  00000000  00000000  002069d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003505  00000000  00000000  0032198e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001b095  00000000  00000000  00324e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  000312e4  00000000  00000000  0033ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0037120c  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000084f8  00000000  00000000  003712d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080147ec 	.word	0x080147ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	080147ec 	.word	0x080147ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f003 fe09 	bl	80041fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f013 fb91 	bl	8013d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fef3 	bl	80013d8 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080f1aa4 	.word	0x080f1aa4
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8000604:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8000608:	20012954 	.word	0x20012954

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>

0800060e <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800060e:	f000 bcc1 	b.w	8000f94 <touchgfx_init>

08000612 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000612:	f000 bd2f 	b.w	8001074 <touchgfx_taskEntry>

08000616 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000616:	4770      	bx	lr

08000618 <_ZN20STM32TouchControllerD0Ev>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2104      	movs	r1, #4
 800061c:	4604      	mov	r4, r0
 800061e:	f013 f899 	bl	8013754 <_ZdlPvj>
 8000622:	4620      	mov	r0, r4
 8000624:	bd10      	pop	{r4, pc}
	...

08000628 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8000628:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800062c:	4c0c      	ldr	r4, [pc, #48]	@ (8000660 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 800062e:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000632:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 8000634:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	4798      	blx	r3
 800063a:	f640 0311 	movw	r3, #2065	@ 0x811
 800063e:	4298      	cmp	r0, r3
 8000640:	d10a      	bne.n	8000658 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000642:	4d09      	ldr	r5, [pc, #36]	@ (8000668 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000644:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8000646:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8000648:	2082      	movs	r0, #130	@ 0x82
 800064a:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	2082      	movs	r0, #130	@ 0x82
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4798      	blx	r3
 8000654:	2000      	movs	r0, #0
    }

    return ret;
}
 8000656:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8000658:	2001      	movs	r0, #1
 800065a:	e7fc      	b.n	8000656 <_Z11BSP_TS_Inittt+0x2e>
 800065c:	20000116 	.word	0x20000116
 8000660:	2000004c 	.word	0x2000004c
 8000664:	20000114 	.word	0x20000114
 8000668:	20000118 	.word	0x20000118

0800066c <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 800066c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000670:	20f0      	movs	r0, #240	@ 0xf0
 8000672:	f7ff bfd9 	b.w	8000628 <_Z11BSP_TS_Inittt>
	...

08000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8000678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800067a:	4d35      	ldr	r5, [pc, #212]	@ (8000750 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 800067c:	682b      	ldr	r3, [r5, #0]
{
 800067e:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	2082      	movs	r0, #130	@ 0x82
 8000684:	4798      	blx	r3
 8000686:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8000688:	2800      	cmp	r0, #0
 800068a:	d04b      	beq.n	8000724 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800068c:	682b      	ldr	r3, [r5, #0]
 800068e:	f10d 0206 	add.w	r2, sp, #6
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	a901      	add	r1, sp, #4
 8000696:	2082      	movs	r0, #130	@ 0x82
 8000698:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800069a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800069e:	f640 6274 	movw	r2, #3700	@ 0xe74
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d940      	bls.n	8000728 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 80006a6:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 80006aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 80006b2:	2a0a      	cmp	r2, #10
 80006b4:	d93e      	bls.n	8000734 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 80006b6:	230b      	movs	r3, #11
 80006b8:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d901      	bls.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 80006c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 80006ce:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d830      	bhi.n	8000738 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 80006d6:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80006da:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006dc:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 80006de:	b29b      	uxth	r3, r3
        xr = x / 15;
 80006e0:	250f      	movs	r5, #15
 80006e2:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 80006e6:	4d1d      	ldr	r5, [pc, #116]	@ (800075c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 80006e8:	882d      	ldrh	r5, [r5, #0]
 80006ea:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 80006ec:	bf84      	itt	hi
 80006ee:	f105 35ff 	addhi.w	r5, r5, #4294967295
 80006f2:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006f4:	428b      	cmp	r3, r1
 80006f6:	461d      	mov	r5, r3
 80006f8:	b28e      	uxth	r6, r1
 80006fa:	d926      	bls.n	800074a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8000700:	4e17      	ldr	r6, [pc, #92]	@ (8000760 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8000702:	6837      	ldr	r7, [r6, #0]
 8000704:	b2bb      	uxth	r3, r7
 8000706:	42ba      	cmp	r2, r7
 8000708:	bf8c      	ite	hi
 800070a:	1ad3      	subhi	r3, r2, r3
 800070c:	1a9b      	subls	r3, r3, r2
 800070e:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8000710:	4419      	add	r1, r3
 8000712:	2905      	cmp	r1, #5
        {
            _x = x;
 8000714:	bfc8      	it	gt
 8000716:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8000718:	6803      	ldr	r3, [r0, #0]
            _y = y;
 800071a:	bfc8      	it	gt
 800071c:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 800071e:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	80a3      	strh	r3, [r4, #4]
    }
}
 8000724:	b003      	add	sp, #12
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8000728:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 800072a:	bf9c      	itt	ls
 800072c:	23b4      	movls	r3, #180	@ 0xb4
 800072e:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8000732:	e7ba      	b.n	80006aa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8000734:	2200      	movs	r2, #0
 8000736:	e7c7      	b.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8000738:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800073c:	3308      	adds	r3, #8
 800073e:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000740:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000742:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8000744:	d8cc      	bhi.n	80006e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000746:	2500      	movs	r5, #0
            xr = 0;
 8000748:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 800074a:	1ac9      	subs	r1, r1, r3
 800074c:	b289      	uxth	r1, r1
 800074e:	e7d7      	b.n	8000700 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8000750:	20000118 	.word	0x20000118
 8000754:	20000114 	.word	0x20000114
 8000758:	20000110 	.word	0x20000110
 800075c:	20000116 	.word	0x20000116
 8000760:	2000010c 	.word	0x2000010c

08000764 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000764:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000766:	4668      	mov	r0, sp
{
 8000768:	460d      	mov	r5, r1
 800076a:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 800076c:	f7ff ff84 	bl	8000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8000770:	f8bd 0000 	ldrh.w	r0, [sp]
 8000774:	b130      	cbz	r0, 8000784 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000776:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800077a:	602b      	str	r3, [r5, #0]
        y = state.Y;
 800077c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000780:	6023      	str	r3, [r4, #0]
        return true;
 8000782:	2001      	movs	r0, #1
}
 8000784:	b003      	add	sp, #12
 8000786:	bd30      	pop	{r4, r5, pc}

08000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000788:	2803      	cmp	r0, #3
 800078a:	d821      	bhi.n	80007d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 800078c:	e8df f000 	tbb	[pc, r0]
 8000790:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	fab2 f282 	clz	r2, r2
 800079c:	0952      	lsrs	r2, r2, #5
 800079e:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 80007a2:	f004 b9d5 	b.w	8004b50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	0952      	lsrs	r2, r2, #5
 80007b0:	2108      	movs	r1, #8
 80007b2:	e7f5      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	fab2 f282 	clz	r2, r2
 80007bc:	0952      	lsrs	r2, r2, #5
 80007be:	2110      	movs	r1, #16
 80007c0:	e7ee      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	fab2 f282 	clz	r2, r2
 80007ca:	0952      	lsrs	r2, r2, #5
 80007cc:	2120      	movs	r1, #32
 80007ce:	e7e7      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	40021000 	.word	0x40021000

080007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80007dc:	2803      	cmp	r0, #3
 80007de:	d821      	bhi.n	8000824 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 80007e0:	e8df f000 	tbb	[pc, r0]
 80007e4:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	3a00      	subs	r2, #0
 80007ee:	bf18      	it	ne
 80007f0:	2201      	movne	r2, #1
 80007f2:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007f6:	f004 b9ab 	b.w	8004b50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	3a00      	subs	r2, #0
 8000800:	bf18      	it	ne
 8000802:	2201      	movne	r2, #1
 8000804:	2108      	movs	r1, #8
 8000806:	e7f5      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	3a00      	subs	r2, #0
 800080e:	bf18      	it	ne
 8000810:	2201      	movne	r2, #1
 8000812:	2110      	movs	r1, #16
 8000814:	e7ee      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000816:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	3a00      	subs	r2, #0
 800081c:	bf18      	it	ne
 800081e:	2201      	movne	r2, #1
 8000820:	2120      	movs	r1, #32
 8000822:	e7e7      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000011c 	.word	0x2000011c
 800082c:	40021000 	.word	0x40021000

08000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000830:	2803      	cmp	r0, #3
 8000832:	d80d      	bhi.n	8000850 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8000834:	e8df f000 	tbb	[pc, r0]
 8000838:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800083c:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8000840:	f004 b98b 	b.w	8004b5a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000844:	2108      	movs	r1, #8
 8000846:	e7fa      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000848:	2110      	movs	r1, #16
 800084a:	e7f8      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800084c:	2120      	movs	r1, #32
 800084e:	e7f6      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000858:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800085a:	2803      	cmp	r0, #3
 800085c:	d811      	bhi.n	8000882 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800085e:	e8df f000 	tbb	[pc, r0]
 8000862:	0a02      	.short	0x0a02
 8000864:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000866:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 800086a:	f004 f96b 	bl	8004b44 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800086e:	1e43      	subs	r3, r0, #1
 8000870:	4258      	negs	r0, r3
 8000872:	4158      	adcs	r0, r3
 8000874:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000876:	2108      	movs	r1, #8
 8000878:	e7f6      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800087a:	2110      	movs	r1, #16
 800087c:	e7f4      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800087e:	2120      	movs	r1, #32
 8000880:	e7f2      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8000882:	2000      	movs	r0, #0
 8000884:	e7f3      	b.n	800086e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <_ZN8touchgfx4GPIO4initEv>:
{
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4d08      	ldr	r5, [pc, #32]	@ (80008b0 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000890:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000892:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000894:	b2e0      	uxtb	r0, r4
 8000896:	f7ff ffdf 	bl	8000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800089a:	b118      	cbz	r0, 80008a4 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80008a0:	bf18      	it	ne
 80008a2:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80008a4:	3401      	adds	r4, #1
 80008a6:	2c05      	cmp	r4, #5
 80008a8:	f105 0504 	add.w	r5, r5, #4
 80008ac:	d1f2      	bne.n	8000894 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80008b4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80008b6:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80008ba:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80008be:	4770      	bx	lr

080008c0 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 80008c0:	4770      	bx	lr

080008c2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80008c2:	2000      	movs	r0, #0
 80008c4:	4770      	bx	lr
	...

080008c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80008ca:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008cc:	3900      	subs	r1, #0
 80008ce:	bf18      	it	ne
 80008d0:	2101      	movne	r1, #1
 80008d2:	7019      	strb	r1, [r3, #0]
    }
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200125df 	.word	0x200125df

080008dc <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 80008dc:	4770      	bx	lr

080008de <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80008e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80008e4:	b10b      	cbz	r3, 80008ea <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80008e6:	4608      	mov	r0, r1
 80008e8:	4718      	bx	r3
        }
    }
 80008ea:	4770      	bx	lr

080008ec <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008f0:	4770      	bx	lr

080008f2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008f2:	6840      	ldr	r0, [r0, #4]
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4718      	bx	r3

080008fa <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 80008fa:	4770      	bx	lr

080008fc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008fc:	4770      	bx	lr

080008fe <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008fe:	4770      	bx	lr

08000900 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8000900:	4770      	bx	lr

08000902 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000902:	4770      	bx	lr

08000904 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000908:	f000 fc5e 	bl	80011c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8000914:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8000918:	4620      	mov	r0, r4
 800091a:	46ac      	mov	ip, r5
}
 800091c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8000920:	4760      	bx	ip
 8000922:	bf00      	nop
 8000924:	d0000000 	.word	0xd0000000

08000928 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000928:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 800092a:	6803      	ldr	r3, [r0, #0]
{
 800092c:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 800092e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000932:	4798      	blx	r3
    enableInterrupts();
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	4620      	mov	r0, r4
 8000938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800093a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800093c:	f000 f8ec 	bl	8000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4620      	mov	r0, r4
 8000944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000946:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8000948:	2029      	movs	r0, #41	@ 0x29
 800094a:	f000 fff9 	bl	8001940 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800094e:	f000 f8e3 	bl	8000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	4620      	mov	r0, r4
 8000956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000958:	4798      	blx	r3
    for (;;)
 800095a:	e7f8      	b.n	800094e <_ZN11TouchGFXHAL9taskEntryEv+0x26>

0800095c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800095c:	b510      	push	{r4, lr}
 800095e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000960:	f009 fa08 	bl	8009d74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	4620      	mov	r0, r4
 8000968:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 800096c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000970:	4718      	bx	r3

08000972 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000972:	f000 bc1b 	b.w	80011ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08000976 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000976:	f000 bc1f 	b.w	80011b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800097a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800097a:	f000 bc4b 	b.w	8001214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800097e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800097e:	f000 bbf1 	b.w	8001164 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000982 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000982:	f000 bc4b 	b.w	800121c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08000986 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000986:	f000 bc53 	b.w	8001230 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800098a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800098a:	f000 bbf5 	b.w	8001178 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800098e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800098e:	f008 bc13 	b.w	80091b8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000992 <_ZN11TouchGFXHALD0Ev>:
 8000992:	b510      	push	{r4, lr}
 8000994:	2184      	movs	r1, #132	@ 0x84
 8000996:	4604      	mov	r4, r0
 8000998:	f012 fedc 	bl	8013754 <_ZdlPvj>
 800099c:	4620      	mov	r0, r4
 800099e:	bd10      	pop	{r4, pc}

080009a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80009a0:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80009a2:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 80009a6:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80009ac:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80009ae:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80009b0:	d009      	beq.n	80009c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80009b2:	b93a      	cbnz	r2, 80009c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009b6:	490b      	ldr	r1, [pc, #44]	@ (80009e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b8:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009ba:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 80009bc:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009be:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 80009c0:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 80009c2:	701a      	strb	r2, [r3, #0]
    }
 80009c4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d0fc      	beq.n	80009c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009cc:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009ce:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009d0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80009d2:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009d4:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 80009d6:	2200      	movs	r2, #0
 80009d8:	e7f3      	b.n	80009c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80009da:	bf00      	nop
 80009dc:	200125d8 	.word	0x200125d8
 80009e0:	200125d4 	.word	0x200125d4
 80009e4:	200125d6 	.word	0x200125d6

080009e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	460d      	mov	r5, r1
 80009ec:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009ee:	b935      	cbnz	r5, 80009fe <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009f4:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009f6:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80009fa:	f012 fed9 	bl	80137b0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009fe:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8000a04:	3a00      	subs	r2, #0
 8000a06:	bf18      	it	ne
 8000a08:	2201      	movne	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000a0c:	6803      	ldr	r3, [r0, #0]
    }
 8000a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8000a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a16:	4718      	bx	r3
 8000a18:	0801486c 	.word	0x0801486c
 8000a1c:	080148a4 	.word	0x080148a4
 8000a20:	080148f2 	.word	0x080148f2
 8000a24:	200125de 	.word	0x200125de

08000a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d803      	bhi.n	8000a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d905      	bls.n	8000a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000a3a:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000a40:	21a3      	movs	r1, #163	@ 0xa3
 8000a42:	f012 feb5 	bl	80137b0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a4c:	801a      	strh	r2, [r3, #0]
    }
 8000a4e:	bd08      	pop	{r3, pc}
 8000a50:	200125d4 	.word	0x200125d4
 8000a54:	200125d6 	.word	0x200125d6
 8000a58:	08014937 	.word	0x08014937
 8000a5c:	0801499a 	.word	0x0801499a
 8000a60:	080148f2 	.word	0x080148f2
 8000a64:	200125da 	.word	0x200125da
 8000a68:	200125dc 	.word	0x200125dc

08000a6c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a6c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a6e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a72:	b118      	cbz	r0, 8000a7c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a74:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a76:	6803      	ldr	r3, [r0, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4718      	bx	r3
    }
 8000a7c:	4770      	bx	lr
	...

08000a80 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a80:	2101      	movs	r1, #1
{
 8000a82:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a84:	2200      	movs	r2, #0
 8000a86:	4608      	mov	r0, r1
 8000a88:	f006 f85e 	bl	8006b48 <osSemaphoreNew>
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a8e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a90:	b928      	cbnz	r0, 8000a9e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a96:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a98:	480a      	ldr	r0, [pc, #40]	@ (8000ac4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a9a:	f012 fe89 	bl	80137b0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f006 f8f8 	bl	8006c98 <osMessageQueueNew>
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000aaa:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000aac:	b918      	cbnz	r0, 8000ab6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000ab2:	212c      	movs	r1, #44	@ 0x2c
 8000ab4:	e7f0      	b.n	8000a98 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000ab6:	bd08      	pop	{r3, pc}
 8000ab8:	20000130 	.word	0x20000130
 8000abc:	080149dd 	.word	0x080149dd
 8000ac0:	08014a26 	.word	0x08014a26
 8000ac4:	08014a55 	.word	0x08014a55
 8000ac8:	2000012c 	.word	0x2000012c
 8000acc:	08014a99 	.word	0x08014a99

08000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000ad0:	4b02      	ldr	r3, [pc, #8]	@ (8000adc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f006 b880 	b.w	8006bdc <osSemaphoreAcquire>
 8000adc:	20000130 	.word	0x20000130

08000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000ae0:	4b01      	ldr	r3, [pc, #4]	@ (8000ae8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	f006 b8a6 	b.w	8006c34 <osSemaphoreRelease>
 8000ae8:	20000130 	.word	0x20000130

08000aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f006 b873 	b.w	8006bdc <osSemaphoreAcquire>
 8000af6:	bf00      	nop
 8000af8:	20000130 	.word	0x20000130

08000afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000afc:	f7ff bff0 	b.w	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000b00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000b02:	4904      	ldr	r1, [pc, #16]	@ (8000b14 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000b04:	6800      	ldr	r0, [r0, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f006 b900 	b.w	8006d0e <osMessageQueuePut>
 8000b0e:	bf00      	nop
 8000b10:	2000012c 	.word	0x2000012c
 8000b14:	20000004 	.word	0x20000004

08000b18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000b18:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000b1a:	4c08      	ldr	r4, [pc, #32]	@ (8000b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	a901      	add	r1, sp, #4
 8000b22:	6820      	ldr	r0, [r4, #0]
 8000b24:	f006 f924 	bl	8006d70 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000b28:	6820      	ldr	r0, [r4, #0]
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	2200      	movs	r2, #0
 8000b30:	a901      	add	r1, sp, #4
 8000b32:	f006 f91d 	bl	8006d70 <osMessageQueueGet>
}
 8000b36:	b002      	add	sp, #8
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000012c 	.word	0x2000012c

08000b40 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b44:	4718      	bx	r3

08000b46 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000b46:	2001      	movs	r0, #1
 8000b48:	4770      	bx	lr

08000b4a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000b4a:	6803      	ldr	r3, [r0, #0]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4e:	4718      	bx	r3

08000b50 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b50:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b5a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b62:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b66:	9201      	str	r2, [sp, #4]
 8000b68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b70:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b78:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b7c:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b7e:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <_ZN8STM32DMA10initializeEv+0x48>)
 8000b82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b86:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b88:	b002      	add	sp, #8
 8000b8a:	4770      	bx	lr
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20001700 	.word	0x20001700
 8000b94:	08000e29 	.word	0x08000e29
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b9c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <_ZN8STM32DMAD1Ev+0x18>)
 8000ba6:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMAD1Ev+0x1c>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb6:	f3bf 8f6f 	isb	sy
}
 8000bba:	4770      	bx	lr
 8000bbc:	080155a4 	.word	0x080155a4
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0
}
 8000bc8:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000bcc:	f7ff ffea 	bl	8000ba4 <_ZN8STM32DMAD1Ev>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f012 fdbf 	bl	8013754 <_ZdlPvj>
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	bd10      	pop	{r4, pc}
	...

08000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000bdc:	b508      	push	{r3, lr}
    switch (format)
 8000bde:	280a      	cmp	r0, #10
 8000be0:	d809      	bhi.n	8000bf6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000be2:	e8df f000 	tbb	[pc, r0]
 8000be6:	1006      	.short	0x1006
 8000be8:	0808080e 	.word	0x0808080e
 8000bec:	10101008 	.word	0x10101008
 8000bf0:	10          	.byte	0x10
 8000bf1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000bf2:	2002      	movs	r0, #2
}
 8000bf4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bfc:	2187      	movs	r1, #135	@ 0x87
 8000bfe:	f012 fdd7 	bl	80137b0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c02:	2000      	movs	r0, #0
 8000c04:	e7f6      	b.n	8000bf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c06:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c08:	e7f4      	b.n	8000bf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c0a:	bf00      	nop
 8000c0c:	08014adb 	.word	0x08014adb
 8000c10:	08014af6 	.word	0x08014af6
 8000c14:	08014b41 	.word	0x08014b41

08000c18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c1c:	7f88      	ldrb	r0, [r1, #30]
 8000c1e:	f7ff ffdd 	bl	8000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c22:	8aa5      	ldrh	r5, [r4, #20]
 8000c24:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c28:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c2a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c2c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c32:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c34:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c36:	1b52      	subs	r2, r2, r5
 8000c38:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000c3a:	6825      	ldr	r5, [r4, #0]
 8000c3c:	2d08      	cmp	r5, #8
 8000c3e:	d10e      	bne.n	8000c5e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c40:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c42:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c44:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000c46:	7f20      	ldrb	r0, [r4, #28]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000c4a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c4e:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c50:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c52:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c54:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c56:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c58:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c5a:	601a      	str	r2, [r3, #0]
    }
}
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c5e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c60:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c66:	0a0a      	lsrs	r2, r1, #8
 8000c68:	0948      	lsrs	r0, r1, #5
 8000c6a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c6e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c72:	4302      	orrs	r2, r0
 8000c74:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c7e:	e7ec      	b.n	8000c5a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c80:	4002b000 	.word	0x4002b000
 8000c84:	00010009 	.word	0x00010009
 8000c88:	00020201 	.word	0x00020201
 8000c8c:	00030201 	.word	0x00030201

08000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c90:	b508      	push	{r3, lr}
    switch (format)
 8000c92:	280b      	cmp	r0, #11
 8000c94:	d80b      	bhi.n	8000cae <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c96:	e8df f000 	tbb	[pc, r0]
 8000c9a:	1206      	.short	0x1206
 8000c9c:	0a0a0a10 	.word	0x0a0a0a10
 8000ca0:	0808080a 	.word	0x0808080a
 8000ca4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000ca6:	2002      	movs	r0, #2
}
 8000ca8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000caa:	2005      	movs	r0, #5
        break;
 8000cac:	e7fc      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000cb0:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000cb4:	2166      	movs	r1, #102	@ 0x66
 8000cb6:	f012 fd7b 	bl	80137b0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e7f4      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000cbe:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000cc0:	e7f2      	b.n	8000ca8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000cc2:	bf00      	nop
 8000cc4:	08014adb 	.word	0x08014adb
 8000cc8:	08014b83 	.word	0x08014b83
 8000ccc:	08014b41 	.word	0x08014b41

08000cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cd4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000cd8:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cda:	4640      	mov	r0, r8
 8000cdc:	f7ff ffd8 	bl	8000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ce0:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ce2:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f7ff ffd3 	bl	8000c90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000cea:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000cec:	4638      	mov	r0, r7
 8000cee:	f7ff ff75 	bl	8000bdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cf2:	8aa1      	ldrh	r1, [r4, #20]
 8000cf4:	8b62      	ldrh	r2, [r4, #26]
 8000cf6:	4b44      	ldr	r3, [pc, #272]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cf8:	1a52      	subs	r2, r2, r1
 8000cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cfc:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cfe:	8b22      	ldrh	r2, [r4, #24]
 8000d00:	1a52      	subs	r2, r2, r1
 8000d02:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000d04:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000d06:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000d08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d0e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d10:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d14:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000d16:	6820      	ldr	r0, [r4, #0]
 8000d18:	2880      	cmp	r0, #128	@ 0x80
 8000d1a:	d028      	beq.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000d1c:	7f22      	ldrb	r2, [r4, #28]
 8000d1e:	d80f      	bhi.n	8000d40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000d20:	2820      	cmp	r0, #32
 8000d22:	d067      	beq.n	8000df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d24:	2840      	cmp	r0, #64	@ 0x40
 8000d26:	d065      	beq.n	8000df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d28:	2804      	cmp	r0, #4
 8000d2a:	d01a      	beq.n	8000d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d2c:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d2e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d32:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d36:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d38:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d3a:	d061      	beq.n	8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000d3c:	4a33      	ldr	r2, [pc, #204]	@ (8000e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000d3e:	e044      	b.n	8000dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000d40:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000d44:	d004      	beq.n	8000d50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000d46:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000d4a:	d1ef      	bne.n	8000d2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d4c:	4830      	ldr	r0, [pc, #192]	@ (8000e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d4e:	e000      	b.n	8000d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d50:	4830      	ldr	r0, [pc, #192]	@ (8000e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d52:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d56:	61da      	str	r2, [r3, #28]
 8000d58:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d5a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d5c:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d5e:	6159      	str	r1, [r3, #20]
 8000d60:	e032      	b.n	8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d62:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d6a:	61da      	str	r2, [r3, #28]
 8000d6c:	e7f6      	b.n	8000d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d6e:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d70:	1d02      	adds	r2, r0, #4
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d74:	7f22      	ldrb	r2, [r4, #28]
 8000d76:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d7a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d7e:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d80:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d82:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d84:	7801      	ldrb	r1, [r0, #0]
 8000d86:	b141      	cbz	r1, 8000d9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d88:	2901      	cmp	r1, #1
 8000d8a:	d021      	beq.n	8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d8e:	4a23      	ldr	r2, [pc, #140]	@ (8000e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d92:	f240 1111 	movw	r1, #273	@ 0x111
 8000d96:	f012 fd0b 	bl	80137b0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d9a:	69da      	ldr	r2, [r3, #28]
 8000d9c:	8841      	ldrh	r1, [r0, #2]
 8000d9e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000da2:	3901      	subs	r1, #1
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dac:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000dae:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	0692      	lsls	r2, r2, #26
 8000dbe:	d4fc      	bmi.n	8000dba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	609a      	str	r2, [r3, #8]
            if (blend)
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	d0b9      	beq.n	8000d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000dc8:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000dd0:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	8840      	ldrh	r0, [r0, #2]
 8000dd8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000ddc:	f100 30ff 	add.w	r0, r0, #4294967295
 8000de0:	f022 0210 	bic.w	r2, r2, #16
 8000de4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000de8:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000dec:	bf18      	it	ne
 8000dee:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000df0:	61da      	str	r2, [r3, #28]
                break;
 8000df2:	e7dd      	b.n	8000db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000df4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000dfe:	e7b4      	b.n	8000d6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000e00:	f240 2201 	movw	r2, #513	@ 0x201
 8000e04:	e7e1      	b.n	8000dca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000e06:	bf00      	nop
 8000e08:	4002b000 	.word	0x4002b000
 8000e0c:	00010201 	.word	0x00010201
 8000e10:	00020009 	.word	0x00020009
 8000e14:	0002000a 	.word	0x0002000a
 8000e18:	08014bcd 	.word	0x08014bcd
 8000e1c:	08014be7 	.word	0x08014be7
 8000e20:	08014b41 	.word	0x08014b41
 8000e24:	00020201 	.word	0x00020201

08000e28 <DMA2D_XferCpltCallback>:
        return instance;
 8000e28:	4b02      	ldr	r3, [pc, #8]	@ (8000e34 <DMA2D_XferCpltCallback+0xc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000e2e:	6803      	ldr	r3, [r0, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4718      	bx	r3
 8000e34:	200125e0 	.word	0x200125e0

08000e38 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000e3c:	4625      	mov	r5, r4
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <_ZN8STM32DMAC1Ev+0x30>)
 8000e40:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000e42:	2600      	movs	r6, #0
 8000e44:	6060      	str	r0, [r4, #4]
 8000e46:	7226      	strb	r6, [r4, #8]
 8000e48:	7266      	strb	r6, [r4, #9]
 8000e4a:	f845 3b20 	str.w	r3, [r5], #32
 8000e4e:	2260      	movs	r2, #96	@ 0x60
 8000e50:	4629      	mov	r1, r5
 8000e52:	f009 f8cb 	bl	8009fec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e56:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e5a:	60ee      	str	r6, [r5, #12]
 8000e5c:	3524      	adds	r5, #36	@ 0x24
 8000e5e:	429d      	cmp	r5, r3
 8000e60:	d1fb      	bne.n	8000e5a <_ZN8STM32DMAC1Ev+0x22>
}
 8000e62:	4620      	mov	r0, r4
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
 8000e66:	bf00      	nop
 8000e68:	080155a4 	.word	0x080155a4

08000e6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4770      	bx	lr

08000e70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e70:	2014      	movs	r0, #20
 8000e72:	4770      	bx	lr

08000e74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e74:	2314      	movs	r3, #20
 8000e76:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e7a:	3008      	adds	r0, #8
 8000e7c:	4770      	bx	lr

08000e7e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e7e:	2314      	movs	r3, #20
 8000e80:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e84:	3008      	adds	r0, #8
 8000e86:	4770      	bx	lr

08000e88 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e88:	2001      	movs	r0, #1
 8000e8a:	4770      	bx	lr

08000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e8c:	f44f 7047 	mov.w	r0, #796	@ 0x31c
 8000e90:	4770      	bx	lr

08000e92 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e92:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 8000e96:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e9a:	3008      	adds	r0, #8
 8000e9c:	4770      	bx	lr

08000e9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e9e:	f44f 7347 	mov.w	r3, #796	@ 0x31c
 8000ea2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000ea6:	3008      	adds	r0, #8
 8000ea8:	4770      	bx	lr

08000eaa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000eaa:	2001      	movs	r0, #1
 8000eac:	4770      	bx	lr

08000eae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000eae:	2010      	movs	r0, #16
 8000eb0:	4770      	bx	lr

08000eb2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000eb6:	3008      	adds	r0, #8
 8000eb8:	4770      	bx	lr

08000eba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eba:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000ebe:	3008      	adds	r0, #8
 8000ec0:	4770      	bx	lr

08000ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	f001 bc38 	b.w	8002738 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000ecc:	6003      	str	r3, [r0, #0]
 8000ece:	4604      	mov	r4, r0
 8000ed0:	f007 fec9 	bl	8008c66 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bd10      	pop	{r4, pc}
 8000ed8:	0801565c 	.word	0x0801565c

08000edc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
 8000ee0:	f7ff fff2 	bl	8000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	211c      	movs	r1, #28
 8000ee8:	f012 fc34 	bl	8013754 <_ZdlPvj>
 8000eec:	4620      	mov	r0, r4
 8000eee:	bd10      	pop	{r4, pc}

08000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ef4:	6003      	str	r3, [r0, #0]
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	f007 feb5 	bl	8008c66 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000efc:	4620      	mov	r0, r4
 8000efe:	bd10      	pop	{r4, pc}
 8000f00:	08015628 	.word	0x08015628

08000f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff fff2 	bl	8000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f44f 7149 	mov.w	r1, #804	@ 0x324
 8000f12:	f012 fc1f 	bl	8013754 <_ZdlPvj>
 8000f16:	4620      	mov	r0, r4
 8000f18:	bd10      	pop	{r4, pc}
	...

08000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000f20:	6003      	str	r3, [r0, #0]
 8000f22:	4604      	mov	r4, r0
 8000f24:	f007 fe9f 	bl	8008c66 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000f28:	4620      	mov	r0, r4
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	080155f4 	.word	0x080155f4

08000f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff fff2 	bl	8000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	2118      	movs	r1, #24
 8000f3c:	f012 fc0a 	bl	8013754 <_ZdlPvj>
 8000f40:	4620      	mov	r0, r4
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_ZN12FrontendHeapD1Ev+0x24>)
 8000f48:	6003      	str	r3, [r0, #0]
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	f500 7054 	add.w	r0, r0, #848	@ 0x350
 8000f50:	f7ff ffba 	bl	8000ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f54:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f58:	f7ff ffca 	bl	8000ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f5c:	f104 0014 	add.w	r0, r4, #20
 8000f60:	f7ff ffdc 	bl	8000f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f64:	4620      	mov	r0, r4
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	08015690 	.word	0x08015690

08000f6c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f6c:	b508      	push	{r3, lr}
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <__tcf_0+0xc>)
 8000f70:	f7ff ffe8 	bl	8000f44 <_ZN12FrontendHeapD1Ev>
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	20000ff0 	.word	0x20000ff0

08000f7c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f7ff ffe0 	bl	8000f44 <_ZN12FrontendHeapD1Ev>
 8000f84:	4620      	mov	r0, r4
 8000f86:	f240 41d4 	movw	r1, #1236	@ 0x4d4
 8000f8a:	f012 fbe3 	bl	8013754 <_ZdlPvj>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	bd10      	pop	{r4, pc}
	...

08000f94 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f98:	f001 f89e 	bl	80020d8 <_ZN14BitmapDatabase11getInstanceEv>
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	f001 f89f 	bl	80020e0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4628      	mov	r0, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	9400      	str	r4, [sp, #0]
 8000fae:	f00f fce9 	bl	8010984 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <touchgfx_init+0xb4>)
 8000fb4:	4a25      	ldr	r2, [pc, #148]	@ (800104c <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000fb6:	4d26      	ldr	r5, [pc, #152]	@ (8001050 <touchgfx_init+0xbc>)
 8000fb8:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 fba4 	bl	8003708 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000fc0:	4824      	ldr	r0, [pc, #144]	@ (8001054 <touchgfx_init+0xc0>)
 8000fc2:	f00f fc47 	bl	8010854 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	f3bf 8f5b 	dmb	ish
 8000fcc:	07db      	lsls	r3, r3, #31
 8000fce:	d435      	bmi.n	800103c <touchgfx_init+0xa8>
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f012 fbc1 	bl	8013758 <__cxa_guard_acquire>
 8000fd6:	b388      	cbz	r0, 800103c <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000fd8:	4c1f      	ldr	r4, [pc, #124]	@ (8001058 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <touchgfx_init+0xc8>)
 8000fdc:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000fde:	f504 765e 	add.w	r6, r4, #888	@ 0x378
        : presenterStorage(pres),
 8000fe2:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000fe6:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000fea:	f504 7754 	add.w	r7, r4, #848	@ 0x350
        : presenterStorage(pres),
 8000fee:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000ff0:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000ff4:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000ff6:	6126      	str	r6, [r4, #16]
 8000ff8:	f007 fe36 	bl	8008c68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <touchgfx_init+0xcc>)
 8000ffe:	6163      	str	r3, [r4, #20]
 8001000:	4640      	mov	r0, r8
 8001002:	f007 fe31 	bl	8008c68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <touchgfx_init+0xd0>)
 8001008:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800100a:	4638      	mov	r0, r7
 800100c:	f007 fe2c 	bl	8008c68 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <touchgfx_init+0xd4>)
 8001012:	f8c4 3350 	str.w	r3, [r4, #848]	@ 0x350
 8001016:	f504 705b 	add.w	r0, r4, #876	@ 0x36c
 800101a:	f002 fbf5 	bl	8003808 <_ZN5ModelC1Ev>
 800101e:	4622      	mov	r2, r4
 8001020:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 8001024:	4630      	mov	r0, r6
 8001026:	f002 fbe5 	bl	80037f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800102a:	4630      	mov	r0, r6
 800102c:	f001 fb84 	bl	8002738 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001030:	480e      	ldr	r0, [pc, #56]	@ (800106c <touchgfx_init+0xd8>)
 8001032:	f012 fbdb 	bl	80137ec <atexit>
 8001036:	4628      	mov	r0, r5
 8001038:	f012 fb9a 	bl	8013770 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <touchgfx_init+0xdc>)
}
 800103e:	b002      	add	sp, #8
 8001040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001044:	f7ff bc5e 	b.w	8000904 <_ZN11TouchGFXHAL10initializeEv>
 8001048:	2001263c 	.word	0x2001263c
 800104c:	200001b8 	.word	0x200001b8
 8001050:	20000fec 	.word	0x20000fec
 8001054:	20000008 	.word	0x20000008
 8001058:	20000ff0 	.word	0x20000ff0
 800105c:	08015690 	.word	0x08015690
 8001060:	080155f4 	.word	0x080155f4
 8001064:	08015628 	.word	0x08015628
 8001068:	0801565c 	.word	0x0801565c
 800106c:	08000f6d 	.word	0x08000f6d
 8001070:	20000134 	.word	0x20000134

08001074 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001074:	4801      	ldr	r0, [pc, #4]	@ (800107c <touchgfx_taskEntry+0x8>)
 8001076:	f7ff bc57 	b.w	8000928 <_ZN11TouchGFXHAL9taskEntryEv>
 800107a:	bf00      	nop
 800107c:	20000134 	.word	0x20000134

08001080 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001080:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001082:	4e25      	ldr	r6, [pc, #148]	@ (8001118 <_GLOBAL__sub_I_touchgfx_init+0x98>)
{
public:

    STM32TouchController() {}
 8001084:	4c25      	ldr	r4, [pc, #148]	@ (800111c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
static LCD16bpp display;
 8001086:	4d26      	ldr	r5, [pc, #152]	@ (8001120 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800108a:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800108c:	4630      	mov	r0, r6
 800108e:	f7ff fed3 	bl	8000e38 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001092:	4628      	mov	r0, r5
 8001094:	f010 fad6 	bl	8011644 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
          isFrontPorchEntered(false),
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <_GLOBAL__sub_I_touchgfx_init+0xac>)
          touchController(touchCtrl),
 800109c:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 800109e:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 80010a4:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 80010a8:	4921      	ldr	r1, [pc, #132]	@ (8001130 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80010aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 80010ac:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          isFrontPorchEntered(false),
 80010b0:	4920      	ldr	r1, [pc, #128]	@ (8001134 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          useAuxiliaryLCD(false),
 80010b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          isFrontPorchEntered(false),
 80010b6:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80010ba:	491f      	ldr	r1, [pc, #124]	@ (8001138 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010bc:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
        instance = this;
 80010c0:	491e      	ldr	r1, [pc, #120]	@ (800113c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010c2:	481f      	ldr	r0, [pc, #124]	@ (8001140 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
        instance = this;
 80010c4:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010c6:	21f0      	movs	r1, #240	@ 0xf0
          buttonController(0),
 80010c8:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80010cc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80010d0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80010d4:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80010d8:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 80010dc:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80010e0:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010e4:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lastY(0),
 80010e8:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 80010ea:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80010ee:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010f0:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010f4:	8001      	strh	r1, [r0, #0]
 80010f6:	4813      	ldr	r0, [pc, #76]	@ (8001144 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 80010f8:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010fa:	4813      	ldr	r0, [pc, #76]	@ (8001148 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 80010fc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001100:	8001      	strh	r1, [r0, #0]
 8001102:	4812      	ldr	r0, [pc, #72]	@ (800114c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8001104:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001106:	4912      	ldr	r1, [pc, #72]	@ (8001150 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8001108:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bd70      	pop	{r4, r5, r6, pc}
 8001116:	bf00      	nop
 8001118:	20000248 	.word	0x20000248
 800111c:	20000fe8 	.word	0x20000fe8
 8001120:	200001bc 	.word	0x200001bc
 8001124:	0801485c 	.word	0x0801485c
 8001128:	20000134 	.word	0x20000134
 800112c:	01010000 	.word	0x01010000
 8001130:	01000001 	.word	0x01000001
 8001134:	00500400 	.word	0x00500400
 8001138:	0014001a 	.word	0x0014001a
 800113c:	200125e0 	.word	0x200125e0
 8001140:	200125d4 	.word	0x200125d4
 8001144:	200125da 	.word	0x200125da
 8001148:	200125d6 	.word	0x200125d6
 800114c:	200125dc 	.word	0x200125dc
 8001150:	200125d8 	.word	0x200125d8
 8001154:	080154b8 	.word	0x080154b8

08001158 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001158:	4801      	ldr	r0, [pc, #4]	@ (8001160 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800115a:	f7ff bd23 	b.w	8000ba4 <_ZN8STM32DMAD1Ev>
 800115e:	bf00      	nop
 8001160:	20000248 	.word	0x20000248

08001164 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001166:	2290      	movs	r2, #144	@ 0x90
 8001168:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800116c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001178:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800117a:	490a      	ldr	r1, [pc, #40]	@ (80011a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800117c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800117e:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001184:	3b01      	subs	r3, #1
 8001186:	b29b      	uxth	r3, r3
 8001188:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800118a:	6911      	ldr	r1, [r2, #16]
 800118c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001190:	3901      	subs	r1, #1
 8001192:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001196:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800119e:	4770      	bx	lr
 80011a0:	40016800 	.word	0x40016800
 80011a4:	200014c6 	.word	0x200014c6
 80011a8:	200014c4 	.word	0x200014c4

080011ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80011ac:	4b01      	ldr	r3, [pc, #4]	@ (80011b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80011ae:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 80011b2:	4770      	bx	lr
 80011b4:	40016800 	.word	0x40016800

080011b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80011b8:	4b02      	ldr	r3, [pc, #8]	@ (80011c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80011ba:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80011bc:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011c2:	4770      	bx	lr
 80011c4:	40016800 	.word	0x40016800

080011c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	4604      	mov	r4, r0
    HAL::initialize();
 80011cc:	f008 f849 	bl	8009262 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 80011d4:	f00b fd98 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 80011d8:	4601      	mov	r1, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80011e2:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 80011e6:	4620      	mov	r0, r4
 80011e8:	46ac      	mov	ip, r5
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011f0:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80011f4:	4760      	bx	ip
 80011f6:	bf00      	nop
 80011f8:	d004b000 	.word	0xd004b000

080011fc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80011fc:	f008 b818 	b.w	8009230 <_ZN8touchgfx3HAL10beginFrameEv>

08001200 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8001200:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 8001204:	b113      	cbz	r3, 800120c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8001206:	4b02      	ldr	r3, [pc, #8]	@ (8001210 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 800120c:	f008 b81c 	b.w	8009248 <_ZN8touchgfx3HAL8endFrameEv>
 8001210:	200014c8 	.word	0x200014c8

08001214 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8001214:	f007 bfd6 	b.w	80091c4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08001218 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001218:	f008 b945 	b.w	80094a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800121c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800121e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001228:	609a      	str	r2, [r3, #8]
}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001232:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800123a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800124a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800124e:	f3bf 8f6f 	isb	sy
}
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8001258:	b538      	push	{r3, r4, r5, lr}
        return instance;
 800125a:	4c18      	ldr	r4, [pc, #96]	@ (80012bc <HAL_LTDC_LineEventCallback+0x64>)
        if (!HAL::getInstance())
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	b35b      	cbz	r3, 80012b8 <HAL_LTDC_LineEventCallback+0x60>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_LTDC_LineEventCallback+0x68>)
 8001262:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <HAL_LTDC_LineEventCallback+0x6c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	8811      	ldrh	r1, [r2, #0]
 8001268:	428b      	cmp	r3, r1
 800126a:	d116      	bne.n	800129a <HAL_LTDC_LineEventCallback+0x42>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_LTDC_LineEventCallback+0x70>)
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	f004 fa60 	bl	8005734 <HAL_LTDC_ProgramLineEvent>
 8001274:	6823      	ldr	r3, [r4, #0]
        vSyncCnt++;
 8001276:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 800127a:	2500      	movs	r5, #0
        vSyncCnt++;
 800127c:	3201      	adds	r2, #1
 800127e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8001282:	f883 507c 	strb.w	r5, [r3, #124]	@ 0x7c
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001286:	f7ff fc3b 	bl	8000b00 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	f008 fd72 	bl	8009d74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8001290:	4628      	mov	r0, r5

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001296:	f7ff ba77 	b.w	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800129a:	f004 fa4b 	bl	8005734 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800129e:	6824      	ldr	r4, [r4, #0]
        allowDMATransfers();
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	4620      	mov	r0, r4
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4798      	blx	r3
        isFrontPorchEntered = true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012ae:	2000      	movs	r0, #0
    }
 80012b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80012b4:	f7ff ba92 	b.w	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	bf00      	nop
 80012bc:	200125e0 	.word	0x200125e0
 80012c0:	40016800 	.word	0x40016800
 80012c4:	200014c6 	.word	0x200014c6
 80012c8:	200014c4 	.word	0x200014c4

080012cc <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 80012cc:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <SPI5_Write+0x1c>)
{
 80012d0:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <SPI5_Write+0x20>)
 80012d8:	2201      	movs	r2, #1
 80012da:	f10d 0106 	add.w	r1, sp, #6
 80012de:	f004 ff77 	bl	80061d0 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 80012e2:	b003      	add	sp, #12
 80012e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	200015ac 	.word	0x200015ac

080012f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	     HAL_ADC_Start(&hadc1);
 80012f2:	4d0f      	ldr	r5, [pc, #60]	@ (8001330 <StartDefaultTask+0x40>)
	     HAL_ADC_Start(&hadc2);
 80012f4:	4c0f      	ldr	r4, [pc, #60]	@ (8001334 <StartDefaultTask+0x44>)
	     HAL_ADC_Start(&hadc1);
 80012f6:	4628      	mov	r0, r5
 80012f8:	f003 f874 	bl	80043e4 <HAL_ADC_Start>
	     HAL_ADC_Start(&hadc2);
 80012fc:	4620      	mov	r0, r4
 80012fe:	f003 f871 	bl	80043e4 <HAL_ADC_Start>
	     HAL_ADC_PollForConversion (&hadc1, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	4628      	mov	r0, r5
 8001306:	f003 f8eb 	bl	80044e0 <HAL_ADC_PollForConversion>
	     HAL_ADC_PollForConversion (&hadc2, 1);
 800130a:	2101      	movs	r1, #1
 800130c:	4620      	mov	r0, r4
 800130e:	f003 f8e7 	bl	80044e0 <HAL_ADC_PollForConversion>
	     JoystickX = HAL_ADC_GetValue(&hadc1);
 8001312:	4628      	mov	r0, r5
 8001314:	f003 f937 	bl	8004586 <HAL_ADC_GetValue>
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <StartDefaultTask+0x48>)
 800131a:	8018      	strh	r0, [r3, #0]
	     JoystickY = HAL_ADC_GetValue(&hadc2);
 800131c:	4620      	mov	r0, r4
 800131e:	f003 f932 	bl	8004586 <HAL_ADC_GetValue>
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <StartDefaultTask+0x4c>)
 8001324:	8018      	strh	r0, [r3, #0]
	     osDelay(100);
 8001326:	2064      	movs	r0, #100	@ 0x64
 8001328:	f005 fc02 	bl	8006b30 <osDelay>
	  for(;;)
 800132c:	e7e3      	b.n	80012f6 <StartDefaultTask+0x6>
 800132e:	bf00      	nop
 8001330:	20001530 	.word	0x20001530
 8001334:	200014e8 	.word	0x200014e8
 8001338:	200014e6 	.word	0x200014e6
 800133c:	200014e4 	.word	0x200014e4

08001340 <SystemClock_Config>:
{
 8001340:	b530      	push	{r4, r5, lr}
 8001342:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001344:	2210      	movs	r2, #16
 8001346:	2100      	movs	r1, #0
 8001348:	a80a      	add	r0, sp, #40	@ 0x28
 800134a:	f012 fc38 	bl	8013bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134e:	2214      	movs	r2, #20
 8001350:	2100      	movs	r1, #0
 8001352:	a803      	add	r0, sp, #12
 8001354:	f012 fc33 	bl	8013bbe <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2400      	movs	r4, #0
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <SystemClock_Config+0x90>)
 800135c:	9401      	str	r4, [sp, #4]
 800135e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001360:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <SystemClock_Config+0x94>)
 8001372:	9402      	str	r4, [sp, #8]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001382:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001384:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001386:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	2502      	movs	r5, #2
 8001392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001396:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 800139a:	2108      	movs	r1, #8
 800139c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013a0:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a6:	2304      	movs	r3, #4
 80013a8:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013aa:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f004 f9e0 	bl	8005770 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b6:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80013ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013be:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c2:	2105      	movs	r1, #5
 80013c4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f004 fbae 	bl	8005b28 <HAL_RCC_ClockConfig>
}
 80013cc:	b015      	add	sp, #84	@ 0x54
 80013ce:	bd30      	pop	{r4, r5, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <main>:
{
 80013d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80013dc:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 80013de:	f002 ff1b 	bl	8004218 <HAL_Init>
  SystemClock_Config();
 80013e2:	f7ff ffad 	bl	8001340 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	2214      	movs	r2, #20
 80013e8:	2100      	movs	r1, #0
 80013ea:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ec:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f012 fbe6 	bl	8013bbe <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4bc6      	ldr	r3, [pc, #792]	@ (800170c <main+0x334>)
 80013f4:	9400      	str	r4, [sp, #0]
 80013f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013f8:	48c5      	ldr	r0, [pc, #788]	@ (8001710 <main+0x338>)
  hi2c3.Instance = I2C3;
 80013fa:	4ec6      	ldr	r6, [pc, #792]	@ (8001714 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	f042 0210 	orr.w	r2, r2, #16
 8001400:	631a      	str	r2, [r3, #48]	@ 0x30
 8001402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001404:	f002 0210 	and.w	r2, r2, #16
 8001408:	9200      	str	r2, [sp, #0]
 800140a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140c:	9401      	str	r4, [sp, #4]
 800140e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
 8001416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001418:	f002 0220 	and.w	r2, r2, #32
 800141c:	9201      	str	r2, [sp, #4]
 800141e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001420:	9402      	str	r4, [sp, #8]
 8001422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001424:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
 800142a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800142c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001430:	9202      	str	r2, [sp, #8]
 8001432:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	9403      	str	r4, [sp, #12]
 8001436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001438:	f042 0204 	orr.w	r2, r2, #4
 800143c:	631a      	str	r2, [r3, #48]	@ 0x30
 800143e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001440:	f002 0204 	and.w	r2, r2, #4
 8001444:	9203      	str	r2, [sp, #12]
 8001446:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	9404      	str	r4, [sp, #16]
 800144a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	631a      	str	r2, [r3, #48]	@ 0x30
 8001452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001454:	f002 0201 	and.w	r2, r2, #1
 8001458:	9204      	str	r2, [sp, #16]
 800145a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	9405      	str	r4, [sp, #20]
 800145e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001460:	f042 0202 	orr.w	r2, r2, #2
 8001464:	631a      	str	r2, [r3, #48]	@ 0x30
 8001466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001468:	f002 0202 	and.w	r2, r2, #2
 800146c:	9205      	str	r2, [sp, #20]
 800146e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001470:	9406      	str	r4, [sp, #24]
 8001472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001478:	631a      	str	r2, [r3, #48]	@ 0x30
 800147a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800147c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001480:	9206      	str	r2, [sp, #24]
 8001482:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	9407      	str	r4, [sp, #28]
 8001486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001488:	f042 0208 	orr.w	r2, r2, #8
 800148c:	631a      	str	r2, [r3, #48]	@ 0x30
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001496:	4622      	mov	r2, r4
 8001498:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800149c:	f003 fb58 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80014a0:	489d      	ldr	r0, [pc, #628]	@ (8001718 <main+0x340>)
 80014a2:	4622      	mov	r2, r4
 80014a4:	2104      	movs	r1, #4
 80014a6:	f003 fb53 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014aa:	4622      	mov	r2, r4
 80014ac:	489b      	ldr	r0, [pc, #620]	@ (800171c <main+0x344>)
 80014ae:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80014b4:	f003 fb4c 	bl	8004b50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014be:	4894      	ldr	r0, [pc, #592]	@ (8001710 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c4:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c6:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ca:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f003 fa53 	bl	800497c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	4890      	ldr	r0, [pc, #576]	@ (8001718 <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d8:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014dc:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f003 fa4a 	bl	800497c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014e8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	488b      	ldr	r0, [pc, #556]	@ (800171c <main+0x344>)
 80014ee:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f003 fa40 	bl	800497c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	4888      	ldr	r0, [pc, #544]	@ (8001720 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f003 fa39 	bl	800497c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800150c:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150e:	4885      	ldr	r0, [pc, #532]	@ (8001724 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001516:	f003 fa31 	bl	800497c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800151a:	4883      	ldr	r0, [pc, #524]	@ (8001728 <main+0x350>)
 800151c:	4b83      	ldr	r3, [pc, #524]	@ (800172c <main+0x354>)
 800151e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001520:	f003 f922 	bl	8004768 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8001524:	4a82      	ldr	r2, [pc, #520]	@ (8001730 <main+0x358>)
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <main+0x35c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 800152a:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800152e:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8001538:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001540:	f003 fd06 	bl	8004f50 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001544:	2110      	movs	r1, #16
 8001546:	4630      	mov	r0, r6
 8001548:	f003 ff42 	bl	80053d0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800154c:	4621      	mov	r1, r4
 800154e:	4630      	mov	r0, r6
 8001550:	f003 ff5d 	bl	800540e <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001554:	4878      	ldr	r0, [pc, #480]	@ (8001738 <main+0x360>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001556:	4979      	ldr	r1, [pc, #484]	@ (800173c <main+0x364>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001558:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800155a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800155e:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001562:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8001566:	2318      	movs	r3, #24
 8001568:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 800156c:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800156e:	4e74      	ldr	r6, [pc, #464]	@ (8001740 <main+0x368>)
  hspi5.Init.CRCPolynomial = 10;
 8001570:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001572:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001576:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800157e:	f004 fdcb 	bl	8006118 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001582:	4b70      	ldr	r3, [pc, #448]	@ (8001744 <main+0x36c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001584:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001588:	f04f 0910 	mov.w	r9, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800158c:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001590:	2340      	movs	r3, #64	@ 0x40
 8001592:	e9c6 9304 	strd	r9, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001596:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800159a:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800159e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015a2:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80015a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015aa:	62b3      	str	r3, [r6, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ac:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015ae:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015b0:	4630      	mov	r0, r6
  SdramTiming.WriteRecoveryTime = 3;
 80015b2:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 80015b6:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015ba:	f04f 0808 	mov.w	r8, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015be:	e9c6 4702 	strd	r4, r7, [r6, #8]
  SdramTiming.RCDDelay = 2;
 80015c2:	e9cd bb12 	strd	fp, fp, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015c6:	f004 fca3 	bl	8005f10 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ce:	a909      	add	r1, sp, #36	@ 0x24
 80015d0:	4630      	mov	r0, r6
  Command->AutoRefreshNumber       = 1;
 80015d2:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 80015d6:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80015d8:	9509      	str	r5, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015da:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015dc:	f004 fcb8 	bl	8005f50 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 80015e0:	4628      	mov	r0, r5
 80015e2:	f002 fe45 	bl	8004270 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ea:	a909      	add	r1, sp, #36	@ 0x24
 80015ec:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015ee:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015f2:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015f6:	f004 fcab 	bl	8005f50 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fe:	a909      	add	r1, sp, #36	@ 0x24
 8001600:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001602:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001606:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800160a:	f004 fca1 	bl	8005f50 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800160e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001612:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001614:	9b08      	ldr	r3, [sp, #32]
 8001616:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161c:	a909      	add	r1, sp, #36	@ 0x24
 800161e:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001620:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 8001624:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001626:	f004 fc93 	bl	8005f50 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800162a:	f240 516a 	movw	r1, #1386	@ 0x56a
 800162e:	4630      	mov	r0, r6
 8001630:	f004 fcac 	bl	8005f8c <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001634:	2234      	movs	r2, #52	@ 0x34
 8001636:	4621      	mov	r1, r4
 8001638:	eb0d 0002 	add.w	r0, sp, r2
 800163c:	f012 fabf 	bl	8013bbe <memset>
  hltdc.Instance = LTDC;
 8001640:	4e41      	ldr	r6, [pc, #260]	@ (8001748 <main+0x370>)
 8001642:	4b42      	ldr	r3, [pc, #264]	@ (800174c <main+0x374>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001644:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001646:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 800164a:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 800164c:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001650:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001652:	f240 1c0d 	movw	ip, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8001656:	e9c6 3a07 	strd	r3, sl, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 800165a:	f240 1343 	movw	r3, #323	@ 0x143
 800165e:	e9c6 c309 	strd	ip, r3, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 327;
 8001662:	f240 1e17 	movw	lr, #279	@ 0x117
 8001666:	f240 1347 	movw	r3, #327	@ 0x147
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800166a:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 800166c:	e9c6 e30b 	strd	lr, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001670:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001674:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001676:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800167a:	f003 ff63 	bl	8005544 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800167e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 8001680:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001682:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001686:	f04f 0a05 	mov.w	sl, #5
 800168a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  pLayerCfg.WindowY1 = 320;
 800168e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8001692:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001696:	e9cd 1a14 	strd	r1, sl, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 800169a:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800169e:	a90d      	add	r1, sp, #52	@ 0x34
 80016a0:	4622      	mov	r2, r4
 80016a2:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016a4:	e9cd 3b10 	strd	r3, fp, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 80016a8:	4e29      	ldr	r6, [pc, #164]	@ (8001750 <main+0x378>)
  pLayerCfg.ImageHeight = 320;
 80016aa:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 80016ac:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 80016ae:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 80016b2:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016b6:	f004 f810 	bl	80056da <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 80016ba:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <main+0x37c>)
 80016bc:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4798      	blx	r3
  LcdDrv->DisplayOff();
 80016c2:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 80016c4:	4e24      	ldr	r6, [pc, #144]	@ (8001758 <main+0x380>)
  LcdDrv->DisplayOff();
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <main+0x384>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016cc:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 80016ce:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 80016d2:	e9c6 b402 	strd	fp, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80016d6:	e9c6 4b0a 	strd	r4, fp, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80016da:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016de:	f003 f853 	bl	8004788 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80016e2:	4629      	mov	r1, r5
 80016e4:	4630      	mov	r0, r6
 80016e6:	f003 f905 	bl	80048f4 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 80016ea:	f7fe ff90 	bl	800060e <MX_TouchGFX_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80016ee:	464a      	mov	r2, r9
 80016f0:	4621      	mov	r1, r4
 80016f2:	a80d      	add	r0, sp, #52	@ 0x34
 80016f4:	f012 fa63 	bl	8013bbe <memset>
  hadc1.Instance = ADC1;
 80016f8:	4e19      	ldr	r6, [pc, #100]	@ (8001760 <main+0x388>)
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <main+0x38c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fc:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8001768 <main+0x390>
  hadc1.Init.ScanConvMode = DISABLE;
 8001700:	6134      	str	r4, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001702:	e9c6 3400 	strd	r3, r4, [r6]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001706:	4630      	mov	r0, r6
 8001708:	e030      	b.n	800176c <main+0x394>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40021000 	.word	0x40021000
 8001714:	200016ac 	.word	0x200016ac
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40020000 	.word	0x40020000
 8001724:	40021800 	.word	0x40021800
 8001728:	20001740 	.word	0x20001740
 800172c:	40023000 	.word	0x40023000
 8001730:	40005c00 	.word	0x40005c00
 8001734:	000186a0 	.word	0x000186a0
 8001738:	200015ac 	.word	0x200015ac
 800173c:	40015000 	.word	0x40015000
 8001740:	20001578 	.word	0x20001578
 8001744:	a0000140 	.word	0xa0000140
 8001748:	20001604 	.word	0x20001604
 800174c:	40016800 	.word	0x40016800
 8001750:	200014cc 	.word	0x200014cc
 8001754:	20000014 	.word	0x20000014
 8001758:	20001700 	.word	0x20001700
 800175c:	4002b000 	.word	0x4002b000
 8001760:	20001530 	.word	0x20001530
 8001764:	40012000 	.word	0x40012000
 8001768:	0f000001 	.word	0x0f000001
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800176c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001770:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001772:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001774:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	62f4      	str	r4, [r6, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177a:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001780:	61f5      	str	r5, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001782:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001786:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001788:	f002 fd86 	bl	8004298 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 800178c:	220d      	movs	r2, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	a90d      	add	r1, sp, #52	@ 0x34
 8001790:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001792:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  hadc2.Instance = ADC2;
 8001796:	4e22      	ldr	r6, [pc, #136]	@ (8001820 <main+0x448>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001798:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	f002 fef7 	bl	800458c <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	4621      	mov	r1, r4
 80017a0:	464a      	mov	r2, r9
 80017a2:	a80d      	add	r0, sp, #52	@ 0x34
 80017a4:	f012 fa0b 	bl	8013bbe <memset>
  hadc2.Instance = ADC2;
 80017a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <main+0x44c>)
  hadc2.Init.ScanConvMode = DISABLE;
 80017aa:	6134      	str	r4, [r6, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80017ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017b0:	4630      	mov	r0, r6
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80017b2:	60b3      	str	r3, [r6, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017b4:	e9c6 2400 	strd	r2, r4, [r6]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b8:	e9c6 b40a 	strd	fp, r4, [r6, #40]	@ 0x28
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017bc:	7634      	strb	r4, [r6, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017be:	f886 4020 	strb.w	r4, [r6, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c2:	60f4      	str	r4, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017c4:	61f5      	str	r5, [r6, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017c6:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ca:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017cc:	f002 fd64 	bl	8004298 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d0:	a90d      	add	r1, sp, #52	@ 0x34
 80017d2:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 80017d4:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d8:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017da:	f002 fed7 	bl	800458c <HAL_ADC_ConfigChannel>
  osKernelInitialize();
 80017de:	f005 f937 	bl	8006a50 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <main+0x450>)
 80017e4:	4629      	mov	r1, r5
 80017e6:	4640      	mov	r0, r8
 80017e8:	f005 fa56 	bl	8006c98 <osMessageQueueNew>
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <main+0x454>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <main+0x458>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 80017f0:	6018      	str	r0, [r3, #0]
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017f2:	4639      	mov	r1, r7
 80017f4:	4648      	mov	r0, r9
 80017f6:	f005 fa4f 	bl	8006c98 <osMessageQueueNew>
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <main+0x45c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <main+0x460>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017fe:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001800:	4621      	mov	r1, r4
 8001802:	480e      	ldr	r0, [pc, #56]	@ (800183c <main+0x464>)
 8001804:	f005 f950 	bl	8006aa8 <osThreadNew>
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <main+0x468>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800180a:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <main+0x46c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800180c:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800180e:	4621      	mov	r1, r4
 8001810:	480d      	ldr	r0, [pc, #52]	@ (8001848 <main+0x470>)
 8001812:	f005 f949 	bl	8006aa8 <osThreadNew>
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <main+0x474>)
 8001818:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800181a:	f005 f92b 	bl	8006a74 <osKernelStart>
  while (1)
 800181e:	e7fe      	b.n	800181e <main+0x446>
 8001820:	200014e8 	.word	0x200014e8
 8001824:	40012100 	.word	0x40012100
 8001828:	080156b4 	.word	0x080156b4
 800182c:	200014d4 	.word	0x200014d4
 8001830:	0801569c 	.word	0x0801569c
 8001834:	200014d0 	.word	0x200014d0
 8001838:	080156f0 	.word	0x080156f0
 800183c:	080012f1 	.word	0x080012f1
 8001840:	200014dc 	.word	0x200014dc
 8001844:	080156cc 	.word	0x080156cc
 8001848:	08000613 	.word	0x08000613
 800184c:	200014d8 	.word	0x200014d8

08001850 <IOE_Init>:
void IOE_Init(void)
 8001850:	4770      	bx	lr

08001852 <IOE_ITConfig>:
void IOE_ITConfig(void)
 8001852:	4770      	bx	lr

08001854 <IOE_Write>:
{
 8001854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <IOE_Write+0x28>)
 8001858:	f88d 2017 	strb.w	r2, [sp, #23]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	f10d 0217 	add.w	r2, sp, #23
 8001864:	2301      	movs	r3, #1
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	460a      	mov	r2, r1
 800186c:	4601      	mov	r1, r0
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <IOE_Write+0x2c>)
 8001870:	f003 fc16 	bl	80050a0 <HAL_I2C_Mem_Write>
}
 8001874:	b007      	add	sp, #28
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	20000010 	.word	0x20000010
 8001880:	200016ac 	.word	0x200016ac

08001884 <IOE_Read>:
{
 8001884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <IOE_Read+0x2c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	9302      	str	r3, [sp, #8]
{
 8001892:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001894:	2301      	movs	r3, #1
 8001896:	f10d 0117 	add.w	r1, sp, #23
 800189a:	9100      	str	r1, [sp, #0]
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	4601      	mov	r1, r0
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <IOE_Read+0x30>)
 80018a2:	f003 fc8d 	bl	80051c0 <HAL_I2C_Mem_Read>
}
 80018a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018aa:	b007      	add	sp, #28
 80018ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b0:	20000010 	.word	0x20000010
 80018b4:	200016ac 	.word	0x200016ac

080018b8 <IOE_ReadMultiple>:
{
 80018b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 80018ba:	4c08      	ldr	r4, [pc, #32]	@ (80018dc <IOE_ReadMultiple+0x24>)
 80018bc:	6824      	ldr	r4, [r4, #0]
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80018c4:	460a      	mov	r2, r1
 80018c6:	2301      	movs	r3, #1
 80018c8:	4601      	mov	r1, r0
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <IOE_ReadMultiple+0x28>)
 80018cc:	f003 fc78 	bl	80051c0 <HAL_I2C_Mem_Read>
}
 80018d0:	3800      	subs	r0, #0
 80018d2:	bf18      	it	ne
 80018d4:	2001      	movne	r0, #1
 80018d6:	b004      	add	sp, #16
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	bf00      	nop
 80018dc:	20000010 	.word	0x20000010
 80018e0:	200016ac 	.word	0x200016ac

080018e4 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 80018e4:	f002 bcc4 	b.w	8004270 <HAL_Delay>

080018e8 <LCD_IO_Init>:
{
 80018e8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ea:	4c06      	ldr	r4, [pc, #24]	@ (8001904 <LCD_IO_Init+0x1c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	4620      	mov	r0, r4
 80018f0:	2104      	movs	r1, #4
 80018f2:	f003 f92d 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018f6:	4620      	mov	r0, r4
 80018f8:	2201      	movs	r2, #1
}
 80018fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018fe:	2104      	movs	r1, #4
 8001900:	f003 b926 	b.w	8004b50 <HAL_GPIO_WritePin>
 8001904:	40020800 	.word	0x40020800

08001908 <LCD_IO_WriteData>:
{
 8001908:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800190a:	4d0b      	ldr	r5, [pc, #44]	@ (8001938 <LCD_IO_WriteData+0x30>)
{
 800190c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	480a      	ldr	r0, [pc, #40]	@ (800193c <LCD_IO_WriteData+0x34>)
 8001912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001916:	f003 f91b 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2104      	movs	r1, #4
 800191e:	4628      	mov	r0, r5
 8001920:	f003 f916 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff fcd1 	bl	80012cc <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800192a:	4628      	mov	r0, r5
 800192c:	2201      	movs	r2, #1
}
 800192e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001932:	2104      	movs	r1, #4
 8001934:	f003 b90c 	b.w	8004b50 <HAL_GPIO_WritePin>
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00

08001940 <LCD_IO_WriteReg>:
{
 8001940:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001942:	4d0b      	ldr	r5, [pc, #44]	@ (8001970 <LCD_IO_WriteReg+0x30>)
{
 8001944:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <LCD_IO_WriteReg+0x34>)
 800194a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194e:	f003 f8ff 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2104      	movs	r1, #4
 8001956:	4628      	mov	r0, r5
 8001958:	f003 f8fa 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fcb5 	bl	80012cc <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001962:	4628      	mov	r0, r5
 8001964:	2201      	movs	r2, #1
}
 8001966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800196a:	2104      	movs	r1, #4
 800196c:	f003 b8f0 	b.w	8004b50 <HAL_GPIO_WritePin>
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00

08001978 <LCD_IO_ReadData>:
{
 8001978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800197a:	4e14      	ldr	r6, [pc, #80]	@ (80019cc <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	4f14      	ldr	r7, [pc, #80]	@ (80019d0 <LCD_IO_ReadData+0x58>)
{
 800197e:	4605      	mov	r5, r0
 8001980:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001982:	4630      	mov	r0, r6
 8001984:	2200      	movs	r2, #0
 8001986:	2104      	movs	r1, #4
 8001988:	f003 f8e2 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001992:	4638      	mov	r0, r7
 8001994:	f003 f8dc 	bl	8004b50 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001998:	4628      	mov	r0, r5
 800199a:	f7ff fc97 	bl	80012cc <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <LCD_IO_ReadData+0x5c>)
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <LCD_IO_ReadData+0x60>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4622      	mov	r2, r4
 80019a6:	a901      	add	r1, sp, #4
 80019a8:	f004 fdaf 	bl	800650a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80019ac:	4638      	mov	r0, r7
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 80019b4:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80019b6:	f003 f8cb 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80019ba:	4630      	mov	r0, r6
 80019bc:	2201      	movs	r2, #1
 80019be:	2104      	movs	r1, #4
 80019c0:	f003 f8c6 	bl	8004b50 <HAL_GPIO_WritePin>
}
 80019c4:	4620      	mov	r0, r4
 80019c6:	b003      	add	sp, #12
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	200015ac 	.word	0x200015ac

080019dc <LCD_Delay>:
  HAL_Delay(Delay);
 80019dc:	f002 bc48 	b.w	8004270 <HAL_Delay>

080019e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019e0:	6802      	ldr	r2, [r0, #0]
 80019e2:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d101      	bne.n	80019ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80019e8:	f002 bc30 	b.w	800424c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40001000 	.word	0x40001000

080019f4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_MspInit+0x3c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a02:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001a06:	6459      	str	r1, [r3, #68]	@ 0x44
 8001a08:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a0a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001a0e:	9100      	str	r1, [sp, #0]
 8001a10:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001a16:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001a1a:	6419      	str	r1, [r3, #64]	@ 0x40
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a26:	210f      	movs	r1, #15
 8001a28:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a2e:	f002 be5b 	b.w	80046e8 <HAL_NVIC_SetPriority>
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001a38:	6802      	ldr	r2, [r0, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_CRC_MspInit+0x28>)
 8001a3c:	429a      	cmp	r2, r3
{
 8001a3e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001a40:	d10b      	bne.n	8001a5a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_CRC_MspInit+0x2c>)
 8001a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a5a:	b002      	add	sp, #8
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023000 	.word	0x40023000
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a68:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	2214      	movs	r2, #20
{
 8001a6c:	b08a      	sub	sp, #40	@ 0x28
 8001a6e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	2100      	movs	r1, #0
 8001a72:	eb0d 0002 	add.w	r0, sp, r2
 8001a76:	f012 f8a2 	bl	8013bbe <memset>
  if(hadc->Instance==ADC1)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <HAL_ADC_MspInit+0x9c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d11f      	bne.n	8001ac2 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a82:	4b21      	ldr	r3, [pc, #132]	@ (8001b08 <HAL_ADC_MspInit+0xa0>)
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	4821      	ldr	r0, [pc, #132]	@ (8001b0c <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a86:	2100      	movs	r1, #0
 8001a88:	9101      	str	r1, [sp, #4]
 8001a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a94:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001a98:	9201      	str	r2, [sp, #4]
 8001a9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	9102      	str	r1, [sp, #8]
 8001a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aa0:	f042 0204 	orr.w	r2, r2, #4
 8001aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2108      	movs	r1, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab8:	a905      	add	r1, sp, #20
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f002 ff5f 	bl	800497c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001abe:	b00a      	add	sp, #40	@ 0x28
 8001ac0:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8001ac2:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <HAL_ADC_MspInit+0xa8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d1fa      	bne.n	8001abe <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_ADC_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	4812      	ldr	r0, [pc, #72]	@ (8001b14 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001acc:	2100      	movs	r1, #0
 8001ace:	9103      	str	r1, [sp, #12]
 8001ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ada:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001ade:	9203      	str	r2, [sp, #12]
 8001ae0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	9104      	str	r1, [sp, #16]
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	9304      	str	r3, [sp, #16]
 8001af4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2220      	movs	r2, #32
 8001af8:	2303      	movs	r3, #3
 8001afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	a905      	add	r1, sp, #20
 8001b00:	e7db      	b.n	8001aba <HAL_ADC_MspInit+0x52>
 8001b02:	bf00      	nop
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40012100 	.word	0x40012100
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b18:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_DMA2D_MspInit+0x40>)
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d116      	bne.n	8001b50 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b22:	2200      	movs	r2, #0
 8001b24:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001b28:	9201      	str	r2, [sp, #4]
 8001b2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b2c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001b30:	6319      	str	r1, [r3, #48]	@ 0x30
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b38:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b3a:	2105      	movs	r1, #5
 8001b3c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b3e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b40:	f002 fdd2 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b44:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001b46:	b003      	add	sp, #12
 8001b48:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b4c:	f002 bdfe 	b.w	800474c <HAL_NVIC_EnableIRQ>
}
 8001b50:	b003      	add	sp, #12
 8001b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b56:	bf00      	nop
 8001b58:	4002b000 	.word	0x4002b000

08001b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b60:	4604      	mov	r4, r0
 8001b62:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	2214      	movs	r2, #20
 8001b66:	2100      	movs	r1, #0
 8001b68:	a803      	add	r0, sp, #12
 8001b6a:	f012 f828 	bl	8013bbe <memset>
  if(hi2c->Instance==I2C3)
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_I2C_MspInit+0xa8>)
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d143      	bne.n	8001bfe <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4c24      	ldr	r4, [pc, #144]	@ (8001c08 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	4824      	ldr	r0, [pc, #144]	@ (8001c0c <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2500      	movs	r5, #0
 8001b7c:	9500      	str	r5, [sp, #0]
 8001b7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	9501      	str	r5, [sp, #4]
 8001b92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba4:	f04f 0912 	mov.w	r9, #18
 8001ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	f04f 0801 	mov.w	r8, #1
 8001bb0:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bb2:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb6:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bbe:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f002 fedc 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bca:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f002 fed1 	bl	800497c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bda:	9502      	str	r5, [sp, #8]
 8001bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be2:	6423      	str	r3, [r4, #64]	@ 0x40
 8001be4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001bee:	6a23      	ldr	r3, [r4, #32]
 8001bf0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bf4:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001bf6:	6a23      	ldr	r3, [r4, #32]
 8001bf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bfc:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bfe:	b009      	add	sp, #36	@ 0x24
 8001c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c04:	40005c00 	.word	0x40005c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b099      	sub	sp, #100	@ 0x64
 8001c18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2214      	movs	r2, #20
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	a807      	add	r0, sp, #28
 8001c20:	f011 ffcd 	bl	8013bbe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	2230      	movs	r2, #48	@ 0x30
 8001c26:	eb0d 0002 	add.w	r0, sp, r2
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f011 ffc7 	bl	8013bbe <memset>
  if(hltdc->Instance==LTDC)
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	4b5e      	ldr	r3, [pc, #376]	@ (8001dac <HAL_LTDC_MspInit+0x198>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f040 80b7 	bne.w	8001da8 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001c3e:	23c0      	movs	r3, #192	@ 0xc0
 8001c40:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c42:	2304      	movs	r3, #4
 8001c44:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4e:	f004 f833 	bl	8005cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	b108      	cbz	r0, 8001c58 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001c54:	f7ff fece 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c58:	4b55      	ldr	r3, [pc, #340]	@ (8001db0 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5a:	4856      	ldr	r0, [pc, #344]	@ (8001db4 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	9400      	str	r4, [sp, #0]
 8001c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c66:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c6a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c72:	9401      	str	r4, [sp, #4]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c7e:	f002 0220 	and.w	r2, r2, #32
 8001c82:	9201      	str	r2, [sp, #4]
 8001c84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	9402      	str	r4, [sp, #8]
 8001c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c92:	f002 0201 	and.w	r2, r2, #1
 8001c96:	9202      	str	r2, [sp, #8]
 8001c98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	9403      	str	r4, [sp, #12]
 8001c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c9e:	f042 0202 	orr.w	r2, r2, #2
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ca6:	f002 0202 	and.w	r2, r2, #2
 8001caa:	9203      	str	r2, [sp, #12]
 8001cac:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	9404      	str	r4, [sp, #16]
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cba:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001cbe:	9204      	str	r2, [sp, #16]
 8001cc0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	9405      	str	r4, [sp, #20]
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc6:	f042 0204 	orr.w	r2, r2, #4
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cce:	f002 0204 	and.w	r2, r2, #4
 8001cd2:	9205      	str	r2, [sp, #20]
 8001cd4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	9406      	str	r4, [sp, #24]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cea:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cec:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cee:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfa:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cfe:	f002 fe3d 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001d02:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	482c      	ldr	r0, [pc, #176]	@ (8001db8 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d08:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d10:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f002 fe31 	bl	800497c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	4827      	ldr	r0, [pc, #156]	@ (8001dbc <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d1e:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d20:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f002 fe27 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001d2e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	4822      	ldr	r0, [pc, #136]	@ (8001dbc <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d34:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f002 fe1c 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001d44:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d48:	481d      	ldr	r0, [pc, #116]	@ (8001dc0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d52:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d56:	f002 fe11 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	4819      	ldr	r0, [pc, #100]	@ (8001dc4 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d5e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d66:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	f002 fe07 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	4815      	ldr	r0, [pc, #84]	@ (8001dc8 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d72:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d74:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f002 fdfd 	bl	800497c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d86:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d88:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d94:	f002 fdf2 	bl	800497c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d98:	2058      	movs	r0, #88	@ 0x58
 8001d9a:	4622      	mov	r2, r4
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	f002 fca3 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001da2:	2058      	movs	r0, #88	@ 0x58
 8001da4:	f002 fcd2 	bl	800474c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001da8:	b019      	add	sp, #100	@ 0x64
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	40016800 	.word	0x40016800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
 8001dd0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2214      	movs	r2, #20
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a803      	add	r0, sp, #12
 8001dd8:	f011 fef1 	bl	8013bbe <memset>
  if(hspi->Instance==SPI5)
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_SPI_MspInit+0x64>)
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d123      	bne.n	8001e2c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001de4:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001de8:	2100      	movs	r1, #0
 8001dea:	9101      	str	r1, [sp, #4]
 8001dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dee:	4811      	ldr	r0, [pc, #68]	@ (8001e34 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001df0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001df4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001df8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001dfc:	9201      	str	r2, [sp, #4]
 8001dfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e00:	9102      	str	r1, [sp, #8]
 8001e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001e18:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e1a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e20:	2305      	movs	r3, #5
 8001e22:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e26:	a903      	add	r1, sp, #12
 8001e28:	f002 fda8 	bl	800497c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001e2c:	b008      	add	sp, #32
 8001e2e:	bd10      	pop	{r4, pc}
 8001e30:	40015000 	.word	0x40015000
 8001e34:	40021400 	.word	0x40021400

08001e38 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <HAL_SDRAM_MspInit+0xb8>)
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	2c00      	cmp	r4, #0
 8001e48:	d14f      	bne.n	8001eea <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001e4a:	f04f 0801 	mov.w	r8, #1
 8001e4e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <HAL_SDRAM_MspInit+0xbc>)
 8001e54:	9400      	str	r4, [sp, #0]
 8001e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e58:	4827      	ldr	r0, [pc, #156]	@ (8001ef8 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e5a:	ea42 0208 	orr.w	r2, r2, r8
 8001e5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	ea03 0308 	and.w	r3, r3, r8
 8001e66:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e6a:	2603      	movs	r6, #3
 8001e6c:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e6e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e70:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e76:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e7a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e7e:	f002 fd7d 	bl	800497c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	481e      	ldr	r0, [pc, #120]	@ (8001efc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e84:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e86:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f002 fd74 	bl	800497c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001e94:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e98:	4819      	ldr	r0, [pc, #100]	@ (8001f00 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e9a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea6:	f002 fd69 	bl	800497c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001eaa:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eae:	4815      	ldr	r0, [pc, #84]	@ (8001f04 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ebc:	f002 fd5e 	bl	800497c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ec0:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec4:	4810      	ldr	r0, [pc, #64]	@ (8001f08 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f002 fd53 	bl	800497c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ed6:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eda:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f002 fd49 	bl	800497c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001eea:	b006      	add	sp, #24
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef0:	20001748 	.word	0x20001748
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40020400 	.word	0x40020400

08001f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b530      	push	{r4, r5, lr}
 8001f12:	4601      	mov	r1, r0
 8001f14:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2036      	movs	r0, #54	@ 0x36
 8001f1a:	f002 fbe5 	bl	80046e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1e:	2036      	movs	r0, #54	@ 0x36
 8001f20:	f002 fc14 	bl	800474c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f24:	2500      	movs	r5, #0
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_InitTick+0x6c>)
 8001f28:	9502      	str	r5, [sp, #8]
 8001f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f2c:	4c14      	ldr	r4, [pc, #80]	@ (8001f80 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f2e:	f042 0210 	orr.w	r2, r2, #16
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f3c:	a901      	add	r1, sp, #4
 8001f3e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f40:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f42:	f003 fe9b 	bl	8005c7c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f46:	f003 fe89 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_InitTick+0x74>)
 8001f4c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f4e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001f52:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f54:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_InitTick+0x78>)
 8001f58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f5c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f5e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f60:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001f62:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f66:	f004 fc9f 	bl	80068a8 <HAL_TIM_Base_Init>
 8001f6a:	b920      	cbnz	r0, 8001f76 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f004 fb6b 	bl	8006648 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001f72:	b009      	add	sp, #36	@ 0x24
 8001f74:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e7fb      	b.n	8001f72 <HAL_InitTick+0x62>
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	2000174c 	.word	0x2000174c
 8001f84:	40001000 	.word	0x40001000
 8001f88:	000f4240 	.word	0x000f4240

08001f8c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f8c:	4770      	bx	lr

08001f8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler>

08001f90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <MemManage_Handler>

08001f92 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <BusFault_Handler>

08001f94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler>

08001f96 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001f96:	4770      	bx	lr

08001f98 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f98:	4801      	ldr	r0, [pc, #4]	@ (8001fa0 <TIM6_DAC_IRQHandler+0x8>)
 8001f9a:	f004 bb93 	b.w	80066c4 <HAL_TIM_IRQHandler>
 8001f9e:	bf00      	nop
 8001fa0:	2000174c 	.word	0x2000174c

08001fa4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001fa4:	4801      	ldr	r0, [pc, #4]	@ (8001fac <LTDC_IRQHandler+0x8>)
 8001fa6:	f003 bb3b 	b.w	8005620 <HAL_LTDC_IRQHandler>
 8001faa:	bf00      	nop
 8001fac:	20001604 	.word	0x20001604

08001fb0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001fb0:	4801      	ldr	r0, [pc, #4]	@ (8001fb8 <DMA2D_IRQHandler+0x8>)
 8001fb2:	f002 bc15 	b.w	80047e0 <HAL_DMA2D_IRQHandler>
 8001fb6:	bf00      	nop
 8001fb8:	20001700 	.word	0x20001700

08001fbc <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001fbc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001fbe:	4c0b      	ldr	r4, [pc, #44]	@ (8001fec <EXTI0_IRQHandler+0x30>)
 8001fc0:	6820      	ldr	r0, [r4, #0]
 8001fc2:	f004 ff05 	bl	8006dd0 <osMessageQueueGetCount>
	if (count < 2)
 8001fc6:	2801      	cmp	r0, #1
 8001fc8:	d809      	bhi.n	8001fde <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001fca:	2341      	movs	r3, #65	@ 0x41
 8001fcc:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001fd0:	6820      	ldr	r0, [r4, #0]
 8001fd2:	23c8      	movs	r3, #200	@ 0xc8
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f10d 0107 	add.w	r1, sp, #7
 8001fda:	f004 fe98 	bl	8006d0e <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fde:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fe6:	f002 bdc3 	b.w	8004b70 <HAL_GPIO_EXTI_IRQHandler>
 8001fea:	bf00      	nop
 8001fec:	200014d4 	.word	0x200014d4

08001ff0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	4770      	bx	lr

08001ff4 <_kill>:

int _kill(int pid, int sig)
{
 8001ff4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ff6:	f011 fe85 	bl	8013d04 <__errno>
 8001ffa:	2316      	movs	r3, #22
 8001ffc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8002002:	bd08      	pop	{r3, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002006:	f011 fe7d 	bl	8013d04 <__errno>
 800200a:	2316      	movs	r3, #22
 800200c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0xa>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	460d      	mov	r5, r1
 8002014:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	460e      	mov	r6, r1
 8002018:	1b73      	subs	r3, r6, r5
 800201a:	429c      	cmp	r4, r3
 800201c:	dc01      	bgt.n	8002022 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800201e:	4620      	mov	r0, r4
 8002020:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	e7f5      	b.n	8002018 <_read+0x8>

0800202c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	460d      	mov	r5, r1
 8002030:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	460e      	mov	r6, r1
 8002034:	1b73      	subs	r3, r6, r5
 8002036:	429c      	cmp	r4, r3
 8002038:	dc01      	bgt.n	800203e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800203a:	4620      	mov	r0, r4
 800203c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800203e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002042:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	e7f5      	b.n	8002034 <_write+0x8>

08002048 <_close>:

int _close(int file)
{
	return -1;
}
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800204e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002052:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002054:	2000      	movs	r0, #0
 8002056:	4770      	bx	lr

08002058 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002058:	2001      	movs	r0, #1
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800205c:	2000      	movs	r0, #0
 800205e:	4770      	bx	lr

08002060 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <_sbrk+0x2c>)
 8002062:	6811      	ldr	r1, [r2, #0]
{
 8002064:	b508      	push	{r3, lr}
 8002066:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002068:	b909      	cbnz	r1, 800206e <_sbrk+0xe>
		heap_end = &end;
 800206a:	4909      	ldr	r1, [pc, #36]	@ (8002090 <_sbrk+0x30>)
 800206c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800206e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002070:	4669      	mov	r1, sp
 8002072:	4403      	add	r3, r0
 8002074:	428b      	cmp	r3, r1
 8002076:	d906      	bls.n	8002086 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002078:	f011 fe44 	bl	8013d04 <__errno>
 800207c:	230c      	movs	r3, #12
 800207e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002084:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002086:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002088:	e7fc      	b.n	8002084 <_sbrk+0x24>
 800208a:	bf00      	nop
 800208c:	20001794 	.word	0x20001794
 8002090:	20012958 	.word	0x20012958

08002094 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdanaz_22_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002094:	4770      	bx	lr

08002096 <_ZN23ApplicationFontProviderD0Ev>:
 8002096:	b510      	push	{r4, lr}
 8002098:	2104      	movs	r1, #4
 800209a:	4604      	mov	r4, r0
 800209c:	f011 fb5a 	bl	8013754 <_ZdlPvj>
 80020a0:	4620      	mov	r0, r4
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80020a4:	b508      	push	{r3, lr}
    switch (typography)
 80020a6:	2903      	cmp	r1, #3
 80020a8:	d813      	bhi.n	80020d2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80020aa:	e8df f001 	tbb	[pc, r1]
 80020ae:	0602      	.short	0x0602
 80020b0:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80020b2:	f001 fb75 	bl	80037a0 <_ZN17TypedTextDatabase8getFontsEv>
 80020b6:	6800      	ldr	r0, [r0, #0]
        // verdanaz_22_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 80020b8:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80020ba:	f001 fb71 	bl	80037a0 <_ZN17TypedTextDatabase8getFontsEv>
 80020be:	6840      	ldr	r0, [r0, #4]
 80020c0:	e7fa      	b.n	80020b8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80020c2:	f001 fb6d 	bl	80037a0 <_ZN17TypedTextDatabase8getFontsEv>
 80020c6:	6880      	ldr	r0, [r0, #8]
 80020c8:	e7f6      	b.n	80020b8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80020ca:	f001 fb69 	bl	80037a0 <_ZN17TypedTextDatabase8getFontsEv>
 80020ce:	68c0      	ldr	r0, [r0, #12]
 80020d0:	e7f2      	b.n	80020b8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 80020d2:	2000      	movs	r0, #0
 80020d4:	e7f0      	b.n	80020b8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

080020d8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80020d8:	4800      	ldr	r0, [pc, #0]	@ (80020dc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80020da:	4770      	bx	lr
 80020dc:	08015728 	.word	0x08015728

080020e0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80020e0:	200b      	movs	r0, #11
 80020e2:	4770      	bx	lr

080020e4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80020e4:	b513      	push	{r0, r1, r4, lr}
 80020e6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80020e8:	b151      	cbz	r1, 8002100 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020ea:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80020ec:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80020ee:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020f2:	aa01      	add	r2, sp, #4
 80020f4:	689c      	ldr	r4, [r3, #8]
 80020f6:	f10d 0303 	add.w	r3, sp, #3
 80020fa:	47a0      	blx	r4
        return glyph;
    }
 80020fc:	b002      	add	sp, #8
 80020fe:	bd10      	pop	{r4, pc}
            return 0;
 8002100:	4608      	mov	r0, r1
 8002102:	e7fb      	b.n	80020fc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002104 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002104:	89c0      	ldrh	r0, [r0, #14]
 8002106:	4770      	bx	lr

08002108 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002108:	8a00      	ldrh	r0, [r0, #16]
 800210a:	4770      	bx	lr

0800210c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800210c:	88c0      	ldrh	r0, [r0, #6]
 800210e:	4770      	bx	lr

08002110 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002110:	8880      	ldrh	r0, [r0, #4]
 8002112:	4770      	bx	lr

08002114 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002114:	7a80      	ldrb	r0, [r0, #10]
    }
 8002116:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800211a:	4770      	bx	lr

0800211c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800211c:	7a80      	ldrb	r0, [r0, #10]
    }
 800211e:	09c0      	lsrs	r0, r0, #7
 8002120:	4770      	bx	lr

08002122 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8002122:	2000      	movs	r0, #0
 8002124:	4770      	bx	lr
	...

08002128 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8002128:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002130 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	00000000 	.word	0x00000000

08002134 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002134:	4770      	bx	lr

08002136 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002136:	b510      	push	{r4, lr}
    }
 8002138:	2108      	movs	r1, #8
    virtual ~TypedText()
 800213a:	4604      	mov	r4, r0
    }
 800213c:	f011 fb0a 	bl	8013754 <_ZdlPvj>
 8002140:	4620      	mov	r0, r4
 8002142:	bd10      	pop	{r4, pc}

08002144 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002144:	4770      	bx	lr

08002146 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002146:	4770      	bx	lr

08002148 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002148:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800214c:	6808      	ldr	r0, [r1, #0]
 800214e:	6849      	ldr	r1, [r1, #4]
 8002150:	c303      	stmia	r3!, {r0, r1}
    }
 8002152:	4770      	bx	lr

08002154 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002154:	4770      	bx	lr

08002156 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002156:	4770      	bx	lr

08002158 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002158:	6041      	str	r1, [r0, #4]
    }
 800215a:	4770      	bx	lr

0800215c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800215c:	4770      	bx	lr

0800215e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800215e:	4770      	bx	lr

08002160 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002162:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002166:	2300      	movs	r3, #0
 8002168:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800216c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002170:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002174:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	0800258d 	.word	0x0800258d

08002180 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002180:	2301      	movs	r3, #1
 8002182:	7203      	strb	r3, [r0, #8]
    }
 8002184:	4770      	bx	lr

08002186 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8002186:	4770      	bx	lr

08002188 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002188:	4770      	bx	lr

0800218a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
    {
        Transition::init();
    }
 800218a:	4770      	bx	lr

0800218c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800218c:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800218e:	68c2      	ldr	r2, [r0, #12]
 8002190:	6841      	ldr	r1, [r0, #4]
 8002192:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002194:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002196:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800219a:	07d2      	lsls	r2, r2, #31
 800219c:	bf48      	it	mi
 800219e:	590a      	ldrmi	r2, [r1, r4]
 80021a0:	689b      	ldr	r3, [r3, #8]
    }
 80021a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80021a6:	bf48      	it	mi
 80021a8:	58d3      	ldrmi	r3, [r2, r3]
 80021aa:	4718      	bx	r3

080021ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80021ac:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80021ae:	6840      	ldr	r0, [r0, #4]
 80021b0:	b130      	cbz	r0, 80021c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	b91a      	cbnz	r2, 80021be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80021b6:	68d8      	ldr	r0, [r3, #12]
 80021b8:	f000 0001 	and.w	r0, r0, #1
 80021bc:	4770      	bx	lr
 80021be:	2001      	movs	r0, #1
    }
 80021c0:	4770      	bx	lr

080021c2 <_ZN8touchgfx12NoTransitionD0Ev>:
 80021c2:	b510      	push	{r4, lr}
 80021c4:	210c      	movs	r1, #12
 80021c6:	4604      	mov	r4, r0
 80021c8:	f011 fac4 	bl	8013754 <_ZdlPvj>
 80021cc:	4620      	mov	r0, r4
 80021ce:	bd10      	pop	{r4, pc}

080021d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 80021d0:	b510      	push	{r4, lr}
 80021d2:	2114      	movs	r1, #20
 80021d4:	4604      	mov	r4, r0
 80021d6:	f011 fabd 	bl	8013754 <_ZdlPvj>
 80021da:	4620      	mov	r0, r4
 80021dc:	bd10      	pop	{r4, pc}

080021de <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80021de:	b510      	push	{r4, lr}
 80021e0:	2110      	movs	r1, #16
 80021e2:	4604      	mov	r4, r0
 80021e4:	f011 fab6 	bl	8013754 <_ZdlPvj>
 80021e8:	4620      	mov	r0, r4
 80021ea:	bd10      	pop	{r4, pc}

080021ec <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80021ec:	b510      	push	{r4, lr}
 80021ee:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80021f2:	4604      	mov	r4, r0
 80021f4:	f011 faae 	bl	8013754 <_ZdlPvj>
 80021f8:	4620      	mov	r0, r4
 80021fa:	bd10      	pop	{r4, pc}

080021fc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80021fc:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80021fe:	f00a fd83 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 8002202:	6803      	ldr	r3, [r0, #0]
    }
 8002204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8002208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220a:	4718      	bx	r3

0800220c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:

    virtual void invalidate()
 800220c:	b510      	push	{r4, lr}
    {
        // The last step when finalizing a transition (see MVPApplication::finalizeTransition)
        // is to call invalidate on the transition. For the WipeTransition we want to erase any
        // invalidated areas that might have been added when setting up the new screen, which
        // is the first step of finalizing a transition (see MVPApplication::finalizeTransition).
        Application::getInstance()->clearCachedAreas();
 800220e:	f00a fd7b 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 8002212:	6803      	ldr	r3, [r0, #0]
    }
 8002214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->clearCachedAreas();
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	4718      	bx	r3

0800221c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800221c:	b513      	push	{r0, r1, r4, lr}
 800221e:	4604      	mov	r4, r0
        animationCounter++;
 8002220:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002222:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002224:	3001      	adds	r0, #1
 8002226:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002228:	4298      	cmp	r0, r3
        animationCounter++;
 800222a:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 800222c:	d905      	bls.n	800223a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800222e:	2301      	movs	r3, #1
 8002230:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	72a3      	strb	r3, [r4, #10]
    }
 8002236:	b002      	add	sp, #8
 8002238:	bd10      	pop	{r4, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800223a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800223e:	2100      	movs	r1, #0
 8002240:	f00c fb72 	bl	800e928 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002244:	07c3      	lsls	r3, r0, #31
 8002246:	d507      	bpl.n	8002258 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002248:	2800      	cmp	r0, #0
 800224a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800224e:	bfc8      	it	gt
 8002250:	2301      	movgt	r3, #1
 8002252:	fa13 f080 	uxtah	r0, r3, r0
 8002256:	b200      	sxth	r0, r0
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800225a:	81e0      	strh	r0, [r4, #14]
                rect.x = HAL::DISPLAY_WIDTH - calculatedValue;
 800225c:	8812      	ldrh	r2, [r2, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002264:	b283      	uxth	r3, r0
 8002266:	1ad2      	subs	r2, r2, r3
 8002268:	f8ad 2000 	strh.w	r2, [sp]
                rect.width = calculatedValue - prevCalculatedValue;
 800226c:	8a22      	ldrh	r2, [r4, #16]
        prevCalculatedValue = calculatedValue;
 800226e:	8220      	strh	r0, [r4, #16]
                rect.width = calculatedValue - prevCalculatedValue;
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	f8ad 3004 	strh.w	r3, [sp, #4]
                rect.height = HAL::DISPLAY_HEIGHT;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800227e:	f00a fd43 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	aa02      	add	r2, sp, #8
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	e912 0006 	ldmdb	r2, {r1, r2}
 800228c:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800228e:	7aa3      	ldrb	r3, [r4, #10]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d1d0      	bne.n	8002236 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0cc      	beq.n	8002236 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800229c:	f00a fd34 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80022a0:	b002      	add	sp, #8
 80022a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022a6:	f00a bd35 	b.w	800cd14 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80022aa:	bf00      	nop
 80022ac:	200125d4 	.word	0x200125d4
 80022b0:	200125d6 	.word	0x200125d6
 80022b4:	200125de 	.word	0x200125de

080022b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80022bc:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80022c0:	b158      	cbz	r0, 80022da <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80022c2:	6803      	ldr	r3, [r0, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4798      	blx	r3
 80022c8:	b138      	cbz	r0, 80022da <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80022ca:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80022da:	bd10      	pop	{r4, pc}

080022dc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 80022dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80022e0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80022e4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80022e6:	68b0      	ldr	r0, [r6, #8]
 80022e8:	6803      	ldr	r3, [r0, #0]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4798      	blx	r3
 80022ee:	f5b0 7f47 	cmp.w	r0, #796	@ 0x31c
 80022f2:	d205      	bcs.n	8002300 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 80022f4:	4b44      	ldr	r3, [pc, #272]	@ (8002408 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 80022f6:	4a45      	ldr	r2, [pc, #276]	@ (800240c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 80022f8:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80022fa:	4845      	ldr	r0, [pc, #276]	@ (8002410 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 80022fc:	f011 fa58 	bl	80137b0 <__assert_func>
 8002300:	6870      	ldr	r0, [r6, #4]
 8002302:	6803      	ldr	r3, [r0, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4798      	blx	r3
 8002308:	280f      	cmp	r0, #15
 800230a:	d803      	bhi.n	8002314 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 800230c:	4b41      	ldr	r3, [pc, #260]	@ (8002414 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 800230e:	4a3f      	ldr	r2, [pc, #252]	@ (800240c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002310:	21a4      	movs	r1, #164	@ 0xa4
 8002312:	e7f2      	b.n	80022fa <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002314:	68f0      	ldr	r0, [r6, #12]
 8002316:	6803      	ldr	r3, [r0, #0]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4798      	blx	r3
 800231c:	280b      	cmp	r0, #11
 800231e:	d803      	bhi.n	8002328 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 8002320:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8002322:	4a3a      	ldr	r2, [pc, #232]	@ (800240c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002324:	21a5      	movs	r1, #165	@ 0xa5
 8002326:	e7e8      	b.n	80022fa <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002328:	f00a fcee 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800232c:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002420 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002330:	3004      	adds	r0, #4
 8002332:	f00a fd36 	bl	800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002336:	f8d9 0000 	ldr.w	r0, [r9]
 800233a:	b110      	cbz	r0, 8002342 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 800233c:	6803      	ldr	r3, [r0, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4798      	blx	r3
    if (*currentTrans)
 8002342:	f8d9 0000 	ldr.w	r0, [r9]
 8002346:	b110      	cbz	r0, 800234e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4798      	blx	r3
    if (*currentScreen)
 800234e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002424 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 8002352:	f8d8 0000 	ldr.w	r0, [r8]
 8002356:	b110      	cbz	r0, 800235e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4798      	blx	r3
    if (*currentPresenter)
 800235e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002362:	b110      	cbz	r0, 800236a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002364:	6803      	ldr	r3, [r0, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4798      	blx	r3
    if (*currentScreen)
 800236a:	f8d8 0000 	ldr.w	r0, [r8]
 800236e:	b110      	cbz	r0, 8002376 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002370:	6803      	ldr	r3, [r0, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4798      	blx	r3
    if (*currentPresenter)
 8002376:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800237a:	b110      	cbz	r0, 8002382 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800237c:	6803      	ldr	r3, [r0, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002382:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002384:	6803      	ldr	r3, [r0, #0]
 8002386:	2100      	movs	r1, #0
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4798      	blx	r3
        : screenContainer(0), done(false)
 800238c:	f04f 0b00 	mov.w	fp, #0
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 8002392:	f8c0 b004 	str.w	fp, [r0, #4]
 8002396:	4604      	mov	r4, r0
 8002398:	f880 b008 	strb.w	fp, [r0, #8]
 800239c:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800239e:	68b0      	ldr	r0, [r6, #8]
 80023a0:	6803      	ldr	r3, [r0, #0]
 80023a2:	4659      	mov	r1, fp
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	4798      	blx	r3
 80023a8:	4605      	mov	r5, r0
 80023aa:	f001 fb59 	bl	8003a60 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80023ae:	6870      	ldr	r0, [r6, #4]
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	4659      	mov	r1, fp
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	4798      	blx	r3
 80023b8:	4629      	mov	r1, r5
 80023ba:	4606      	mov	r6, r0
 80023bc:	f001 fac6 	bl	800394c <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80023c0:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80023c2:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80023c6:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80023ca:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80023cc:	f8c6 a008 	str.w	sl, [r6, #8]
 80023d0:	4628      	mov	r0, r5
 80023d2:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80023d4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80023d8:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80023dc:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 80023de:	4798      	blx	r3
    newPresenter->activate();
 80023e0:	6833      	ldr	r3, [r6, #0]
 80023e2:	4630      	mov	r0, r6
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80023e8:	4621      	mov	r1, r4
 80023ea:	4628      	mov	r0, r5
 80023ec:	f00c fa96 	bl	800e91c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	4620      	mov	r0, r4
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4798      	blx	r3
    newTransition->invalidate();
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	4620      	mov	r0, r4
}
 80023fe:	b001      	add	sp, #4
 8002400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002404:	4718      	bx	r3
 8002406:	bf00      	nop
 8002408:	08014c58 	.word	0x08014c58
 800240c:	08014ce6 	.word	0x08014ce6
 8002410:	08014db8 	.word	0x08014db8
 8002414:	08014dff 	.word	0x08014dff
 8002418:	08014ea2 	.word	0x08014ea2
 800241c:	08015888 	.word	0x08015888
 8002420:	20012620 	.word	0x20012620
 8002424:	2001261c 	.word	0x2001261c

08002428 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
{
 8002428:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800242c:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002430:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002432:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4798      	blx	r3
 800243c:	f5b0 7f17 	cmp.w	r0, #604	@ 0x25c
 8002440:	d205      	bcs.n	800244e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 8002442:	4b49      	ldr	r3, [pc, #292]	@ (8002568 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x140>)
 8002444:	4a49      	ldr	r2, [pc, #292]	@ (800256c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 8002446:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002448:	4849      	ldr	r0, [pc, #292]	@ (8002570 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x148>)
 800244a:	f011 f9b1 	bl	80137b0 <__assert_func>
 800244e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002452:	6803      	ldr	r3, [r0, #0]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4798      	blx	r3
 8002458:	280f      	cmp	r0, #15
 800245a:	d803      	bhi.n	8002464 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 800245c:	4b45      	ldr	r3, [pc, #276]	@ (8002574 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x14c>)
 800245e:	4a43      	ldr	r2, [pc, #268]	@ (800256c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 8002460:	21a4      	movs	r1, #164	@ 0xa4
 8002462:	e7f1      	b.n	8002448 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002464:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002468:	6803      	ldr	r3, [r0, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4798      	blx	r3
 800246e:	2813      	cmp	r0, #19
 8002470:	d803      	bhi.n	800247a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x150>)
 8002474:	4a3d      	ldr	r2, [pc, #244]	@ (800256c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x144>)
 8002476:	21a5      	movs	r1, #165	@ 0xa5
 8002478:	e7e6      	b.n	8002448 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 800247a:	f00a fc45 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800247e:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8002584 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x15c>
 8002482:	3004      	adds	r0, #4
 8002484:	f00a fc8d 	bl	800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002488:	f8d9 0000 	ldr.w	r0, [r9]
 800248c:	b110      	cbz	r0, 8002494 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 800248e:	6803      	ldr	r3, [r0, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4798      	blx	r3
    if (*currentTrans)
 8002494:	f8d9 0000 	ldr.w	r0, [r9]
 8002498:	b110      	cbz	r0, 80024a0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 800249a:	6803      	ldr	r3, [r0, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4798      	blx	r3
    if (*currentScreen)
 80024a0:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8002588 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x160>
 80024a4:	f8d8 0000 	ldr.w	r0, [r8]
 80024a8:	b110      	cbz	r0, 80024b0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 80024aa:	6803      	ldr	r3, [r0, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4798      	blx	r3
    if (*currentPresenter)
 80024b0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80024b4:	b110      	cbz	r0, 80024bc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 80024b6:	6803      	ldr	r3, [r0, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4798      	blx	r3
    if (*currentScreen)
 80024bc:	f8d8 0000 	ldr.w	r0, [r8]
 80024c0:	b110      	cbz	r0, 80024c8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 80024c2:	6803      	ldr	r3, [r0, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4798      	blx	r3
    if (*currentPresenter)
 80024c8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80024cc:	b110      	cbz	r0, 80024d4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 80024ce:	6803      	ldr	r3, [r0, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80024d4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80024d8:	6803      	ldr	r3, [r0, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	4798      	blx	r3
          prevCalculatedValue(0)
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x154>)
 80024e2:	6003      	str	r3, [r0, #0]
 80024e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024e8:	8103      	strh	r3, [r0, #8]
            targetValue = HAL::DISPLAY_WIDTH;
 80024ea:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x158>)
 80024ec:	2600      	movs	r6, #0
          animationCounter(0),
 80024ee:	7286      	strb	r6, [r0, #10]
            targetValue = HAL::DISPLAY_WIDTH;
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	6046      	str	r6, [r0, #4]
 80024f4:	4604      	mov	r4, r0
          calculatedValue(0),
 80024f6:	81c6      	strh	r6, [r0, #14]
          prevCalculatedValue(0)
 80024f8:	8206      	strh	r6, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 80024fa:	8183      	strh	r3, [r0, #12]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80024fc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002500:	6803      	ldr	r3, [r0, #0]
 8002502:	4631      	mov	r1, r6
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	4798      	blx	r3
 8002508:	4605      	mov	r5, r0
 800250a:	f001 f9d9 	bl	80038c0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800250e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002512:	6803      	ldr	r3, [r0, #0]
 8002514:	4631      	mov	r1, r6
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	4798      	blx	r3
 800251a:	4629      	mov	r1, r5
 800251c:	4606      	mov	r6, r0
 800251e:	f001 f995 	bl	800384c <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002522:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002524:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 8002528:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	f8c6 a008 	str.w	sl, [r6, #8]
 8002532:	4628      	mov	r0, r5
 8002534:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002536:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800253a:	f8c8 5000 	str.w	r5, [r8]
 800253e:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002540:	4798      	blx	r3
    newPresenter->activate();
 8002542:	6833      	ldr	r3, [r6, #0]
 8002544:	4630      	mov	r0, r6
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800254a:	4621      	mov	r1, r4
 800254c:	4628      	mov	r0, r5
 800254e:	f00c f9e5 	bl	800e91c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	4620      	mov	r0, r4
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4798      	blx	r3
    newTransition->invalidate();
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4620      	mov	r0, r4
}
 8002560:	b001      	add	sp, #4
 8002562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002566:	4718      	bx	r3
 8002568:	08014c58 	.word	0x08014c58
 800256c:	08014f45 	.word	0x08014f45
 8002570:	08014db8 	.word	0x08014db8
 8002574:	08014dff 	.word	0x08014dff
 8002578:	08014ea2 	.word	0x08014ea2
 800257c:	080158ac 	.word	0x080158ac
 8002580:	200125d4 	.word	0x200125d4
 8002584:	20012620 	.word	0x20012620
 8002588:	2001261c 	.word	0x2001261c

0800258c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 800258c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002590:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002594:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002596:	68b0      	ldr	r0, [r6, #8]
 8002598:	6803      	ldr	r3, [r0, #0]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4798      	blx	r3
 800259e:	f5b0 7f17 	cmp.w	r0, #604	@ 0x25c
 80025a2:	d205      	bcs.n	80025b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80025a4:	4b44      	ldr	r3, [pc, #272]	@ (80026b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80025a6:	4a45      	ldr	r2, [pc, #276]	@ (80026bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80025a8:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025aa:	4845      	ldr	r0, [pc, #276]	@ (80026c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80025ac:	f011 f900 	bl	80137b0 <__assert_func>
 80025b0:	6870      	ldr	r0, [r6, #4]
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4798      	blx	r3
 80025b8:	280f      	cmp	r0, #15
 80025ba:	d803      	bhi.n	80025c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 80025bc:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80025be:	4a3f      	ldr	r2, [pc, #252]	@ (80026bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80025c0:	21a4      	movs	r1, #164	@ 0xa4
 80025c2:	e7f2      	b.n	80025aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025c4:	68f0      	ldr	r0, [r6, #12]
 80025c6:	6803      	ldr	r3, [r0, #0]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4798      	blx	r3
 80025cc:	280b      	cmp	r0, #11
 80025ce:	d803      	bhi.n	80025d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 80025d0:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80025d2:	4a3a      	ldr	r2, [pc, #232]	@ (80026bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80025d4:	21a5      	movs	r1, #165	@ 0xa5
 80025d6:	e7e8      	b.n	80025aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80025d8:	f00a fb96 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80025dc:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 80026d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80025e0:	3004      	adds	r0, #4
 80025e2:	f00a fbde 	bl	800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80025e6:	f8d9 0000 	ldr.w	r0, [r9]
 80025ea:	b110      	cbz	r0, 80025f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4798      	blx	r3
    if (*currentTrans)
 80025f2:	f8d9 0000 	ldr.w	r0, [r9]
 80025f6:	b110      	cbz	r0, 80025fe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80025f8:	6803      	ldr	r3, [r0, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4798      	blx	r3
    if (*currentScreen)
 80025fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002602:	f8d8 0000 	ldr.w	r0, [r8]
 8002606:	b110      	cbz	r0, 800260e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	4798      	blx	r3
    if (*currentPresenter)
 800260e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002612:	b110      	cbz	r0, 800261a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002614:	6803      	ldr	r3, [r0, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4798      	blx	r3
    if (*currentScreen)
 800261a:	f8d8 0000 	ldr.w	r0, [r8]
 800261e:	b110      	cbz	r0, 8002626 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4798      	blx	r3
    if (*currentPresenter)
 8002626:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800262a:	b110      	cbz	r0, 8002632 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800262c:	6803      	ldr	r3, [r0, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002632:	68f0      	ldr	r0, [r6, #12]
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	4798      	blx	r3
 800263c:	f04f 0b00 	mov.w	fp, #0
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002642:	f8c0 b004 	str.w	fp, [r0, #4]
 8002646:	4604      	mov	r4, r0
 8002648:	f880 b008 	strb.w	fp, [r0, #8]
 800264c:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800264e:	68b0      	ldr	r0, [r6, #8]
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	4659      	mov	r1, fp
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	4798      	blx	r3
 8002658:	4605      	mov	r5, r0
 800265a:	f001 f931 	bl	80038c0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800265e:	6870      	ldr	r0, [r6, #4]
 8002660:	6803      	ldr	r3, [r0, #0]
 8002662:	4659      	mov	r1, fp
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	4798      	blx	r3
 8002668:	4629      	mov	r1, r5
 800266a:	4606      	mov	r6, r0
 800266c:	f001 f8ee 	bl	800384c <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002670:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002672:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 8002676:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 800267a:	682b      	ldr	r3, [r5, #0]
 800267c:	f8c6 a008 	str.w	sl, [r6, #8]
 8002680:	4628      	mov	r0, r5
 8002682:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002684:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002688:	f8c8 5000 	str.w	r5, [r8]
 800268c:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 800268e:	4798      	blx	r3
    newPresenter->activate();
 8002690:	6833      	ldr	r3, [r6, #0]
 8002692:	4630      	mov	r0, r6
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002698:	4621      	mov	r1, r4
 800269a:	4628      	mov	r0, r5
 800269c:	f00c f93e 	bl	800e91c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	4620      	mov	r0, r4
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	4798      	blx	r3
    newTransition->invalidate();
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4620      	mov	r0, r4
}
 80026ae:	b001      	add	sp, #4
 80026b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	4718      	bx	r3
 80026b6:	bf00      	nop
 80026b8:	08014c58 	.word	0x08014c58
 80026bc:	08015029 	.word	0x08015029
 80026c0:	08014db8 	.word	0x08014db8
 80026c4:	08014dff 	.word	0x08014dff
 80026c8:	08014ea2 	.word	0x08014ea2
 80026cc:	08015888 	.word	0x08015888
 80026d0:	20012620 	.word	0x20012620
 80026d4:	2001261c 	.word	0x2001261c

080026d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4617      	mov	r7, r2
 80026de:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80026e0:	f00a fbfc 	bl	800cedc <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 80026e6:	2500      	movs	r5, #0
      model(m)
 80026e8:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 80026ec:	4e0f      	ldr	r6, [pc, #60]	@ (800272c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 80026ee:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 80026f0:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 80026f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80026f6:	6830      	ldr	r0, [r6, #0]
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80026fc:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002700:	6803      	ldr	r3, [r0, #0]
 8002702:	2101      	movs	r1, #1
 8002704:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8002706:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800270a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800270c:	4628      	mov	r0, r5
 800270e:	f000 fffb 	bl	8003708 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002712:	6833      	ldr	r3, [r6, #0]
 8002714:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002718:	b10a      	cbz	r2, 800271e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800271a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800271c:	b900      	cbnz	r0, 8002720 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 800271e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002720:	f010 facc 	bl	8012cbc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002724:	4620      	mov	r0, r4
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002728:	2001262c 	.word	0x2001262c
 800272c:	200125e0 	.word	0x200125e0
 8002730:	08015834 	.word	0x08015834
 8002734:	0801581c 	.word	0x0801581c

08002738 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800273a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800273e:	2300      	movs	r3, #0
 8002740:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002744:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002748:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800274c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	0800258d 	.word	0x0800258d

08002758 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 800275a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800275e:	2300      	movs	r3, #0
 8002760:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002764:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002768:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800276c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	08002429 	.word	0x08002429

08002778 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 800277a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800277e:	2300      	movs	r3, #0
 8002780:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002784:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002788:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800278c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	080022dd 	.word	0x080022dd

08002798 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002798:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800279a:	4770      	bx	lr

0800279c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800279c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800279e:	4770      	bx	lr

080027a0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80027a0:	4770      	bx	lr

080027a2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80027a2:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 80027a4:	880b      	ldrh	r3, [r1, #0]
{
 80027a6:	b510      	push	{r4, lr}
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80027a8:	0ad2      	lsrs	r2, r2, #11
    offset |= dataOffset[1] << 16;
 80027aa:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80027ac:	69c1      	ldr	r1, [r0, #28]
    uint32_t offset = dataOffset[0];
 80027ae:	b29b      	uxth	r3, r3
    return pixels + offset;
 80027b0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    offset |= dataOffset[1] << 16;
 80027b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
}
 80027b8:	4418      	add	r0, r3
 80027ba:	bd10      	pop	{r4, pc}

080027bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80027c0:	b1ba      	cbz	r2, 80027f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80027c2:	7b10      	ldrb	r0, [r2, #12]
 80027c4:	b168      	cbz	r0, 80027e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80027c6:	7b53      	ldrb	r3, [r2, #13]
 80027c8:	7ad2      	ldrb	r2, [r2, #11]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80027d0:	431a      	orrs	r2, r3
 80027d2:	6a23      	ldr	r3, [r4, #32]
 80027d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	428a      	cmp	r2, r1
 80027dc:	d102      	bne.n	80027e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80027de:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80027e2:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80027e4:	d805      	bhi.n	80027f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80027e6:	3801      	subs	r0, #1
 80027e8:	b280      	uxth	r0, r0
 80027ea:	3304      	adds	r3, #4
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d1f3      	bne.n	80027d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80027f0:	e7f7      	b.n	80027e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80027f2:	2000      	movs	r0, #0
 80027f4:	e7f5      	b.n	80027e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080027f6 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80027f6:	b510      	push	{r4, lr}
 80027f8:	212c      	movs	r1, #44	@ 0x2c
 80027fa:	4604      	mov	r4, r0
 80027fc:	f010 ffaa 	bl	8013754 <_ZdlPvj>
 8002800:	4620      	mov	r0, r4
 8002802:	bd10      	pop	{r4, pc}

08002804 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002804:	b530      	push	{r4, r5, lr}
 8002806:	b08b      	sub	sp, #44	@ 0x2c
 8002808:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800280a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800280e:	9508      	str	r5, [sp, #32]
 8002810:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002814:	9507      	str	r5, [sp, #28]
 8002816:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800281a:	9506      	str	r5, [sp, #24]
 800281c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8002820:	9505      	str	r5, [sp, #20]
 8002822:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8002826:	9504      	str	r5, [sp, #16]
 8002828:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800282c:	9503      	str	r5, [sp, #12]
 800282e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8002832:	9502      	str	r5, [sp, #8]
 8002834:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8002838:	9501      	str	r5, [sp, #4]
 800283a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800283e:	9500      	str	r5, [sp, #0]
 8002840:	f00b fcc6 	bl	800e1d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8002846:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8002848:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800284a:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800284c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800284e:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8002850:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002852:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8002854:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8002856:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002858:	4620      	mov	r0, r4
 800285a:	b00b      	add	sp, #44	@ 0x2c
 800285c:	bd30      	pop	{r4, r5, pc}
 800285e:	bf00      	nop
 8002860:	080158d0 	.word	0x080158d0

08002864 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002864:	2000      	movs	r0, #0
 8002866:	4770      	bx	lr

08002868 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002868:	8081      	strh	r1, [r0, #4]
    }
 800286a:	4770      	bx	lr

0800286c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800286c:	80c1      	strh	r1, [r0, #6]
    }
 800286e:	4770      	bx	lr

08002870 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002870:	8101      	strh	r1, [r0, #8]
    }
 8002872:	4770      	bx	lr

08002874 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002874:	8141      	strh	r1, [r0, #10]
    }
 8002876:	4770      	bx	lr

08002878 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002878:	4770      	bx	lr

0800287a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800287a:	4770      	bx	lr

0800287c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800287c:	4770      	bx	lr

0800287e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800287e:	4770      	bx	lr

08002880 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002880:	4770      	bx	lr

08002882 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002882:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002884:	88c4      	ldrh	r4, [r0, #6]
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	1b12      	subs	r2, r2, r4
 800288a:	8884      	ldrh	r4, [r0, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	1b09      	subs	r1, r1, r4
 8002890:	b212      	sxth	r2, r2
    }
 8002892:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002896:	b209      	sxth	r1, r1
 8002898:	4718      	bx	r3

0800289a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800289a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800289e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80028a6:	6813      	ldr	r3, [r2, #0]
 80028a8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80028aa:	6010      	str	r0, [r2, #0]
    }
 80028ac:	4770      	bx	lr

080028ae <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80028ae:	4770      	bx	lr

080028b0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80028b0:	4770      	bx	lr

080028b2 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80028b2:	4770      	bx	lr

080028b4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80028b4:	4770      	bx	lr

080028b6 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80028b6:	4770      	bx	lr

080028b8 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80028b8:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80028ba:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80028bc:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80028be:	466d      	mov	r5, sp
        rect.width = width;
 80028c0:	8101      	strh	r1, [r0, #8]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c6:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 80028c8:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80028ca:	4628      	mov	r0, r5
 80028cc:	4798      	blx	r3
 80028ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028d2:	343c      	adds	r4, #60	@ 0x3c
 80028d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80028d8:	b005      	add	sp, #20
 80028da:	bd30      	pop	{r4, r5, pc}

080028dc <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80028dc:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80028de:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80028e0:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80028e2:	466d      	mov	r5, sp
        rect.height = height;
 80028e4:	8141      	strh	r1, [r0, #10]
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ea:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 80028ec:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80028ee:	4628      	mov	r0, r5
 80028f0:	4798      	blx	r3
 80028f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028f6:	343c      	adds	r4, #60	@ 0x3c
 80028f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80028fc:	b005      	add	sp, #20
 80028fe:	bd30      	pop	{r4, r5, pc}

08002900 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8002900:	2200      	movs	r2, #0
 8002902:	8002      	strh	r2, [r0, #0]
 8002904:	8042      	strh	r2, [r0, #2]
 8002906:	8082      	strh	r2, [r0, #4]
 8002908:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800290a:	4770      	bx	lr

0800290c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800290c:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8002910:	4770      	bx	lr

08002912 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002912:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8002914:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002916:	4604      	mov	r4, r0
        setX(x);
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800291a:	4615      	mov	r5, r2
        setX(x);
 800291c:	4798      	blx	r3
        setBaselineY(baselineY);
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	4629      	mov	r1, r5
 8002922:	4620      	mov	r0, r4
 8002924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800292a:	4718      	bx	r3

0800292c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800292c:	2000      	movs	r0, #0
 800292e:	4770      	bx	lr

08002930 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8002930:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002932:	4770      	bx	lr

08002934 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8002934:	4770      	bx	lr

08002936 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002936:	4770      	bx	lr

08002938 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8002938:	4770      	bx	lr

0800293a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800293a:	4770      	bx	lr

0800293c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800293c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800293e:	68c2      	ldr	r2, [r0, #12]
 8002940:	6844      	ldr	r4, [r0, #4]
 8002942:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002944:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002946:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800294a:	07d2      	lsls	r2, r2, #31
 800294c:	bf48      	it	mi
 800294e:	5962      	ldrmi	r2, [r4, r5]
 8002950:	689b      	ldr	r3, [r3, #8]
    }
 8002952:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002954:	bf48      	it	mi
 8002956:	58d3      	ldrmi	r3, [r2, r3]
 8002958:	4718      	bx	r3

0800295a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800295a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800295c:	6840      	ldr	r0, [r0, #4]
 800295e:	b130      	cbz	r0, 800296e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	b91a      	cbnz	r2, 800296c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8002964:	68d8      	ldr	r0, [r3, #12]
 8002966:	f000 0001 	and.w	r0, r0, #1
 800296a:	4770      	bx	lr
 800296c:	2001      	movs	r0, #1
    }
 800296e:	4770      	bx	lr

08002970 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8002970:	b510      	push	{r4, lr}
 8002972:	214c      	movs	r1, #76	@ 0x4c
 8002974:	4604      	mov	r4, r0
 8002976:	f010 feed 	bl	8013754 <_ZdlPvj>
 800297a:	4620      	mov	r0, r4
 800297c:	bd10      	pop	{r4, pc}

0800297e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800297e:	b510      	push	{r4, lr}
 8002980:	2110      	movs	r1, #16
 8002982:	4604      	mov	r4, r0
 8002984:	f010 fee6 	bl	8013754 <_ZdlPvj>
 8002988:	4620      	mov	r0, r4
 800298a:	bd10      	pop	{r4, pc}

0800298c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800298c:	b510      	push	{r4, lr}
}
 800298e:	f44f 7116 	mov.w	r1, #600	@ 0x258
Screen1ViewBase::~Screen1ViewBase()
 8002992:	4604      	mov	r4, r0
}
 8002994:	f010 fede 	bl	8013754 <_ZdlPvj>
 8002998:	4620      	mov	r0, r4
 800299a:	bd10      	pop	{r4, pc}

0800299c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800299c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80029a0:	b112      	cbz	r2, 80029a8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80029a2:	6803      	ldr	r3, [r0, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4718      	bx	r3
    }
 80029a8:	4770      	bx	lr

080029aa <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80029aa:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80029ac:	f7ff fff6 	bl	800299c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80029b0:	bd08      	pop	{r3, pc}

080029b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80029b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80029b6:	b11a      	cbz	r2, 80029c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80029b8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80029bc:	b102      	cbz	r2, 80029c0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80029be:	6018      	str	r0, [r3, #0]
        }
    }
 80029c0:	4770      	bx	lr
	...

080029c4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029c4:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029c6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029c8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80029cc:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029ce:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029d0:	b28d      	uxth	r5, r1
 80029d2:	b92b      	cbnz	r3, 80029e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80029d4:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80029d6:	4a11      	ldr	r2, [pc, #68]	@ (8002a1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80029d8:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80029da:	4811      	ldr	r0, [pc, #68]	@ (8002a20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80029dc:	f010 fee8 	bl	80137b0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80029e0:	4910      	ldr	r1, [pc, #64]	@ (8002a24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80029e2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80029e4:	8809      	ldrh	r1, [r1, #0]
 80029e6:	4291      	cmp	r1, r2
 80029e8:	d803      	bhi.n	80029f2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80029ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002a28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80029ec:	4a0b      	ldr	r2, [pc, #44]	@ (8002a1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80029ee:	216d      	movs	r1, #109	@ 0x6d
 80029f0:	e7f3      	b.n	80029da <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80029f2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4798      	blx	r3
 8002a04:	1a29      	subs	r1, r5, r0
 8002a06:	4633      	mov	r3, r6
 8002a08:	4620      	mov	r0, r4
 8002a0a:	b209      	sxth	r1, r1
    }
 8002a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002a10:	4718      	bx	r3
 8002a12:	bf00      	nop
 8002a14:	20012630 	.word	0x20012630
 8002a18:	080150fb 	.word	0x080150fb
 8002a1c:	0801513d 	.word	0x0801513d
 8002a20:	08015178 	.word	0x08015178
 8002a24:	20012634 	.word	0x20012634
 8002a28:	080151bf 	.word	0x080151bf
 8002a2c:	20012638 	.word	0x20012638

08002a30 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8002a30:	f500 7096 	add.w	r0, r0, #300	@ 0x12c
 8002a34:	4288      	cmp	r0, r1
{
 8002a36:	b508      	push	{r3, lr}
    if (&src == &button1)
 8002a38:	d105      	bne.n	8002a46 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002a3a:	f00a f965 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 8002a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 8002a42:	f7ff be99 	b.w	8002778 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 8002a46:	bd08      	pop	{r3, pc}

08002a48 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4e:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8002a52:	6082      	str	r2, [r0, #8]
    }
 8002a54:	4770      	bx	lr

08002a56 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8002a56:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8002a58:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002a5a:	4604      	mov	r4, r0
        setX(x);
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8002a5e:	4615      	mov	r5, r2
        setX(x);
 8002a60:	4798      	blx	r3
        setY(y);
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	4629      	mov	r1, r5
 8002a66:	4620      	mov	r0, r4
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8002a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a6e:	4718      	bx	r3

08002a70 <_ZN8touchgfx6WidgetC1Ev>:
 8002a70:	2200      	movs	r2, #0
 8002a72:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002a76:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002a7a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002a7e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a86:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8002a88:	4a01      	ldr	r2, [pc, #4]	@ (8002a90 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8002a8a:	6002      	str	r2, [r0, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	08015938 	.word	0x08015938

08002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8002a94:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002a96:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002a98:	4604      	mov	r4, r0
 8002a9a:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f011 f88e 	bl	8013bbe <memset>
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ffe4 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002aaa:	6023      	str	r3, [r4, #0]
 8002aac:	882b      	ldrh	r3, [r5, #0]
 8002aae:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002ab0:	23ff      	movs	r3, #255	@ 0xff
    {
        Image::setBitmap(bmp);
 8002ab2:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002ab4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f007 ffc8 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002abe:	4620      	mov	r0, r4
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
 8002ac2:	bf00      	nop
 8002ac4:	08015f14 	.word	0x08015f14

08002ac8 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8002ac8:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002aca:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8002acc:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f011 f875 	bl	8013bbe <memset>
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff ffcb 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8002adc:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002ade:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8002ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8002ae8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8002aec:	2300      	movs	r3, #0
 8002aee:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8002af2:	8723      	strh	r3, [r4, #56]	@ 0x38
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8002af8:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8002afc:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8002afe:	4620      	mov	r0, r4
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	bf00      	nop
 8002b04:	08015da8 	.word	0x08015da8
 8002b08:	0801580c 	.word	0x0801580c

08002b0c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	4604      	mov	r4, r0
 8002b12:	b08d      	sub	sp, #52	@ 0x34
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002b14:	4627      	mov	r7, r4
        : presenter(0)
 8002b16:	2500      	movs	r5, #0
 8002b18:	f00b fd54 	bl	800e5c4 <_ZN8touchgfx6ScreenC1Ev>
 8002b1c:	4bc1      	ldr	r3, [pc, #772]	@ (8002e24 <_ZN15Screen1ViewBaseC1Ev+0x318>)
 8002b1e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002b20:	f847 3b40 	str.w	r3, [r7], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002b24:	2226      	movs	r2, #38	@ 0x26
 8002b26:	4629      	mov	r1, r5
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f011 f848 	bl	8013bbe <memset>
 8002b2e:	4638      	mov	r0, r7
 8002b30:	f7ff ff9e 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
 8002b34:	4bbc      	ldr	r3, [pc, #752]	@ (8002e28 <_ZN15Screen1ViewBaseC1Ev+0x31c>)
 8002b36:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b38:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 8002b3c:	23ff      	movs	r3, #255	@ 0xff
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002b3e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002b42:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8002b46:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002b4a:	a90a      	add	r1, sp, #40	@ 0x28
 8002b4c:	4650      	mov	r0, sl
        : color(col)
 8002b4e:	66a5      	str	r5, [r4, #104]	@ 0x68
        : TextArea()
 8002b50:	f104 08e0 	add.w	r8, r4, #224	@ 0xe0
 8002b54:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8002b58:	f7ff ff9c 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002b5c:	4648      	mov	r0, r9
 8002b5e:	f7ff ffb3 	bl	8002ac8 <_ZN8touchgfx8TextAreaC1Ev>
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff ffb0 	bl	8002ac8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8002b68:	4bb0      	ldr	r3, [pc, #704]	@ (8002e2c <_ZN15Screen1ViewBaseC1Ev+0x320>)
 8002b6a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8002b6e:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002b72:	2226      	movs	r2, #38	@ 0x26
 8002b74:	4629      	mov	r1, r5
 8002b76:	4618      	mov	r0, r3
 8002b78:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f011 f81e 	bl	8013bbe <memset>
 8002b82:	9800      	ldr	r0, [sp, #0]
 8002b84:	f7ff ff74 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8002b88:	f04f 0301 	mov.w	r3, #1
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002b8c:	4aa8      	ldr	r2, [pc, #672]	@ (8002e30 <_ZN15Screen1ViewBaseC1Ev+0x324>)
 8002b8e:	f884 3150 	strb.w	r3, [r4, #336]	@ 0x150
 8002b92:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 8002b96:	f8c4 212c 	str.w	r2, [r4, #300]	@ 0x12c
 8002b9a:	a90a      	add	r1, sp, #40	@ 0x28
 8002b9c:	f8a4 615a 	strh.w	r6, [r4, #346]	@ 0x15a
 8002ba0:	f8a4 615c 	strh.w	r6, [r4, #348]	@ 0x15c
 8002ba4:	f884 615e 	strb.w	r6, [r4, #350]	@ 0x15e
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 8002bae:	f884 5158 	strb.w	r5, [r4, #344]	@ 0x158
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8002bb8:	f7ff ff6c 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002bbc:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 8002bc0:	4618      	mov	r0, r3
        : TextArea()
 8002bc2:	f504 7bea 	add.w	fp, r4, #468	@ 0x1d4
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	f7ff ff7e 	bl	8002ac8 <_ZN8touchgfx8TextAreaC1Ev>
 8002bcc:	4658      	mov	r0, fp
 8002bce:	f7ff ff7b 	bl	8002ac8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8002bd2:	4b96      	ldr	r3, [pc, #600]	@ (8002e2c <_ZN15Screen1ViewBaseC1Ev+0x320>)
 8002bd4:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
        : pobject(pObject), pmemfun(pmemfun_1)
 8002bd8:	4b96      	ldr	r3, [pc, #600]	@ (8002e34 <_ZN15Screen1ViewBaseC1Ev+0x328>)
 8002bda:	f8c4 521c 	str.w	r5, [r4, #540]	@ 0x21c
 8002bde:	e9c4 3492 	strd	r3, r4, [r4, #584]	@ 0x248
 8002be2:	4b95      	ldr	r3, [pc, #596]	@ (8002e38 <_ZN15Screen1ViewBaseC1Ev+0x32c>)
        setXY(x, y);
 8002be4:	462a      	mov	r2, r5
 8002be6:	e9c4 3594 	strd	r3, r5, [r4, #592]	@ 0x250
 8002bea:	4638      	mov	r0, r7
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7ff ff32 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	21f0      	movs	r1, #240	@ 0xf0
 8002bf6:	f7ff fe3b 	bl	8002870 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002c00:	f7ff fe38 	bl	8002874 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002c04:	1d26      	adds	r6, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002c06:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002c0a:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002c0c:	4639      	mov	r1, r7
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f006 f83c 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background_1.setXY(28, 113);
 8002c14:	2271      	movs	r2, #113	@ 0x71
 8002c16:	4650      	mov	r0, sl
 8002c18:	211c      	movs	r1, #28
 8002c1a:	f7ff ff1c 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
    background_1.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8002c1e:	4650      	mov	r0, sl
 8002c20:	a90a      	add	r1, sp, #40	@ 0x28
 8002c22:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8002c26:	f007 ff12 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f006 f82d 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1_1.setXY(34, 125);
 8002c32:	227d      	movs	r2, #125	@ 0x7d
 8002c34:	4648      	mov	r0, r9
 8002c36:	2122      	movs	r1, #34	@ 0x22
 8002c38:	f7ff ff0d 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8002c3c:	af04      	add	r7, sp, #16
        color = newColor;
 8002c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e3c <_ZN15Screen1ViewBaseC1Ev+0x330>)
 8002c40:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
        boundingArea = calculateBoundingArea();
 8002c44:	4649      	mov	r1, r9
 8002c46:	4638      	mov	r0, r7
        linespace = space;
 8002c48:	f8a4 50cc 	strh.w	r5, [r4, #204]	@ 0xcc
        boundingArea = calculateBoundingArea();
 8002c4c:	f007 fac0 	bl	800a1d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8002c50:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002c54:	f104 03d4 	add.w	r3, r4, #212	@ 0xd4
 8002c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c5c:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8002e60 <_ZN15Screen1ViewBaseC1Ev+0x354>
 8002c60:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z01K));
 8002c64:	4648      	mov	r0, r9
 8002c66:	a90a      	add	r1, sp, #40	@ 0x28
 8002c68:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8002c6c:	f007 fd58 	bl	800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002c70:	4649      	mov	r1, r9
 8002c72:	4630      	mov	r0, r6
 8002c74:	f006 f80a 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    screen1point_1.setXY(102, 125);
 8002c78:	227d      	movs	r2, #125	@ 0x7d
 8002c7a:	2166      	movs	r1, #102	@ 0x66
 8002c7c:	4640      	mov	r0, r8
 8002c7e:	f7ff feea 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8002c82:	4b6f      	ldr	r3, [pc, #444]	@ (8002e40 <_ZN15Screen1ViewBaseC1Ev+0x334>)
 8002c84:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
        boundingArea = calculateBoundingArea();
 8002c88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
        linespace = space;
 8002c8c:	f8a4 5114 	strh.w	r5, [r4, #276]	@ 0x114
        boundingArea = calculateBoundingArea();
 8002c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002c94:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 8002e64 <_ZN15Screen1ViewBaseC1Ev+0x358>
 8002c98:	4641      	mov	r1, r8
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	4798      	blx	r3
 8002c9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002ca2:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(screen1point_1Buffer, SCREEN1POINT_1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZWTR).getText());
 8002caa:	f504 7308 	add.w	r3, r4, #544	@ 0x220
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	f8d9 3000 	ldr.w	r3, [r9]
 8002cb4:	b92b      	cbnz	r3, 8002cc2 <_ZN15Screen1ViewBaseC1Ev+0x1b6>
 8002cb6:	4b63      	ldr	r3, [pc, #396]	@ (8002e44 <_ZN15Screen1ViewBaseC1Ev+0x338>)
 8002cb8:	4a63      	ldr	r2, [pc, #396]	@ (8002e48 <_ZN15Screen1ViewBaseC1Ev+0x33c>)
 8002cba:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002cbc:	4863      	ldr	r0, [pc, #396]	@ (8002e4c <_ZN15Screen1ViewBaseC1Ev+0x340>)
 8002cbe:	f010 fd77 	bl	80137b0 <__assert_func>
 8002cc2:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <_ZN15Screen1ViewBaseC1Ev+0x344>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d803      	bhi.n	8002cd2 <_ZN15Screen1ViewBaseC1Ev+0x1c6>
 8002cca:	4b62      	ldr	r3, [pc, #392]	@ (8002e54 <_ZN15Screen1ViewBaseC1Ev+0x348>)
 8002ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8002e48 <_ZN15Screen1ViewBaseC1Ev+0x33c>)
 8002cce:	2161      	movs	r1, #97	@ 0x61
 8002cd0:	e7f4      	b.n	8002cbc <_ZN15Screen1ViewBaseC1Ev+0x1b0>
        return texts->getText(typedTextId);
 8002cd2:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <_ZN15Screen1ViewBaseC1Ev+0x34c>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	f000 fd52 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 8002cdc:	210a      	movs	r1, #10
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8002e5c <_ZN15Screen1ViewBaseC1Ev+0x350>)
 8002ce2:	9803      	ldr	r0, [sp, #12]
 8002ce4:	f00d fda8 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8002ce8:	9a03      	ldr	r2, [sp, #12]
 8002cea:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
    screen1point_1.resizeToCurrentText();
 8002cee:	4640      	mov	r0, r8
 8002cf0:	f007 fcf6 	bl	800a6e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8002cf4:	2302      	movs	r3, #2
    screen1point_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M5WA));
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	a90a      	add	r1, sp, #40	@ 0x28
 8002cfa:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8002cfe:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8002d02:	f007 fd0d 	bl	800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002d06:	4641      	mov	r1, r8
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f005 ffbf 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 171);
 8002d0e:	9800      	ldr	r0, [sp, #0]
 8002d10:	22ab      	movs	r2, #171	@ 0xab
 8002d12:	2114      	movs	r1, #20
 8002d14:	f7ff fe9f 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8002d18:	f04f 0805 	mov.w	r8, #5
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8002d1c:	aa0a      	add	r2, sp, #40	@ 0x28
 8002d1e:	9800      	ldr	r0, [sp, #0]
 8002d20:	f8ad 8024 	strh.w	r8, [sp, #36]	@ 0x24
 8002d24:	a909      	add	r1, sp, #36	@ 0x24
 8002d26:	f8ad 8028 	strh.w	r8, [sp, #40]	@ 0x28
 8002d2a:	f007 fd57 	bl	800a7dc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8002d2e:	f504 7312 	add.w	r3, r4, #584	@ 0x248
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002d32:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
 8002d36:	9900      	ldr	r1, [sp, #0]
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f005 ffa7 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setXY(28, 48);
 8002d3e:	2230      	movs	r2, #48	@ 0x30
 8002d40:	9802      	ldr	r0, [sp, #8]
 8002d42:	211c      	movs	r1, #28
 8002d44:	f7ff fe87 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8002d48:	9802      	ldr	r0, [sp, #8]
 8002d4a:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8002d4e:	a90a      	add	r1, sp, #40	@ 0x28
 8002d50:	f007 fe7d 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d54:	9902      	ldr	r1, [sp, #8]
 8002d56:	4630      	mov	r0, r6
 8002d58:	f005 ff98 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(34, 60);
 8002d5c:	9801      	ldr	r0, [sp, #4]
 8002d5e:	223c      	movs	r2, #60	@ 0x3c
 8002d60:	2122      	movs	r1, #34	@ 0x22
 8002d62:	f7ff fe78 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8002d66:	4a35      	ldr	r2, [pc, #212]	@ (8002e3c <_ZN15Screen1ViewBaseC1Ev+0x330>)
        boundingArea = calculateBoundingArea();
 8002d68:	9901      	ldr	r1, [sp, #4]
        color = newColor;
 8002d6a:	f8c4 21bc 	str.w	r2, [r4, #444]	@ 0x1bc
        linespace = space;
 8002d6e:	f8a4 51c0 	strh.w	r5, [r4, #448]	@ 0x1c0
        boundingArea = calculateBoundingArea();
 8002d72:	4638      	mov	r0, r7
 8002d74:	f007 fa2c 	bl	800a1d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8002d78:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002d7c:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 8002d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d84:	2303      	movs	r3, #3
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BJAD));
 8002d86:	9801      	ldr	r0, [sp, #4]
 8002d88:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8002d8c:	a90a      	add	r1, sp, #40	@ 0x28
 8002d8e:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8002d92:	f007 fcc5 	bl	800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002d96:	9901      	ldr	r1, [sp, #4]
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f005 ff77 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    screen1point.setXY(132, 60);
 8002d9e:	223c      	movs	r2, #60	@ 0x3c
 8002da0:	2184      	movs	r1, #132	@ 0x84
 8002da2:	4658      	mov	r0, fp
 8002da4:	f7ff fe57 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8002da8:	f8d4 31d4 	ldr.w	r3, [r4, #468]	@ 0x1d4
        color = newColor;
 8002dac:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <_ZN15Screen1ViewBaseC1Ev+0x334>)
        boundingArea = calculateBoundingArea();
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8002db2:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
        linespace = space;
 8002db6:	f8a4 5208 	strh.w	r5, [r4, #520]	@ 0x208
        boundingArea = calculateBoundingArea();
 8002dba:	4659      	mov	r1, fp
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	4798      	blx	r3
 8002dc0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002dc4:	f504 7304 	add.w	r3, r4, #528	@ 0x210
 8002dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002dcc:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PAAG).getText());
 8002dd0:	f504 750d 	add.w	r5, r4, #564	@ 0x234
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f43f af6e 	beq.w	8002cb6 <_ZN15Screen1ViewBaseC1Ev+0x1aa>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002dda:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <_ZN15Screen1ViewBaseC1Ev+0x344>)
 8002ddc:	8813      	ldrh	r3, [r2, #0]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	f67f af73 	bls.w	8002cca <_ZN15Screen1ViewBaseC1Ev+0x1be>
        return texts->getText(typedTextId);
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <_ZN15Screen1ViewBaseC1Ev+0x34c>)
 8002de6:	2104      	movs	r1, #4
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f000 fcc9 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 8002dee:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <_ZN15Screen1ViewBaseC1Ev+0x350>)
 8002df0:	4603      	mov	r3, r0
 8002df2:	210a      	movs	r1, #10
 8002df4:	4628      	mov	r0, r5
 8002df6:	f00d fd1f 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    screen1point.resizeToCurrentText();
 8002dfa:	4658      	mov	r0, fp
 8002dfc:	f8c4 521c 	str.w	r5, [r4, #540]	@ 0x21c
 8002e00:	f007 fc6e 	bl	800a6e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    screen1point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9WWM));
 8002e04:	a90a      	add	r1, sp, #40	@ 0x28
 8002e06:	4658      	mov	r0, fp
        : typedTextId(id)
 8002e08:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8002e0c:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 8002e10:	f007 fc86 	bl	800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002e14:	4630      	mov	r0, r6
 8002e16:	4659      	mov	r1, fp
 8002e18:	f005 ff38 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	b00d      	add	sp, #52	@ 0x34
 8002e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e24:	08015a48 	.word	0x08015a48
 8002e28:	08015e38 	.word	0x08015e38
 8002e2c:	080159a0 	.word	0x080159a0
 8002e30:	08015ea0 	.word	0x08015ea0
 8002e34:	08015a30 	.word	0x08015a30
 8002e38:	08002a31 	.word	0x08002a31
 8002e3c:	ffeb1313 	.word	0xffeb1313
 8002e40:	ffe62525 	.word	0xffe62525
 8002e44:	080150fb 	.word	0x080150fb
 8002e48:	080151fd 	.word	0x080151fd
 8002e4c:	08015178 	.word	0x08015178
 8002e50:	20012634 	.word	0x20012634
 8002e54:	080151bf 	.word	0x080151bf
 8002e58:	2001263c 	.word	0x2001263c
 8002e5c:	08015248 	.word	0x08015248
 8002e60:	0801580c 	.word	0x0801580c
 8002e64:	20012630 	.word	0x20012630

08002e68 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002e68:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002e6a:	4770      	bx	lr

08002e6c <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002e6c:	4770      	bx	lr

08002e6e <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002e6e:	4770      	bx	lr

08002e70 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002e70:	4770      	bx	lr

08002e72 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002e72:	4770      	bx	lr

08002e74 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002e74:	4770      	bx	lr

08002e76 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002e76:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002e78:	68c2      	ldr	r2, [r0, #12]
 8002e7a:	6844      	ldr	r4, [r0, #4]
 8002e7c:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002e7e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002e80:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002e84:	07d2      	lsls	r2, r2, #31
 8002e86:	bf48      	it	mi
 8002e88:	5962      	ldrmi	r2, [r4, r5]
 8002e8a:	689b      	ldr	r3, [r3, #8]
    }
 8002e8c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002e8e:	bf48      	it	mi
 8002e90:	58d3      	ldrmi	r3, [r2, r3]
 8002e92:	4718      	bx	r3

08002e94 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002e94:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002e96:	6840      	ldr	r0, [r0, #4]
 8002e98:	b130      	cbz	r0, 8002ea8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	b91a      	cbnz	r2, 8002ea6 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002e9e:	68d8      	ldr	r0, [r3, #12]
 8002ea0:	f000 0001 	and.w	r0, r0, #1
 8002ea4:	4770      	bx	lr
 8002ea6:	2001      	movs	r0, #1
    }
 8002ea8:	4770      	bx	lr

08002eaa <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002eaa:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002eae:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002eb2:	4770      	bx	lr

08002eb4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002eb4:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002eb6:	3038      	adds	r0, #56	@ 0x38
 8002eb8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002ebc:	b113      	cbz	r3, 8002ec4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002ebe:	3136      	adds	r1, #54	@ 0x36
 8002ec0:	f007 bdc5 	b.w	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002ec4:	3134      	adds	r1, #52	@ 0x34
 8002ec6:	e7fb      	b.n	8002ec0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002ec8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	2164      	movs	r1, #100	@ 0x64
 8002ecc:	4604      	mov	r4, r0
 8002ece:	f010 fc41 	bl	8013754 <_ZdlPvj>
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	bd10      	pop	{r4, pc}

08002ed6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	2110      	movs	r1, #16
 8002eda:	4604      	mov	r4, r0
 8002edc:	f010 fc3a 	bl	8013754 <_ZdlPvj>
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd10      	pop	{r4, pc}

08002ee4 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002ee4:	b510      	push	{r4, lr}
}
 8002ee6:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
Screen2ViewBase::~Screen2ViewBase()
 8002eea:	4604      	mov	r4, r0
}
 8002eec:	f010 fc32 	bl	8013754 <_ZdlPvj>
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	bd10      	pop	{r4, pc}

08002ef4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002ef8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002efa:	b150      	cbz	r0, 8002f12 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4798      	blx	r3
 8002f02:	b130      	cbz	r0, 8002f12 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002f04:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	4621      	mov	r1, r4
 8002f0a:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002f10:	4718      	bx	r3
    }
 8002f12:	bd10      	pop	{r4, pc}

08002f14 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002f14:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002f16:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002f18:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002f20:	b90b      	cbnz	r3, 8002f26 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002f22:	b116      	cbz	r6, 8002f2a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002f26:	2e00      	cmp	r6, #0
 8002f28:	d0fc      	beq.n	8002f24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	4620      	mov	r0, r4
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3c:	4798      	blx	r3
            invalidate();
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	4620      	mov	r0, r4
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002f46:	2e00      	cmp	r6, #0
 8002f48:	d0ec      	beq.n	8002f24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002f4a:	792b      	ldrb	r3, [r5, #4]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d1e9      	bne.n	8002f24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	4620      	mov	r0, r4
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002f5c:	4718      	bx	r3

08002f5e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002f5e:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002f62:	428b      	cmp	r3, r1
{
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002f68:	d109      	bne.n	8002f7e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002f6a:	f009 fecd 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002f6e:	f7ff fbf3 	bl	8002758 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	4620      	mov	r0, r4
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002f7c:	4718      	bx	r3
}
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002f80:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002f86:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002f88:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002f8a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002f8e:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002f90:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002f92:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002f94:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002f96:	f00d fd09 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002f9a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002f9e:	4607      	mov	r7, r0
 8002fa0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002fa4:	4640      	mov	r0, r8
 8002fa6:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002faa:	f00d fd33 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fb2:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002fb6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002fba:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002fbe:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002fc2:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002fc6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002fca:	b212      	sxth	r2, r2
 8002fcc:	b209      	sxth	r1, r1
 8002fce:	f7ff fd42 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002fde:	4718      	bx	r3

08002fe0 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002fea:	f7ff fd34 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	4798      	blx	r3
        setHeight(height);
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003004:	4718      	bx	r3
	...

08003008 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	4604      	mov	r4, r0
 800300e:	b093      	sub	sp, #76	@ 0x4c
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8003010:	46a0      	mov	r8, r4
 8003012:	2500      	movs	r5, #0
 8003014:	f00b fad6 	bl	800e5c4 <_ZN8touchgfx6ScreenC1Ev>
 8003018:	4bca      	ldr	r3, [pc, #808]	@ (8003344 <_ZN15Screen2ViewBaseC1Ev+0x33c>)
 800301a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800301c:	f848 3b40 	str.w	r3, [r8], #64
        : Widget(), alpha(255), color(0)
 8003020:	2226      	movs	r2, #38	@ 0x26
 8003022:	4629      	mov	r1, r5
 8003024:	4640      	mov	r0, r8
 8003026:	f010 fdca 	bl	8013bbe <memset>
 800302a:	4640      	mov	r0, r8
 800302c:	f7ff fd20 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
 8003030:	4bc5      	ldr	r3, [pc, #788]	@ (8003348 <_ZN15Screen2ViewBaseC1Ev+0x340>)
 8003032:	6423      	str	r3, [r4, #64]	@ 0x40
 8003034:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8003038:	23ff      	movs	r3, #255	@ 0xff
 800303a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800303e:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8003042:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8003046:	a910      	add	r1, sp, #64	@ 0x40
 8003048:	66a5      	str	r5, [r4, #104]	@ 0x68
 800304a:	4658      	mov	r0, fp
 800304c:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8003050:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003054:	f7ff fd1e 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003058:	a910      	add	r1, sp, #64	@ 0x40
 800305a:	4650      	mov	r0, sl
 800305c:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003060:	f7ff fd18 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003064:	a910      	add	r1, sp, #64	@ 0x40
 8003066:	4648      	mov	r0, r9
 8003068:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 800306c:	f7ff fd12 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003070:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8003074:	a910      	add	r1, sp, #64	@ 0x40
 8003076:	4618      	mov	r0, r3
 8003078:	9302      	str	r3, [sp, #8]
 800307a:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 800307e:	f7ff fd09 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003082:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8003086:	a910      	add	r1, sp, #64	@ 0x40
 8003088:	4618      	mov	r0, r3
 800308a:	9303      	str	r3, [sp, #12]
 800308c:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003090:	f7ff fd00 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003094:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8003098:	a910      	add	r1, sp, #64	@ 0x40
 800309a:	4618      	mov	r0, r3
 800309c:	9304      	str	r3, [sp, #16]
 800309e:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 80030a2:	f7ff fcf7 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030a6:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 80030aa:	9305      	str	r3, [sp, #20]
        : pressed(false), alpha(255), action(0)
 80030ac:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80030b0:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 80030b4:	f240 1301 	movw	r3, #257	@ 0x101
 80030b8:	f8a4 3198 	strh.w	r3, [r4, #408]	@ 0x198
        : T()
 80030bc:	4ba3      	ldr	r3, [pc, #652]	@ (800334c <_ZN15Screen2ViewBaseC1Ev+0x344>)
 80030be:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 80030c2:	f504 77d6 	add.w	r7, r4, #428	@ 0x1ac
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 80030ce:	a910      	add	r1, sp, #64	@ 0x40
 80030d0:	4638      	mov	r0, r7
        : x(0), y(0), width(0), height(0)
 80030d2:	e9c4 555e 	strd	r5, r5, [r4, #376]	@ 0x178
 80030d6:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
          nextSibling(0),
 80030da:	e9c4 5562 	strd	r5, r5, [r4, #392]	@ 0x188
          cachedAbsX(0),
 80030de:	e9c4 5564 	strd	r5, r5, [r4, #400]	@ 0x190
          firstChild(0)
 80030e2:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 80030e6:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 80030ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80030ee:	f7ff fcd1 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 80030f2:	4639      	mov	r1, r7
 80030f4:	9805      	ldr	r0, [sp, #20]
 80030f6:	f005 fdc9 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80030fa:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 80030fe:	4618      	mov	r0, r3
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003100:	f504 7701 	add.w	r7, r4, #516	@ 0x204
 8003104:	a910      	add	r1, sp, #64	@ 0x40
 8003106:	9306      	str	r3, [sp, #24]
 8003108:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 800310c:	f7ff fcc2 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003110:	2226      	movs	r2, #38	@ 0x26
 8003112:	4629      	mov	r1, r5
 8003114:	4638      	mov	r0, r7
 8003116:	f010 fd52 	bl	8013bbe <memset>
 800311a:	4638      	mov	r0, r7
 800311c:	f7ff fca8 	bl	8002a70 <_ZN8touchgfx6WidgetC1Ev>
 8003120:	4b8b      	ldr	r3, [pc, #556]	@ (8003350 <_ZN15Screen2ViewBaseC1Ev+0x348>)
 8003122:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8003126:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 800312e:	e9c4 3591 	strd	r3, r5, [r4, #580]	@ 0x244
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003132:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
 8003136:	f504 7314 	add.w	r3, r4, #592	@ 0x250
        : TextAreaWithWildcardBase(), wc1(0)
 800313a:	4a86      	ldr	r2, [pc, #536]	@ (8003354 <_ZN15Screen2ViewBaseC1Ev+0x34c>)
 800313c:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
 8003140:	f8a4 6230 	strh.w	r6, [r4, #560]	@ 0x230
 8003144:	a910      	add	r1, sp, #64	@ 0x40
 8003146:	4618      	mov	r0, r3
        : color(col)
 8003148:	f8c4 5234 	str.w	r5, [r4, #564]	@ 0x234
 800314c:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003150:	f8c4 5240 	str.w	r5, [r4, #576]	@ 0x240
 8003154:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
 8003158:	9307      	str	r3, [sp, #28]
 800315a:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 800315e:	f7ff fc99 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003162:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 8003166:	a910      	add	r1, sp, #64	@ 0x40
 8003168:	4618      	mov	r0, r3
 800316a:	9308      	str	r3, [sp, #32]
 800316c:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003170:	f7ff fc90 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003174:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 8003178:	a910      	add	r1, sp, #64	@ 0x40
 800317a:	4618      	mov	r0, r3
 800317c:	9309      	str	r3, [sp, #36]	@ 0x24
 800317e:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003182:	f7ff fc87 	bl	8002a94 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8003186:	4b74      	ldr	r3, [pc, #464]	@ (8003358 <_ZN15Screen2ViewBaseC1Ev+0x350>)
 8003188:	e9c4 34ba 	strd	r3, r4, [r4, #744]	@ 0x2e8
 800318c:	4b73      	ldr	r3, [pc, #460]	@ (800335c <_ZN15Screen2ViewBaseC1Ev+0x354>)
 800318e:	e9c4 35bc 	strd	r3, r5, [r4, #752]	@ 0x2f0
    __background.setPosition(0, 0, 240, 320);
 8003192:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003196:	462a      	mov	r2, r5
 8003198:	4640      	mov	r0, r8
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4629      	mov	r1, r5
 800319e:	23f0      	movs	r3, #240	@ 0xf0
 80031a0:	1d26      	adds	r6, r4, #4
 80031a2:	f7ff ff1d 	bl	8002fe0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80031a6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80031aa:	66a3      	str	r3, [r4, #104]	@ 0x68
 80031ac:	4641      	mov	r1, r8
 80031ae:	4630      	mov	r0, r6
 80031b0:	f005 fd6c 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 80031b4:	462a      	mov	r2, r5
 80031b6:	4629      	mov	r1, r5
 80031b8:	4658      	mov	r0, fp
 80031ba:	f7ff fc4c 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 80031be:	f04f 030a 	mov.w	r3, #10
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 80031c2:	a910      	add	r1, sp, #64	@ 0x40
 80031c4:	4658      	mov	r0, fp
 80031c6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80031ca:	f007 fc40 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031ce:	4659      	mov	r1, fp
 80031d0:	4630      	mov	r0, r6
        visible = vis;
 80031d2:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 80031d6:	f005 fd59 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 80031da:	462a      	mov	r2, r5
 80031dc:	4650      	mov	r0, sl
 80031de:	4629      	mov	r1, r5
 80031e0:	f7ff fc39 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 80031e4:	2309      	movs	r3, #9
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 80031e6:	4650      	mov	r0, sl
 80031e8:	a910      	add	r1, sp, #64	@ 0x40
 80031ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80031ee:	f007 fc2e 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031f2:	4651      	mov	r1, sl
 80031f4:	4630      	mov	r0, r6
 80031f6:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 80031fa:	f005 fd47 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 80031fe:	462a      	mov	r2, r5
 8003200:	4648      	mov	r0, r9
 8003202:	4629      	mov	r1, r5
 8003204:	f7ff fc27 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8003208:	2308      	movs	r3, #8
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 800320a:	4648      	mov	r0, r9
 800320c:	a910      	add	r1, sp, #64	@ 0x40
 800320e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003212:	f007 fc1c 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003216:	4649      	mov	r1, r9
 8003218:	4630      	mov	r0, r6
 800321a:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 800321e:	f005 fd35 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8003222:	462a      	mov	r2, r5
 8003224:	9802      	ldr	r0, [sp, #8]
 8003226:	4629      	mov	r1, r5
 8003228:	f7ff fc15 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 800322c:	f04f 0807 	mov.w	r8, #7
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8003230:	9802      	ldr	r0, [sp, #8]
 8003232:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 8003236:	a910      	add	r1, sp, #64	@ 0x40
 8003238:	f007 fc09 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800323c:	9902      	ldr	r1, [sp, #8]
 800323e:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8003242:	4630      	mov	r0, r6
 8003244:	f005 fd22 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8003248:	462a      	mov	r2, r5
 800324a:	9803      	ldr	r0, [sp, #12]
 800324c:	4629      	mov	r1, r5
 800324e:	f7ff fc02 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8003252:	f04f 0906 	mov.w	r9, #6
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8003256:	9803      	ldr	r0, [sp, #12]
 8003258:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 800325c:	a910      	add	r1, sp, #64	@ 0x40
 800325e:	f007 fbf6 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003262:	9903      	ldr	r1, [sp, #12]
 8003264:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 8003268:	4630      	mov	r0, r6
 800326a:	f005 fd0f 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    car.setXY(95, 160);
 800326e:	22a0      	movs	r2, #160	@ 0xa0
 8003270:	9804      	ldr	r0, [sp, #16]
 8003272:	215f      	movs	r1, #95	@ 0x5f
 8003274:	f7ff fbef 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8003278:	2304      	movs	r3, #4
    car.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 800327a:	9804      	ldr	r0, [sp, #16]
 800327c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003280:	a910      	add	r1, sp, #64	@ 0x40
 8003282:	f007 fbe4 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003286:	9904      	ldr	r1, [sp, #16]
 8003288:	4630      	mov	r0, r6
 800328a:	f005 fcff 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800328e:	2301      	movs	r3, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8003290:	9805      	ldr	r0, [sp, #20]
 8003292:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8003296:	aa10      	add	r2, sp, #64	@ 0x40
 8003298:	a90f      	add	r1, sp, #60	@ 0x3c
 800329a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800329e:	f7ff fe6f 	bl	8002f80 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 80032a2:	f504 733a 	add.w	r3, r4, #744	@ 0x2e8
        action = &callback;
 80032a6:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 80032aa:	2320      	movs	r3, #32
 80032ac:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80032b0:	9805      	ldr	r0, [sp, #20]
        rect.x = x;
 80032b2:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 80032b6:	21cc      	movs	r1, #204	@ 0xcc
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	f7ff fe91 	bl	8002fe0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80032be:	9905      	ldr	r1, [sp, #20]
 80032c0:	4630      	mov	r0, r6
 80032c2:	f005 fce3 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 56);
 80032c6:	2238      	movs	r2, #56	@ 0x38
 80032c8:	9806      	ldr	r0, [sp, #24]
 80032ca:	213f      	movs	r1, #63	@ 0x3f
 80032cc:	f7ff fbc3 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 80032d0:	2303      	movs	r3, #3
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 80032d2:	9806      	ldr	r0, [sp, #24]
 80032d4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80032d8:	a910      	add	r1, sp, #64	@ 0x40
 80032da:	f007 fbb8 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80032de:	9906      	ldr	r1, [sp, #24]
 80032e0:	4630      	mov	r0, r6
 80032e2:	f005 fcd3 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    point.setPosition(173, 0, 67, 20);
 80032e6:	2314      	movs	r3, #20
 80032e8:	462a      	mov	r2, r5
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	21ad      	movs	r1, #173	@ 0xad
 80032ee:	2343      	movs	r3, #67	@ 0x43
 80032f0:	4638      	mov	r0, r7
 80032f2:	f7ff fe75 	bl	8002fe0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <_ZN15Screen2ViewBaseC1Ev+0x358>)
 80032f8:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
        boundingArea = calculateBoundingArea();
 80032fc:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
        linespace = space;
 8003300:	f8a4 5238 	strh.w	r5, [r4, #568]	@ 0x238
        boundingArea = calculateBoundingArea();
 8003304:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
 8003308:	4650      	mov	r0, sl
 800330a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800330e:	4639      	mov	r1, r7
 8003310:	4798      	blx	r3
 8003312:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8003316:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 800331a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800331e:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <_ZN15Screen2ViewBaseC1Ev+0x35c>)
 8003320:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(pointBuffer, POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NDHN).getText());
 8003322:	f504 7a35 	add.w	sl, r4, #724	@ 0x2d4
 8003326:	b92b      	cbnz	r3, 8003334 <_ZN15Screen2ViewBaseC1Ev+0x32c>
 8003328:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <_ZN15Screen2ViewBaseC1Ev+0x360>)
 800332a:	4a10      	ldr	r2, [pc, #64]	@ (800336c <_ZN15Screen2ViewBaseC1Ev+0x364>)
 800332c:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800332e:	4810      	ldr	r0, [pc, #64]	@ (8003370 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8003330:	f010 fa3e 	bl	80137b0 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d81f      	bhi.n	800337c <_ZN15Screen2ViewBaseC1Ev+0x374>
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <_ZN15Screen2ViewBaseC1Ev+0x370>)
 800333e:	4a0b      	ldr	r2, [pc, #44]	@ (800336c <_ZN15Screen2ViewBaseC1Ev+0x364>)
 8003340:	2161      	movs	r1, #97	@ 0x61
 8003342:	e7f4      	b.n	800332e <_ZN15Screen2ViewBaseC1Ev+0x326>
 8003344:	08015b34 	.word	0x08015b34
 8003348:	08015e38 	.word	0x08015e38
 800334c:	08015a7c 	.word	0x08015a7c
 8003350:	0801580c 	.word	0x0801580c
 8003354:	080159a0 	.word	0x080159a0
 8003358:	08015b1c 	.word	0x08015b1c
 800335c:	08002f5f 	.word	0x08002f5f
 8003360:	fff50a0a 	.word	0xfff50a0a
 8003364:	20012630 	.word	0x20012630
 8003368:	080150fb 	.word	0x080150fb
 800336c:	080151fd 	.word	0x080151fd
 8003370:	08015178 	.word	0x08015178
 8003374:	20012634 	.word	0x20012634
 8003378:	080151bf 	.word	0x080151bf
        return texts->getText(typedTextId);
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <_ZN15Screen2ViewBaseC1Ev+0x40c>)
 800337e:	4649      	mov	r1, r9
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	f000 f9fd 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 8003386:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <_ZN15Screen2ViewBaseC1Ev+0x410>)
 8003388:	4603      	mov	r3, r0
 800338a:	210a      	movs	r1, #10
 800338c:	4650      	mov	r0, sl
 800338e:	f00d fa53 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003392:	4b22      	ldr	r3, [pc, #136]	@ (800341c <_ZN15Screen2ViewBaseC1Ev+0x414>)
        wc1 = value;
 8003394:	f8c4 a24c 	str.w	sl, [r4, #588]	@ 0x24c
    point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PQ4Q));
 8003398:	a910      	add	r1, sp, #64	@ 0x40
 800339a:	4638      	mov	r0, r7
 800339c:	9310      	str	r3, [sp, #64]	@ 0x40
 800339e:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 80033a2:	f007 f9bd 	bl	800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80033a6:	4639      	mov	r1, r7
 80033a8:	4630      	mov	r0, r6
 80033aa:	f005 fc6f 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart1.setXY(0, 0);
 80033ae:	462a      	mov	r2, r5
 80033b0:	9807      	ldr	r0, [sp, #28]
 80033b2:	4629      	mov	r1, r5
 80033b4:	f7ff fb4f 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 80033b8:	2702      	movs	r7, #2
    heart1.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 80033ba:	9807      	ldr	r0, [sp, #28]
 80033bc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80033c0:	a910      	add	r1, sp, #64	@ 0x40
 80033c2:	f007 fb44 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80033c6:	9907      	ldr	r1, [sp, #28]
 80033c8:	4630      	mov	r0, r6
 80033ca:	f005 fc5f 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart2.setXY(18, 0);
 80033ce:	462a      	mov	r2, r5
 80033d0:	9808      	ldr	r0, [sp, #32]
 80033d2:	2112      	movs	r1, #18
 80033d4:	f7ff fb3f 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
    heart2.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 80033d8:	9808      	ldr	r0, [sp, #32]
 80033da:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80033de:	a910      	add	r1, sp, #64	@ 0x40
 80033e0:	f007 fb35 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80033e4:	9908      	ldr	r1, [sp, #32]
 80033e6:	4630      	mov	r0, r6
 80033e8:	f005 fc50 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart3.setXY(36, 0);
 80033ec:	462a      	mov	r2, r5
 80033ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033f0:	2124      	movs	r1, #36	@ 0x24
 80033f2:	f7ff fb30 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
    heart3.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 80033f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033f8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80033fc:	a910      	add	r1, sp, #64	@ 0x40
 80033fe:	f007 fb26 	bl	800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003402:	4630      	mov	r0, r6
 8003404:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003406:	f005 fc41 	bl	8008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800340a:	4620      	mov	r0, r4
 800340c:	b013      	add	sp, #76	@ 0x4c
 800340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	2001263c 	.word	0x2001263c
 8003418:	08015248 	.word	0x08015248
 800341c:	0801580c 	.word	0x0801580c

08003420 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003420:	4770      	bx	lr
	...

08003424 <_Z23getFont_verdana_10_4bppv>:
{
 8003424:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003426:	4d16      	ldr	r5, [pc, #88]	@ (8003480 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003428:	682c      	ldr	r4, [r5, #0]
 800342a:	f014 0401 	ands.w	r4, r4, #1
{
 800342e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003430:	f3bf 8f5b 	dmb	ish
 8003434:	d120      	bne.n	8003478 <_Z23getFont_verdana_10_4bppv+0x54>
 8003436:	4628      	mov	r0, r5
 8003438:	f010 f98e 	bl	8013758 <__cxa_guard_acquire>
 800343c:	b1e0      	cbz	r0, 8003478 <_Z23getFont_verdana_10_4bppv+0x54>
 800343e:	233f      	movs	r3, #63	@ 0x3f
 8003440:	9309      	str	r3, [sp, #36]	@ 0x24
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003444:	9308      	str	r3, [sp, #32]
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003448:	4910      	ldr	r1, [pc, #64]	@ (800348c <_Z23getFont_verdana_10_4bppv+0x68>)
 800344a:	4811      	ldr	r0, [pc, #68]	@ (8003490 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800344c:	940a      	str	r4, [sp, #40]	@ 0x28
 800344e:	2201      	movs	r2, #1
 8003450:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003454:	2304      	movs	r3, #4
 8003456:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800345a:	230a      	movs	r3, #10
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003462:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003466:	9405      	str	r4, [sp, #20]
 8003468:	f7ff f9cc 	bl	8002804 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800346c:	4809      	ldr	r0, [pc, #36]	@ (8003494 <_Z23getFont_verdana_10_4bppv+0x70>)
 800346e:	f010 f9bd 	bl	80137ec <atexit>
 8003472:	4628      	mov	r0, r5
 8003474:	f010 f97c 	bl	8013770 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003478:	4805      	ldr	r0, [pc, #20]	@ (8003490 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800347a:	b00f      	add	sp, #60	@ 0x3c
 800347c:	bd30      	pop	{r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	20001798 	.word	0x20001798
 8003484:	0801b4f0 	.word	0x0801b4f0
 8003488:	0801b6a0 	.word	0x0801b6a0
 800348c:	0801aa68 	.word	0x0801aa68
 8003490:	2000179c 	.word	0x2000179c
 8003494:	08003421 	.word	0x08003421

08003498 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003498:	4770      	bx	lr
	...

0800349c <_Z23getFont_verdana_20_4bppv>:
{
 800349c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800349e:	4d17      	ldr	r5, [pc, #92]	@ (80034fc <_Z23getFont_verdana_20_4bppv+0x60>)
 80034a0:	682c      	ldr	r4, [r5, #0]
 80034a2:	f014 0401 	ands.w	r4, r4, #1
{
 80034a6:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80034a8:	f3bf 8f5b 	dmb	ish
 80034ac:	d122      	bne.n	80034f4 <_Z23getFont_verdana_20_4bppv+0x58>
 80034ae:	4628      	mov	r0, r5
 80034b0:	f010 f952 	bl	8013758 <__cxa_guard_acquire>
 80034b4:	b1f0      	cbz	r0, 80034f4 <_Z23getFont_verdana_20_4bppv+0x58>
 80034b6:	233f      	movs	r3, #63	@ 0x3f
 80034b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ba:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <_Z23getFont_verdana_20_4bppv+0x64>)
 80034bc:	9308      	str	r3, [sp, #32]
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <_Z23getFont_verdana_20_4bppv+0x68>)
 80034c0:	9307      	str	r3, [sp, #28]
 80034c2:	2301      	movs	r3, #1
 80034c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	2304      	movs	r3, #4
 80034cc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80034d0:	2314      	movs	r3, #20
 80034d2:	490d      	ldr	r1, [pc, #52]	@ (8003508 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	225f      	movs	r2, #95	@ 0x5f
 80034d8:	2318      	movs	r3, #24
 80034da:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80034de:	480b      	ldr	r0, [pc, #44]	@ (800350c <_Z23getFont_verdana_20_4bppv+0x70>)
 80034e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80034e2:	9401      	str	r4, [sp, #4]
 80034e4:	f7ff f98e 	bl	8002804 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80034e8:	4809      	ldr	r0, [pc, #36]	@ (8003510 <_Z23getFont_verdana_20_4bppv+0x74>)
 80034ea:	f010 f97f 	bl	80137ec <atexit>
 80034ee:	4628      	mov	r0, r5
 80034f0:	f010 f93e 	bl	8013770 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80034f4:	4805      	ldr	r0, [pc, #20]	@ (800350c <_Z23getFont_verdana_20_4bppv+0x70>)
 80034f6:	b00f      	add	sp, #60	@ 0x3c
 80034f8:	bd30      	pop	{r4, r5, pc}
 80034fa:	bf00      	nop
 80034fc:	200017c8 	.word	0x200017c8
 8003500:	0801b4f4 	.word	0x0801b4f4
 8003504:	0801b6a4 	.word	0x0801b6a4
 8003508:	0801aa78 	.word	0x0801aa78
 800350c:	200017cc 	.word	0x200017cc
 8003510:	08003499 	.word	0x08003499

08003514 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003514:	4770      	bx	lr
	...

08003518 <_Z23getFont_verdana_40_4bppv>:
{
 8003518:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800351a:	4d16      	ldr	r5, [pc, #88]	@ (8003574 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800351c:	682c      	ldr	r4, [r5, #0]
 800351e:	f014 0401 	ands.w	r4, r4, #1
{
 8003522:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003524:	f3bf 8f5b 	dmb	ish
 8003528:	d120      	bne.n	800356c <_Z23getFont_verdana_40_4bppv+0x54>
 800352a:	4628      	mov	r0, r5
 800352c:	f010 f914 	bl	8013758 <__cxa_guard_acquire>
 8003530:	b1e0      	cbz	r0, 800356c <_Z23getFont_verdana_40_4bppv+0x54>
 8003532:	233f      	movs	r3, #63	@ 0x3f
 8003534:	9309      	str	r3, [sp, #36]	@ 0x24
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003538:	9308      	str	r3, [sp, #32]
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <_Z23getFont_verdana_40_4bppv+0x64>)
 800353c:	4910      	ldr	r1, [pc, #64]	@ (8003580 <_Z23getFont_verdana_40_4bppv+0x68>)
 800353e:	4811      	ldr	r0, [pc, #68]	@ (8003584 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003540:	940a      	str	r4, [sp, #40]	@ 0x28
 8003542:	2201      	movs	r2, #1
 8003544:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003548:	2304      	movs	r3, #4
 800354a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800354e:	2328      	movs	r3, #40	@ 0x28
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003556:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800355a:	9405      	str	r4, [sp, #20]
 800355c:	f7ff f952 	bl	8002804 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003560:	4809      	ldr	r0, [pc, #36]	@ (8003588 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003562:	f010 f943 	bl	80137ec <atexit>
 8003566:	4628      	mov	r0, r5
 8003568:	f010 f902 	bl	8013770 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800356c:	4805      	ldr	r0, [pc, #20]	@ (8003584 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800356e:	b00f      	add	sp, #60	@ 0x3c
 8003570:	bd30      	pop	{r4, r5, pc}
 8003572:	bf00      	nop
 8003574:	200017f8 	.word	0x200017f8
 8003578:	0801b698 	.word	0x0801b698
 800357c:	0801b6a8 	.word	0x0801b6a8
 8003580:	0801afac 	.word	0x0801afac
 8003584:	200017fc 	.word	0x200017fc
 8003588:	08003515 	.word	0x08003515

0800358c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanaz_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp();

touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp()
{
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 800358c:	4770      	bx	lr
	...

08003590 <_Z24getFont_verdanaz_22_4bppv>:
{
 8003590:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8003592:	4d17      	ldr	r5, [pc, #92]	@ (80035f0 <_Z24getFont_verdanaz_22_4bppv+0x60>)
 8003594:	682c      	ldr	r4, [r5, #0]
 8003596:	f014 0401 	ands.w	r4, r4, #1
{
 800359a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 800359c:	f3bf 8f5b 	dmb	ish
 80035a0:	d123      	bne.n	80035ea <_Z24getFont_verdanaz_22_4bppv+0x5a>
 80035a2:	4628      	mov	r0, r5
 80035a4:	f010 f8d8 	bl	8013758 <__cxa_guard_acquire>
 80035a8:	b1f8      	cbz	r0, 80035ea <_Z24getFont_verdanaz_22_4bppv+0x5a>
 80035aa:	233f      	movs	r3, #63	@ 0x3f
 80035ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <_Z24getFont_verdanaz_22_4bppv+0x64>)
 80035b0:	9308      	str	r3, [sp, #32]
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <_Z24getFont_verdanaz_22_4bppv+0x68>)
 80035b4:	9307      	str	r3, [sp, #28]
 80035b6:	2303      	movs	r3, #3
 80035b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80035bc:	2201      	movs	r2, #1
 80035be:	2304      	movs	r3, #4
 80035c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80035c4:	2316      	movs	r3, #22
 80035c6:	490d      	ldr	r1, [pc, #52]	@ (80035fc <_Z24getFont_verdanaz_22_4bppv+0x6c>)
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	225f      	movs	r2, #95	@ 0x5f
 80035cc:	231b      	movs	r3, #27
 80035ce:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80035d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80035d6:	480a      	ldr	r0, [pc, #40]	@ (8003600 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 80035d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80035da:	f7ff f913 	bl	8002804 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80035de:	4809      	ldr	r0, [pc, #36]	@ (8003604 <_Z24getFont_verdanaz_22_4bppv+0x74>)
 80035e0:	f010 f904 	bl	80137ec <atexit>
 80035e4:	4628      	mov	r0, r5
 80035e6:	f010 f8c3 	bl	8013770 <__cxa_guard_release>
    return verdanaz_22_4bpp;
}
 80035ea:	4805      	ldr	r0, [pc, #20]	@ (8003600 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 80035ec:	b00f      	add	sp, #60	@ 0x3c
 80035ee:	bd30      	pop	{r4, r5, pc}
 80035f0:	20001828 	.word	0x20001828
 80035f4:	0801b69c 	.word	0x0801b69c
 80035f8:	0801b6ac 	.word	0x0801b6ac
 80035fc:	0801afbc 	.word	0x0801afbc
 8003600:	2000182c 	.word	0x2000182c
 8003604:	0800358d 	.word	0x0800358d

08003608 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003608:	2000      	movs	r0, #0
 800360a:	4770      	bx	lr

0800360c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 800360c:	2000      	movs	r0, #0
 800360e:	4770      	bx	lr

08003610 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003610:	b40e      	push	{r1, r2, r3}
 8003612:	b503      	push	{r0, r1, lr}
 8003614:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 8003616:	2100      	movs	r1, #0
{
 8003618:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800361c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 800361e:	f00a fc23 	bl	800de68 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003622:	b002      	add	sp, #8
 8003624:	f85d eb04 	ldr.w	lr, [sp], #4
 8003628:	b003      	add	sp, #12
 800362a:	4770      	bx	lr

0800362c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800362c:	b40c      	push	{r2, r3}
 800362e:	b507      	push	{r0, r1, r2, lr}
 8003630:	ab04      	add	r3, sp, #16
 8003632:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003636:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
 8003638:	f00a fc16 	bl	800de68 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800363c:	b003      	add	sp, #12
 800363e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003642:	b002      	add	sp, #8
 8003644:	4770      	bx	lr
	...

08003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8003648:	b510      	push	{r4, lr}
 800364a:	4604      	mov	r4, r0
    nextCharacters.replaceAt0(unicodeConverter(direction));
 800364c:	f00b fa24 	bl	800ea98 <_ZN8touchgfx12TextProvider16unicodeConverterEh>
            replaceAt(++used - 1, newChar);
        }

        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
 8003650:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003652:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003656:	8458      	strh	r0, [r3, #34]	@ 0x22
    if (fontGsubTable && nextCharacters.peekChar())
 8003658:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800365a:	b35b      	cbz	r3, 80036b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
            assert(used > 0);
 800365c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800365e:	b92b      	cbnz	r3, 800366c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x24>
 8003660:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003664:	21c5      	movs	r1, #197	@ 0xc5
            assert(offset < used);
 8003666:	4818      	ldr	r0, [pc, #96]	@ (80036c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003668:	f010 f8a2 	bl	80137b0 <__assert_func>
 800366c:	b310      	cbz	r0, 80036b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
    {
        substituteGlyphs();
 800366e:	4620      	mov	r0, r4
 8003670:	f00c fb39 	bl	800fce6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8003674:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003676:	2b01      	cmp	r3, #1
 8003678:	d803      	bhi.n	8003682 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3a>
 800367a:	4b14      	ldr	r3, [pc, #80]	@ (80036cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 800367c:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 800367e:	21cb      	movs	r1, #203	@ 0xcb
 8003680:	e7f1      	b.n	8003666 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            const uint16_t index = pos + offset;
 8003682:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003684:	1c53      	adds	r3, r2, #1
 8003686:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003688:	2b09      	cmp	r3, #9
 800368a:	4619      	mov	r1, r3
 800368c:	bf88      	it	hi
 800368e:	f1a3 010a 	subhi.w	r1, r3, #10
 8003692:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003696:	f640 103f 	movw	r0, #2367	@ 0x93f
 800369a:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800369c:	4281      	cmp	r1, r0
 800369e:	d109      	bne.n	80036b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80036a0:	2b0a      	cmp	r3, #10
 80036a2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80036a6:	bf28      	it	cs
 80036a8:	2300      	movcs	r3, #0
 80036aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 80036ae:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 80036b0:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80036b2:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80036b4:	4620      	mov	r0, r4
}
 80036b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80036ba:	f00c ba17 	b.w	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 80036be:	bf00      	nop
 80036c0:	0801524b 	.word	0x0801524b
 80036c4:	08015254 	.word	0x08015254
 80036c8:	080152ff 	.word	0x080152ff
 80036cc:	08015349 	.word	0x08015349
 80036d0:	08015357 	.word	0x08015357

080036d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4604      	mov	r4, r0
    fillInputBuffer();
 80036d8:	f00c f9cf 	bl	800fa7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
    unicodeConverterInit();
 80036dc:	4620      	mov	r0, r4
}
 80036de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    unicodeConverterInit();
 80036e2:	f00b b9d5 	b.w	800ea90 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>

080036e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80036e6:	b510      	push	{r4, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	ac02      	add	r4, sp, #8
 80036ec:	e884 0006 	stmia.w	r4, {r1, r2}
 80036f0:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80036f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80036f4:	9305      	str	r3, [sp, #20]
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4621      	mov	r1, r4
 80036fe:	9b08      	ldr	r3, [sp, #32]
 8003700:	f008 fe88 	bl	800c414 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003704:	b006      	add	sp, #24
 8003706:	bd10      	pop	{r4, pc}

08003708 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003708:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800370a:	bb18      	cbnz	r0, 8003754 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800370e:	4813      	ldr	r0, [pc, #76]	@ (800375c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	4913      	ldr	r1, [pc, #76]	@ (8003760 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003714:	b1b4      	cbz	r4, 8003744 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	4422      	add	r2, r4
 800371a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800371c:	6862      	ldr	r2, [r4, #4]
 800371e:	4422      	add	r2, r4
 8003720:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003722:	68a2      	ldr	r2, [r4, #8]
 8003724:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003728:	2200      	movs	r2, #0
 800372a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800372c:	f000 f838 	bl	80037a0 <_ZN17TypedTextDatabase8getFontsEv>
 8003730:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003732:	f000 f833 	bl	800379c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003738:	601c      	str	r4, [r3, #0]
        fonts = f;
 800373a:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800373c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003740:	8018      	strh	r0, [r3, #0]
    }
}
 8003742:	e007      	b.n	8003754 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003746:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800374a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800374e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003750:	2c00      	cmp	r4, #0
 8003752:	d1e8      	bne.n	8003726 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003754:	bd38      	pop	{r3, r4, r5, pc}
 8003756:	bf00      	nop
 8003758:	20001864 	.word	0x20001864
 800375c:	2000185c 	.word	0x2000185c
 8003760:	20001858 	.word	0x20001858
 8003764:	20001860 	.word	0x20001860
 8003768:	20012630 	.word	0x20012630
 800376c:	20012638 	.word	0x20012638
 8003770:	20012634 	.word	0x20012634
 8003774:	0801b6d0 	.word	0x0801b6d0
 8003778:	0801b6b0 	.word	0x0801b6b0
 800377c:	0801b6fc 	.word	0x0801b6fc

08003780 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003780:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20001858 	.word	0x20001858
 8003798:	2000185c 	.word	0x2000185c

0800379c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800379c:	2008      	movs	r0, #8
 800379e:	4770      	bx	lr

080037a0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80037a0:	4800      	ldr	r0, [pc, #0]	@ (80037a4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80037a2:	4770      	bx	lr
 80037a4:	20001868 	.word	0x20001868

080037a8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdanaz_22_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80037a8:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80037aa:	f7ff fe77 	bl	800349c <_Z23getFont_verdana_20_4bppv>
};
 80037ae:	4c06      	ldr	r4, [pc, #24]	@ (80037c8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
 80037b0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80037b2:	f7ff feb1 	bl	8003518 <_Z23getFont_verdana_40_4bppv>
};
 80037b6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80037b8:	f7ff fe34 	bl	8003424 <_Z23getFont_verdana_10_4bppv>
};
 80037bc:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanaz_22_4bpp())
 80037be:	f7ff fee7 	bl	8003590 <_Z24getFont_verdanaz_22_4bppv>
};
 80037c2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	bf00      	nop
 80037c8:	20001868 	.word	0x20001868

080037cc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80037cc:	4770      	bx	lr

080037ce <_ZN19FrontendApplicationD0Ev>:
 80037ce:	b510      	push	{r4, lr}
 80037d0:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80037d4:	4604      	mov	r4, r0
 80037d6:	f00f ffbd 	bl	8013754 <_ZdlPvj>
 80037da:	4620      	mov	r0, r4
 80037dc:	bd10      	pop	{r4, pc}

080037de <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80037de:	b510      	push	{r4, lr}
 80037e0:	4604      	mov	r4, r0
    {
        model.tick();
 80037e2:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80037e6:	f000 f817 	bl	8003818 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80037ea:	4620      	mov	r0, r4
    }
 80037ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80037f0:	f009 bb34 	b.w	800ce5c <_ZN8touchgfx11Application15handleTickEventEv>

080037f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80037f8:	f7fe ff6e 	bl	80026d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80037fc:	4b01      	ldr	r3, [pc, #4]	@ (8003804 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80037fe:	6023      	str	r3, [r4, #0]
{

}
 8003800:	4620      	mov	r0, r4
 8003802:	bd10      	pop	{r4, pc}
 8003804:	08015b6c 	.word	0x08015b6c

08003808 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95),ImageY(160), modelListener(0)
 8003808:	4902      	ldr	r1, [pc, #8]	@ (8003814 <_ZN5ModelC1Ev+0xc>)
 800380a:	2200      	movs	r2, #0
 800380c:	e9c0 2100 	strd	r2, r1, [r0]
 8003810:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 8003812:	4770      	bx	lr
 8003814:	00a0005f 	.word	0x00a0005f

08003818 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003818:	6803      	ldr	r3, [r0, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	6003      	str	r3, [r0, #0]
}
 800381e:	4770      	bx	lr

08003820 <_ZN5Model7updateXEs>:

void Model::updateX(int16_t x)
{
	ImageX = x;
 8003820:	8081      	strh	r1, [r0, #4]
}
 8003822:	4770      	bx	lr

08003824 <_ZN5Model9GetImageXEv>:
}

int16_t Model::GetImageX()
{
	return ImageX;
}
 8003824:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8003828:	4770      	bx	lr

0800382a <_ZN5Model9GetImageYEv>:

int16_t Model::GetImageY()
{
	return ImageY;
}
 800382a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800382e:	4770      	bx	lr

08003830 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003830:	4770      	bx	lr

08003832 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003832:	3804      	subs	r0, #4
 8003834:	4770      	bx	lr

08003836 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003836:	4770      	bx	lr

08003838 <_ZN16Screen1PresenterD0Ev>:
 8003838:	b510      	push	{r4, lr}
 800383a:	2110      	movs	r1, #16
 800383c:	4604      	mov	r4, r0
 800383e:	f00f ff89 	bl	8013754 <_ZdlPvj>
 8003842:	4620      	mov	r0, r4
 8003844:	bd10      	pop	{r4, pc}

08003846 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003846:	f1a0 0004 	sub.w	r0, r0, #4
 800384a:	e7f5      	b.n	8003838 <_ZN16Screen1PresenterD0Ev>

0800384c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800384c:	2200      	movs	r2, #0
 800384e:	6082      	str	r2, [r0, #8]
    : view(v)
 8003850:	4a02      	ldr	r2, [pc, #8]	@ (800385c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003852:	6002      	str	r2, [r0, #0]
 8003854:	3218      	adds	r2, #24
 8003856:	6042      	str	r2, [r0, #4]
 8003858:	60c1      	str	r1, [r0, #12]
}
 800385a:	4770      	bx	lr
 800385c:	08015bc0 	.word	0x08015bc0

08003860 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003860:	4770      	bx	lr
	...

08003864 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003864:	f8d0 3258 	ldr.w	r3, [r0, #600]	@ 0x258
	updatePoint(scores);
 8003868:	4a08      	ldr	r2, [pc, #32]	@ (800388c <_ZN11Screen1View15handleTickEventEv+0x28>)
	tickCounter += 1;
 800386a:	3301      	adds	r3, #1
{
 800386c:	b510      	push	{r4, lr}
	tickCounter += 1;
 800386e:	f8c0 3258 	str.w	r3, [r0, #600]	@ 0x258
	updatePoint(scores);
 8003872:	6803      	ldr	r3, [r0, #0]
 8003874:	8811      	ldrh	r1, [r2, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8003878:	4604      	mov	r4, r0
	updatePoint(scores);
 800387a:	4798      	blx	r3
	updateHighScore(highScore);
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <_ZN11Screen1View15handleTickEventEv+0x2c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	8811      	ldrh	r1, [r2, #0]
 8003884:	4620      	mov	r0, r4

}
 8003886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	updateHighScore(highScore);
 800388a:	4718      	bx	r3
 800388c:	200014e2 	.word	0x200014e2
 8003890:	200014e0 	.word	0x200014e0

08003894 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003894:	b510      	push	{r4, lr}
 8003896:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <_ZN11Screen1ViewD1Ev+0x10>)
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	4604      	mov	r4, r0
 800389c:	f7ff f84c 	bl	8002938 <_ZN15Screen1ViewBaseD1Ev>
 80038a0:	4620      	mov	r0, r4
 80038a2:	bd10      	pop	{r4, pc}
 80038a4:	08015be8 	.word	0x08015be8

080038a8 <_ZN11Screen1ViewD0Ev>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	f7ff fff2 	bl	8003894 <_ZN11Screen1ViewD1Ev>
 80038b0:	4620      	mov	r0, r4
 80038b2:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 80038b6:	f00f ff4d 	bl	8013754 <_ZdlPvj>
 80038ba:	4620      	mov	r0, r4
 80038bc:	bd10      	pop	{r4, pc}
	...

080038c0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80038c0:	b510      	push	{r4, lr}
 80038c2:	4604      	mov	r4, r0
 80038c4:	f7ff f922 	bl	8002b0c <_ZN15Screen1ViewBaseC1Ev>
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <_ZN11Screen1ViewC1Ev+0x18>)
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c4 3258 	str.w	r3, [r4, #600]	@ 0x258
}
 80038d2:	4620      	mov	r0, r4
 80038d4:	bd10      	pop	{r4, pc}
 80038d6:	bf00      	nop
 80038d8:	08015be8 	.word	0x08015be8

080038dc <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80038dc:	f7ff b82d 	b.w	800293a <_ZN15Screen1ViewBase11setupScreenEv>

080038e0 <_ZN11Screen1View11updatePointEi>:
void Screen1View::updatePoint(int newValue)
{
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4604      	mov	r4, r0
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 80038e4:	f500 750d 	add.w	r5, r0, #564	@ 0x234
{
 80038e8:	460b      	mov	r3, r1
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 80038ea:	4628      	mov	r0, r5
 80038ec:	4a05      	ldr	r2, [pc, #20]	@ (8003904 <_ZN11Screen1View11updatePointEi+0x24>)
 80038ee:	210a      	movs	r1, #10
 80038f0:	f00c ffa2 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80038f4:	f8c4 521c 	str.w	r5, [r4, #540]	@ 0x21c
    screen1point.setWildcard(screen1pointBuffer);
    screen1point.invalidate();
 80038f8:	f504 70ea 	add.w	r0, r4, #468	@ 0x1d4
}
 80038fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    screen1point.invalidate();
 8003900:	f00a bbb9 	b.w	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003904:	08015429 	.word	0x08015429

08003908 <_ZN11Screen1View15updateHighScoreEi>:

void Screen1View::updateHighScore(int newValue)
{
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4604      	mov	r4, r0
    Unicode::snprintf(screen1point_1Buffer, SCREEN1POINT_SIZE, "%d", newValue);
 800390c:	f500 7508 	add.w	r5, r0, #544	@ 0x220
{
 8003910:	460b      	mov	r3, r1
    Unicode::snprintf(screen1point_1Buffer, SCREEN1POINT_SIZE, "%d", newValue);
 8003912:	4628      	mov	r0, r5
 8003914:	4a05      	ldr	r2, [pc, #20]	@ (800392c <_ZN11Screen1View15updateHighScoreEi+0x24>)
 8003916:	210a      	movs	r1, #10
 8003918:	f00c ff8e 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800391c:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
    screen1point_1.setWildcard(screen1point_1Buffer);
    screen1point_1.invalidate();
 8003920:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
}
 8003924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    screen1point_1.invalidate();
 8003928:	f00a bba5 	b.w	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
 800392c:	08015429 	.word	0x08015429

08003930 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003930:	4770      	bx	lr

08003932 <_ZThn4_N16Screen2PresenterD1Ev>:
 8003932:	3804      	subs	r0, #4
 8003934:	4770      	bx	lr

08003936 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003936:	4770      	bx	lr

08003938 <_ZN16Screen2PresenterD0Ev>:
 8003938:	b510      	push	{r4, lr}
 800393a:	2110      	movs	r1, #16
 800393c:	4604      	mov	r4, r0
 800393e:	f00f ff09 	bl	8013754 <_ZdlPvj>
 8003942:	4620      	mov	r0, r4
 8003944:	bd10      	pop	{r4, pc}

08003946 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003946:	f1a0 0004 	sub.w	r0, r0, #4
 800394a:	e7f5      	b.n	8003938 <_ZN16Screen2PresenterD0Ev>

0800394c <_ZN16Screen2PresenterC1ER11Screen2View>:
 800394c:	2200      	movs	r2, #0
 800394e:	6082      	str	r2, [r0, #8]
    : view(v)
 8003950:	4a02      	ldr	r2, [pc, #8]	@ (800395c <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003952:	6002      	str	r2, [r0, #0]
 8003954:	3218      	adds	r2, #24
 8003956:	6042      	str	r2, [r0, #4]
 8003958:	60c1      	str	r1, [r0, #12]
}
 800395a:	4770      	bx	lr
 800395c:	08015c24 	.word	0x08015c24

08003960 <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->updateX(x);
 8003960:	6880      	ldr	r0, [r0, #8]
 8003962:	f7ff bf5d 	b.w	8003820 <_ZN5Model7updateXEs>

08003966 <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 8003966:	6880      	ldr	r0, [r0, #8]
 8003968:	f7ff bf5c 	b.w	8003824 <_ZN5Model9GetImageXEv>

0800396c <_ZN16Screen2Presenter9GetImageYEv>:
	model->updateY(y);
}

int16_t Screen2Presenter::GetImageY()
{
	return model->GetImageY();
 800396c:	6880      	ldr	r0, [r0, #8]
 800396e:	f7ff bf5c 	b.w	800382a <_ZN5Model9GetImageYEv>

08003972 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_>:
    updateHearts();
}

bool Screen2View::checkCollision(const Image& img1, const Image& img2)
{
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 8003972:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003976:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
{
 800397a:	b510      	push	{r4, lr}
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 800397c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8003980:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003982:	429c      	cmp	r4, r3
 8003984:	da15      	bge.n	80039b2 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getX() + img1.getWidth() > img2.getX() &&
 8003986:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 800398a:	4423      	add	r3, r4
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 800398c:	4298      	cmp	r0, r3
 800398e:	da10      	bge.n	80039b2 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003990:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8003994:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8003998:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 800399c:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
 800399e:	429c      	cmp	r4, r3
 80039a0:	da07      	bge.n	80039b2 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() + img1.getHeight() > img2.getY());
 80039a2:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 80039a6:	4423      	add	r3, r4
            img1.getY() < img2.getY() + img2.getHeight() &&
 80039a8:	4298      	cmp	r0, r3
 80039aa:	bfac      	ite	ge
 80039ac:	2000      	movge	r0, #0
 80039ae:	2001      	movlt	r0, #1
}
 80039b0:	bd10      	pop	{r4, pc}
            img1.getY() < img2.getY() + img2.getHeight() &&
 80039b2:	2000      	movs	r0, #0
 80039b4:	e7fc      	b.n	80039b0 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x3e>
	...

080039b8 <_ZN11Screen2View9resetGameEv>:
{   scores = tickCount/20;
 80039b8:	f8d0 3310 	ldr.w	r3, [r0, #784]	@ 0x310
 80039bc:	2214      	movs	r2, #20
 80039be:	fbb3 f3f2 	udiv	r3, r3, r2
 80039c2:	4a17      	ldr	r2, [pc, #92]	@ (8003a20 <_ZN11Screen2View9resetGameEv+0x68>)
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b570      	push	{r4, r5, r6, lr}
 80039c8:	8013      	strh	r3, [r2, #0]
	if (scores > highScore) {
 80039ca:	4a16      	ldr	r2, [pc, #88]	@ (8003a24 <_ZN11Screen2View9resetGameEv+0x6c>)
 80039cc:	8811      	ldrh	r1, [r2, #0]
 80039ce:	4299      	cmp	r1, r3
		highScore = scores;
 80039d0:	bf38      	it	cc
 80039d2:	8013      	strhcc	r3, [r2, #0]
    tickCount = 0;
 80039d4:	2500      	movs	r5, #0
    flickering = false;
 80039d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
{   scores = tickCount/20;
 80039da:	4604      	mov	r4, r0
    flickering = false;
 80039dc:	f8a0 3318 	strh.w	r3, [r0, #792]	@ 0x318
    flickerCount = 0;
 80039e0:	e9c0 55c4 	strd	r5, r5, [r0, #784]	@ 0x310
    localImageX = presenter->GetImageX();
 80039e4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80039e6:	f7ff ffbe 	bl	8003966 <_ZN16Screen2Presenter9GetImageXEv>
 80039ea:	f8a4 030c 	strh.w	r0, [r4, #780]	@ 0x30c
    localImageY = presenter->GetImageY();
 80039ee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039f0:	f7ff ffbc 	bl	800396c <_ZN16Screen2Presenter9GetImageYEv>
 80039f4:	f8b4 330c 	ldrh.w	r3, [r4, #780]	@ 0x30c
 80039f8:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 80039fc:	230f      	movs	r3, #15
 80039fe:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
    updatePoint(0);
 8003a02:	6823      	ldr	r3, [r4, #0]
    localImageY = presenter->GetImageY();
 8003a04:	f8a4 030e 	strh.w	r0, [r4, #782]	@ 0x30e
        rect.y = y;
 8003a08:	f8a4 014e 	strh.w	r0, [r4, #334]	@ 0x14e
    updatePoint(0);
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	4798      	blx	r3
    updateHearts();
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	4620      	mov	r0, r4
 8003a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8003a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    updateHearts();
 8003a1e:	4718      	bx	r3
 8003a20:	200014e2 	.word	0x200014e2
 8003a24:	200014e0 	.word	0x200014e0

08003a28 <_ZN11Screen2View14tearDownScreenEv>:
    presenter->UpdateImageX(localImageX);
 8003a28:	f9b0 130c 	ldrsh.w	r1, [r0, #780]	@ 0x30c
 8003a2c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003a2e:	f7ff bf97 	b.w	8003960 <_ZN16Screen2Presenter12UpdateImageXEs>
	...

08003a34 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003a34:	b510      	push	{r4, lr}
 8003a36:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <_ZN11Screen2ViewD1Ev+0x10>)
 8003a38:	6003      	str	r3, [r0, #0]
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	f7ff fa19 	bl	8002e72 <_ZN15Screen2ViewBaseD1Ev>
 8003a40:	4620      	mov	r0, r4
 8003a42:	bd10      	pop	{r4, pc}
 8003a44:	08015c4c 	.word	0x08015c4c

08003a48 <_ZN11Screen2ViewD0Ev>:
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	f7ff fff2 	bl	8003a34 <_ZN11Screen2ViewD1Ev>
 8003a50:	4620      	mov	r0, r4
 8003a52:	f44f 7147 	mov.w	r1, #796	@ 0x31c
 8003a56:	f00f fe7d 	bl	8013754 <_ZdlPvj>
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	bd10      	pop	{r4, pc}
	...

08003a60 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View() : tickCount(0), flickerCount(0), flickering(false), lives(3)
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	f7ff fad0 	bl	8003008 <_ZN15Screen2ViewBaseC1Ev>
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <_ZN11Screen2ViewC1Ev+0x20>)
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e9c4 33c4 	strd	r3, r3, [r4, #784]	@ 0x310
 8003a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a76:	f8a4 3318 	strh.w	r3, [r4, #792]	@ 0x318
}
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	bd10      	pop	{r4, pc}
 8003a7e:	bf00      	nop
 8003a80:	08015c4c 	.word	0x08015c4c

08003a84 <_ZN11Screen2View11setupScreenEv>:
{
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4604      	mov	r4, r0
    localImageX = presenter->GetImageX();
 8003a88:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003a8a:	f7ff ff6c 	bl	8003966 <_ZN16Screen2Presenter9GetImageXEv>
 8003a8e:	f8a4 030c 	strh.w	r0, [r4, #780]	@ 0x30c
    localImageY = presenter->GetImageY();
 8003a92:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003a94:	f7ff ff6a 	bl	800396c <_ZN16Screen2Presenter9GetImageYEv>
 8003a98:	f8a4 030e 	strh.w	r0, [r4, #782]	@ 0x30e
    Screen2ViewBase::setupScreen();
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff f9e9 	bl	8002e74 <_ZN15Screen2ViewBase11setupScreenEv>
        rect.x = x;
 8003aa2:	f8d4 330c 	ldr.w	r3, [r4, #780]	@ 0x30c
 8003aa6:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8003aaa:	230f      	movs	r3, #15
 8003aac:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
    updatePoint(scores);
 8003ab0:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <_ZN11Screen2View11setupScreenEv+0x44>)
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	8811      	ldrh	r1, [r2, #0]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4798      	blx	r3
    updateHearts();
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	4620      	mov	r0, r4
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8003ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHearts();
 8003ac6:	4718      	bx	r3
 8003ac8:	200014e2 	.word	0x200014e2

08003acc <_ZN11Screen2View15handleTickEventEv>:
{
 8003acc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    tickCount++;
 8003ace:	f8d0 6310 	ldr.w	r6, [r0, #784]	@ 0x310
    switch (tickCount % 5)
 8003ad2:	2305      	movs	r3, #5
    tickCount++;
 8003ad4:	3601      	adds	r6, #1
    switch (tickCount % 5)
 8003ad6:	fbb6 f3f3 	udiv	r3, r6, r3
 8003ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ade:	1af3      	subs	r3, r6, r3
 8003ae0:	3b01      	subs	r3, #1
{
 8003ae2:	4604      	mov	r4, r0
    tickCount++;
 8003ae4:	f8c0 6310 	str.w	r6, [r0, #784]	@ 0x310
    switch (tickCount % 5)
 8003ae8:	2101      	movs	r1, #1
 8003aea:	2200      	movs	r2, #0
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d803      	bhi.n	8003af8 <_ZN11Screen2View15handleTickEventEv+0x2c>
 8003af0:	e8df f003 	tbb	[pc, r3]
 8003af4:	76716c67 	.word	0x76716c67
        visible = vis;
 8003af8:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
 8003afc:	f884 2091 	strb.w	r2, [r4, #145]	@ 0x91
	int lambY = lamb.getY() + baseSpeed;
 8003b00:	f9b4 31de 	ldrsh.w	r3, [r4, #478]	@ 0x1de
    int baseSpeed = 1 + (tickCount / 500);
 8003b04:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8003b08:	fbb6 f5f5 	udiv	r5, r6, r5
 8003b0c:	3501      	adds	r5, #1
	int lambY = lamb.getY() + baseSpeed;
 8003b0e:	441d      	add	r5, r3
	const int lanes[] = {15, 75, 135, 195};
 8003b10:	4b45      	ldr	r3, [pc, #276]	@ (8003c28 <_ZN11Screen2View15handleTickEventEv+0x15c>)
 8003b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b14:	f10d 0c10 	add.w	ip, sp, #16
	if (lambY > 320) {
 8003b18:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
	const int lanes[] = {15, 75, 135, 195};
 8003b1c:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
	if (lambY > 320) {
 8003b20:	dd63      	ble.n	8003bea <_ZN11Screen2View15handleTickEventEv+0x11e>
        rect.y = y;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8a4 31de 	strh.w	r3, [r4, #478]	@ 0x1de
		int laneIndex = (tickCount + localImageX + localImageY) % 4;
 8003b28:	f9b4 330c 	ldrsh.w	r3, [r4, #780]	@ 0x30c
 8003b2c:	f9b4 230e 	ldrsh.w	r2, [r4, #782]	@ 0x30e
 8003b30:	4433      	add	r3, r6
 8003b32:	4413      	add	r3, r2
 8003b34:	f003 0303 	and.w	r3, r3, #3
		lamb.setX(lanes[laneIndex]);
 8003b38:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8003b3c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003b40:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
    if (JoystickX > 150 && localImageX > -6)
 8003b44:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <_ZN11Screen2View15handleTickEventEv+0x160>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b96      	cmp	r3, #150	@ 0x96
 8003b4a:	d951      	bls.n	8003bf0 <_ZN11Screen2View15handleTickEventEv+0x124>
 8003b4c:	f9b4 330c 	ldrsh.w	r3, [r4, #780]	@ 0x30c
 8003b50:	1d59      	adds	r1, r3, #5
 8003b52:	db05      	blt.n	8003b60 <_ZN11Screen2View15handleTickEventEv+0x94>
        localImageX -= 3;
 8003b54:	3b03      	subs	r3, #3
        localImageX += 3;
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	f8a4 330c 	strh.w	r3, [r4, #780]	@ 0x30c
        rect.x = x;
 8003b5c:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
    if (!flickering && (checkCollision(car, lamb)))
 8003b60:	f894 5318 	ldrb.w	r5, [r4, #792]	@ 0x318
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	b9b5      	cbnz	r5, 8003b96 <_ZN11Screen2View15handleTickEventEv+0xca>
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	f504 72ec 	add.w	r2, r4, #472	@ 0x1d8
 8003b6e:	f504 71a4 	add.w	r1, r4, #328	@ 0x148
 8003b72:	4620      	mov	r0, r4
 8003b74:	4798      	blx	r3
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d042      	beq.n	8003c00 <_ZN11Screen2View15handleTickEventEv+0x134>
        lives--;
 8003b7a:	f894 3319 	ldrb.w	r3, [r4, #793]	@ 0x319
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f884 3319 	strb.w	r3, [r4, #793]	@ 0x319
        updateHearts();
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	4620      	mov	r0, r4
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	4798      	blx	r3
        flickering = true;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f884 3318 	strb.w	r3, [r4, #792]	@ 0x318
        flickerCount = 0;
 8003b92:	f8c4 5314 	str.w	r5, [r4, #788]	@ 0x314
        flickerCount++;
 8003b96:	f8d4 3314 	ldr.w	r3, [r4, #788]	@ 0x314
 8003b9a:	3301      	adds	r3, #1
        if (flickerCount % 2 == 0)
 8003b9c:	07da      	lsls	r2, r3, #31
        flickerCount++;
 8003b9e:	f8c4 3314 	str.w	r3, [r4, #788]	@ 0x314
        if (flickerCount % 2 == 0)
 8003ba2:	d405      	bmi.n	8003bb0 <_ZN11Screen2View15handleTickEventEv+0xe4>
            car.setVisible(!car.isVisible());
 8003ba4:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 8003ba8:	f082 0201 	eor.w	r2, r2, #1
        visible = vis;
 8003bac:	f884 216d 	strb.w	r2, [r4, #365]	@ 0x16d
        if (flickerCount >= 60)
 8003bb0:	2b3b      	cmp	r3, #59	@ 0x3b
            flickering = false;
 8003bb2:	bf81      	itttt	hi
 8003bb4:	2300      	movhi	r3, #0
 8003bb6:	f884 3318 	strbhi.w	r3, [r4, #792]	@ 0x318
 8003bba:	2301      	movhi	r3, #1
 8003bbc:	f884 316d 	strbhi.w	r3, [r4, #365]	@ 0x16d
    }
 8003bc0:	e022      	b.n	8003c08 <_ZN11Screen2View15handleTickEventEv+0x13c>
        visible = vis;
 8003bc2:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
 8003bc6:	f884 2141 	strb.w	r2, [r4, #321]	@ 0x141
    }
 8003bca:	e799      	b.n	8003b00 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003bcc:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
 8003bd0:	f884 2115 	strb.w	r2, [r4, #277]	@ 0x115
    }
 8003bd4:	e794      	b.n	8003b00 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003bd6:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
 8003bda:	f884 20e9 	strb.w	r2, [r4, #233]	@ 0xe9
    }
 8003bde:	e78f      	b.n	8003b00 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003be0:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
 8003be4:	f884 20bd 	strb.w	r2, [r4, #189]	@ 0xbd
    }
 8003be8:	e78a      	b.n	8003b00 <_ZN11Screen2View15handleTickEventEv+0x34>
		lamb.setY(lambY);
 8003bea:	f8a4 51de 	strh.w	r5, [r4, #478]	@ 0x1de
    }
 8003bee:	e7a9      	b.n	8003b44 <_ZN11Screen2View15handleTickEventEv+0x78>
    if (JoystickX < 90 && localImageX < 197)
 8003bf0:	2b59      	cmp	r3, #89	@ 0x59
 8003bf2:	d8b5      	bhi.n	8003b60 <_ZN11Screen2View15handleTickEventEv+0x94>
 8003bf4:	f9b4 330c 	ldrsh.w	r3, [r4, #780]	@ 0x30c
 8003bf8:	2bc4      	cmp	r3, #196	@ 0xc4
 8003bfa:	dcb1      	bgt.n	8003b60 <_ZN11Screen2View15handleTickEventEv+0x94>
        localImageX += 3;
 8003bfc:	3303      	adds	r3, #3
 8003bfe:	e7aa      	b.n	8003b56 <_ZN11Screen2View15handleTickEventEv+0x8a>
    if (flickering)
 8003c00:	f894 3318 	ldrb.w	r3, [r4, #792]	@ 0x318
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1c6      	bne.n	8003b96 <_ZN11Screen2View15handleTickEventEv+0xca>
    updatePoint(tickCount/20);
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f8d4 1310 	ldr.w	r1, [r4, #784]	@ 0x310
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	2214      	movs	r2, #20
 8003c12:	4620      	mov	r0, r4
 8003c14:	fbb1 f1f2 	udiv	r1, r1, r2
 8003c18:	4798      	blx	r3
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 8003c1a:	1d20      	adds	r0, r4, #4
}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c22:	f00a ba28 	b.w	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003c26:	bf00      	nop
 8003c28:	08014804 	.word	0x08014804
 8003c2c:	200014e6 	.word	0x200014e6

08003c30 <_ZN11Screen2View11updatePointEi>:
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4604      	mov	r4, r0
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003c34:	f500 753e 	add.w	r5, r0, #760	@ 0x2f8
{
 8003c38:	460b      	mov	r3, r1
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	4a05      	ldr	r2, [pc, #20]	@ (8003c54 <_ZN11Screen2View11updatePointEi+0x24>)
 8003c3e:	210a      	movs	r1, #10
 8003c40:	f00c fdfa 	bl	8010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003c44:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
    point.invalidate();
 8003c48:	f504 7001 	add.w	r0, r4, #516	@ 0x204
}
 8003c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    point.invalidate();
 8003c50:	f00a ba11 	b.w	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003c54:	08015429 	.word	0x08015429

08003c58 <_ZN11Screen2View12updateHeartsEv>:
{
 8003c58:	b510      	push	{r4, lr}
    switch (lives)
 8003c5a:	f890 3319 	ldrb.w	r3, [r0, #793]	@ 0x319
{
 8003c5e:	4604      	mov	r4, r0
    switch (lives)
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d80a      	bhi.n	8003c7a <_ZN11Screen2View12updateHeartsEv+0x22>
 8003c64:	e8df f003 	tbb	[pc, r3]
 8003c68:	271e1702 	.word	0x271e1702
        	resetGame();
 8003c6c:	6803      	ldr	r3, [r0, #0]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	4798      	blx	r3
 8003c72:	f009 f849 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
            application().gotoScreen1ScreenNoTransition();
 8003c76:	f7fe fd5f 	bl	8002738 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    heart1.invalidate();
 8003c7a:	f504 7014 	add.w	r0, r4, #592	@ 0x250
 8003c7e:	f00a f9fa 	bl	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
    heart2.invalidate();
 8003c82:	f504 701f 	add.w	r0, r4, #636	@ 0x27c
 8003c86:	f00a f9f6 	bl	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
    heart3.invalidate();
 8003c8a:	f504 702a 	add.w	r0, r4, #680	@ 0x2a8
}
 8003c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    heart3.invalidate();
 8003c92:	f00a b9f0 	b.w	800e076 <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f884 32a1 	strb.w	r3, [r4, #673]	@ 0x2a1
 8003ca2:	e005      	b.n	8003cb0 <_ZN11Screen2View12updateHeartsEv+0x58>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003caa:	f880 32a1 	strb.w	r3, [r0, #673]	@ 0x2a1
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f884 32cd 	strb.w	r3, [r4, #717]	@ 0x2cd
    }
 8003cb4:	e7e1      	b.n	8003c7a <_ZN11Screen2View12updateHeartsEv+0x22>
        visible = vis;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003cbc:	e7ef      	b.n	8003c9e <_ZN11Screen2View12updateHeartsEv+0x46>

08003cbe <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8003cbe:	20f0      	movs	r0, #240	@ 0xf0
 8003cc0:	4770      	bx	lr

08003cc2 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8003cc2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8003cc6:	4770      	bx	lr

08003cc8 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003cc8:	2029      	movs	r0, #41	@ 0x29
 8003cca:	f7fd be39 	b.w	8001940 <LCD_IO_WriteReg>

08003cce <ili9341_DisplayOff>:
 8003cce:	2028      	movs	r0, #40	@ 0x28
 8003cd0:	f7fd be36 	b.w	8001940 <LCD_IO_WriteReg>

08003cd4 <ili9341_Init>:
{
 8003cd4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003cd6:	f7fd fe07 	bl	80018e8 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003cda:	20ca      	movs	r0, #202	@ 0xca
 8003cdc:	f7fd fe30 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ce0:	20c3      	movs	r0, #195	@ 0xc3
 8003ce2:	f7fd fe11 	bl	8001908 <LCD_IO_WriteData>
 8003ce6:	2008      	movs	r0, #8
 8003ce8:	f7fd fe0e 	bl	8001908 <LCD_IO_WriteData>
 8003cec:	2050      	movs	r0, #80	@ 0x50
 8003cee:	f7fd fe0b 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cf2:	20cf      	movs	r0, #207	@ 0xcf
 8003cf4:	f7fd fe24 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fd fe05 	bl	8001908 <LCD_IO_WriteData>
 8003cfe:	20c1      	movs	r0, #193	@ 0xc1
 8003d00:	f7fd fe02 	bl	8001908 <LCD_IO_WriteData>
 8003d04:	2030      	movs	r0, #48	@ 0x30
 8003d06:	f7fd fdff 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d0a:	20ed      	movs	r0, #237	@ 0xed
 8003d0c:	f7fd fe18 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d10:	2064      	movs	r0, #100	@ 0x64
 8003d12:	f7fd fdf9 	bl	8001908 <LCD_IO_WriteData>
 8003d16:	2003      	movs	r0, #3
 8003d18:	f7fd fdf6 	bl	8001908 <LCD_IO_WriteData>
 8003d1c:	2012      	movs	r0, #18
 8003d1e:	f7fd fdf3 	bl	8001908 <LCD_IO_WriteData>
 8003d22:	2081      	movs	r0, #129	@ 0x81
 8003d24:	f7fd fdf0 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d28:	20e8      	movs	r0, #232	@ 0xe8
 8003d2a:	f7fd fe09 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d2e:	2085      	movs	r0, #133	@ 0x85
 8003d30:	f7fd fdea 	bl	8001908 <LCD_IO_WriteData>
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fd fde7 	bl	8001908 <LCD_IO_WriteData>
 8003d3a:	2078      	movs	r0, #120	@ 0x78
 8003d3c:	f7fd fde4 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d40:	20cb      	movs	r0, #203	@ 0xcb
 8003d42:	f7fd fdfd 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d46:	2039      	movs	r0, #57	@ 0x39
 8003d48:	f7fd fdde 	bl	8001908 <LCD_IO_WriteData>
 8003d4c:	202c      	movs	r0, #44	@ 0x2c
 8003d4e:	f7fd fddb 	bl	8001908 <LCD_IO_WriteData>
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fd fdd8 	bl	8001908 <LCD_IO_WriteData>
 8003d58:	2034      	movs	r0, #52	@ 0x34
 8003d5a:	f7fd fdd5 	bl	8001908 <LCD_IO_WriteData>
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7fd fdd2 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d64:	20f7      	movs	r0, #247	@ 0xf7
 8003d66:	f7fd fdeb 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d6a:	2020      	movs	r0, #32
 8003d6c:	f7fd fdcc 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d70:	20ea      	movs	r0, #234	@ 0xea
 8003d72:	f7fd fde5 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fd fdc6 	bl	8001908 <LCD_IO_WriteData>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fd fdc3 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d82:	20b1      	movs	r0, #177	@ 0xb1
 8003d84:	f7fd fddc 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fd fdbd 	bl	8001908 <LCD_IO_WriteData>
 8003d8e:	201b      	movs	r0, #27
 8003d90:	f7fd fdba 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d94:	20b6      	movs	r0, #182	@ 0xb6
 8003d96:	f7fd fdd3 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d9a:	200a      	movs	r0, #10
 8003d9c:	f7fd fdb4 	bl	8001908 <LCD_IO_WriteData>
 8003da0:	20a2      	movs	r0, #162	@ 0xa2
 8003da2:	f7fd fdb1 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003da6:	20c0      	movs	r0, #192	@ 0xc0
 8003da8:	f7fd fdca 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dac:	2010      	movs	r0, #16
 8003dae:	f7fd fdab 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003db2:	20c1      	movs	r0, #193	@ 0xc1
 8003db4:	f7fd fdc4 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003db8:	2010      	movs	r0, #16
 8003dba:	f7fd fda5 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dbe:	20c5      	movs	r0, #197	@ 0xc5
 8003dc0:	f7fd fdbe 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dc4:	2045      	movs	r0, #69	@ 0x45
 8003dc6:	f7fd fd9f 	bl	8001908 <LCD_IO_WriteData>
 8003dca:	2015      	movs	r0, #21
 8003dcc:	f7fd fd9c 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dd0:	20c7      	movs	r0, #199	@ 0xc7
 8003dd2:	f7fd fdb5 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dd6:	2090      	movs	r0, #144	@ 0x90
 8003dd8:	f7fd fd96 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ddc:	2036      	movs	r0, #54	@ 0x36
 8003dde:	f7fd fdaf 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003de2:	20c8      	movs	r0, #200	@ 0xc8
 8003de4:	f7fd fd90 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003de8:	20f2      	movs	r0, #242	@ 0xf2
 8003dea:	f7fd fda9 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7fd fd8a 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003df4:	20b0      	movs	r0, #176	@ 0xb0
 8003df6:	f7fd fda3 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dfa:	20c2      	movs	r0, #194	@ 0xc2
 8003dfc:	f7fd fd84 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e00:	20b6      	movs	r0, #182	@ 0xb6
 8003e02:	f7fd fd9d 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e06:	200a      	movs	r0, #10
 8003e08:	f7fd fd7e 	bl	8001908 <LCD_IO_WriteData>
 8003e0c:	20a7      	movs	r0, #167	@ 0xa7
 8003e0e:	f7fd fd7b 	bl	8001908 <LCD_IO_WriteData>
 8003e12:	2027      	movs	r0, #39	@ 0x27
 8003e14:	f7fd fd78 	bl	8001908 <LCD_IO_WriteData>
 8003e18:	2004      	movs	r0, #4
 8003e1a:	f7fd fd75 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e1e:	202a      	movs	r0, #42	@ 0x2a
 8003e20:	f7fd fd8e 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fd fd6f 	bl	8001908 <LCD_IO_WriteData>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f7fd fd6c 	bl	8001908 <LCD_IO_WriteData>
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fd fd69 	bl	8001908 <LCD_IO_WriteData>
 8003e36:	20ef      	movs	r0, #239	@ 0xef
 8003e38:	f7fd fd66 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e3c:	202b      	movs	r0, #43	@ 0x2b
 8003e3e:	f7fd fd7f 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7fd fd60 	bl	8001908 <LCD_IO_WriteData>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7fd fd5d 	bl	8001908 <LCD_IO_WriteData>
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fd fd5a 	bl	8001908 <LCD_IO_WriteData>
 8003e54:	203f      	movs	r0, #63	@ 0x3f
 8003e56:	f7fd fd57 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e5a:	20f6      	movs	r0, #246	@ 0xf6
 8003e5c:	f7fd fd70 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7fd fd51 	bl	8001908 <LCD_IO_WriteData>
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7fd fd4e 	bl	8001908 <LCD_IO_WriteData>
 8003e6c:	2006      	movs	r0, #6
 8003e6e:	f7fd fd4b 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e72:	202c      	movs	r0, #44	@ 0x2c
 8003e74:	f7fd fd64 	bl	8001940 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003e78:	20c8      	movs	r0, #200	@ 0xc8
 8003e7a:	f7fd fdaf 	bl	80019dc <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003e7e:	2026      	movs	r0, #38	@ 0x26
 8003e80:	f7fd fd5e 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7fd fd3f 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e8a:	20e0      	movs	r0, #224	@ 0xe0
 8003e8c:	f7fd fd58 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e90:	200f      	movs	r0, #15
 8003e92:	f7fd fd39 	bl	8001908 <LCD_IO_WriteData>
 8003e96:	2029      	movs	r0, #41	@ 0x29
 8003e98:	f7fd fd36 	bl	8001908 <LCD_IO_WriteData>
 8003e9c:	2024      	movs	r0, #36	@ 0x24
 8003e9e:	f7fd fd33 	bl	8001908 <LCD_IO_WriteData>
 8003ea2:	200c      	movs	r0, #12
 8003ea4:	f7fd fd30 	bl	8001908 <LCD_IO_WriteData>
 8003ea8:	200e      	movs	r0, #14
 8003eaa:	f7fd fd2d 	bl	8001908 <LCD_IO_WriteData>
 8003eae:	2009      	movs	r0, #9
 8003eb0:	f7fd fd2a 	bl	8001908 <LCD_IO_WriteData>
 8003eb4:	204e      	movs	r0, #78	@ 0x4e
 8003eb6:	f7fd fd27 	bl	8001908 <LCD_IO_WriteData>
 8003eba:	2078      	movs	r0, #120	@ 0x78
 8003ebc:	f7fd fd24 	bl	8001908 <LCD_IO_WriteData>
 8003ec0:	203c      	movs	r0, #60	@ 0x3c
 8003ec2:	f7fd fd21 	bl	8001908 <LCD_IO_WriteData>
 8003ec6:	2009      	movs	r0, #9
 8003ec8:	f7fd fd1e 	bl	8001908 <LCD_IO_WriteData>
 8003ecc:	2013      	movs	r0, #19
 8003ece:	f7fd fd1b 	bl	8001908 <LCD_IO_WriteData>
 8003ed2:	2005      	movs	r0, #5
 8003ed4:	f7fd fd18 	bl	8001908 <LCD_IO_WriteData>
 8003ed8:	2017      	movs	r0, #23
 8003eda:	f7fd fd15 	bl	8001908 <LCD_IO_WriteData>
 8003ede:	2011      	movs	r0, #17
 8003ee0:	f7fd fd12 	bl	8001908 <LCD_IO_WriteData>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fd fd0f 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003eea:	20e1      	movs	r0, #225	@ 0xe1
 8003eec:	f7fd fd28 	bl	8001940 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f7fd fd09 	bl	8001908 <LCD_IO_WriteData>
 8003ef6:	2016      	movs	r0, #22
 8003ef8:	f7fd fd06 	bl	8001908 <LCD_IO_WriteData>
 8003efc:	201b      	movs	r0, #27
 8003efe:	f7fd fd03 	bl	8001908 <LCD_IO_WriteData>
 8003f02:	2004      	movs	r0, #4
 8003f04:	f7fd fd00 	bl	8001908 <LCD_IO_WriteData>
 8003f08:	2011      	movs	r0, #17
 8003f0a:	f7fd fcfd 	bl	8001908 <LCD_IO_WriteData>
 8003f0e:	2007      	movs	r0, #7
 8003f10:	f7fd fcfa 	bl	8001908 <LCD_IO_WriteData>
 8003f14:	2031      	movs	r0, #49	@ 0x31
 8003f16:	f7fd fcf7 	bl	8001908 <LCD_IO_WriteData>
 8003f1a:	2033      	movs	r0, #51	@ 0x33
 8003f1c:	f7fd fcf4 	bl	8001908 <LCD_IO_WriteData>
 8003f20:	2042      	movs	r0, #66	@ 0x42
 8003f22:	f7fd fcf1 	bl	8001908 <LCD_IO_WriteData>
 8003f26:	2005      	movs	r0, #5
 8003f28:	f7fd fcee 	bl	8001908 <LCD_IO_WriteData>
 8003f2c:	200c      	movs	r0, #12
 8003f2e:	f7fd fceb 	bl	8001908 <LCD_IO_WriteData>
 8003f32:	200a      	movs	r0, #10
 8003f34:	f7fd fce8 	bl	8001908 <LCD_IO_WriteData>
 8003f38:	2028      	movs	r0, #40	@ 0x28
 8003f3a:	f7fd fce5 	bl	8001908 <LCD_IO_WriteData>
 8003f3e:	202f      	movs	r0, #47	@ 0x2f
 8003f40:	f7fd fce2 	bl	8001908 <LCD_IO_WriteData>
 8003f44:	200f      	movs	r0, #15
 8003f46:	f7fd fcdf 	bl	8001908 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003f4a:	2011      	movs	r0, #17
 8003f4c:	f7fd fcf8 	bl	8001940 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003f50:	20c8      	movs	r0, #200	@ 0xc8
 8003f52:	f7fd fd43 	bl	80019dc <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003f56:	2029      	movs	r0, #41	@ 0x29
 8003f58:	f7fd fcf2 	bl	8001940 <LCD_IO_WriteReg>
}
 8003f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8003f60:	202c      	movs	r0, #44	@ 0x2c
 8003f62:	f7fd bced 	b.w	8001940 <LCD_IO_WriteReg>

08003f66 <ili9341_ReadID>:
{
 8003f66:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003f68:	f7fd fcbe 	bl	80018e8 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003f6c:	2103      	movs	r1, #3
 8003f6e:	20d3      	movs	r0, #211	@ 0xd3
 8003f70:	f7fd fd02 	bl	8001978 <LCD_IO_ReadData>
}
 8003f74:	b280      	uxth	r0, r0
 8003f76:	bd08      	pop	{r3, pc}

08003f78 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003f78:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003f7a:	b2c4      	uxtb	r4, r0
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	2103      	movs	r1, #3
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7fd fc67 	bl	8001854 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003f86:	200a      	movs	r0, #10
 8003f88:	f7fd fcac 	bl	80018e4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2103      	movs	r1, #3
 8003f92:	f7fd fc5f 	bl	8001854 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8003f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	f7fd bca2 	b.w	80018e4 <IOE_Delay>

08003fa0 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003fa4:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8003fa6:	f7fd fc53 	bl	8001850 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003faa:	2100      	movs	r1, #0
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7fd fc69 	bl	8001884 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003fb2:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003fb4:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7fd fc64 	bl	8001884 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003fbc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8003fc0:	b280      	uxth	r0, r0
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}

08003fc4 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003fc4:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003fc6:	b2c4      	uxtb	r4, r0
 8003fc8:	2140      	movs	r1, #64	@ 0x40
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7fd fc5a 	bl	8001884 <IOE_Read>
  
  if(state > 0)
 8003fd0:	0603      	lsls	r3, r0, #24
 8003fd2:	d507      	bpl.n	8003fe4 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003fd4:	214c      	movs	r1, #76	@ 0x4c
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7fd fc54 	bl	8001884 <IOE_Read>
 8003fdc:	3800      	subs	r0, #0
 8003fde:	bf18      	it	ne
 8003fe0:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8003fe2:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	214b      	movs	r1, #75	@ 0x4b
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7fd fc33 	bl	8001854 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	214b      	movs	r1, #75	@ 0x4b
 8003ff4:	f7fd fc2e 	bl	8001854 <IOE_Write>
  uint8_t ret = 0;
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e7f2      	b.n	8003fe2 <stmpe811_TS_DetectTouch+0x1e>

08003ffc <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003ffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003ffe:	2304      	movs	r3, #4
 8004000:	b2c4      	uxtb	r4, r0
{
 8004002:	460e      	mov	r6, r1
 8004004:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004006:	21d7      	movs	r1, #215	@ 0xd7
 8004008:	eb0d 0203 	add.w	r2, sp, r3
 800400c:	4620      	mov	r0, r4
 800400e:	f7fd fc53 	bl	80018b8 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004016:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004018:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800401c:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800401e:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004020:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004022:	2201      	movs	r2, #1
 8004024:	214b      	movs	r1, #75	@ 0x4b
 8004026:	f7fd fc15 	bl	8001854 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800402a:	2200      	movs	r2, #0
 800402c:	214b      	movs	r1, #75	@ 0x4b
 800402e:	4620      	mov	r0, r4
 8004030:	f7fd fc10 	bl	8001854 <IOE_Write>
}
 8004034:	b002      	add	sp, #8
 8004036:	bd70      	pop	{r4, r5, r6, pc}

08004038 <stmpe811_Init>:
{
 8004038:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 800403a:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <stmpe811_Init+0x2c>)
 800403c:	7813      	ldrb	r3, [r2, #0]
 800403e:	4298      	cmp	r0, r3
{
 8004040:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8004042:	d00d      	beq.n	8004060 <stmpe811_Init+0x28>
 8004044:	7851      	ldrb	r1, [r2, #1]
 8004046:	4288      	cmp	r0, r1
 8004048:	d00a      	beq.n	8004060 <stmpe811_Init+0x28>
 800404a:	b10b      	cbz	r3, 8004050 <stmpe811_Init+0x18>
 800404c:	b941      	cbnz	r1, 8004060 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800404e:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8004050:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8004052:	f7fd fbfd 	bl	8001850 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8004056:	4620      	mov	r0, r4
}
 8004058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 800405c:	f7ff bf8c 	b.w	8003f78 <stmpe811_Reset>
}
 8004060:	bd10      	pop	{r4, pc}
 8004062:	bf00      	nop
 8004064:	20001878 	.word	0x20001878

08004068 <stmpe811_EnableGlobalIT>:
{
 8004068:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800406a:	b2c4      	uxtb	r4, r0
 800406c:	2109      	movs	r1, #9
 800406e:	4620      	mov	r0, r4
 8004070:	f7fd fc08 	bl	8001884 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004074:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	4620      	mov	r0, r4
 800407c:	2109      	movs	r1, #9
}
 800407e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004082:	f7fd bbe7 	b.w	8001854 <IOE_Write>

08004086 <stmpe811_DisableGlobalIT>:
{
 8004086:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004088:	b2c4      	uxtb	r4, r0
 800408a:	2109      	movs	r1, #9
 800408c:	4620      	mov	r0, r4
 800408e:	f7fd fbf9 	bl	8001884 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004092:	2109      	movs	r1, #9
 8004094:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004098:	4620      	mov	r0, r4
}
 800409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800409e:	f7fd bbd9 	b.w	8001854 <IOE_Write>

080040a2 <stmpe811_EnableITSource>:
{
 80040a2:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80040a4:	b2c4      	uxtb	r4, r0
{
 80040a6:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80040a8:	4620      	mov	r0, r4
 80040aa:	210a      	movs	r1, #10
 80040ac:	f7fd fbea 	bl	8001884 <IOE_Read>
  tmp |= Source; 
 80040b0:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	4620      	mov	r0, r4
 80040b8:	210a      	movs	r1, #10
}
 80040ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80040be:	f7fd bbc9 	b.w	8001854 <IOE_Write>

080040c2 <stmpe811_TS_EnableIT>:
{
 80040c2:	b510      	push	{r4, lr}
 80040c4:	4604      	mov	r4, r0
  IOE_ITConfig();
 80040c6:	f7fd fbc4 	bl	8001852 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80040ca:	4620      	mov	r0, r4
 80040cc:	211f      	movs	r1, #31
 80040ce:	f7ff ffe8 	bl	80040a2 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 80040d2:	4620      	mov	r0, r4
}
 80040d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 80040d8:	f7ff bfc6 	b.w	8004068 <stmpe811_EnableGlobalIT>

080040dc <stmpe811_DisableITSource>:
{
 80040dc:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80040de:	b2c4      	uxtb	r4, r0
{
 80040e0:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80040e2:	4620      	mov	r0, r4
 80040e4:	210a      	movs	r1, #10
 80040e6:	f7fd fbcd 	bl	8001884 <IOE_Read>
  tmp &= ~Source; 
 80040ea:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	4620      	mov	r0, r4
 80040f2:	210a      	movs	r1, #10
}
 80040f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80040f8:	f7fd bbac 	b.w	8001854 <IOE_Write>

080040fc <stmpe811_TS_DisableIT>:
{
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004100:	f7ff ffc1 	bl	8004086 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004104:	4620      	mov	r0, r4
 8004106:	211f      	movs	r1, #31
}
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800410c:	f7ff bfe6 	b.w	80040dc <stmpe811_DisableITSource>

08004110 <stmpe811_ReadGITStatus>:
{
 8004110:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004112:	b2c0      	uxtb	r0, r0
{
 8004114:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004116:	210b      	movs	r1, #11
 8004118:	f7fd fbb4 	bl	8001884 <IOE_Read>
}
 800411c:	4020      	ands	r0, r4
 800411e:	bd10      	pop	{r4, pc}

08004120 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004120:	211f      	movs	r1, #31
 8004122:	f7ff bff5 	b.w	8004110 <stmpe811_ReadGITStatus>

08004126 <stmpe811_ClearGlobalIT>:
{
 8004126:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004128:	b2c0      	uxtb	r0, r0
 800412a:	210b      	movs	r1, #11
 800412c:	f7fd bb92 	b.w	8001854 <IOE_Write>

08004130 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8004130:	211f      	movs	r1, #31
 8004132:	f7ff bff8 	b.w	8004126 <stmpe811_ClearGlobalIT>

08004136 <stmpe811_IO_EnableAF>:
{
 8004136:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004138:	b2c4      	uxtb	r4, r0
{
 800413a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800413c:	4620      	mov	r0, r4
 800413e:	2117      	movs	r1, #23
 8004140:	f7fd fba0 	bl	8001884 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8004144:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	4620      	mov	r0, r4
 800414c:	2117      	movs	r1, #23
}
 800414e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004152:	f7fd bb7f 	b.w	8001854 <IOE_Write>

08004156 <stmpe811_TS_Start>:
{
 8004156:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004158:	b2c4      	uxtb	r4, r0
{
 800415a:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800415c:	2104      	movs	r1, #4
 800415e:	4620      	mov	r0, r4
 8004160:	f7fd fb90 	bl	8001884 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004164:	2104      	movs	r1, #4
 8004166:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800416a:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800416c:	4620      	mov	r0, r4
 800416e:	f7fd fb71 	bl	8001854 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004172:	4630      	mov	r0, r6
 8004174:	21f0      	movs	r1, #240	@ 0xf0
 8004176:	f7ff ffde 	bl	8004136 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800417a:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 800417e:	4620      	mov	r0, r4
 8004180:	2104      	movs	r1, #4
 8004182:	f7fd fb67 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004186:	2249      	movs	r2, #73	@ 0x49
 8004188:	2120      	movs	r1, #32
 800418a:	4620      	mov	r0, r4
 800418c:	f7fd fb62 	bl	8001854 <IOE_Write>
  IOE_Delay(2); 
 8004190:	2002      	movs	r0, #2
 8004192:	f7fd fba7 	bl	80018e4 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004196:	4620      	mov	r0, r4
 8004198:	2201      	movs	r2, #1
 800419a:	2121      	movs	r1, #33	@ 0x21
 800419c:	f7fd fb5a 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80041a0:	4620      	mov	r0, r4
 80041a2:	229a      	movs	r2, #154	@ 0x9a
 80041a4:	2141      	movs	r1, #65	@ 0x41
 80041a6:	f7fd fb55 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80041aa:	4620      	mov	r0, r4
 80041ac:	2201      	movs	r2, #1
 80041ae:	214a      	movs	r1, #74	@ 0x4a
 80041b0:	f7fd fb50 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80041b4:	4620      	mov	r0, r4
 80041b6:	2201      	movs	r2, #1
 80041b8:	214b      	movs	r1, #75	@ 0x4b
 80041ba:	f7fd fb4b 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80041be:	4620      	mov	r0, r4
 80041c0:	2200      	movs	r2, #0
 80041c2:	214b      	movs	r1, #75	@ 0x4b
 80041c4:	f7fd fb46 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80041c8:	4620      	mov	r0, r4
 80041ca:	2201      	movs	r2, #1
 80041cc:	2156      	movs	r1, #86	@ 0x56
 80041ce:	f7fd fb41 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80041d2:	4620      	mov	r0, r4
 80041d4:	2201      	movs	r2, #1
 80041d6:	2158      	movs	r1, #88	@ 0x58
 80041d8:	f7fd fb3c 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80041dc:	4620      	mov	r0, r4
 80041de:	2201      	movs	r2, #1
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	f7fd fb37 	bl	8001854 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80041e6:	4620      	mov	r0, r4
 80041e8:	22ff      	movs	r2, #255	@ 0xff
 80041ea:	210b      	movs	r1, #11
 80041ec:	f7fd fb32 	bl	8001854 <IOE_Write>
}
 80041f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 80041f4:	2002      	movs	r0, #2
 80041f6:	f7fd bb75 	b.w	80018e4 <IOE_Delay>
	...

080041fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <SystemInit+0x18>)
 80041fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004202:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8004206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800420a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800420e:	609a      	str	r2, [r3, #8]
#endif
}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004218:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_Init+0x30>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004222:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800422a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004232:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004234:	2003      	movs	r0, #3
 8004236:	f000 fa45 	bl	80046c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fd fe68 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004240:	f7fd fbda 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004244:	2000      	movs	r0, #0
 8004246:	bd08      	pop	{r3, pc}
 8004248:	40023c00 	.word	0x40023c00

0800424c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800424c:	4a03      	ldr	r2, [pc, #12]	@ (800425c <HAL_IncTick+0x10>)
 800424e:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <HAL_IncTick+0x14>)
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	440b      	add	r3, r1
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	2000187c 	.word	0x2000187c
 8004260:	20000078 	.word	0x20000078

08004264 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004264:	4b01      	ldr	r3, [pc, #4]	@ (800426c <HAL_GetTick+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000187c 	.word	0x2000187c

08004270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7ff fff6 	bl	8004264 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004278:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800427a:	bf1c      	itt	ne
 800427c:	4b05      	ldrne	r3, [pc, #20]	@ (8004294 <HAL_Delay+0x24>)
 800427e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004280:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004282:	bf18      	it	ne
 8004284:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004286:	f7ff ffed 	bl	8004264 <HAL_GetTick>
 800428a:	1b43      	subs	r3, r0, r5
 800428c:	42a3      	cmp	r3, r4
 800428e:	d3fa      	bcc.n	8004286 <HAL_Delay+0x16>
  {
  }
}
 8004290:	bd38      	pop	{r3, r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	20000078 	.word	0x20000078

08004298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004298:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 800429a:	4604      	mov	r4, r0
 800429c:	2800      	cmp	r0, #0
 800429e:	f000 809b 	beq.w	80043d8 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042a2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80042a4:	b925      	cbnz	r5, 80042b0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042a6:	f7fd fbdf 	bl	8001a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042aa:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ac:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042b2:	06db      	lsls	r3, r3, #27
 80042b4:	f100 808e 	bmi.w	80043d4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042be:	f023 0302 	bic.w	r3, r3, #2
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042c8:	4b44      	ldr	r3, [pc, #272]	@ (80043dc <HAL_ADC_Init+0x144>)
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80042d0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	6861      	ldr	r1, [r4, #4]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042da:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042dc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80042ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ee:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042f0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042f6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042fe:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004300:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800430e:	4934      	ldr	r1, [pc, #208]	@ (80043e0 <HAL_ADC_Init+0x148>)
 8004310:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004312:	428a      	cmp	r2, r1
 8004314:	d052      	beq.n	80043bc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 800431c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004324:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004326:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004328:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800432c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	f022 0202 	bic.w	r2, r2, #2
 800433a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	7e21      	ldrb	r1, [r4, #24]
 8004340:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004344:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004346:	f894 2020 	ldrb.w	r2, [r4, #32]
 800434a:	2a00      	cmp	r2, #0
 800434c:	d03e      	beq.n	80043cc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800434e:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004350:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800435e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	3901      	subs	r1, #1
 8004364:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800436a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800436c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800436e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	3901      	subs	r1, #1
 8004378:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800437c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800438c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004390:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004392:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004394:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800439c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800439e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043a0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80043a4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80043a6:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80043a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 80043b4:	2300      	movs	r3, #0
 80043b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043ca:	e7b2      	b.n	8004332 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d2:	e7c9      	b.n	8004368 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80043d4:	2001      	movs	r0, #1
 80043d6:	e7ed      	b.n	80043b4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
 80043da:	e7ee      	b.n	80043ba <HAL_ADC_Init+0x122>
 80043dc:	40012300 	.word	0x40012300
 80043e0:	0f000001 	.word	0x0f000001

080043e4 <HAL_ADC_Start>:
{
 80043e4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80043ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d069      	beq.n	80044c6 <HAL_ADC_Start+0xe2>
 80043f2:	2301      	movs	r3, #1
 80043f4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	07d2      	lsls	r2, r2, #31
 80043fe:	d50b      	bpl.n	8004418 <HAL_ADC_Start+0x34>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	07d1      	lsls	r1, r2, #31
 8004404:	d41a      	bmi.n	800443c <HAL_ADC_Start+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004408:	f043 0310 	orr.w	r3, r3, #16
 800440c:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6443      	str	r3, [r0, #68]	@ 0x44
 8004416:	e04c      	b.n	80044b2 <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 8004418:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800441a:	492c      	ldr	r1, [pc, #176]	@ (80044cc <HAL_ADC_Start+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004422:	4a2b      	ldr	r2, [pc, #172]	@ (80044d0 <HAL_ADC_Start+0xec>)
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	fbb2 f2f1 	udiv	r2, r2, r1
 800442a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800442e:	9201      	str	r2, [sp, #4]
    while (counter != 0U)
 8004430:	9a01      	ldr	r2, [sp, #4]
 8004432:	2a00      	cmp	r2, #0
 8004434:	d0e4      	beq.n	8004400 <HAL_ADC_Start+0x1c>
      counter--;
 8004436:	9a01      	ldr	r2, [sp, #4]
 8004438:	3a01      	subs	r2, #1
 800443a:	e7f8      	b.n	800442e <HAL_ADC_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 800443c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800443e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444a:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004450:	bf41      	itttt	mi
 8004452:	6c02      	ldrmi	r2, [r0, #64]	@ 0x40
 8004454:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8004458:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 800445c:	6402      	strmi	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800445e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004464:	bf1c      	itt	ne
 8004466:	6c42      	ldrne	r2, [r0, #68]	@ 0x44
 8004468:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800446c:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800446e:	2200      	movs	r2, #0
 8004470:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004474:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004478:	601a      	str	r2, [r3, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800447a:	4a16      	ldr	r2, [pc, #88]	@ (80044d4 <HAL_ADC_Start+0xf0>)
 800447c:	6851      	ldr	r1, [r2, #4]
 800447e:	f011 0f1f 	tst.w	r1, #31
 8004482:	4915      	ldr	r1, [pc, #84]	@ (80044d8 <HAL_ADC_Start+0xf4>)
 8004484:	d11c      	bne.n	80044c0 <HAL_ADC_Start+0xdc>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004486:	428b      	cmp	r3, r1
 8004488:	d007      	beq.n	800449a <HAL_ADC_Start+0xb6>
 800448a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800448e:	428b      	cmp	r3, r1
 8004490:	d10c      	bne.n	80044ac <HAL_ADC_Start+0xc8>
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	f012 0f1f 	tst.w	r2, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004498:	d10b      	bne.n	80044b2 <HAL_ADC_Start+0xce>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80044a0:	d107      	bne.n	80044b2 <HAL_ADC_Start+0xce>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	e002      	b.n	80044b2 <HAL_ADC_Start+0xce>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044ac:	490b      	ldr	r1, [pc, #44]	@ (80044dc <HAL_ADC_Start+0xf8>)
 80044ae:	428b      	cmp	r3, r1
 80044b0:	d002      	beq.n	80044b8 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 80044b2:	2000      	movs	r0, #0
}
 80044b4:	b002      	add	sp, #8
 80044b6:	4770      	bx	lr
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044b8:	6852      	ldr	r2, [r2, #4]
 80044ba:	f012 0f10 	tst.w	r2, #16
 80044be:	e7eb      	b.n	8004498 <HAL_ADC_Start+0xb4>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044c0:	428b      	cmp	r3, r1
 80044c2:	d1f6      	bne.n	80044b2 <HAL_ADC_Start+0xce>
 80044c4:	e7e9      	b.n	800449a <HAL_ADC_Start+0xb6>
  __HAL_LOCK(hadc);
 80044c6:	2002      	movs	r0, #2
 80044c8:	e7f4      	b.n	80044b4 <HAL_ADC_Start+0xd0>
 80044ca:	bf00      	nop
 80044cc:	000f4240 	.word	0x000f4240
 80044d0:	20000074 	.word	0x20000074
 80044d4:	40012300 	.word	0x40012300
 80044d8:	40012000 	.word	0x40012000
 80044dc:	40012200 	.word	0x40012200

080044e0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044e0:	6803      	ldr	r3, [r0, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	0552      	lsls	r2, r2, #21
{
 80044e6:	b570      	push	{r4, r5, r6, lr}
 80044e8:	4604      	mov	r4, r0
 80044ea:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044ec:	d50b      	bpl.n	8004506 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044ee:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f0:	05de      	lsls	r6, r3, #23
 80044f2:	d508      	bpl.n	8004506 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 80044fc:	2300      	movs	r3, #0
 80044fe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
}
 8004504:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8004506:	f7ff fead 	bl	8004264 <HAL_GetTick>
 800450a:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	0791      	lsls	r1, r2, #30
 8004512:	d50c      	bpl.n	800452e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004514:	f06f 0212 	mvn.w	r2, #18
 8004518:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800451a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800451c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004520:	6422      	str	r2, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004528:	d017      	beq.n	800455a <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 800452a:	2000      	movs	r0, #0
 800452c:	e7ea      	b.n	8004504 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 800452e:	1c68      	adds	r0, r5, #1
 8004530:	d0ed      	beq.n	800450e <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004532:	b965      	cbnz	r5, 800454e <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f013 0302 	ands.w	r3, r3, #2
 800453c:	d1e6      	bne.n	800450c <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800453e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 8004540:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004544:	f042 0204 	orr.w	r2, r2, #4
 8004548:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_TIMEOUT;
 800454a:	2003      	movs	r0, #3
 800454c:	e7da      	b.n	8004504 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800454e:	f7ff fe89 	bl	8004264 <HAL_GetTick>
 8004552:	1b80      	subs	r0, r0, r6
 8004554:	42a8      	cmp	r0, r5
 8004556:	d8ed      	bhi.n	8004534 <HAL_ADC_PollForConversion+0x54>
 8004558:	e7d8      	b.n	800450c <HAL_ADC_PollForConversion+0x2c>
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800455a:	7e22      	ldrb	r2, [r4, #24]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d1e4      	bne.n	800452a <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004562:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8004566:	d002      	beq.n	800456e <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004568:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800456a:	055a      	lsls	r2, r3, #21
 800456c:	d4dd      	bmi.n	800452a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800456e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004574:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004576:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004578:	04db      	lsls	r3, r3, #19
 800457a:	d4d6      	bmi.n	800452a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800457c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6423      	str	r3, [r4, #64]	@ 0x40
 8004584:	e7d1      	b.n	800452a <HAL_ADC_PollForConversion+0x4a>

08004586 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 800458a:	4770      	bx	lr

0800458c <HAL_ADC_ConfigChannel>:
{
 800458c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004592:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004596:	2b01      	cmp	r3, #1
{
 8004598:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800459a:	f000 8086 	beq.w	80046aa <HAL_ADC_ConfigChannel+0x11e>
 800459e:	2301      	movs	r3, #1
 80045a0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045a4:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045a6:	682b      	ldr	r3, [r5, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045a8:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045aa:	2809      	cmp	r0, #9
 80045ac:	b284      	uxth	r4, r0
 80045ae:	d933      	bls.n	8004618 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045b0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80045b4:	68df      	ldr	r7, [r3, #12]
 80045b6:	3a1e      	subs	r2, #30
 80045b8:	f04f 0c07 	mov.w	ip, #7
 80045bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80045c0:	ea27 070c 	bic.w	r7, r7, ip
 80045c4:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045c6:	68df      	ldr	r7, [r3, #12]
 80045c8:	fa06 f202 	lsl.w	r2, r6, r2
 80045cc:	433a      	orrs	r2, r7
 80045ce:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80045d0:	6849      	ldr	r1, [r1, #4]
 80045d2:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 80045d8:	d82d      	bhi.n	8004636 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045dc:	3a05      	subs	r2, #5
 80045de:	261f      	movs	r6, #31
 80045e0:	4096      	lsls	r6, r2
 80045e2:	ea21 0106 	bic.w	r1, r1, r6
 80045e6:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045ea:	fa04 f202 	lsl.w	r2, r4, r2
 80045ee:	430a      	orrs	r2, r1
 80045f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80045f2:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <HAL_ADC_ConfigChannel+0x124>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <HAL_ADC_ConfigChannel+0x82>
 80045f8:	2812      	cmp	r0, #18
 80045fa:	d137      	bne.n	800466c <HAL_ADC_ConfigChannel+0xe0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80045fc:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <HAL_ADC_ConfigChannel+0x128>)
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8004604:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800460c:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800460e:	2000      	movs	r0, #0
 8004610:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
}
 8004614:	b003      	add	sp, #12
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800461e:	2707      	movs	r7, #7
 8004620:	fa07 f70c 	lsl.w	r7, r7, ip
 8004624:	ea22 0207 	bic.w	r2, r2, r7
 8004628:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	fa06 f60c 	lsl.w	r6, r6, ip
 8004630:	4316      	orrs	r6, r2
 8004632:	611e      	str	r6, [r3, #16]
 8004634:	e7cc      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13U)
 8004636:	290c      	cmp	r1, #12
 8004638:	f04f 011f 	mov.w	r1, #31
 800463c:	d80b      	bhi.n	8004656 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800463e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8004640:	3a23      	subs	r2, #35	@ 0x23
 8004642:	4091      	lsls	r1, r2
 8004644:	ea26 0101 	bic.w	r1, r6, r1
 8004648:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800464a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800464c:	fa04 f202 	lsl.w	r2, r4, r2
 8004650:	430a      	orrs	r2, r1
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
 8004654:	e7cd      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004656:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8004658:	3a41      	subs	r2, #65	@ 0x41
 800465a:	4091      	lsls	r1, r2
 800465c:	ea26 0101 	bic.w	r1, r6, r1
 8004660:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004662:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004664:	4094      	lsls	r4, r2
 8004666:	430c      	orrs	r4, r1
 8004668:	62dc      	str	r4, [r3, #44]	@ 0x2c
 800466a:	e7c2      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800466c:	4b12      	ldr	r3, [pc, #72]	@ (80046b8 <HAL_ADC_ConfigChannel+0x12c>)
 800466e:	4298      	cmp	r0, r3
 8004670:	d001      	beq.n	8004676 <HAL_ADC_ConfigChannel+0xea>
 8004672:	2811      	cmp	r0, #17
 8004674:	d1cb      	bne.n	800460e <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <HAL_ADC_ConfigChannel+0x128>)
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800467e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004686:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <HAL_ADC_ConfigChannel+0x12c>)
 800468a:	4298      	cmp	r0, r3
 800468c:	d1bf      	bne.n	800460e <HAL_ADC_ConfigChannel+0x82>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_ADC_ConfigChannel+0x130>)
 8004690:	4a0b      	ldr	r2, [pc, #44]	@ (80046c0 <HAL_ADC_ConfigChannel+0x134>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fbb3 f3f2 	udiv	r3, r3, r2
 8004698:	220a      	movs	r2, #10
 800469a:	4353      	muls	r3, r2
        counter--;
 800469c:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0b4      	beq.n	800460e <HAL_ADC_ConfigChannel+0x82>
        counter--;
 80046a4:	9b01      	ldr	r3, [sp, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	e7f8      	b.n	800469c <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 80046aa:	2002      	movs	r0, #2
 80046ac:	e7b2      	b.n	8004614 <HAL_ADC_ConfigChannel+0x88>
 80046ae:	bf00      	nop
 80046b0:	40012000 	.word	0x40012000
 80046b4:	40012300 	.word	0x40012300
 80046b8:	10000012 	.word	0x10000012
 80046bc:	20000074 	.word	0x20000074
 80046c0:	000f4240 	.word	0x000f4240

080046c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c4:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046c6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ce:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046d4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80046e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046e2:	4770      	bx	lr
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e8:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ea:	b530      	push	{r4, r5, lr}
 80046ec:	68dc      	ldr	r4, [r3, #12]
 80046ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	bf28      	it	cs
 80046fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004700:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004704:	bf8c      	ite	hi
 8004706:	3c03      	subhi	r4, #3
 8004708:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470a:	fa05 f303 	lsl.w	r3, r5, r3
 800470e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004712:	40a5      	lsls	r5, r4
 8004714:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800471a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004720:	bfac      	ite	ge
 8004722:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	4a08      	ldrlt	r2, [pc, #32]	@ (8004748 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	bfb8      	it	lt
 800472e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	b2db      	uxtb	r3, r3
 8004734:	bfaa      	itet	ge
 8004736:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004740:	bd30      	pop	{r4, r5, pc}
 8004742:	bf00      	nop
 8004744:	e000ed00 	.word	0xe000ed00
 8004748:	e000ed14 	.word	0xe000ed14

0800474c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800474c:	2800      	cmp	r0, #0
 800474e:	db07      	blt.n	8004760 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004750:	0941      	lsrs	r1, r0, #5
 8004752:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <HAL_NVIC_EnableIRQ+0x18>)
 8004754:	f000 001f 	and.w	r0, r0, #31
 8004758:	2301      	movs	r3, #1
 800475a:	4083      	lsls	r3, r0
 800475c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	e000e100 	.word	0xe000e100

08004768 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004768:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800476a:	4604      	mov	r4, r0
 800476c:	b150      	cbz	r0, 8004784 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800476e:	7943      	ldrb	r3, [r0, #5]
 8004770:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004774:	b913      	cbnz	r3, 800477c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004776:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004778:	f7fd f95e 	bl	8001a38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800477c:	2301      	movs	r3, #1
 800477e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004780:	2000      	movs	r0, #0
}
 8004782:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004784:	2001      	movs	r0, #1
 8004786:	e7fc      	b.n	8004782 <HAL_CRC_Init+0x1a>

08004788 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004788:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800478a:	4604      	mov	r4, r0
 800478c:	b320      	cbz	r0, 80047d8 <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800478e:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8004792:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004796:	b91b      	cbnz	r3, 80047a0 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004798:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800479c:	f7fd f9bc 	bl	8001b18 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047a0:	2302      	movs	r3, #2
 80047a2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	6861      	ldr	r1, [r4, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80047b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047b6:	68a1      	ldr	r1, [r4, #8]
 80047b8:	f022 0207 	bic.w	r2, r2, #7
 80047bc:	430a      	orrs	r2, r1
 80047be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80047c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c2:	68e1      	ldr	r1, [r4, #12]
 80047c4:	f36f 020d 	bfc	r2, #0, #14
 80047c8:	430a      	orrs	r2, r1
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047cc:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047ce:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80047d0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80047d2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 80047d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047d8:	2001      	movs	r0, #1
 80047da:	e7fc      	b.n	80047d6 <HAL_DMA2D_Init+0x4e>

080047dc <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80047dc:	4770      	bx	lr

080047de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80047de:	4770      	bx	lr

080047e0 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80047e0:	6803      	ldr	r3, [r0, #0]
{
 80047e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80047e4:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80047e6:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047e8:	07f2      	lsls	r2, r6, #31
{
 80047ea:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047ec:	d514      	bpl.n	8004818 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80047ee:	05e9      	lsls	r1, r5, #23
 80047f0:	d512      	bpl.n	8004818 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047f8:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80047fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004802:	2201      	movs	r2, #1
 8004804:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004806:	2304      	movs	r3, #4
 8004808:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800480c:	2300      	movs	r3, #0
 800480e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004812:	6943      	ldr	r3, [r0, #20]
 8004814:	b103      	cbz	r3, 8004818 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004816:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004818:	06b2      	lsls	r2, r6, #26
 800481a:	d516      	bpl.n	800484a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800481c:	04ab      	lsls	r3, r5, #18
 800481e:	d514      	bpl.n	800484a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004828:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800482a:	2220      	movs	r2, #32
 800482c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800482e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004836:	2304      	movs	r3, #4
 8004838:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800483c:	2300      	movs	r3, #0
 800483e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004842:	6963      	ldr	r3, [r4, #20]
 8004844:	b10b      	cbz	r3, 800484a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004846:	4620      	mov	r0, r4
 8004848:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800484a:	0730      	lsls	r0, r6, #28
 800484c:	d516      	bpl.n	800487c <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800484e:	0529      	lsls	r1, r5, #20
 8004850:	d514      	bpl.n	800487c <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800485a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800485c:	2208      	movs	r2, #8
 800485e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004860:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004862:	f043 0304 	orr.w	r3, r3, #4
 8004866:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004868:	2304      	movs	r3, #4
 800486a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004874:	6963      	ldr	r3, [r4, #20]
 8004876:	b10b      	cbz	r3, 800487c <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004878:	4620      	mov	r0, r4
 800487a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800487c:	0772      	lsls	r2, r6, #29
 800487e:	d50b      	bpl.n	8004898 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004880:	056b      	lsls	r3, r5, #21
 8004882:	d509      	bpl.n	8004898 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800488c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800488e:	2204      	movs	r2, #4
 8004890:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff ffa2 	bl	80047dc <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004898:	07b0      	lsls	r0, r6, #30
 800489a:	d514      	bpl.n	80048c6 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800489c:	05a9      	lsls	r1, r5, #22
 800489e:	d512      	bpl.n	80048c6 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80048aa:	2202      	movs	r2, #2
 80048ac:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80048b8:	2300      	movs	r3, #0
 80048ba:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	b10b      	cbz	r3, 80048c6 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80048c2:	4620      	mov	r0, r4
 80048c4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80048c6:	06f2      	lsls	r2, r6, #27
 80048c8:	d513      	bpl.n	80048f2 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80048ca:	04eb      	lsls	r3, r5, #19
 80048cc:	d511      	bpl.n	80048f2 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80048d8:	2210      	movs	r2, #16
 80048da:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048de:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80048e6:	2300      	movs	r3, #0
 80048e8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7ff ff76 	bl	80047de <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80048f2:	bd70      	pop	{r4, r5, r6, pc}

080048f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80048f6:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80048fa:	2a01      	cmp	r2, #1
{
 80048fc:	4603      	mov	r3, r0
 80048fe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004902:	d02b      	beq.n	800495c <HAL_DMA2D_ConfigLayer+0x68>
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800490a:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800490e:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004912:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004916:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004918:	4f17      	ldr	r7, [pc, #92]	@ (8004978 <HAL_DMA2D_ConfigLayer+0x84>)
 800491a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800491e:	3c09      	subs	r4, #9
 8004920:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004922:	bf9c      	itt	ls
 8004924:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004928:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800492a:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800492e:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004930:	bf88      	it	hi
 8004932:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004936:	b991      	cbnz	r1, 800495e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004938:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800493a:	4039      	ands	r1, r7
 800493c:	4301      	orrs	r1, r0
 800493e:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004940:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004942:	6999      	ldr	r1, [r3, #24]
 8004944:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004946:	d803      	bhi.n	8004950 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004948:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800494a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800494e:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004950:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004952:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004958:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800495e:	69d1      	ldr	r1, [r2, #28]
 8004960:	4039      	ands	r1, r7
 8004962:	4301      	orrs	r1, r0
 8004964:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004966:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004968:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800496a:	6989      	ldr	r1, [r1, #24]
 800496c:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800496e:	bf9c      	itt	ls
 8004970:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004974:	6215      	strls	r5, [r2, #32]
 8004976:	e7eb      	b.n	8004950 <HAL_DMA2D_ConfigLayer+0x5c>
 8004978:	00fcfff0 	.word	0x00fcfff0

0800497c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800497c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004980:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004b40 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004984:	4a6c      	ldr	r2, [pc, #432]	@ (8004b38 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004988:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800498a:	2401      	movs	r4, #1
 800498c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800498e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004992:	43ac      	bics	r4, r5
 8004994:	f040 80b7 	bne.w	8004b06 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004998:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800499a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800499c:	f005 0403 	and.w	r4, r5, #3
 80049a0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a4:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049a8:	1e67      	subs	r7, r4, #1
 80049aa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049ac:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049b0:	d834      	bhi.n	8004a1c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80049b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049b4:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b8:	68cf      	ldr	r7, [r1, #12]
 80049ba:	fa07 f708 	lsl.w	r7, r7, r8
 80049be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80049c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80049c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c6:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ca:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80049ce:	409f      	lsls	r7, r3
 80049d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80049d4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80049d6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049d8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049dc:	688f      	ldr	r7, [r1, #8]
 80049de:	fa07 f708 	lsl.w	r7, r7, r8
 80049e2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80049e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ea:	d119      	bne.n	8004a20 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80049ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80049f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80049f8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004a00:	f04f 0e0f 	mov.w	lr, #15
 8004a04:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004a08:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a0c:	690f      	ldr	r7, [r1, #16]
 8004a0e:	fa07 f70b 	lsl.w	r7, r7, fp
 8004a12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004a16:	f8ca 7020 	str.w	r7, [sl, #32]
 8004a1a:	e001      	b.n	8004a20 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a1c:	2c03      	cmp	r4, #3
 8004a1e:	d1da      	bne.n	80049d6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004a20:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a22:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a26:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a2a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a2c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004a30:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a32:	d068      	beq.n	8004b06 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a34:	2400      	movs	r4, #0
 8004a36:	9401      	str	r4, [sp, #4]
 8004a38:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004a3c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004a40:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004a44:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004a48:	f023 0703 	bic.w	r7, r3, #3
 8004a4c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004a50:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004a54:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004a58:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a5a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a60:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a68:	240f      	movs	r4, #15
 8004a6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a6e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a72:	4c32      	ldr	r4, [pc, #200]	@ (8004b3c <HAL_GPIO_Init+0x1c0>)
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d04d      	beq.n	8004b14 <HAL_GPIO_Init+0x198>
 8004a78:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d04b      	beq.n	8004b18 <HAL_GPIO_Init+0x19c>
 8004a80:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d049      	beq.n	8004b1c <HAL_GPIO_Init+0x1a0>
 8004a88:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d047      	beq.n	8004b20 <HAL_GPIO_Init+0x1a4>
 8004a90:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d045      	beq.n	8004b24 <HAL_GPIO_Init+0x1a8>
 8004a98:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	d043      	beq.n	8004b28 <HAL_GPIO_Init+0x1ac>
 8004aa0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d041      	beq.n	8004b2c <HAL_GPIO_Init+0x1b0>
 8004aa8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004aac:	42a0      	cmp	r0, r4
 8004aae:	d03f      	beq.n	8004b30 <HAL_GPIO_Init+0x1b4>
 8004ab0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d03d      	beq.n	8004b34 <HAL_GPIO_Init+0x1b8>
 8004ab8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	bf14      	ite	ne
 8004ac0:	240a      	movne	r4, #10
 8004ac2:	2409      	moveq	r4, #9
 8004ac4:	fa04 f40c 	lsl.w	r4, r4, ip
 8004ac8:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004acc:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004ace:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004ad0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ad2:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004ad6:	bf0c      	ite	eq
 8004ad8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004ada:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004adc:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004ade:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004ae4:	bf0c      	ite	eq
 8004ae6:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004ae8:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004aea:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004aec:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aee:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004af2:	bf0c      	ite	eq
 8004af4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004af6:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004af8:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004afa:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004afc:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004afe:	bf54      	ite	pl
 8004b00:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004b02:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004b04:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b06:	3301      	adds	r3, #1
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	f47f af3d 	bne.w	8004988 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004b0e:	b003      	add	sp, #12
 8004b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b14:	2400      	movs	r4, #0
 8004b16:	e7d5      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b18:	2401      	movs	r4, #1
 8004b1a:	e7d3      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b1c:	2402      	movs	r4, #2
 8004b1e:	e7d1      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b20:	2403      	movs	r4, #3
 8004b22:	e7cf      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b24:	2404      	movs	r4, #4
 8004b26:	e7cd      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b28:	2405      	movs	r4, #5
 8004b2a:	e7cb      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b2c:	2406      	movs	r4, #6
 8004b2e:	e7c9      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b30:	2407      	movs	r4, #7
 8004b32:	e7c7      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b34:	2408      	movs	r4, #8
 8004b36:	e7c5      	b.n	8004ac4 <HAL_GPIO_Init+0x148>
 8004b38:	40013c00 	.word	0x40013c00
 8004b3c:	40020000 	.word	0x40020000
 8004b40:	40023800 	.word	0x40023800

08004b44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004b48:	bf14      	ite	ne
 8004b4a:	2001      	movne	r0, #1
 8004b4c:	2000      	moveq	r0, #0
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b50:	b10a      	cbz	r2, 8004b56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b52:	6181      	str	r1, [r0, #24]
  }
}
 8004b54:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b56:	0409      	lsls	r1, r1, #16
 8004b58:	e7fb      	b.n	8004b52 <HAL_GPIO_WritePin+0x2>

08004b5a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b5a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b5c:	ea01 0203 	and.w	r2, r1, r3
 8004b60:	ea21 0103 	bic.w	r1, r1, r3
 8004b64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b68:	6181      	str	r1, [r0, #24]
}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004b72:	6951      	ldr	r1, [r2, #20]
 8004b74:	4201      	tst	r1, r0
{
 8004b76:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b78:	d002      	beq.n	8004b80 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b7c:	f7ff fff6 	bl	8004b6c <HAL_GPIO_EXTI_Callback>
}
 8004b80:	bd08      	pop	{r3, pc}
 8004b82:	bf00      	nop
 8004b84:	40013c00 	.word	0x40013c00

08004b88 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b88:	6801      	ldr	r1, [r0, #0]
 8004b8a:	694b      	ldr	r3, [r1, #20]
 8004b8c:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	d010      	beq.n	8004bb8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004b9a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b9c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ba0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba4:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ba8:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004baa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	4770      	bx	lr
  }
  return HAL_OK;
 8004bb8:	4618      	mov	r0, r3
}
 8004bba:	4770      	bx	lr

08004bbc <I2C_WaitOnFlagUntilTimeout>:
{
 8004bbc:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	460f      	mov	r7, r1
 8004bc4:	4691      	mov	r9, r2
 8004bc6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	f1ba 0f01 	cmp.w	sl, #1
 8004bd2:	bf0c      	ite	eq
 8004bd4:	695c      	ldreq	r4, [r3, #20]
 8004bd6:	699c      	ldrne	r4, [r3, #24]
 8004bd8:	ea27 0404 	bic.w	r4, r7, r4
 8004bdc:	b2a4      	uxth	r4, r4
 8004bde:	fab4 f484 	clz	r4, r4
 8004be2:	0964      	lsrs	r4, r4, #5
 8004be4:	45a1      	cmp	r9, r4
 8004be6:	d001      	beq.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e017      	b.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	1c6a      	adds	r2, r5, #1
 8004bee:	d0ee      	beq.n	8004bce <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7ff fb38 	bl	8004264 <HAL_GetTick>
 8004bf4:	9b08      	ldr	r3, [sp, #32]
 8004bf6:	1ac0      	subs	r0, r0, r3
 8004bf8:	42a8      	cmp	r0, r5
 8004bfa:	d801      	bhi.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	d1e5      	bne.n	8004bcc <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c00:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c02:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c04:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c06:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c0a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004c10:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	f042 0220 	orr.w	r2, r2, #32
 8004c18:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004c1a:	2001      	movs	r0, #1
}
 8004c1c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c24:	4604      	mov	r4, r0
 8004c26:	460f      	mov	r7, r1
 8004c28:	4616      	mov	r6, r2
 8004c2a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2c:	6825      	ldr	r5, [r4, #0]
 8004c2e:	6968      	ldr	r0, [r5, #20]
 8004c30:	ea27 0000 	bic.w	r0, r7, r0
 8004c34:	b280      	uxth	r0, r0
 8004c36:	b1c0      	cbz	r0, 8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c38:	696b      	ldr	r3, [r5, #20]
 8004c3a:	055a      	lsls	r2, r3, #21
 8004c3c:	d517      	bpl.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c44:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c46:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004c4a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c4c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c56:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004c62:	2300      	movs	r3, #0
 8004c64:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004c68:	2001      	movs	r0, #1
}
 8004c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	1c73      	adds	r3, r6, #1
 8004c70:	d0dd      	beq.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7ff faf7 	bl	8004264 <HAL_GetTick>
 8004c76:	eba0 0008 	sub.w	r0, r0, r8
 8004c7a:	42b0      	cmp	r0, r6
 8004c7c:	d909      	bls.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c80:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c84:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c88:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	e7e6      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d1ca      	bne.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8004c96:	e7f2      	b.n	8004c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004c98 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	061b      	lsls	r3, r3, #24
 8004ca6:	d501      	bpl.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e018      	b.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff ff6b 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 8004cb2:	b998      	cbnz	r0, 8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004cb4:	1c6a      	adds	r2, r5, #1
 8004cb6:	d0f3      	beq.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7ff fad4 	bl	8004264 <HAL_GetTick>
 8004cbc:	1b80      	subs	r0, r0, r6
 8004cbe:	42a8      	cmp	r0, r5
 8004cc0:	d90e      	bls.n	8004ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ccc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004cd2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	f042 0220 	orr.w	r2, r2, #32
 8004cda:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004cdc:	2001      	movs	r0, #1
}
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	d1dd      	bne.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004ce4:	e7ed      	b.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08004ce8 <I2C_RequestMemoryWrite>:
{
 8004ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cec:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cee:	6802      	ldr	r2, [r0, #0]
{
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004cf6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf8:	6813      	ldr	r3, [r2, #0]
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfe:	6013      	str	r3, [r2, #0]
{
 8004d00:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d02:	463b      	mov	r3, r7
 8004d04:	f8cd 8000 	str.w	r8, [sp]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004d0e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d10:	f7ff ff54 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	b138      	cbz	r0, 8004d28 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	05db      	lsls	r3, r3, #23
 8004d1c:	d502      	bpl.n	8004d24 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d22:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004d24:	2603      	movs	r6, #3
 8004d26:	e020      	b.n	8004d6a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d28:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004d2c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d2e:	491a      	ldr	r1, [pc, #104]	@ (8004d98 <I2C_RequestMemoryWrite+0xb0>)
 8004d30:	4643      	mov	r3, r8
 8004d32:	463a      	mov	r2, r7
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff ff73 	bl	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d3a:	b9a8      	cbnz	r0, 8004d68 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	9003      	str	r0, [sp, #12]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	9203      	str	r2, [sp, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d48:	4642      	mov	r2, r8
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d50:	f7ff ffa2 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d54:	4606      	mov	r6, r0
 8004d56:	b160      	cbz	r0, 8004d72 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d5a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	bf01      	itttt	eq
 8004d5e:	6822      	ldreq	r2, [r4, #0]
 8004d60:	6813      	ldreq	r3, [r2, #0]
 8004d62:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004d66:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004d68:	2601      	movs	r6, #1
}
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	b005      	add	sp, #20
 8004d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d72:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d76:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d78:	d102      	bne.n	8004d80 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7a:	b2ed      	uxtb	r5, r5
 8004d7c:	611d      	str	r5, [r3, #16]
 8004d7e:	e7f4      	b.n	8004d6a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d80:	0a2a      	lsrs	r2, r5, #8
 8004d82:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d84:	4639      	mov	r1, r7
 8004d86:	4642      	mov	r2, r8
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff ff85 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1e2      	bne.n	8004d58 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	e7f1      	b.n	8004d7a <I2C_RequestMemoryWrite+0x92>
 8004d96:	bf00      	nop
 8004d98:	00010002 	.word	0x00010002

08004d9c <I2C_RequestMemoryRead>:
{
 8004d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	6803      	ldr	r3, [r0, #0]
{
 8004da4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dac:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dae:	681a      	ldr	r2, [r3, #0]
{
 8004db0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db8:	601a      	str	r2, [r3, #0]
{
 8004dba:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	f8cd 8000 	str.w	r8, [sp]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004dc8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dca:	f7ff fef7 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	b138      	cbz	r0, 8004de2 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd6:	bf44      	itt	mi
 8004dd8:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004ddc:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004dde:	2003      	movs	r0, #3
 8004de0:	e021      	b.n	8004e26 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004de2:	fa5f f986 	uxtb.w	r9, r6
 8004de6:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004dea:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dec:	492b      	ldr	r1, [pc, #172]	@ (8004e9c <I2C_RequestMemoryRead+0x100>)
 8004dee:	4643      	mov	r3, r8
 8004df0:	463a      	mov	r2, r7
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ff14 	bl	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df8:	b9a0      	cbnz	r0, 8004e24 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	9003      	str	r0, [sp, #12]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	9203      	str	r2, [sp, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e06:	4642      	mov	r2, r8
 8004e08:	4639      	mov	r1, r7
 8004e0a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	f7ff ff43 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e12:	b158      	cbz	r0, 8004e2c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e16:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	bf01      	itttt	eq
 8004e1a:	6822      	ldreq	r2, [r4, #0]
 8004e1c:	6813      	ldreq	r3, [r2, #0]
 8004e1e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004e22:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
}
 8004e26:	b004      	add	sp, #16
 8004e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e32:	d11a      	bne.n	8004e6a <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e34:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e36:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e38:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f7ff ff2b 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e42:	4602      	mov	r2, r0
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d1e5      	bne.n	8004e14 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e48:	6821      	ldr	r1, [r4, #0]
 8004e4a:	680b      	ldr	r3, [r1, #0]
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e50:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	4620      	mov	r0, r4
 8004e54:	f8cd 8000 	str.w	r8, [sp]
 8004e58:	463b      	mov	r3, r7
 8004e5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e5e:	f7ff fead 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	b160      	cbz	r0, 8004e80 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	e7b4      	b.n	8004dd4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e6a:	0a2a      	lsrs	r2, r5, #8
 8004e6c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	4639      	mov	r1, r7
 8004e70:	4642      	mov	r2, r8
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff ff10 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d1cb      	bne.n	8004e14 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	e7d9      	b.n	8004e34 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e80:	f049 0301 	orr.w	r3, r9, #1
 8004e84:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e86:	4905      	ldr	r1, [pc, #20]	@ (8004e9c <I2C_RequestMemoryRead+0x100>)
 8004e88:	4643      	mov	r3, r8
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7ff fec7 	bl	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e92:	3800      	subs	r0, #0
 8004e94:	bf18      	it	ne
 8004e96:	2001      	movne	r0, #1
 8004e98:	e7c5      	b.n	8004e26 <I2C_RequestMemoryRead+0x8a>
 8004e9a:	bf00      	nop
 8004e9c:	00010002 	.word	0x00010002

08004ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	075b      	lsls	r3, r3, #29
 8004eae:	d501      	bpl.n	8004eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e018      	b.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fe67 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 8004eba:	b998      	cbnz	r0, 8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	1c6a      	adds	r2, r5, #1
 8004ebe:	d0f3      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec0:	f7ff f9d0 	bl	8004264 <HAL_GetTick>
 8004ec4:	1b80      	subs	r0, r0, r6
 8004ec6:	42a8      	cmp	r0, r5
 8004ec8:	d90e      	bls.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ecc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004eda:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004ee4:	2001      	movs	r0, #1
}
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	d1dd      	bne.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8004eec:	e7ed      	b.n	8004eca <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

08004eee <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	460d      	mov	r5, r1
 8004ef4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	694b      	ldr	r3, [r1, #20]
 8004efa:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8004efe:	d001      	beq.n	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
 8004f02:	e011      	b.n	8004f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f04:	694a      	ldr	r2, [r1, #20]
 8004f06:	06d2      	lsls	r2, r2, #27
 8004f08:	d50f      	bpl.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f0a:	f06f 0210 	mvn.w	r2, #16
 8004f0e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f12:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1e:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8004f20:	2300      	movs	r3, #0
 8004f22:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004f26:	2001      	movs	r0, #1
}
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7ff f99b 	bl	8004264 <HAL_GetTick>
 8004f2e:	1b80      	subs	r0, r0, r6
 8004f30:	42a8      	cmp	r0, r5
 8004f32:	d909      	bls.n	8004f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f34:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f38:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f3a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f44:	4313      	orrs	r3, r2
 8004f46:	e7ea      	b.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	d1d4      	bne.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8004f4c:	e7f2      	b.n	8004f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08004f50 <HAL_I2C_Init>:
{
 8004f50:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004f52:	4604      	mov	r4, r0
 8004f54:	b908      	cbnz	r0, 8004f5a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004f56:	2001      	movs	r0, #1
}
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f5e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004f62:	b91b      	cbnz	r3, 8004f6c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004f64:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004f68:	f7fc fdf8 	bl	8001b5c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6c:	2324      	movs	r3, #36	@ 0x24
 8004f6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f8a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f000 fe66 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f90:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <HAL_I2C_Init+0x140>)
 8004f92:	6865      	ldr	r5, [r4, #4]
 8004f94:	429d      	cmp	r5, r3
 8004f96:	bf94      	ite	ls
 8004f98:	4b3e      	ldrls	r3, [pc, #248]	@ (8005094 <HAL_I2C_Init+0x144>)
 8004f9a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005098 <HAL_I2C_Init+0x148>)
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	bf8c      	ite	hi
 8004fa0:	2300      	movhi	r3, #0
 8004fa2:	2301      	movls	r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1d6      	bne.n	8004f56 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fa8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004faa:	4e39      	ldr	r6, [pc, #228]	@ (8005090 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fac:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004fae:	4b3b      	ldr	r3, [pc, #236]	@ (800509c <HAL_I2C_Init+0x14c>)
 8004fb0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fb4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004fb8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fba:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fbc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fbe:	bf88      	it	hi
 8004fc0:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8004fc4:	6a11      	ldr	r1, [r2, #32]
 8004fc6:	bf88      	it	hi
 8004fc8:	4373      	mulhi	r3, r6
 8004fca:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004fce:	bf84      	itt	hi
 8004fd0:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8004fd4:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004fd8:	3301      	adds	r3, #1
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fde:	69d1      	ldr	r1, [r2, #28]
 8004fe0:	1e43      	subs	r3, r0, #1
 8004fe2:	482b      	ldr	r0, [pc, #172]	@ (8005090 <HAL_I2C_Init+0x140>)
 8004fe4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8004fe8:	4285      	cmp	r5, r0
 8004fea:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004fee:	d832      	bhi.n	8005056 <HAL_I2C_Init+0x106>
 8004ff0:	006d      	lsls	r5, r5, #1
 8004ff2:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004ff6:	fbb3 f3f5 	udiv	r3, r3, r5
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4203      	tst	r3, r0
 8004ffe:	d042      	beq.n	8005086 <HAL_I2C_Init+0x136>
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	4319      	orrs	r1, r3
 8005006:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005008:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800500c:	6811      	ldr	r1, [r2, #0]
 800500e:	4303      	orrs	r3, r0
 8005010:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8005014:	430b      	orrs	r3, r1
 8005016:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005018:	6891      	ldr	r1, [r2, #8]
 800501a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800501e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8005022:	4303      	orrs	r3, r0
 8005024:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005028:	430b      	orrs	r3, r1
 800502a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800502c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005030:	68d1      	ldr	r1, [r2, #12]
 8005032:	4303      	orrs	r3, r0
 8005034:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005038:	430b      	orrs	r3, r1
 800503a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005046:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005048:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800504a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005054:	e780      	b.n	8004f58 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005056:	68a0      	ldr	r0, [r4, #8]
 8005058:	b950      	cbnz	r0, 8005070 <HAL_I2C_Init+0x120>
 800505a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800505e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005062:	3301      	adds	r3, #1
 8005064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005068:	b17b      	cbz	r3, 800508a <HAL_I2C_Init+0x13a>
 800506a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506e:	e7c9      	b.n	8005004 <HAL_I2C_Init+0xb4>
 8005070:	2019      	movs	r0, #25
 8005072:	4368      	muls	r0, r5
 8005074:	fbb3 f3f0 	udiv	r3, r3, r0
 8005078:	3301      	adds	r3, #1
 800507a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507e:	b123      	cbz	r3, 800508a <HAL_I2C_Init+0x13a>
 8005080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005084:	e7be      	b.n	8005004 <HAL_I2C_Init+0xb4>
 8005086:	2304      	movs	r3, #4
 8005088:	e7bc      	b.n	8005004 <HAL_I2C_Init+0xb4>
 800508a:	2301      	movs	r3, #1
 800508c:	e7ba      	b.n	8005004 <HAL_I2C_Init+0xb4>
 800508e:	bf00      	nop
 8005090:	000186a0 	.word	0x000186a0
 8005094:	001e847f 	.word	0x001e847f
 8005098:	003d08ff 	.word	0x003d08ff
 800509c:	000f4240 	.word	0x000f4240

080050a0 <HAL_I2C_Mem_Write>:
{
 80050a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050a4:	4604      	mov	r4, r0
 80050a6:	4699      	mov	r9, r3
 80050a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050aa:	460f      	mov	r7, r1
 80050ac:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80050ae:	f7ff f8d9 	bl	8004264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80050b6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80050b8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ba:	d003      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80050bc:	2002      	movs	r0, #2
}
 80050be:	b003      	add	sp, #12
 80050c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c4:	9000      	str	r0, [sp, #0]
 80050c6:	493c      	ldr	r1, [pc, #240]	@ (80051b8 <HAL_I2C_Mem_Write+0x118>)
 80050c8:	2319      	movs	r3, #25
 80050ca:	2201      	movs	r2, #1
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff fd75 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d1f2      	bne.n	80050bc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80050d6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d0ee      	beq.n	80050bc <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050de:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80050e0:	2301      	movs	r3, #1
 80050e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050e6:	6803      	ldr	r3, [r0, #0]
 80050e8:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80050ea:	bf5e      	ittt	pl
 80050ec:	6803      	ldrpl	r3, [r0, #0]
 80050ee:	f043 0301 	orrpl.w	r3, r3, #1
 80050f2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f4:	6803      	ldr	r3, [r0, #0]
 80050f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050fa:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050fc:	2321      	movs	r3, #33	@ 0x21
 80050fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005102:	2340      	movs	r3, #64	@ 0x40
 8005104:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005108:	2300      	movs	r3, #0
 800510a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800510c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800510e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005110:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005114:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005116:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005118:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800511a:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <HAL_I2C_Mem_Write+0x11c>)
 800511c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800511e:	4642      	mov	r2, r8
 8005120:	e9cd 6500 	strd	r6, r5, [sp]
 8005124:	464b      	mov	r3, r9
 8005126:	4639      	mov	r1, r7
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff fddd 	bl	8004ce8 <I2C_RequestMemoryWrite>
 800512e:	2800      	cmp	r0, #0
 8005130:	d02a      	beq.n	8005188 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8005132:	2001      	movs	r0, #1
 8005134:	e7c3      	b.n	80050be <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	f7ff fdaf 	bl	8004c98 <I2C_WaitOnTXEFlagUntilTimeout>
 800513a:	b140      	cbz	r0, 800514e <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800513e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	bf01      	itttt	eq
 8005142:	6822      	ldreq	r2, [r4, #0]
 8005144:	6813      	ldreq	r3, [r2, #0]
 8005146:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800514a:	6013      	streq	r3, [r2, #0]
 800514c:	e7f1      	b.n	8005132 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800514e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005150:	6827      	ldr	r7, [r4, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005158:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800515a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800515c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800515e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005160:	3a01      	subs	r2, #1
 8005162:	b292      	uxth	r2, r2
 8005164:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005166:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005168:	1e48      	subs	r0, r1, #1
 800516a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800516c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800516e:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005170:	d50a      	bpl.n	8005188 <HAL_I2C_Mem_Write+0xe8>
 8005172:	b148      	cbz	r0, 8005188 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	785a      	ldrb	r2, [r3, #1]
 8005176:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005178:	3302      	adds	r3, #2
 800517a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800517c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800517e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005180:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005182:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005184:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005186:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005188:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518a:	462a      	mov	r2, r5
 800518c:	4631      	mov	r1, r6
 800518e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1d0      	bne.n	8005136 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005194:	f7ff fe84 	bl	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005198:	2800      	cmp	r0, #0
 800519a:	d1cf      	bne.n	800513c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051a4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051a6:	2320      	movs	r3, #32
 80051a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80051ac:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80051b4:	e783      	b.n	80050be <HAL_I2C_Mem_Write+0x1e>
 80051b6:	bf00      	nop
 80051b8:	00100002 	.word	0x00100002
 80051bc:	ffff0000 	.word	0xffff0000

080051c0 <HAL_I2C_Mem_Read>:
{
 80051c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	b087      	sub	sp, #28
 80051c8:	4699      	mov	r9, r3
 80051ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80051cc:	460d      	mov	r5, r1
 80051ce:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7ff f848 	bl	8004264 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80051d8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80051da:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051dc:	d004      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 80051de:	2502      	movs	r5, #2
}
 80051e0:	4628      	mov	r0, r5
 80051e2:	b007      	add	sp, #28
 80051e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e8:	9000      	str	r0, [sp, #0]
 80051ea:	4976      	ldr	r1, [pc, #472]	@ (80053c4 <HAL_I2C_Mem_Read+0x204>)
 80051ec:	2319      	movs	r3, #25
 80051ee:	2201      	movs	r2, #1
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7ff fce3 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d1f1      	bne.n	80051de <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80051fa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d0ed      	beq.n	80051de <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005202:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005204:	2301      	movs	r3, #1
 8005206:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800520a:	6803      	ldr	r3, [r0, #0]
 800520c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800520e:	bf5e      	ittt	pl
 8005210:	6803      	ldrpl	r3, [r0, #0]
 8005212:	f043 0301 	orrpl.w	r3, r3, #1
 8005216:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005218:	6803      	ldr	r3, [r0, #0]
 800521a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800521e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005220:	2322      	movs	r3, #34	@ 0x22
 8005222:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005226:	2340      	movs	r3, #64	@ 0x40
 8005228:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005232:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005234:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8005238:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800523a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800523c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800523e:	4b62      	ldr	r3, [pc, #392]	@ (80053c8 <HAL_I2C_Mem_Read+0x208>)
 8005240:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005242:	4629      	mov	r1, r5
 8005244:	e9cd 7600 	strd	r7, r6, [sp]
 8005248:	464b      	mov	r3, r9
 800524a:	4642      	mov	r2, r8
 800524c:	4620      	mov	r0, r4
 800524e:	f7ff fda5 	bl	8004d9c <I2C_RequestMemoryRead>
 8005252:	4605      	mov	r5, r0
 8005254:	b108      	cbz	r0, 800525a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005256:	2501      	movs	r5, #1
 8005258:	e7c2      	b.n	80051e0 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800525a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800525e:	b9b2      	cbnz	r2, 800528e <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005260:	9002      	str	r0, [sp, #8]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	9202      	str	r2, [sp, #8]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	9202      	str	r2, [sp, #8]
 800526a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005272:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005274:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 80053cc <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8005278:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d12c      	bne.n	80052d8 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800527e:	2220      	movs	r2, #32
 8005280:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005284:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800528c:	e7a8      	b.n	80051e0 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800528e:	2a01      	cmp	r2, #1
 8005290:	d10a      	bne.n	80052a8 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005298:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529a:	9003      	str	r0, [sp, #12]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	9203      	str	r2, [sp, #12]
 80052a4:	9a03      	ldr	r2, [sp, #12]
 80052a6:	e7e1      	b.n	800526c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80052a8:	2a02      	cmp	r2, #2
 80052aa:	d10e      	bne.n	80052ca <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ba:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052bc:	9004      	str	r0, [sp, #16]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	9204      	str	r2, [sp, #16]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	e7d4      	b.n	8005274 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ca:	9005      	str	r0, [sp, #20]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	9205      	str	r2, [sp, #20]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	9b05      	ldr	r3, [sp, #20]
 80052d6:	e7cd      	b.n	8005274 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d856      	bhi.n	800538a <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d115      	bne.n	800530c <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e0:	4632      	mov	r2, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7ff fe02 	bl	8004eee <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d1b3      	bne.n	8005256 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052f4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80052f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80052fc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005302:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005304:	3b01      	subs	r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800530a:	e7b5      	b.n	8005278 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 800530c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800530e:	9600      	str	r6, [sp, #0]
 8005310:	463b      	mov	r3, r7
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	4641      	mov	r1, r8
 8005318:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800531a:	d119      	bne.n	8005350 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800531c:	f7ff fc4e 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8005320:	2800      	cmp	r0, #0
 8005322:	d198      	bne.n	8005256 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005332:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005334:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005336:	1c53      	adds	r3, r2, #1
 8005338:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800533a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800533c:	3b01      	subs	r3, #1
 800533e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005340:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005342:	3b01      	subs	r3, #1
 8005344:	b29b      	uxth	r3, r3
 8005346:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005348:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	7053      	strb	r3, [r2, #1]
 800534e:	e7d2      	b.n	80052f6 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005350:	f7ff fc34 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8005354:	4602      	mov	r2, r0
 8005356:	2800      	cmp	r0, #0
 8005358:	f47f af7d 	bne.w	8005256 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005364:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	6919      	ldr	r1, [r3, #16]
 8005368:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800536a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800536c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800536e:	3301      	adds	r3, #1
 8005370:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005372:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005374:	3b01      	subs	r3, #1
 8005376:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005378:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800537a:	3b01      	subs	r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005380:	4641      	mov	r1, r8
 8005382:	9600      	str	r6, [sp, #0]
 8005384:	463b      	mov	r3, r7
 8005386:	4620      	mov	r0, r4
 8005388:	e7c8      	b.n	800531c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538a:	4632      	mov	r2, r6
 800538c:	4639      	mov	r1, r7
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fdad 	bl	8004eee <I2C_WaitOnRXNEFlagUntilTimeout>
 8005394:	2800      	cmp	r0, #0
 8005396:	f47f af5e 	bne.w	8005256 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053a4:	1c53      	adds	r3, r2, #1
 80053a6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80053a8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80053ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	0749      	lsls	r1, r1, #29
 80053bc:	f57f af5c 	bpl.w	8005278 <HAL_I2C_Mem_Read+0xb8>
 80053c0:	e7c3      	b.n	800534a <HAL_I2C_Mem_Read+0x18a>
 80053c2:	bf00      	nop
 80053c4:	00100002 	.word	0x00100002
 80053c8:	ffff0000 	.word	0xffff0000
 80053cc:	00010004 	.word	0x00010004

080053d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053d0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	b2dc      	uxtb	r4, r3
 80053da:	d116      	bne.n	800540a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053dc:	2324      	movs	r3, #36	@ 0x24
 80053de:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053e2:	6803      	ldr	r3, [r0, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80053ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ee:	f022 0210 	bic.w	r2, r2, #16
 80053f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80053f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f6:	4311      	orrs	r1, r2
 80053f8:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005402:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005406:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005408:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800540a:	2002      	movs	r0, #2
 800540c:	e7fc      	b.n	8005408 <HAL_I2CEx_ConfigAnalogFilter+0x38>

0800540e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800540e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005410:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005414:	2b20      	cmp	r3, #32
 8005416:	b2dc      	uxtb	r4, r3
 8005418:	d116      	bne.n	8005448 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800541a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800541c:	2324      	movs	r3, #36	@ 0x24
 800541e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800542a:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800542c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005430:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005432:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005434:	b29b      	uxth	r3, r3
 8005436:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005440:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005444:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005446:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8005448:	2002      	movs	r0, #2
 800544a:	e7fc      	b.n	8005446 <HAL_I2CEx_ConfigDigitalFilter+0x38>

0800544c <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800544c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800544e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005452:	01d2      	lsls	r2, r2, #7
 8005454:	3284      	adds	r2, #132	@ 0x84
 8005456:	1883      	adds	r3, r0, r2
{
 8005458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800545c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800545e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005460:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005462:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005466:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800546a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800546c:	68c5      	ldr	r5, [r0, #12]
 800546e:	f10c 0701 	add.w	r7, ip, #1
 8005472:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005476:	f3c6 460b 	ubfx	r6, r6, #16, #12
 800547a:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800547c:	443d      	add	r5, r7
 800547e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005482:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005484:	68c6      	ldr	r6, [r0, #12]
 8005486:	68cd      	ldr	r5, [r1, #12]
 8005488:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800548c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800548e:	689d      	ldr	r5, [r3, #8]
 8005490:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005494:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005496:	68c7      	ldr	r7, [r0, #12]
 8005498:	688d      	ldr	r5, [r1, #8]
 800549a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800549e:	3501      	adds	r5, #1
 80054a0:	443d      	add	r5, r7
 80054a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80054a6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054a8:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054aa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054ac:	f025 0507 	bic.w	r5, r5, #7
 80054b0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054b2:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054b6:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80054b8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054bc:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80054be:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054c2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054c6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80054ca:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80054ce:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80054d2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80054d6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054d8:	695d      	ldr	r5, [r3, #20]
 80054da:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80054de:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80054e0:	694d      	ldr	r5, [r1, #20]
 80054e2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80054e4:	69dd      	ldr	r5, [r3, #28]
 80054e6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80054ea:	f025 0507 	bic.w	r5, r5, #7
 80054ee:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054f0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80054f4:	433d      	orrs	r5, r7
 80054f6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054f8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054fa:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054fc:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005500:	2e07      	cmp	r6, #7
 8005502:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005504:	bf9c      	itt	ls
 8005506:	4d0e      	ldrls	r5, [pc, #56]	@ (8005540 <LTDC_SetConfig+0xf4>)
 8005508:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800550a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800550c:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8005510:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005512:	bf88      	it	hi
 8005514:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005516:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005518:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800551a:	eba4 040c 	sub.w	r4, r4, ip
 800551e:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005520:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005522:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005524:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005528:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800552a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800552c:	f36f 040a 	bfc	r4, #0, #11
 8005530:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005532:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005534:	5883      	ldr	r3, [r0, r2]
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	5083      	str	r3, [r0, r2]
}
 800553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005540:	08015ca4 	.word	0x08015ca4

08005544 <HAL_LTDC_Init>:
{
 8005544:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005546:	4604      	mov	r4, r0
 8005548:	2800      	cmp	r0, #0
 800554a:	d063      	beq.n	8005614 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800554c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8005550:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005554:	b91b      	cbnz	r3, 800555e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005556:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800555a:	f7fc fb5b 	bl	8001c14 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800555e:	2302      	movs	r3, #2
 8005560:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800556c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800556e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005572:	4302      	orrs	r2, r0
 8005574:	68e0      	ldr	r0, [r4, #12]
 8005576:	6999      	ldr	r1, [r3, #24]
 8005578:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800557a:	6920      	ldr	r0, [r4, #16]
 800557c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800557e:	430a      	orrs	r2, r1
 8005580:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	4924      	ldr	r1, [pc, #144]	@ (8005618 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005586:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005588:	400a      	ands	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005592:	69a0      	ldr	r0, [r4, #24]
 8005594:	4302      	orrs	r2, r0
 8005596:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005598:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800559a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800559c:	400a      	ands	r2, r1
 800559e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80055a6:	6a20      	ldr	r0, [r4, #32]
 80055a8:	4302      	orrs	r2, r0
 80055aa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055ac:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055b0:	400a      	ands	r2, r1
 80055b2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80055ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80055bc:	4302      	orrs	r2, r0
 80055be:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	400a      	ands	r2, r1
 80055c4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80055c6:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80055c8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80055ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055ce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80055d0:	430a      	orrs	r2, r1
 80055d2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80055d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80055d6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80055da:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80055de:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80055e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80055e4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80055e6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80055ea:	432a      	orrs	r2, r5
 80055ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80055f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80055f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f8:	f042 0206 	orr.w	r2, r2, #6
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005606:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005608:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800560a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800560e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8005612:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005614:	2001      	movs	r0, #1
 8005616:	e7fc      	b.n	8005612 <HAL_LTDC_Init+0xce>
 8005618:	f000f800 	.word	0xf000f800

0800561c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800561c:	4770      	bx	lr

0800561e <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800561e:	4770      	bx	lr

08005620 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005620:	6803      	ldr	r3, [r0, #0]
{
 8005622:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005624:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005626:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005628:	0772      	lsls	r2, r6, #29
{
 800562a:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800562c:	d514      	bpl.n	8005658 <HAL_LTDC_IRQHandler+0x38>
 800562e:	0769      	lsls	r1, r5, #29
 8005630:	d512      	bpl.n	8005658 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005634:	f022 0204 	bic.w	r2, r2, #4
 8005638:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800563a:	2204      	movs	r2, #4
 800563c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800563e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800564a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800564c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005650:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005654:	f7ff ffe2 	bl	800561c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005658:	07b2      	lsls	r2, r6, #30
 800565a:	d516      	bpl.n	800568a <HAL_LTDC_IRQHandler+0x6a>
 800565c:	07ab      	lsls	r3, r5, #30
 800565e:	d514      	bpl.n	800568a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005664:	f022 0202 	bic.w	r2, r2, #2
 8005668:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800566a:	2202      	movs	r2, #2
 800566c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800566e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005678:	2304      	movs	r3, #4
 800567a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800567e:	2300      	movs	r3, #0
 8005680:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005684:	4620      	mov	r0, r4
 8005686:	f7ff ffc9 	bl	800561c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800568a:	07f0      	lsls	r0, r6, #31
 800568c:	d510      	bpl.n	80056b0 <HAL_LTDC_IRQHandler+0x90>
 800568e:	07e9      	lsls	r1, r5, #31
 8005690:	d50e      	bpl.n	80056b0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800569c:	2201      	movs	r2, #1
 800569e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80056a0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80056a2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80056a6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7fb fdd4 	bl	8001258 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80056b0:	0732      	lsls	r2, r6, #28
 80056b2:	d511      	bpl.n	80056d8 <HAL_LTDC_IRQHandler+0xb8>
 80056b4:	072b      	lsls	r3, r5, #28
 80056b6:	d50f      	bpl.n	80056d8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056bc:	f022 0208 	bic.w	r2, r2, #8
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80056c2:	2208      	movs	r2, #8
 80056c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80056cc:	2300      	movs	r3, #0
 80056ce:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7ff ffa3 	bl	800561e <HAL_LTDC_ReloadEventCallback>
}
 80056d8:	bd70      	pop	{r4, r5, r6, pc}

080056da <HAL_LTDC_ConfigLayer>:
{
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80056de:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80056e2:	2b01      	cmp	r3, #1
{
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	4694      	mov	ip, r2
 80056ea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80056ee:	d01f      	beq.n	8005730 <HAL_LTDC_ConfigLayer+0x56>
 80056f0:	f04f 0801 	mov.w	r8, #1
 80056f4:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056f8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056fc:	2434      	movs	r4, #52	@ 0x34
 80056fe:	460d      	mov	r5, r1
 8005700:	fb04 6402 	mla	r4, r4, r2, r6
 8005704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005706:	3438      	adds	r4, #56	@ 0x38
 8005708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005712:	682b      	ldr	r3, [r5, #0]
 8005714:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005716:	4630      	mov	r0, r6
 8005718:	4662      	mov	r2, ip
 800571a:	4639      	mov	r1, r7
 800571c:	f7ff fe96 	bl	800544c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005720:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005722:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005724:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005728:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800572c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8005730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005734 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005734:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8005738:	2a01      	cmp	r2, #1
{
 800573a:	4603      	mov	r3, r0
 800573c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005740:	d012      	beq.n	8005768 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005742:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005744:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005748:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800574a:	f020 0001 	bic.w	r0, r0, #1
 800574e:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005750:	4806      	ldr	r0, [pc, #24]	@ (800576c <HAL_LTDC_ProgramLineEvent+0x38>)
 8005752:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005754:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005756:	f041 0101 	orr.w	r1, r1, #1
 800575a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 800575c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800575e:	2201      	movs	r2, #1
 8005760:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005764:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40016800 	.word	0x40016800

08005770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005774:	4604      	mov	r4, r0
 8005776:	b340      	cbz	r0, 80057ca <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005778:	6803      	ldr	r3, [r0, #0]
 800577a:	07de      	lsls	r6, r3, #31
 800577c:	d410      	bmi.n	80057a0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	079d      	lsls	r5, r3, #30
 8005782:	d45b      	bmi.n	800583c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	0719      	lsls	r1, r3, #28
 8005788:	f100 809d 	bmi.w	80058c6 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	075a      	lsls	r2, r3, #29
 8005790:	f100 80bd 	bmi.w	800590e <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005794:	69a3      	ldr	r3, [r4, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 8124 	bne.w	80059e4 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2000      	movs	r0, #0
 800579e:	e02c      	b.n	80057fa <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a0:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	f002 020c 	and.w	r2, r2, #12
 80057a8:	2a04      	cmp	r2, #4
 80057aa:	d007      	beq.n	80057bc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b2:	2a08      	cmp	r2, #8
 80057b4:	d10b      	bne.n	80057ce <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0259      	lsls	r1, r3, #9
 80057ba:	d508      	bpl.n	80057ce <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	4b86      	ldr	r3, [pc, #536]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	039a      	lsls	r2, r3, #14
 80057c2:	d5dc      	bpl.n	800577e <HAL_RCC_OscConfig+0xe>
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1d9      	bne.n	800577e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80057ca:	2001      	movs	r0, #1
 80057cc:	e015      	b.n	80057fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ce:	6863      	ldr	r3, [r4, #4]
 80057d0:	4d81      	ldr	r5, [pc, #516]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 80057d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d6:	d113      	bne.n	8005800 <HAL_RCC_OscConfig+0x90>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80057e0:	f7fe fd40 	bl	8004264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e4:	4e7c      	ldr	r6, [pc, #496]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80057e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	039b      	lsls	r3, r3, #14
 80057ec:	d4c7      	bmi.n	800577e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ee:	f7fe fd39 	bl	8004264 <HAL_GetTick>
 80057f2:	1b40      	subs	r0, r0, r5
 80057f4:	2864      	cmp	r0, #100	@ 0x64
 80057f6:	d9f7      	bls.n	80057e8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80057f8:	2003      	movs	r0, #3
}
 80057fa:	b002      	add	sp, #8
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005804:	d104      	bne.n	8005810 <HAL_RCC_OscConfig+0xa0>
 8005806:	682b      	ldr	r3, [r5, #0]
 8005808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	e7e3      	b.n	80057d8 <HAL_RCC_OscConfig+0x68>
 8005810:	682a      	ldr	r2, [r5, #0]
 8005812:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005816:	602a      	str	r2, [r5, #0]
 8005818:	682a      	ldr	r2, [r5, #0]
 800581a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800581e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1dd      	bne.n	80057e0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005824:	f7fe fd1e 	bl	8004264 <HAL_GetTick>
 8005828:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	039f      	lsls	r7, r3, #14
 800582e:	d5a6      	bpl.n	800577e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005830:	f7fe fd18 	bl	8004264 <HAL_GetTick>
 8005834:	1b80      	subs	r0, r0, r6
 8005836:	2864      	cmp	r0, #100	@ 0x64
 8005838:	d9f7      	bls.n	800582a <HAL_RCC_OscConfig+0xba>
 800583a:	e7dd      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800583c:	4b66      	ldr	r3, [pc, #408]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	f012 0f0c 	tst.w	r2, #12
 8005844:	d007      	beq.n	8005856 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800584c:	2a08      	cmp	r2, #8
 800584e:	d111      	bne.n	8005874 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	025d      	lsls	r5, r3, #9
 8005854:	d40e      	bmi.n	8005874 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	4a60      	ldr	r2, [pc, #384]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	0799      	lsls	r1, r3, #30
 800585c:	d502      	bpl.n	8005864 <HAL_RCC_OscConfig+0xf4>
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d1b2      	bne.n	80057ca <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	6921      	ldr	r1, [r4, #16]
 8005868:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800586c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005870:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	e787      	b.n	8005784 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005874:	68e2      	ldr	r2, [r4, #12]
 8005876:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005878:	b1b2      	cbz	r2, 80058a8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800587e:	f7fe fcf1 	bl	8004264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005882:	4d55      	ldr	r5, [pc, #340]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005884:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	079b      	lsls	r3, r3, #30
 800588a:	d507      	bpl.n	800589c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6922      	ldr	r2, [r4, #16]
 8005890:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	e773      	b.n	8005784 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800589c:	f7fe fce2 	bl	8004264 <HAL_GetTick>
 80058a0:	1b80      	subs	r0, r0, r6
 80058a2:	2802      	cmp	r0, #2
 80058a4:	d9ef      	bls.n	8005886 <HAL_RCC_OscConfig+0x116>
 80058a6:	e7a7      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80058a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058aa:	f7fe fcdb 	bl	8004264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4e4a      	ldr	r6, [pc, #296]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80058b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b2:	6833      	ldr	r3, [r6, #0]
 80058b4:	079f      	lsls	r7, r3, #30
 80058b6:	f57f af65 	bpl.w	8005784 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ba:	f7fe fcd3 	bl	8004264 <HAL_GetTick>
 80058be:	1b40      	subs	r0, r0, r5
 80058c0:	2802      	cmp	r0, #2
 80058c2:	d9f6      	bls.n	80058b2 <HAL_RCC_OscConfig+0x142>
 80058c4:	e798      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058c6:	6962      	ldr	r2, [r4, #20]
 80058c8:	4b44      	ldr	r3, [pc, #272]	@ (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058ca:	b182      	cbz	r2, 80058ee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80058cc:	2201      	movs	r2, #1
 80058ce:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80058d2:	f7fe fcc7 	bl	8004264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d6:	4e40      	ldr	r6, [pc, #256]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80058d8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80058dc:	079b      	lsls	r3, r3, #30
 80058de:	f53f af55 	bmi.w	800578c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e2:	f7fe fcbf 	bl	8004264 <HAL_GetTick>
 80058e6:	1b40      	subs	r0, r0, r5
 80058e8:	2802      	cmp	r0, #2
 80058ea:	d9f6      	bls.n	80058da <HAL_RCC_OscConfig+0x16a>
 80058ec:	e784      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80058ee:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80058f2:	f7fe fcb7 	bl	8004264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f6:	4e38      	ldr	r6, [pc, #224]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80058f8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fa:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80058fc:	079f      	lsls	r7, r3, #30
 80058fe:	f57f af45 	bpl.w	800578c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005902:	f7fe fcaf 	bl	8004264 <HAL_GetTick>
 8005906:	1b40      	subs	r0, r0, r5
 8005908:	2802      	cmp	r0, #2
 800590a:	d9f6      	bls.n	80058fa <HAL_RCC_OscConfig+0x18a>
 800590c:	e774      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590e:	4b32      	ldr	r3, [pc, #200]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 8005910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005912:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8005916:	d128      	bne.n	800596a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800591c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005920:	641a      	str	r2, [r3, #64]	@ 0x40
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800592c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592e:	4d2c      	ldr	r5, [pc, #176]	@ (80059e0 <HAL_RCC_OscConfig+0x270>)
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	05d8      	lsls	r0, r3, #23
 8005934:	d51b      	bpl.n	800596e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	4d27      	ldr	r5, [pc, #156]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 800593a:	2b01      	cmp	r3, #1
 800593c:	d127      	bne.n	800598e <HAL_RCC_OscConfig+0x21e>
 800593e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005946:	f7fe fc8d 	bl	8004264 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	4e23      	ldr	r6, [pc, #140]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800594c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005954:	079a      	lsls	r2, r3, #30
 8005956:	d539      	bpl.n	80059cc <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005958:	2f00      	cmp	r7, #0
 800595a:	f43f af1b 	beq.w	8005794 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800595e:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <HAL_RCC_OscConfig+0x268>)
 8005960:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005966:	6413      	str	r3, [r2, #64]	@ 0x40
 8005968:	e714      	b.n	8005794 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800596a:	2700      	movs	r7, #0
 800596c:	e7df      	b.n	800592e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005974:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005976:	f7fe fc75 	bl	8004264 <HAL_GetTick>
 800597a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	05d9      	lsls	r1, r3, #23
 8005980:	d4d9      	bmi.n	8005936 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005982:	f7fe fc6f 	bl	8004264 <HAL_GetTick>
 8005986:	1b80      	subs	r0, r0, r6
 8005988:	2802      	cmp	r0, #2
 800598a:	d9f7      	bls.n	800597c <HAL_RCC_OscConfig+0x20c>
 800598c:	e734      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598e:	2b05      	cmp	r3, #5
 8005990:	d104      	bne.n	800599c <HAL_RCC_OscConfig+0x22c>
 8005992:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005994:	f043 0304 	orr.w	r3, r3, #4
 8005998:	672b      	str	r3, [r5, #112]	@ 0x70
 800599a:	e7d0      	b.n	800593e <HAL_RCC_OscConfig+0x1ce>
 800599c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	672a      	str	r2, [r5, #112]	@ 0x70
 80059a4:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 80059a6:	f022 0204 	bic.w	r2, r2, #4
 80059aa:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ca      	bne.n	8005946 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 80059b0:	f7fe fc58 	bl	8004264 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80059b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80059bc:	079b      	lsls	r3, r3, #30
 80059be:	d5cb      	bpl.n	8005958 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fe fc50 	bl	8004264 <HAL_GetTick>
 80059c4:	1b80      	subs	r0, r0, r6
 80059c6:	4540      	cmp	r0, r8
 80059c8:	d9f7      	bls.n	80059ba <HAL_RCC_OscConfig+0x24a>
 80059ca:	e715      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f7fe fc4a 	bl	8004264 <HAL_GetTick>
 80059d0:	1b40      	subs	r0, r0, r5
 80059d2:	4540      	cmp	r0, r8
 80059d4:	d9bd      	bls.n	8005952 <HAL_RCC_OscConfig+0x1e2>
 80059d6:	e70f      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
 80059d8:	40023800 	.word	0x40023800
 80059dc:	42470000 	.word	0x42470000
 80059e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059e4:	4d37      	ldr	r5, [pc, #220]	@ (8005ac4 <HAL_RCC_OscConfig+0x354>)
 80059e6:	68aa      	ldr	r2, [r5, #8]
 80059e8:	f002 020c 	and.w	r2, r2, #12
 80059ec:	2a08      	cmp	r2, #8
 80059ee:	d03e      	beq.n	8005a6e <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	4b35      	ldr	r3, [pc, #212]	@ (8005ac8 <HAL_RCC_OscConfig+0x358>)
 80059f4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80059f8:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fa:	d12b      	bne.n	8005a54 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 80059fc:	f7fe fc32 	bl	8004264 <HAL_GetTick>
 8005a00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	682b      	ldr	r3, [r5, #0]
 8005a04:	0199      	lsls	r1, r3, #6
 8005a06:	d41f      	bmi.n	8005a48 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a08:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005a10:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005a14:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a1a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005a1c:	0852      	lsrs	r2, r2, #1
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a26:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a28:	4d26      	ldr	r5, [pc, #152]	@ (8005ac4 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005a2e:	f7fe fc19 	bl	8004264 <HAL_GetTick>
 8005a32:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	019a      	lsls	r2, r3, #6
 8005a38:	f53f aeb0 	bmi.w	800579c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fe fc12 	bl	8004264 <HAL_GetTick>
 8005a40:	1b00      	subs	r0, r0, r4
 8005a42:	2802      	cmp	r0, #2
 8005a44:	d9f6      	bls.n	8005a34 <HAL_RCC_OscConfig+0x2c4>
 8005a46:	e6d7      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fe fc0c 	bl	8004264 <HAL_GetTick>
 8005a4c:	1b80      	subs	r0, r0, r6
 8005a4e:	2802      	cmp	r0, #2
 8005a50:	d9d7      	bls.n	8005a02 <HAL_RCC_OscConfig+0x292>
 8005a52:	e6d1      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005a54:	f7fe fc06 	bl	8004264 <HAL_GetTick>
 8005a58:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	019b      	lsls	r3, r3, #6
 8005a5e:	f57f ae9d 	bpl.w	800579c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fe fbff 	bl	8004264 <HAL_GetTick>
 8005a66:	1b00      	subs	r0, r0, r4
 8005a68:	2802      	cmp	r0, #2
 8005a6a:	d9f6      	bls.n	8005a5a <HAL_RCC_OscConfig+0x2ea>
 8005a6c:	e6c4      	b.n	80057f8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	f43f aeab 	beq.w	80057ca <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005a74:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a76:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a78:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a7c:	4291      	cmp	r1, r2
 8005a7e:	f47f aea4 	bne.w	80057ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a84:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	f47f ae9e 	bne.w	80057ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a8e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a90:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005a94:	401a      	ands	r2, r3
 8005a96:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005a9a:	f47f ae96 	bne.w	80057ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a9e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005aa0:	0852      	lsrs	r2, r2, #1
 8005aa2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005aa6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005aac:	f47f ae8d 	bne.w	80057ca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ab0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ab2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005aba:	bf14      	ite	ne
 8005abc:	2001      	movne	r0, #1
 8005abe:	2000      	moveq	r0, #0
 8005ac0:	e69b      	b.n	80057fa <HAL_RCC_OscConfig+0x8a>
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	42470000 	.word	0x42470000

08005acc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005acc:	4913      	ldr	r1, [pc, #76]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005ace:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad0:	688b      	ldr	r3, [r1, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d01c      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x48>
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d11c      	bne.n	8005b18 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ade:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae8:	bf14      	ite	ne
 8005aea:	480d      	ldrne	r0, [pc, #52]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aec:	480d      	ldreq	r0, [pc, #52]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005af2:	bf18      	it	ne
 8005af4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afa:	fba1 0100 	umull	r0, r1, r1, r0
 8005afe:	f7fa fbc7 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x50>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005b0e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005b12:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b14:	4802      	ldr	r0, [pc, #8]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x54>)
 8005b16:	e7fc      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005b18:	4802      	ldr	r0, [pc, #8]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005b1a:	e7fa      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x46>
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	007a1200 	.word	0x007a1200
 8005b24:	00f42400 	.word	0x00f42400

08005b28 <HAL_RCC_ClockConfig>:
{
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b910      	cbnz	r0, 8005b38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005b32:	2001      	movs	r0, #1
}
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b38:	4b43      	ldr	r3, [pc, #268]	@ (8005c48 <HAL_RCC_ClockConfig+0x120>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f002 020f 	and.w	r2, r2, #15
 8005b40:	428a      	cmp	r2, r1
 8005b42:	d328      	bcc.n	8005b96 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b44:	6821      	ldr	r1, [r4, #0]
 8005b46:	078f      	lsls	r7, r1, #30
 8005b48:	d42d      	bmi.n	8005ba6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	07c8      	lsls	r0, r1, #31
 8005b4c:	d440      	bmi.n	8005bd0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c48 <HAL_RCC_ClockConfig+0x120>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f002 020f 	and.w	r2, r2, #15
 8005b56:	42aa      	cmp	r2, r5
 8005b58:	d865      	bhi.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	0751      	lsls	r1, r2, #29
 8005b5e:	d46b      	bmi.n	8005c38 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	0713      	lsls	r3, r2, #28
 8005b62:	d507      	bpl.n	8005b74 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b64:	4a39      	ldr	r2, [pc, #228]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005b66:	6921      	ldr	r1, [r4, #16]
 8005b68:	6893      	ldr	r3, [r2, #8]
 8005b6a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005b6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b74:	f7ff ffaa 	bl	8005acc <HAL_RCC_GetSysClockFreq>
 8005b78:	4b34      	ldr	r3, [pc, #208]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005b7a:	4a35      	ldr	r2, [pc, #212]	@ (8005c50 <HAL_RCC_ClockConfig+0x128>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	40d8      	lsrs	r0, r3
 8005b86:	4b33      	ldr	r3, [pc, #204]	@ (8005c54 <HAL_RCC_ClockConfig+0x12c>)
 8005b88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005b8a:	4b33      	ldr	r3, [pc, #204]	@ (8005c58 <HAL_RCC_ClockConfig+0x130>)
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f7fc f9bf 	bl	8001f10 <HAL_InitTick>
  return HAL_OK;
 8005b92:	2000      	movs	r0, #0
 8005b94:	e7ce      	b.n	8005b34 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	b2ca      	uxtb	r2, r1
 8005b98:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d1c6      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xa>
 8005ba4:	e7ce      	b.n	8005b44 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba6:	4b29      	ldr	r3, [pc, #164]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005ba8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bac:	bf1e      	ittt	ne
 8005bae:	689a      	ldrne	r2, [r3, #8]
 8005bb0:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005bb4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb8:	bf42      	ittt	mi
 8005bba:	689a      	ldrmi	r2, [r3, #8]
 8005bbc:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005bc0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68a0      	ldr	r0, [r4, #8]
 8005bc6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005bca:	4302      	orrs	r2, r0
 8005bcc:	609a      	str	r2, [r3, #8]
 8005bce:	e7bc      	b.n	8005b4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd0:	6862      	ldr	r2, [r4, #4]
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005bd4:	2a01      	cmp	r2, #1
 8005bd6:	d11c      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	d0a8      	beq.n	8005b32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be0:	4e1a      	ldr	r6, [pc, #104]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005be2:	68b3      	ldr	r3, [r6, #8]
 8005be4:	f023 0303 	bic.w	r3, r3, #3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005bec:	f7fe fb3a 	bl	8004264 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005bf4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf6:	68b3      	ldr	r3, [r6, #8]
 8005bf8:	6862      	ldr	r2, [r4, #4]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c02:	d0a4      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f7fe fb2e 	bl	8004264 <HAL_GetTick>
 8005c08:	1bc0      	subs	r0, r0, r7
 8005c0a:	4540      	cmp	r0, r8
 8005c0c:	d9f3      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005c0e:	2003      	movs	r0, #3
 8005c10:	e790      	b.n	8005b34 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c12:	1e91      	subs	r1, r2, #2
 8005c14:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c16:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c18:	d802      	bhi.n	8005c20 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005c1e:	e7de      	b.n	8005bde <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c20:	f013 0f02 	tst.w	r3, #2
 8005c24:	e7db      	b.n	8005bde <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	b2ea      	uxtb	r2, r5
 8005c28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	f47f af7e 	bne.w	8005b32 <HAL_RCC_ClockConfig+0xa>
 8005c36:	e790      	b.n	8005b5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c38:	4904      	ldr	r1, [pc, #16]	@ (8005c4c <HAL_RCC_ClockConfig+0x124>)
 8005c3a:	68e0      	ldr	r0, [r4, #12]
 8005c3c:	688b      	ldr	r3, [r1, #8]
 8005c3e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005c42:	4303      	orrs	r3, r0
 8005c44:	608b      	str	r3, [r1, #8]
 8005c46:	e78b      	b.n	8005b60 <HAL_RCC_ClockConfig+0x38>
 8005c48:	40023c00 	.word	0x40023c00
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	08015c94 	.word	0x08015c94
 8005c54:	20000074 	.word	0x20000074
 8005c58:	2000007c 	.word	0x2000007c

08005c5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c5c:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005c5e:	4a05      	ldr	r2, [pc, #20]	@ (8005c74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	4a03      	ldr	r2, [pc, #12]	@ (8005c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c6a:	6810      	ldr	r0, [r2, #0]
}
 8005c6c:	40d8      	lsrs	r0, r3
 8005c6e:	4770      	bx	lr
 8005c70:	40023800 	.word	0x40023800
 8005c74:	08015c8c 	.word	0x08015c8c
 8005c78:	20000074 	.word	0x20000074

08005c7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c7c:	230f      	movs	r3, #15
 8005c7e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x34>)
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	f002 0203 	and.w	r2, r2, #3
 8005c88:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005c90:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005c98:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	08db      	lsrs	r3, r3, #3
 8005c9e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005ca2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x38>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	600b      	str	r3, [r1, #0]
}
 8005cae:	4770      	bx	lr
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40023c00 	.word	0x40023c00

08005cb8 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cb8:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cba:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cc0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc2:	f040 8088 	bne.w	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f013 0f0c 	tst.w	r3, #12
 8005ccc:	d045      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cce:	4b8c      	ldr	r3, [pc, #560]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cd0:	4d8c      	ldr	r5, [pc, #560]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005cd6:	f7fe fac5 	bl	8004264 <HAL_GetTick>
 8005cda:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	0099      	lsls	r1, r3, #2
 8005ce0:	f100 80cb 	bmi.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ce4:	6821      	ldr	r1, [r4, #0]
 8005ce6:	074a      	lsls	r2, r1, #29
 8005ce8:	d515      	bpl.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cea:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cee:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005cf8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d02:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005d06:	6a22      	ldr	r2, [r4, #32]
 8005d08:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d12:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d16:	070b      	lsls	r3, r1, #28
 8005d18:	d514      	bpl.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d1c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d1e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d22:	6920      	ldr	r0, [r4, #16]
 8005d24:	071b      	lsls	r3, r3, #28
 8005d26:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005d2a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d34:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005d38:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d3a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d44:	4b6e      	ldr	r3, [pc, #440]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d46:	4e6f      	ldr	r6, [pc, #444]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005d48:	2201      	movs	r2, #1
 8005d4a:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005d4c:	f7fe fa8a 	bl	8004264 <HAL_GetTick>
 8005d50:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d52:	6833      	ldr	r3, [r6, #0]
 8005d54:	009f      	lsls	r7, r3, #2
 8005d56:	f140 8097 	bpl.w	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	0698      	lsls	r0, r3, #26
 8005d5e:	d534      	bpl.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d60:	2300      	movs	r3, #0
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	4b67      	ldr	r3, [pc, #412]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d66:	4d68      	ldr	r5, [pc, #416]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d6a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d80:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d82:	f7fe fa6f 	bl	8004264 <HAL_GetTick>
 8005d86:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	05d8      	lsls	r0, r3, #23
 8005d8c:	f140 8083 	bpl.w	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d90:	4d5c      	ldr	r5, [pc, #368]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d92:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d94:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d96:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005d9a:	f040 8083 	bne.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005da0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005da4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005da8:	4a56      	ldr	r2, [pc, #344]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005daa:	f040 809e 	bne.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005dae:	6891      	ldr	r1, [r2, #8]
 8005db0:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005db4:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005db8:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005dbc:	4301      	orrs	r1, r0
 8005dbe:	6091      	str	r1, [r2, #8]
 8005dc0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	06db      	lsls	r3, r3, #27
 8005dce:	f100 8090 	bmi.w	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e04f      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dd8:	4e4a      	ldr	r6, [pc, #296]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005dda:	2200      	movs	r2, #0
 8005ddc:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005dde:	f7fe fa41 	bl	8004264 <HAL_GetTick>
 8005de2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	011f      	lsls	r7, r3, #4
 8005de8:	d43f      	bmi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dee:	bf41      	itttt	mi
 8005df0:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8005df4:	071b      	lslmi	r3, r3, #28
 8005df6:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8005dfa:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dfe:	078a      	lsls	r2, r1, #30
 8005e00:	d515      	bpl.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e02:	4a40      	ldr	r2, [pc, #256]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e04:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e06:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e0a:	6865      	ldr	r5, [r4, #4]
 8005e0c:	061b      	lsls	r3, r3, #24
 8005e0e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005e12:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005e16:	4303      	orrs	r3, r0
 8005e18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e1c:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005e20:	69e3      	ldr	r3, [r4, #28]
 8005e22:	f020 001f 	bic.w	r0, r0, #31
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4303      	orrs	r3, r0
 8005e2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e2e:	064b      	lsls	r3, r1, #25
 8005e30:	d50a      	bpl.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	6862      	ldr	r2, [r4, #4]
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e3c:	68a2      	ldr	r2, [r4, #8]
 8005e3e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005e42:	4a30      	ldr	r2, [pc, #192]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005e44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005e48:	4b2d      	ldr	r3, [pc, #180]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e4a:	4e2e      	ldr	r6, [pc, #184]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005e50:	f7fe fa08 	bl	8004264 <HAL_GetTick>
 8005e54:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e56:	6833      	ldr	r3, [r6, #0]
 8005e58:	011f      	lsls	r7, r3, #4
 8005e5a:	f53f af34 	bmi.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e5e:	f7fe fa01 	bl	8004264 <HAL_GetTick>
 8005e62:	1b40      	subs	r0, r0, r5
 8005e64:	2802      	cmp	r0, #2
 8005e66:	d9f6      	bls.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e6a:	f7fe f9fb 	bl	8004264 <HAL_GetTick>
 8005e6e:	1b40      	subs	r0, r0, r5
 8005e70:	2802      	cmp	r0, #2
 8005e72:	d9b7      	bls.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005e74:	2003      	movs	r0, #3
}
 8005e76:	b003      	add	sp, #12
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e7a:	f7fe f9f3 	bl	8004264 <HAL_GetTick>
 8005e7e:	1b80      	subs	r0, r0, r6
 8005e80:	2802      	cmp	r0, #2
 8005e82:	f67f af2b 	bls.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005e86:	e7f5      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e88:	f7fe f9ec 	bl	8004264 <HAL_GetTick>
 8005e8c:	1b40      	subs	r0, r0, r5
 8005e8e:	2802      	cmp	r0, #2
 8005e90:	f67f af5f 	bls.w	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005e94:	e7ee      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fe f9e5 	bl	8004264 <HAL_GetTick>
 8005e9a:	1b80      	subs	r0, r0, r6
 8005e9c:	2802      	cmp	r0, #2
 8005e9e:	f67f af73 	bls.w	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005ea2:	e7e7      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f43f af78 	beq.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eae:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eb0:	4a13      	ldr	r2, [pc, #76]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005ec2:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ec4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005ec6:	07d9      	lsls	r1, r3, #31
 8005ec8:	f57f af69 	bpl.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005ecc:	f7fe f9ca 	bl	8004264 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed0:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005ed4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005ed8:	079a      	lsls	r2, r3, #30
 8005eda:	f53f af60 	bmi.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fe f9c1 	bl	8004264 <HAL_GetTick>
 8005ee2:	1b80      	subs	r0, r0, r6
 8005ee4:	42b8      	cmp	r0, r7
 8005ee6:	d9f6      	bls.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ee8:	e7c4      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eea:	6891      	ldr	r1, [r2, #8]
 8005eec:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005ef0:	e765      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ef2:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ef4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8005ef8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8005efc:	e769      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8005efe:	bf00      	nop
 8005f00:	42470000 	.word	0x42470000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	42471000 	.word	0x42471000

08005f10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005f14:	4604      	mov	r4, r0
 8005f16:	b1c8      	cbz	r0, 8005f4c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f18:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f1c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005f20:	b91b      	cbnz	r3, 8005f2a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f22:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f26:	f7fb ff87 	bl	8001e38 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f30:	1d21      	adds	r1, r4, #4
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	f000 fce6 	bl	8006904 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005f38:	6862      	ldr	r2, [r4, #4]
 8005f3a:	6820      	ldr	r0, [r4, #0]
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f000 fd17 	bl	8006970 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8005f48:	2000      	movs	r0, #0
}
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	e7fc      	b.n	8005f4a <HAL_SDRAM_Init+0x3a>

08005f50 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005f50:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005f52:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005f56:	2b02      	cmp	r3, #2
{
 8005f58:	4605      	mov	r5, r0
 8005f5a:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005f5c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005f5e:	d012      	beq.n	8005f86 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005f60:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8005f64:	2c01      	cmp	r4, #1
 8005f66:	d10f      	bne.n	8005f88 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005f6e:	6828      	ldr	r0, [r5, #0]
 8005f70:	f000 fd34 	bl	80069dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f78:	bf06      	itte	eq
 8005f7a:	2305      	moveq	r3, #5
 8005f7c:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f80:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f84:	2000      	movs	r0, #0
}
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e7fc      	b.n	8005f86 <HAL_SDRAM_SendCommand+0x36>

08005f8c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f8c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f8e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f92:	2b02      	cmp	r3, #2
{
 8005f94:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f96:	b2d8      	uxtb	r0, r3
 8005f98:	d00d      	beq.n	8005fb6 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005f9a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	b2dd      	uxtb	r5, r3
 8005fa2:	d109      	bne.n	8005fb8 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fa4:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005fa6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fa8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005fac:	f000 fd3a 	bl	8006a24 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fb0:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005fb4:	2000      	movs	r0, #0
}
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005fb8:	2001      	movs	r0, #1
 8005fba:	e7fc      	b.n	8005fb6 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005fbc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005fbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	460f      	mov	r7, r1
 8005fc6:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fc8:	f7fe f94c 	bl	8004264 <HAL_GetTick>
 8005fcc:	4434      	add	r4, r6
 8005fce:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005fd0:	f7fe f948 	bl	8004264 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fd4:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005fdc:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005fde:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fe0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe2:	682a      	ldr	r2, [r5, #0]
 8005fe4:	6893      	ldr	r3, [r2, #8]
 8005fe6:	ea37 0303 	bics.w	r3, r7, r3
 8005fea:	d001      	beq.n	8005ff0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8005fec:	2000      	movs	r0, #0
 8005fee:	e02e      	b.n	800604e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005ff0:	1c73      	adds	r3, r6, #1
 8005ff2:	d0f7      	beq.n	8005fe4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff4:	f7fe f936 	bl	8004264 <HAL_GetTick>
 8005ff8:	eba0 0008 	sub.w	r0, r0, r8
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d329      	bcc.n	8006054 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006008:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600a:	686a      	ldr	r2, [r5, #4]
 800600c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006010:	d10a      	bne.n	8006028 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8006012:	68aa      	ldr	r2, [r5, #8]
 8006014:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006018:	d002      	beq.n	8006020 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800601a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800601e:	d103      	bne.n	8006028 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006026:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006028:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800602a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800602e:	d107      	bne.n	8006040 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800603e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006040:	2301      	movs	r3, #1
 8006042:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006046:	2300      	movs	r3, #0
 8006048:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 800604c:	2003      	movs	r0, #3
}
 800604e:	b002      	add	sp, #8
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8006054:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006056:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006058:	2a00      	cmp	r2, #0
      count--;
 800605a:	f103 33ff 	add.w	r3, r3, #4294967295
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	bf08      	it	eq
 8006062:	4614      	moveq	r4, r2
 8006064:	e7bd      	b.n	8005fe2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006066:	bf00      	nop
 8006068:	20000074 	.word	0x20000074

0800606c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006070:	6842      	ldr	r2, [r0, #4]
 8006072:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006076:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006078:	d006      	beq.n	8006088 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800607a:	460a      	mov	r2, r1
 800607c:	2101      	movs	r1, #1
 800607e:	f7ff ff9d 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006082:	b9b8      	cbnz	r0, 80060b4 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006084:	2000      	movs	r0, #0
}
 8006086:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006088:	6882      	ldr	r2, [r0, #8]
 800608a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800608e:	d002      	beq.n	8006096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006090:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006094:	d107      	bne.n	80060a6 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800609a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 800609e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80060a2:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060a4:	d003      	beq.n	80060ae <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a6:	460a      	mov	r2, r1
 80060a8:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060aa:	4620      	mov	r0, r4
 80060ac:	e7e7      	b.n	800607e <SPI_EndRxTransaction+0x12>
 80060ae:	460a      	mov	r2, r1
 80060b0:	2101      	movs	r1, #1
 80060b2:	e7fa      	b.n	80060aa <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80060b6:	f043 0320 	orr.w	r3, r3, #32
 80060ba:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060bc:	2003      	movs	r0, #3
 80060be:	e7e2      	b.n	8006086 <SPI_EndRxTransaction+0x1a>

080060c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060c4:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <SPI_EndRxTxTransaction+0x50>)
 80060c6:	6815      	ldr	r5, [r2, #0]
 80060c8:	4a12      	ldr	r2, [pc, #72]	@ (8006114 <SPI_EndRxTxTransaction+0x54>)
 80060ca:	fbb5 f5f2 	udiv	r5, r5, r2
 80060ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060d2:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d4:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060d6:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80060dc:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060de:	d10b      	bne.n	80060f8 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e0:	460a      	mov	r2, r1
 80060e2:	2180      	movs	r1, #128	@ 0x80
 80060e4:	f7ff ff6a 	bl	8005fbc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80060e8:	b178      	cbz	r0, 800610a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80060ec:	f043 0320 	orr.w	r3, r3, #32
 80060f0:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060f2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80060f4:	b003      	add	sp, #12
 80060f6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	b133      	cbz	r3, 800610a <SPI_EndRxTxTransaction+0x4a>
      count--;
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	d4f6      	bmi.n	80060f8 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800610a:	2000      	movs	r0, #0
 800610c:	e7f2      	b.n	80060f4 <SPI_EndRxTxTransaction+0x34>
 800610e:	bf00      	nop
 8006110:	20000074 	.word	0x20000074
 8006114:	016e3600 	.word	0x016e3600

08006118 <HAL_SPI_Init>:
{
 8006118:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800611a:	4604      	mov	r4, r0
 800611c:	2800      	cmp	r0, #0
 800611e:	d055      	beq.n	80061cc <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006120:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d14e      	bne.n	80061c4 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006126:	6842      	ldr	r2, [r0, #4]
 8006128:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800612c:	d000      	beq.n	8006130 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800612e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006134:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006138:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800613c:	b923      	cbnz	r3, 8006148 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800613e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006142:	4620      	mov	r0, r4
 8006144:	f7fb fe42 	bl	8001dcc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006148:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800614a:	68a0      	ldr	r0, [r4, #8]
 800614c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8006154:	680b      	ldr	r3, [r1, #0]
 8006156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8006162:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006166:	4303      	orrs	r3, r0
 8006168:	68e0      	ldr	r0, [r4, #12]
 800616a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800616e:	4303      	orrs	r3, r0
 8006170:	6920      	ldr	r0, [r4, #16]
 8006172:	f000 0002 	and.w	r0, r0, #2
 8006176:	4303      	orrs	r3, r0
 8006178:	6960      	ldr	r0, [r4, #20]
 800617a:	f000 0001 	and.w	r0, r0, #1
 800617e:	4303      	orrs	r3, r0
 8006180:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8006184:	4303      	orrs	r3, r0
 8006186:	69e0      	ldr	r0, [r4, #28]
 8006188:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800618c:	4303      	orrs	r3, r0
 800618e:	6a20      	ldr	r0, [r4, #32]
 8006190:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8006194:	4303      	orrs	r3, r0
 8006196:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006198:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800619c:	4303      	orrs	r3, r0
 800619e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061a2:	0c12      	lsrs	r2, r2, #16
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	f002 0204 	and.w	r2, r2, #4
 80061ac:	431a      	orrs	r2, r3
 80061ae:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061b0:	69cb      	ldr	r3, [r1, #28]
 80061b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80061ba:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061bc:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061be:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80061c2:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	e7b1      	b.n	8006130 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80061cc:	2001      	movs	r0, #1
 80061ce:	e7f8      	b.n	80061c2 <HAL_SPI_Init+0xaa>

080061d0 <HAL_SPI_Transmit>:
{
 80061d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80061d6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80061da:	2b01      	cmp	r3, #1
{
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80061e2:	f000 80a0 	beq.w	8006326 <HAL_SPI_Transmit+0x156>
 80061e6:	2301      	movs	r3, #1
 80061e8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80061ec:	f7fe f83a 	bl	8004264 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80061f0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80061f4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80061f6:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80061f8:	b2d8      	uxtb	r0, r3
 80061fa:	f040 8092 	bne.w	8006322 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 80061fe:	2d00      	cmp	r5, #0
 8006200:	d061      	beq.n	80062c6 <HAL_SPI_Transmit+0xf6>
 8006202:	f1b8 0f00 	cmp.w	r8, #0
 8006206:	d05e      	beq.n	80062c6 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006208:	2303      	movs	r3, #3
 800620a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8006212:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006216:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800621a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800621c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800621e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006220:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006222:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006224:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800622a:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622e:	d107      	bne.n	8006240 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006236:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800623e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006240:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006242:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006244:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006246:	bf5e      	ittt	pl
 8006248:	6833      	ldrpl	r3, [r6, #0]
 800624a:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800624e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006250:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006254:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006256:	d13f      	bne.n	80062d8 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006258:	b113      	cbz	r3, 8006260 <HAL_SPI_Transmit+0x90>
 800625a:	f1b8 0f01 	cmp.w	r8, #1
 800625e:	d107      	bne.n	8006270 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006260:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006264:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006268:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800626a:	3b01      	subs	r3, #1
 800626c:	b29b      	uxth	r3, r3
 800626e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006270:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006272:	b29b      	uxth	r3, r3
 8006274:	b9a3      	cbnz	r3, 80062a0 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006276:	464a      	mov	r2, r9
 8006278:	4639      	mov	r1, r7
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff ff20 	bl	80060c0 <SPI_EndRxTxTransaction>
 8006280:	2800      	cmp	r0, #0
 8006282:	d14b      	bne.n	800631c <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	b933      	cbnz	r3, 8006296 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	9201      	str	r2, [sp, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006296:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006298:	3800      	subs	r0, #0
 800629a:	bf18      	it	ne
 800629c:	2001      	movne	r0, #1
error:
 800629e:	e012      	b.n	80062c6 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	6893      	ldr	r3, [r2, #8]
 80062a4:	0798      	lsls	r0, r3, #30
 80062a6:	d505      	bpl.n	80062b4 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80062aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80062ae:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80062b2:	e7d9      	b.n	8006268 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b4:	f7fd ffd6 	bl	8004264 <HAL_GetTick>
 80062b8:	eba0 0009 	sub.w	r0, r0, r9
 80062bc:	42b8      	cmp	r0, r7
 80062be:	d3d7      	bcc.n	8006270 <HAL_SPI_Transmit+0xa0>
 80062c0:	1c79      	adds	r1, r7, #1
 80062c2:	d0d5      	beq.n	8006270 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80062c4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80062cc:	2300      	movs	r3, #0
 80062ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d8:	b113      	cbz	r3, 80062e0 <HAL_SPI_Transmit+0x110>
 80062da:	f1b8 0f01 	cmp.w	r8, #1
 80062de:	d108      	bne.n	80062f2 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062e0:	782b      	ldrb	r3, [r5, #0]
 80062e2:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80062e6:	3301      	adds	r3, #1
 80062e8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80062ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80062f2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0bd      	beq.n	8006276 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	0792      	lsls	r2, r2, #30
 8006300:	d503      	bpl.n	800630a <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006302:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	731a      	strb	r2, [r3, #12]
 8006308:	e7ec      	b.n	80062e4 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800630a:	f7fd ffab 	bl	8004264 <HAL_GetTick>
 800630e:	eba0 0009 	sub.w	r0, r0, r9
 8006312:	42b8      	cmp	r0, r7
 8006314:	d3ed      	bcc.n	80062f2 <HAL_SPI_Transmit+0x122>
 8006316:	1c7b      	adds	r3, r7, #1
 8006318:	d0eb      	beq.n	80062f2 <HAL_SPI_Transmit+0x122>
 800631a:	e7d3      	b.n	80062c4 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631c:	2320      	movs	r3, #32
 800631e:	6563      	str	r3, [r4, #84]	@ 0x54
 8006320:	e7b0      	b.n	8006284 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8006322:	2002      	movs	r0, #2
 8006324:	e7cf      	b.n	80062c6 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8006326:	2002      	movs	r0, #2
 8006328:	e7d3      	b.n	80062d2 <HAL_SPI_Transmit+0x102>

0800632a <HAL_SPI_TransmitReceive>:
{
 800632a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800632e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006330:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006334:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006338:	2b01      	cmp	r3, #1
{
 800633a:	4604      	mov	r4, r0
 800633c:	460d      	mov	r5, r1
 800633e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006340:	f000 80e1 	beq.w	8006506 <HAL_SPI_TransmitReceive+0x1dc>
 8006344:	2301      	movs	r3, #1
 8006346:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800634a:	f7fd ff8b 	bl	8004264 <HAL_GetTick>
  tmp_state           = hspi->State;
 800634e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8006352:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006354:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006356:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8006358:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800635a:	d00a      	beq.n	8006372 <HAL_SPI_TransmitReceive+0x48>
 800635c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006360:	f040 80cf 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006364:	68a3      	ldr	r3, [r4, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 80cb 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x1d8>
 800636c:	2904      	cmp	r1, #4
 800636e:	f040 80c8 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006372:	b115      	cbz	r5, 800637a <HAL_SPI_TransmitReceive+0x50>
 8006374:	f1b9 0f00 	cmp.w	r9, #0
 8006378:	d109      	bne.n	800638e <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800637a:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800637c:	2301      	movs	r3, #1
 800637e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006382:	2300      	movs	r3, #0
 8006384:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006388:	b003      	add	sp, #12
 800638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800638e:	2e00      	cmp	r6, #0
 8006390:	d0f3      	beq.n	800637a <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006392:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006396:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800639a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800639c:	bf1c      	itt	ne
 800639e:	2305      	movne	r3, #5
 80063a0:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80063a8:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ac:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80063ae:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80063b0:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80063b4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b6:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80063b8:	bf58      	it	pl
 80063ba:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063bc:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 80063be:	bf58      	it	pl
 80063c0:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80063c4:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80063c6:	bf58      	it	pl
 80063c8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063ca:	68e1      	ldr	r1, [r4, #12]
 80063cc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80063d0:	d148      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d2:	b10a      	cbz	r2, 80063d8 <HAL_SPI_TransmitReceive+0xae>
 80063d4:	2e01      	cmp	r6, #1
 80063d6:	d107      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80063dc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80063de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80063e8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	b963      	cbnz	r3, 800640a <HAL_SPI_TransmitReceive+0xe0>
 80063f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	b94b      	cbnz	r3, 800640a <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f6:	463a      	mov	r2, r7
 80063f8:	4641      	mov	r1, r8
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff fe60 	bl	80060c0 <SPI_EndRxTxTransaction>
 8006400:	2800      	cmp	r0, #0
 8006402:	d072      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006404:	2320      	movs	r3, #32
 8006406:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8006408:	e7b7      	b.n	800637a <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800640a:	6821      	ldr	r1, [r4, #0]
 800640c:	688b      	ldr	r3, [r1, #8]
 800640e:	079a      	lsls	r2, r3, #30
 8006410:	d50d      	bpl.n	800642e <HAL_SPI_TransmitReceive+0x104>
 8006412:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	b153      	cbz	r3, 800642e <HAL_SPI_TransmitReceive+0x104>
 8006418:	b145      	cbz	r5, 800642c <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800641c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006420:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006422:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006424:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006426:	3b01      	subs	r3, #1
 8006428:	b29b      	uxth	r3, r3
 800642a:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800642c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800642e:	688a      	ldr	r2, [r1, #8]
 8006430:	f012 0201 	ands.w	r2, r2, #1
 8006434:	d00c      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x126>
 8006436:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006438:	b29b      	uxth	r3, r3
 800643a:	b14b      	cbz	r3, 8006450 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800643c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800643e:	68c9      	ldr	r1, [r1, #12]
 8006440:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006444:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006446:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006448:	3b01      	subs	r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800644e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006450:	f7fd ff08 	bl	8004264 <HAL_GetTick>
 8006454:	1bc0      	subs	r0, r0, r7
 8006456:	4540      	cmp	r0, r8
 8006458:	d3c7      	bcc.n	80063ea <HAL_SPI_TransmitReceive+0xc0>
 800645a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800645e:	d0c4      	beq.n	80063ea <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8006460:	2003      	movs	r0, #3
 8006462:	e78b      	b.n	800637c <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006464:	b10a      	cbz	r2, 800646a <HAL_SPI_TransmitReceive+0x140>
 8006466:	2e01      	cmp	r6, #1
 8006468:	d108      	bne.n	800647c <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800646a:	782a      	ldrb	r2, [r5, #0]
 800646c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800646e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006470:	3301      	adds	r3, #1
 8006472:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006474:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006476:	3b01      	subs	r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800647c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006480:	b29b      	uxth	r3, r3
 8006482:	b91b      	cbnz	r3, 800648c <HAL_SPI_TransmitReceive+0x162>
 8006484:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0b4      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	6893      	ldr	r3, [r2, #8]
 8006490:	079b      	lsls	r3, r3, #30
 8006492:	d50e      	bpl.n	80064b2 <HAL_SPI_TransmitReceive+0x188>
 8006494:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006496:	b29b      	uxth	r3, r3
 8006498:	b15b      	cbz	r3, 80064b2 <HAL_SPI_TransmitReceive+0x188>
 800649a:	b14d      	cbz	r5, 80064b0 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800649c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80064a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80064a4:	3301      	adds	r3, #1
 80064a6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80064a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80064b0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	6891      	ldr	r1, [r2, #8]
 80064b6:	f011 0101 	ands.w	r1, r1, #1
 80064ba:	d00d      	beq.n	80064d8 <HAL_SPI_TransmitReceive+0x1ae>
 80064bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	b153      	cbz	r3, 80064d8 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80064c4:	68d2      	ldr	r2, [r2, #12]
 80064c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80064ca:	3301      	adds	r3, #1
 80064cc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80064ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80064d6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064d8:	f7fd fec4 	bl	8004264 <HAL_GetTick>
 80064dc:	1bc0      	subs	r0, r0, r7
 80064de:	4540      	cmp	r0, r8
 80064e0:	d3cd      	bcc.n	800647e <HAL_SPI_TransmitReceive+0x154>
 80064e2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80064e6:	d0ca      	beq.n	800647e <HAL_SPI_TransmitReceive+0x154>
 80064e8:	e7ba      	b.n	8006460 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f47f af45 	bne.w	800637c <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	9001      	str	r0, [sp, #4]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	9b01      	ldr	r3, [sp, #4]
 8006500:	e73c      	b.n	800637c <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8006502:	2002      	movs	r0, #2
 8006504:	e73a      	b.n	800637c <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8006506:	2002      	movs	r0, #2
 8006508:	e73e      	b.n	8006388 <HAL_SPI_TransmitReceive+0x5e>

0800650a <HAL_SPI_Receive>:
{
 800650a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800650e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006510:	6843      	ldr	r3, [r0, #4]
 8006512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006516:	4604      	mov	r4, r0
 8006518:	4689      	mov	r9, r1
 800651a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800651c:	d10c      	bne.n	8006538 <HAL_SPI_Receive+0x2e>
 800651e:	6883      	ldr	r3, [r0, #8]
 8006520:	b953      	cbnz	r3, 8006538 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006522:	2304      	movs	r3, #4
 8006524:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006528:	4613      	mov	r3, r2
 800652a:	9500      	str	r5, [sp, #0]
 800652c:	460a      	mov	r2, r1
 800652e:	f7ff fefc 	bl	800632a <HAL_SPI_TransmitReceive>
}
 8006532:	b003      	add	sp, #12
 8006534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006538:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800653c:	2b01      	cmp	r3, #1
 800653e:	d07f      	beq.n	8006640 <HAL_SPI_Receive+0x136>
 8006540:	2301      	movs	r3, #1
 8006542:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006546:	f7fd fe8d 	bl	8004264 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800654a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800654e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006550:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006552:	b2d8      	uxtb	r0, r3
 8006554:	d172      	bne.n	800663c <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 8006556:	f1b9 0f00 	cmp.w	r9, #0
 800655a:	d05c      	beq.n	8006616 <HAL_SPI_Receive+0x10c>
 800655c:	2f00      	cmp	r7, #0
 800655e:	d05a      	beq.n	8006616 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006560:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006562:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006566:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006568:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800656e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8006572:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006576:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8006578:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800657a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800657c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800657e:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006580:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006582:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006584:	d107      	bne.n	8006596 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800658c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006594:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800659a:	bf5e      	ittt	pl
 800659c:	681a      	ldrpl	r2, [r3, #0]
 800659e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80065a2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	b1f3      	cbz	r3, 80065e6 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 80065a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	b1fb      	cbz	r3, 80065ee <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	07d2      	lsls	r2, r2, #31
 80065b4:	d536      	bpl.n	8006624 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065ba:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065be:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80065c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80065c8:	e7ee      	b.n	80065a8 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	07d0      	lsls	r0, r2, #31
 80065d0:	d518      	bpl.n	8006604 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065d2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80065d4:	7b1b      	ldrb	r3, [r3, #12]
 80065d6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065da:	3301      	adds	r3, #1
 80065dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80065de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80065e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1ed      	bne.n	80065ca <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ee:	4642      	mov	r2, r8
 80065f0:	4629      	mov	r1, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	f7ff fd3a 	bl	800606c <SPI_EndRxTransaction>
 80065f8:	b9e8      	cbnz	r0, 8006636 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065fa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80065fc:	3800      	subs	r0, #0
 80065fe:	bf18      	it	ne
 8006600:	2001      	movne	r0, #1
error :
 8006602:	e008      	b.n	8006616 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006604:	f7fd fe2e 	bl	8004264 <HAL_GetTick>
 8006608:	eba0 0008 	sub.w	r0, r0, r8
 800660c:	42a8      	cmp	r0, r5
 800660e:	d3ea      	bcc.n	80065e6 <HAL_SPI_Receive+0xdc>
 8006610:	1c69      	adds	r1, r5, #1
 8006612:	d0e8      	beq.n	80065e6 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8006614:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006616:	2301      	movs	r3, #1
 8006618:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800661c:	2300      	movs	r3, #0
 800661e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8006622:	e786      	b.n	8006532 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006624:	f7fd fe1e 	bl	8004264 <HAL_GetTick>
 8006628:	eba0 0008 	sub.w	r0, r0, r8
 800662c:	42a8      	cmp	r0, r5
 800662e:	d3bb      	bcc.n	80065a8 <HAL_SPI_Receive+0x9e>
 8006630:	1c6b      	adds	r3, r5, #1
 8006632:	d0b9      	beq.n	80065a8 <HAL_SPI_Receive+0x9e>
 8006634:	e7ee      	b.n	8006614 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006636:	2320      	movs	r3, #32
 8006638:	6563      	str	r3, [r4, #84]	@ 0x54
 800663a:	e7de      	b.n	80065fa <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 800663c:	2002      	movs	r0, #2
 800663e:	e7ea      	b.n	8006616 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8006640:	2002      	movs	r0, #2
 8006642:	e776      	b.n	8006532 <HAL_SPI_Receive+0x28>

08006644 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006644:	4770      	bx	lr
	...

08006648 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006648:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800664c:	2b01      	cmp	r3, #1
 800664e:	d130      	bne.n	80066b2 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	2302      	movs	r3, #2
 8006652:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006656:	6803      	ldr	r3, [r0, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006660:	4a15      	ldr	r2, [pc, #84]	@ (80066b8 <HAL_TIM_Base_Start_IT+0x70>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01a      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800666a:	d017      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 800666c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 8006674:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006678:	4293      	cmp	r3, r2
 800667a:	d00f      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 800667c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006680:	4293      	cmp	r3, r2
 8006682:	d00b      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 8006684:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006688:	4293      	cmp	r3, r2
 800668a:	d007      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 800668c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x54>
 8006694:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006698:	4293      	cmp	r3, r2
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a2:	2a06      	cmp	r2, #6
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80066ae:	2000      	movs	r0, #0
 80066b0:	4770      	bx	lr
    return HAL_ERROR;
 80066b2:	2001      	movs	r0, #1
}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000

080066bc <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80066be:	4770      	bx	lr

080066c0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80066c0:	4770      	bx	lr

080066c2 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	0791      	lsls	r1, r2, #30
{
 80066ca:	b510      	push	{r4, lr}
 80066cc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066ce:	d50e      	bpl.n	80066ee <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	0792      	lsls	r2, r2, #30
 80066d4:	d50b      	bpl.n	80066ee <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066d6:	f06f 0202 	mvn.w	r2, #2
 80066da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066dc:	2201      	movs	r2, #1
 80066de:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	079b      	lsls	r3, r3, #30
 80066e4:	d077      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	f7ff ffea 	bl	80066be <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	2300      	movs	r3, #0
 80066ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	0750      	lsls	r0, r2, #29
 80066f4:	d510      	bpl.n	8006718 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	0751      	lsls	r1, r2, #29
 80066fa:	d50d      	bpl.n	8006718 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066fc:	f06f 0204 	mvn.w	r2, #4
 8006700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006702:	2202      	movs	r2, #2
 8006704:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800670c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800670e:	d068      	beq.n	80067e2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006710:	f7ff ffd5 	bl	80066be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006714:	2300      	movs	r3, #0
 8006716:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	0712      	lsls	r2, r2, #28
 800671e:	d50f      	bpl.n	8006740 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	0710      	lsls	r0, r2, #28
 8006724:	d50c      	bpl.n	8006740 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006726:	f06f 0208 	mvn.w	r2, #8
 800672a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672c:	2204      	movs	r2, #4
 800672e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006734:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006736:	d05a      	beq.n	80067ee <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006738:	f7ff ffc1 	bl	80066be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673c:	2300      	movs	r3, #0
 800673e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	06d2      	lsls	r2, r2, #27
 8006746:	d510      	bpl.n	800676a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	06d0      	lsls	r0, r2, #27
 800674c:	d50d      	bpl.n	800676a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800674e:	f06f 0210 	mvn.w	r2, #16
 8006752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006754:	2208      	movs	r2, #8
 8006756:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006760:	d04b      	beq.n	80067fa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006762:	f7ff ffac 	bl	80066be <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	2300      	movs	r3, #0
 8006768:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	07d1      	lsls	r1, r2, #31
 8006770:	d508      	bpl.n	8006784 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	07d2      	lsls	r2, r2, #31
 8006776:	d505      	bpl.n	8006784 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006778:	f06f 0201 	mvn.w	r2, #1
 800677c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800677e:	4620      	mov	r0, r4
 8006780:	f7fb f92e 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	0610      	lsls	r0, r2, #24
 800678a:	d508      	bpl.n	800679e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	0611      	lsls	r1, r2, #24
 8006790:	d505      	bpl.n	800679e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006792:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006796:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f8b2 	bl	8006902 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	0652      	lsls	r2, r2, #25
 80067a4:	d508      	bpl.n	80067b8 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	0650      	lsls	r0, r2, #25
 80067aa:	d505      	bpl.n	80067b8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80067b2:	4620      	mov	r0, r4
 80067b4:	f7ff ff85 	bl	80066c2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	0691      	lsls	r1, r2, #26
 80067be:	d522      	bpl.n	8006806 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	0692      	lsls	r2, r2, #26
 80067c4:	d51f      	bpl.n	8006806 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80067ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067cc:	611a      	str	r2, [r3, #16]
}
 80067ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80067d2:	f000 b895 	b.w	8006900 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d6:	f7ff ff71 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff ff70 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80067e0:	e783      	b.n	80066ea <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	f7ff ff6b 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7ff ff6a 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80067ec:	e792      	b.n	8006714 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ee:	f7ff ff65 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff ff64 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
 80067f8:	e7a0      	b.n	800673c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	f7ff ff5f 	bl	80066bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff ff5e 	bl	80066c0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006804:	e7af      	b.n	8006766 <HAL_TIM_IRQHandler+0xa2>
}
 8006806:	bd10      	pop	{r4, pc}

08006808 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	4a25      	ldr	r2, [pc, #148]	@ (80068a0 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 800680a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	4290      	cmp	r0, r2
 800680e:	d012      	beq.n	8006836 <TIM_Base_SetConfig+0x2e>
 8006810:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006814:	d00f      	beq.n	8006836 <TIM_Base_SetConfig+0x2e>
 8006816:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800681a:	4290      	cmp	r0, r2
 800681c:	d00b      	beq.n	8006836 <TIM_Base_SetConfig+0x2e>
 800681e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006822:	4290      	cmp	r0, r2
 8006824:	d007      	beq.n	8006836 <TIM_Base_SetConfig+0x2e>
 8006826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800682a:	4290      	cmp	r0, r2
 800682c:	d003      	beq.n	8006836 <TIM_Base_SetConfig+0x2e>
 800682e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006832:	4290      	cmp	r0, r2
 8006834:	d108      	bne.n	8006848 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006836:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800683c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006844:	4313      	orrs	r3, r2
 8006846:	e016      	b.n	8006876 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006848:	4a16      	ldr	r2, [pc, #88]	@ (80068a4 <TIM_Base_SetConfig+0x9c>)
 800684a:	4290      	cmp	r0, r2
 800684c:	d0f7      	beq.n	800683e <TIM_Base_SetConfig+0x36>
 800684e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006852:	4290      	cmp	r0, r2
 8006854:	d0f3      	beq.n	800683e <TIM_Base_SetConfig+0x36>
 8006856:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800685a:	4290      	cmp	r0, r2
 800685c:	d0ef      	beq.n	800683e <TIM_Base_SetConfig+0x36>
 800685e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006862:	4290      	cmp	r0, r2
 8006864:	d0eb      	beq.n	800683e <TIM_Base_SetConfig+0x36>
 8006866:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800686a:	4290      	cmp	r0, r2
 800686c:	d0e7      	beq.n	800683e <TIM_Base_SetConfig+0x36>
 800686e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006872:	4290      	cmp	r0, r2
 8006874:	d0e3      	beq.n	800683e <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006876:	694a      	ldr	r2, [r1, #20]
 8006878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800687e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006880:	688b      	ldr	r3, [r1, #8]
 8006882:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	680b      	ldr	r3, [r1, #0]
 8006886:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <TIM_Base_SetConfig+0x98>)
 800688a:	4298      	cmp	r0, r3
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0x8e>
 800688e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006892:	4298      	cmp	r0, r3
 8006894:	d101      	bne.n	800689a <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689a:	2301      	movs	r3, #1
 800689c:	6143      	str	r3, [r0, #20]
}
 800689e:	4770      	bx	lr
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40014000 	.word	0x40014000

080068a8 <HAL_TIM_Base_Init>:
{
 80068a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80068aa:	4604      	mov	r4, r0
 80068ac:	b330      	cbz	r0, 80068fc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80068ae:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80068b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068b6:	b91b      	cbnz	r3, 80068c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80068b8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80068bc:	f7ff fec2 	bl	8006644 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	1d21      	adds	r1, r4, #4
 80068ca:	f7ff ff9d 	bl	8006808 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 80068d4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80068da:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80068de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80068e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80068f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80068f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80068fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068fc:	2001      	movs	r0, #1
 80068fe:	e7fc      	b.n	80068fa <HAL_TIM_Base_Init+0x52>

08006900 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006900:	4770      	bx	lr

08006902 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006902:	4770      	bx	lr

08006904 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006908:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800690c:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006910:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006914:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006918:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800691c:	6809      	ldr	r1, [r1, #0]
 800691e:	ea43 0308 	orr.w	r3, r3, r8
 8006922:	b981      	cbnz	r1, 8006946 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006924:	ea43 030e 	orr.w	r3, r3, lr
 8006928:	4313      	orrs	r3, r2
 800692a:	ea43 030c 	orr.w	r3, r3, ip
 800692e:	433b      	orrs	r3, r7
 8006930:	6801      	ldr	r1, [r0, #0]
 8006932:	4333      	orrs	r3, r6
 8006934:	432b      	orrs	r3, r5
 8006936:	4323      	orrs	r3, r4
 8006938:	f36f 010e 	bfc	r1, #0, #15
 800693c:	430b      	orrs	r3, r1
 800693e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006940:	2000      	movs	r0, #0
 8006942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006946:	6801      	ldr	r1, [r0, #0]
 8006948:	ea43 030e 	orr.w	r3, r3, lr
 800694c:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006950:	430b      	orrs	r3, r1
 8006952:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006954:	ea42 030c 	orr.w	r3, r2, ip
 8006958:	6841      	ldr	r1, [r0, #4]
 800695a:	433b      	orrs	r3, r7
 800695c:	4333      	orrs	r3, r6
 800695e:	432b      	orrs	r3, r5
 8006960:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006964:	4323      	orrs	r3, r4
 8006966:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800696a:	4313      	orrs	r3, r2
 800696c:	6043      	str	r3, [r0, #4]
 800696e:	e7e7      	b.n	8006940 <FMC_SDRAM_Init+0x3c>

08006970 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006970:	68cb      	ldr	r3, [r1, #12]
 8006972:	f103 3cff 	add.w	ip, r3, #4294967295
 8006976:	694b      	ldr	r3, [r1, #20]
{
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800697a:	684c      	ldr	r4, [r1, #4]
 800697c:	688f      	ldr	r7, [r1, #8]
 800697e:	690e      	ldr	r6, [r1, #16]
 8006980:	698d      	ldr	r5, [r1, #24]
 8006982:	6809      	ldr	r1, [r1, #0]
 8006984:	3b01      	subs	r3, #1
 8006986:	051b      	lsls	r3, r3, #20
 8006988:	3c01      	subs	r4, #1
 800698a:	3f01      	subs	r7, #1
 800698c:	3e01      	subs	r6, #1
 800698e:	3d01      	subs	r5, #1
 8006990:	0124      	lsls	r4, r4, #4
 8006992:	023f      	lsls	r7, r7, #8
 8006994:	0436      	lsls	r6, r6, #16
 8006996:	062d      	lsls	r5, r5, #24
 8006998:	3901      	subs	r1, #1
 800699a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800699e:	b95a      	cbnz	r2, 80069b8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80069a0:	430b      	orrs	r3, r1
 80069a2:	4323      	orrs	r3, r4
 80069a4:	6882      	ldr	r2, [r0, #8]
 80069a6:	433b      	orrs	r3, r7
 80069a8:	4333      	orrs	r3, r6
 80069aa:	432b      	orrs	r3, r5
 80069ac:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80069b0:	4313      	orrs	r3, r2
 80069b2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80069b4:	2000      	movs	r0, #0
 80069b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80069b8:	6882      	ldr	r2, [r0, #8]
 80069ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80069be:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80069c2:	4313      	orrs	r3, r2
 80069c4:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80069c6:	ea44 0307 	orr.w	r3, r4, r7
 80069ca:	68c2      	ldr	r2, [r0, #12]
 80069cc:	430b      	orrs	r3, r1
 80069ce:	4333      	orrs	r3, r6
 80069d0:	432b      	orrs	r3, r5
 80069d2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60c3      	str	r3, [r0, #12]
 80069da:	e7eb      	b.n	80069b4 <FMC_SDRAM_Timing_Init+0x44>

080069dc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4604      	mov	r4, r0
 80069e0:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80069e2:	6902      	ldr	r2, [r0, #16]
 80069e4:	e9d1 3000 	ldrd	r3, r0, [r1]
 80069e8:	4303      	orrs	r3, r0
 80069ea:	68c8      	ldr	r0, [r1, #12]
 80069ec:	f36f 0215 	bfc	r2, #0, #22
 80069f0:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80069f4:	4313      	orrs	r3, r2
 80069f6:	688a      	ldr	r2, [r1, #8]
 80069f8:	3a01      	subs	r2, #1
 80069fa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80069fe:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006a00:	f7fd fc30 	bl	8004264 <HAL_GetTick>
 8006a04:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006a06:	69a0      	ldr	r0, [r4, #24]
 8006a08:	f010 0020 	ands.w	r0, r0, #32
 8006a0c:	d003      	beq.n	8006a16 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	1c6b      	adds	r3, r5, #1
 8006a10:	d0f9      	beq.n	8006a06 <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006a12:	b90d      	cbnz	r5, 8006a18 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006a14:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006a18:	f7fd fc24 	bl	8004264 <HAL_GetTick>
 8006a1c:	1b80      	subs	r0, r0, r6
 8006a1e:	42a8      	cmp	r0, r5
 8006a20:	d9f1      	bls.n	8006a06 <FMC_SDRAM_SendCommand+0x2a>
 8006a22:	e7f7      	b.n	8006a14 <FMC_SDRAM_SendCommand+0x38>

08006a24 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006a24:	6943      	ldr	r3, [r0, #20]
 8006a26:	f36f 034d 	bfc	r3, #1, #13
 8006a2a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006a2e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006a30:	2000      	movs	r0, #0
 8006a32:	4770      	bx	lr

08006a34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a34:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a3a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a3c:	f001 fe1e 	bl	800867c <xTaskGetSchedulerState>
 8006a40:	2801      	cmp	r0, #1
 8006a42:	d003      	beq.n	8006a4c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a48:	f000 bbec 	b.w	8007224 <xPortSysTickHandler>
}
 8006a4c:	bd08      	pop	{r3, pc}
	...

08006a50 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a50:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a54:	b92b      	cbnz	r3, 8006a62 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a56:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <osKernelInitialize+0x20>)
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	b928      	cbnz	r0, 8006a68 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a60:	4770      	bx	lr
    stat = osErrorISR;
 8006a62:	f06f 0005 	mvn.w	r0, #5
 8006a66:	4770      	bx	lr
    } else {
      stat = osError;
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20001f40 	.word	0x20001f40

08006a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a74:	b510      	push	{r4, lr}
 8006a76:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7a:	b95c      	cbnz	r4, 8006a94 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006a7c:	4b08      	ldr	r3, [pc, #32]	@ (8006aa0 <osKernelStart+0x2c>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	2a01      	cmp	r2, #1
 8006a82:	d10a      	bne.n	8006a9a <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a84:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <osKernelStart+0x30>)
 8006a86:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a88:	2202      	movs	r2, #2
 8006a8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a8c:	f001 fb74 	bl	8008178 <vTaskStartScheduler>
      stat = osOK;
 8006a90:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006a92:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006a94:	f06f 0005 	mvn.w	r0, #5
 8006a98:	e7fb      	b.n	8006a92 <osKernelStart+0x1e>
      stat = osError;
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006a9e:	e7f8      	b.n	8006a92 <osKernelStart+0x1e>
 8006aa0:	20001f40 	.word	0x20001f40
 8006aa4:	e000ed00 	.word	0xe000ed00

08006aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006aae:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ab0:	460b      	mov	r3, r1
  hTask = NULL;
 8006ab2:	9205      	str	r2, [sp, #20]
 8006ab4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006ab8:	b9fa      	cbnz	r2, 8006afa <osThreadNew+0x52>
 8006aba:	b1f0      	cbz	r0, 8006afa <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006abc:	b354      	cbz	r4, 8006b14 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006abe:	69a5      	ldr	r5, [r4, #24]
 8006ac0:	b125      	cbz	r5, 8006acc <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ac2:	1e69      	subs	r1, r5, #1
 8006ac4:	2937      	cmp	r1, #55	@ 0x37
 8006ac6:	d902      	bls.n	8006ace <osThreadNew+0x26>
        return (NULL);
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e017      	b.n	8006afc <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8006acc:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d4f9      	bmi.n	8006ac8 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8006ad4:	6966      	ldr	r6, [r4, #20]
 8006ad6:	b19e      	cbz	r6, 8006b00 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ad8:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ada:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8006ade:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ae0:	b187      	cbz	r7, 8006b04 <osThreadNew+0x5c>
 8006ae2:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8006ae6:	d908      	bls.n	8006afa <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ae8:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aea:	b134      	cbz	r4, 8006afa <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aec:	b12e      	cbz	r6, 8006afa <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006aee:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006af2:	9500      	str	r5, [sp, #0]
 8006af4:	f001 fad9 	bl	80080aa <xTaskCreateStatic>
 8006af8:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006afa:	9805      	ldr	r0, [sp, #20]
}
 8006afc:	b007      	add	sp, #28
 8006afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	e7ea      	b.n	8006ada <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b04:	f1bc 0f00 	cmp.w	ip, #0
 8006b08:	d1f7      	bne.n	8006afa <osThreadNew+0x52>
 8006b0a:	6924      	ldr	r4, [r4, #16]
 8006b0c:	2c00      	cmp	r4, #0
 8006b0e:	d1f4      	bne.n	8006afa <osThreadNew+0x52>
 8006b10:	460c      	mov	r4, r1
 8006b12:	e001      	b.n	8006b18 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8006b14:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8006b16:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b18:	a905      	add	r1, sp, #20
 8006b1a:	e9cd 5100 	strd	r5, r1, [sp]
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	4621      	mov	r1, r4
 8006b22:	f001 fafa 	bl	800811a <xTaskCreate>
 8006b26:	2801      	cmp	r0, #1
            hTask = NULL;
 8006b28:	bf1c      	itt	ne
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	9305      	strne	r3, [sp, #20]
 8006b2e:	e7e4      	b.n	8006afa <osThreadNew+0x52>

08006b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b30:	b508      	push	{r3, lr}
 8006b32:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b36:	b922      	cbnz	r2, 8006b42 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006b38:	b108      	cbz	r0, 8006b3e <osDelay+0xe>
      vTaskDelay(ticks);
 8006b3a:	f001 fc7b 	bl	8008434 <vTaskDelay>
    stat = osOK;
 8006b3e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006b40:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006b42:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8006b46:	e7fb      	b.n	8006b40 <osDelay+0x10>

08006b48 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	4615      	mov	r5, r2
 8006b50:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b54:	b942      	cbnz	r2, 8006b68 <osSemaphoreNew+0x20>
 8006b56:	b138      	cbz	r0, 8006b68 <osSemaphoreNew+0x20>
 8006b58:	4288      	cmp	r0, r1
 8006b5a:	d305      	bcc.n	8006b68 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006b5c:	b155      	cbz	r5, 8006b74 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b5e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8006b62:	b12b      	cbz	r3, 8006b70 <osSemaphoreNew+0x28>
 8006b64:	2f4f      	cmp	r7, #79	@ 0x4f
 8006b66:	d822      	bhi.n	8006bae <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8006b68:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	d1f9      	bne.n	8006b68 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8006b74:	2c01      	cmp	r4, #1
 8006b76:	d00c      	beq.n	8006b92 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	f000 fd8a 	bl	8007694 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006b80:	4604      	mov	r4, r0
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0f0      	beq.n	8006b68 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8006b86:	b985      	cbnz	r5, 8006baa <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f001 f8c8 	bl	8007d20 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006b90:	e7eb      	b.n	8006b6a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8006b92:	2203      	movs	r2, #3
 8006b94:	2100      	movs	r1, #0
 8006b96:	2001      	movs	r0, #1
 8006b98:	f000 fd33 	bl	8007602 <xQueueGenericCreate>
 8006b9c:	e00e      	b.n	8006bbc <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 fd56 	bl	8007650 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0de      	beq.n	8006b68 <osSemaphoreNew+0x20>
          name = attr->name;
 8006baa:	682d      	ldr	r5, [r5, #0]
 8006bac:	e7ec      	b.n	8006b88 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006bae:	2801      	cmp	r0, #1
 8006bb0:	d1f5      	bne.n	8006b9e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	9100      	str	r1, [sp, #0]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	f000 fcd5 	bl	8007566 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006bbc:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d0d2      	beq.n	8006b68 <osSemaphoreNew+0x20>
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	d0df      	beq.n	8006b86 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f000 fd80 	bl	80076d0 <xQueueGenericSend>
 8006bd0:	2801      	cmp	r0, #1
 8006bd2:	d0d8      	beq.n	8006b86 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f001 f8cd 	bl	8007d74 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006bda:	e7c5      	b.n	8006b68 <osSemaphoreNew+0x20>

08006bdc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006bdc:	b513      	push	{r0, r1, r4, lr}
 8006bde:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006be0:	b328      	cbz	r0, 8006c2e <osSemaphoreAcquire+0x52>
 8006be2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006be6:	b1cb      	cbz	r3, 8006c1c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006be8:	bb09      	cbnz	r1, 8006c2e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bea:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006bec:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bee:	f001 f82a 	bl	8007c46 <xQueueReceiveFromISR>
 8006bf2:	2801      	cmp	r0, #1
 8006bf4:	d003      	beq.n	8006bfe <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8006bf6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	b90b      	cbnz	r3, 8006c06 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7f9      	b.n	8006bfa <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8006c06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	e7f2      	b.n	8006c02 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c1c:	f000 ff56 	bl	8007acc <xQueueSemaphoreTake>
 8006c20:	2801      	cmp	r0, #1
 8006c22:	d0ee      	beq.n	8006c02 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d0e6      	beq.n	8006bf6 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8006c28:	f06f 0001 	mvn.w	r0, #1
 8006c2c:	e7e5      	b.n	8006bfa <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8006c2e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c32:	e7e2      	b.n	8006bfa <osSemaphoreAcquire+0x1e>

08006c34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c34:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006c36:	b318      	cbz	r0, 8006c80 <osSemaphoreRelease+0x4c>
 8006c38:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006c3c:	b1cb      	cbz	r3, 8006c72 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8006c3e:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c40:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006c42:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c44:	f000 fe53 	bl	80078ee <xQueueGiveFromISR>
 8006c48:	2801      	cmp	r0, #1
 8006c4a:	d004      	beq.n	8006c56 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006c4c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006c50:	b003      	add	sp, #12
 8006c52:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	b14b      	cbz	r3, 8006c6e <osSemaphoreRelease+0x3a>
 8006c5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e7ee      	b.n	8006c50 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c72:	461a      	mov	r2, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	f000 fd2b 	bl	80076d0 <xQueueGenericSend>
 8006c7a:	2801      	cmp	r0, #1
 8006c7c:	d0f7      	beq.n	8006c6e <osSemaphoreRelease+0x3a>
 8006c7e:	e7e5      	b.n	8006c4c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8006c80:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c84:	e7e4      	b.n	8006c50 <osSemaphoreRelease+0x1c>

08006c86 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8006c86:	b130      	cbz	r0, 8006c96 <osSemaphoreGetCount+0x10>
 8006c88:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8006c8c:	b10b      	cbz	r3, 8006c92 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006c8e:	f001 b83a 	b.w	8007d06 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8006c92:	f001 b825 	b.w	8007ce0 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8006c96:	4770      	bx	lr

08006c98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ca4:	b11f      	cbz	r7, 8006cae <osMessageQueueNew+0x16>
  hQueue = NULL;
 8006ca6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006ca8:	4628      	mov	r0, r5
 8006caa:	b003      	add	sp, #12
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0f9      	beq.n	8006ca6 <osMessageQueueNew+0xe>
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	d0f7      	beq.n	8006ca6 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8006cb6:	b1da      	cbz	r2, 8006cf0 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cb8:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006cbc:	b183      	cbz	r3, 8006ce0 <osMessageQueueNew+0x48>
 8006cbe:	2a4f      	cmp	r2, #79	@ 0x4f
 8006cc0:	d9f1      	bls.n	8006ca6 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cc2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cc8:	6966      	ldr	r6, [r4, #20]
 8006cca:	434d      	muls	r5, r1
 8006ccc:	42ae      	cmp	r6, r5
 8006cce:	d3ea      	bcc.n	8006ca6 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cd0:	9700      	str	r7, [sp, #0]
 8006cd2:	f000 fc48 	bl	8007566 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0e4      	beq.n	8006ca6 <osMessageQueueNew+0xe>
        name = attr->name;
 8006cdc:	6824      	ldr	r4, [r4, #0]
 8006cde:	e011      	b.n	8006d04 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d1e0      	bne.n	8006ca6 <osMessageQueueNew+0xe>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1dd      	bne.n	8006ca6 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cea:	6963      	ldr	r3, [r4, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1da      	bne.n	8006ca6 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	f000 fc84 	bl	8007602 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d0d2      	beq.n	8006ca6 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	d1eb      	bne.n	8006cdc <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f001 f80a 	bl	8007d20 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006d0c:	e7cc      	b.n	8006ca8 <osMessageQueueNew+0x10>

08006d0e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d10:	461c      	mov	r4, r3
 8006d12:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d16:	b1de      	cbz	r6, 8006d50 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d18:	b338      	cbz	r0, 8006d6a <osMessageQueuePut+0x5c>
 8006d1a:	b331      	cbz	r1, 8006d6a <osMessageQueuePut+0x5c>
 8006d1c:	bb2b      	cbnz	r3, 8006d6a <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d1e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006d20:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d22:	f000 fd87 	bl	8007834 <xQueueGenericSendFromISR>
 8006d26:	2801      	cmp	r0, #1
 8006d28:	d003      	beq.n	8006d32 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8006d2a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8006d32:	9b01      	ldr	r3, [sp, #4]
 8006d34:	b90b      	cbnz	r3, 8006d3a <osMessageQueuePut+0x2c>
  stat = osOK;
 8006d36:	2000      	movs	r0, #0
 8006d38:	e7f9      	b.n	8006d2e <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8006d3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	e7f2      	b.n	8006d36 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d50:	b158      	cbz	r0, 8006d6a <osMessageQueuePut+0x5c>
 8006d52:	b151      	cbz	r1, 8006d6a <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d54:	4633      	mov	r3, r6
 8006d56:	4622      	mov	r2, r4
 8006d58:	f000 fcba 	bl	80076d0 <xQueueGenericSend>
 8006d5c:	2801      	cmp	r0, #1
 8006d5e:	d0ea      	beq.n	8006d36 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8006d60:	2c00      	cmp	r4, #0
 8006d62:	d0e2      	beq.n	8006d2a <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8006d64:	f06f 0001 	mvn.w	r0, #1
 8006d68:	e7e1      	b.n	8006d2e <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8006d6a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d6e:	e7de      	b.n	8006d2e <osMessageQueuePut+0x20>

08006d70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	461c      	mov	r4, r3
 8006d74:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d78:	b1db      	cbz	r3, 8006db2 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d7a:	b330      	cbz	r0, 8006dca <osMessageQueueGet+0x5a>
 8006d7c:	b329      	cbz	r1, 8006dca <osMessageQueueGet+0x5a>
 8006d7e:	bb24      	cbnz	r4, 8006dca <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d80:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006d82:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d84:	f000 ff5f 	bl	8007c46 <xQueueReceiveFromISR>
 8006d88:	2801      	cmp	r0, #1
 8006d8a:	d003      	beq.n	8006d94 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8006d8c:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006d90:	b003      	add	sp, #12
 8006d92:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	b90b      	cbnz	r3, 8006d9c <osMessageQueueGet+0x2c>
  stat = osOK;
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e7f9      	b.n	8006d90 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8006d9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	e7f2      	b.n	8006d98 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006db2:	b150      	cbz	r0, 8006dca <osMessageQueueGet+0x5a>
 8006db4:	b149      	cbz	r1, 8006dca <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006db6:	4622      	mov	r2, r4
 8006db8:	f000 fdea 	bl	8007990 <xQueueReceive>
 8006dbc:	2801      	cmp	r0, #1
 8006dbe:	d0eb      	beq.n	8006d98 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006dc0:	2c00      	cmp	r4, #0
 8006dc2:	d0e3      	beq.n	8006d8c <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8006dc4:	f06f 0001 	mvn.w	r0, #1
 8006dc8:	e7e2      	b.n	8006d90 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8006dca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006dce:	e7df      	b.n	8006d90 <osMessageQueueGet+0x20>

08006dd0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006dd0:	f7ff bf59 	b.w	8006c86 <osSemaphoreGetCount>

08006dd4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006dd4:	4b03      	ldr	r3, [pc, #12]	@ (8006de4 <vApplicationGetIdleTaskMemory+0x10>)
 8006dd6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006dd8:	4b03      	ldr	r3, [pc, #12]	@ (8006de8 <vApplicationGetIdleTaskMemory+0x14>)
 8006dda:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ddc:	2380      	movs	r3, #128	@ 0x80
 8006dde:	6013      	str	r3, [r2, #0]
}
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20001ee0 	.word	0x20001ee0
 8006de8:	20001ce0 	.word	0x20001ce0

08006dec <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006dec:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <vApplicationGetTimerTaskMemory+0x10>)
 8006dee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006df0:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <vApplicationGetTimerTaskMemory+0x14>)
 8006df2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006df4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006df8:	6013      	str	r3, [r2, #0]
}
 8006dfa:	4770      	bx	lr
 8006dfc:	20001c80 	.word	0x20001c80
 8006e00:	20001880 	.word	0x20001880

08006e04 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e04:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <prvInsertBlockIntoFreeList+0x44>)
 8006e08:	461a      	mov	r2, r3
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4283      	cmp	r3, r0
 8006e0e:	d3fb      	bcc.n	8006e08 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e10:	6854      	ldr	r4, [r2, #4]
 8006e12:	1911      	adds	r1, r2, r4
 8006e14:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e16:	bf01      	itttt	eq
 8006e18:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8006e1a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e1c:	1909      	addeq	r1, r1, r4
 8006e1e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e20:	6844      	ldr	r4, [r0, #4]
 8006e22:	1901      	adds	r1, r0, r4
 8006e24:	428b      	cmp	r3, r1
 8006e26:	d10c      	bne.n	8006e42 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e28:	4908      	ldr	r1, [pc, #32]	@ (8006e4c <prvInsertBlockIntoFreeList+0x48>)
 8006e2a:	6809      	ldr	r1, [r1, #0]
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	d003      	beq.n	8006e38 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	4421      	add	r1, r4
 8006e34:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e36:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e38:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e3a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e3c:	bf18      	it	ne
 8006e3e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	4619      	mov	r1, r3
 8006e44:	e7f8      	b.n	8006e38 <prvInsertBlockIntoFreeList+0x34>
 8006e46:	bf00      	nop
 8006e48:	20001f5c 	.word	0x20001f5c
 8006e4c:	20001f58 	.word	0x20001f58

08006e50 <pvPortMalloc>:
{
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e56:	f001 f9d5 	bl	8008204 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e5a:	4942      	ldr	r1, [pc, #264]	@ (8006f64 <pvPortMalloc+0x114>)
 8006e5c:	4d42      	ldr	r5, [pc, #264]	@ (8006f68 <pvPortMalloc+0x118>)
 8006e5e:	680b      	ldr	r3, [r1, #0]
 8006e60:	bb0b      	cbnz	r3, 8006ea6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006e62:	4a42      	ldr	r2, [pc, #264]	@ (8006f6c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e64:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e66:	bf1f      	itttt	ne
 8006e68:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e6a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e6e:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8006e72:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e74:	bf0c      	ite	eq
 8006e76:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e7a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e7c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e7e:	4e3c      	ldr	r6, [pc, #240]	@ (8006f70 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006e80:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e82:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006e86:	2000      	movs	r0, #0
 8006e88:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e8a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006e8c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e90:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e92:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006e96:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e98:	4b36      	ldr	r3, [pc, #216]	@ (8006f74 <pvPortMalloc+0x124>)
 8006e9a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	4b36      	ldr	r3, [pc, #216]	@ (8006f78 <pvPortMalloc+0x128>)
 8006e9e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ea0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ea4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ea6:	682e      	ldr	r6, [r5, #0]
 8006ea8:	4226      	tst	r6, r4
 8006eaa:	d155      	bne.n	8006f58 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d046      	beq.n	8006f3e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006eb0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eb4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eb6:	bf1c      	itt	ne
 8006eb8:	f023 0307 	bicne.w	r3, r3, #7
 8006ebc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04a      	beq.n	8006f58 <pvPortMalloc+0x108>
 8006ec2:	4f2d      	ldr	r7, [pc, #180]	@ (8006f78 <pvPortMalloc+0x128>)
 8006ec4:	683c      	ldr	r4, [r7, #0]
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d346      	bcc.n	8006f58 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8006eca:	4a29      	ldr	r2, [pc, #164]	@ (8006f70 <pvPortMalloc+0x120>)
 8006ecc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ece:	6868      	ldr	r0, [r5, #4]
 8006ed0:	4298      	cmp	r0, r3
 8006ed2:	d204      	bcs.n	8006ede <pvPortMalloc+0x8e>
 8006ed4:	f8d5 c000 	ldr.w	ip, [r5]
 8006ed8:	f1bc 0f00 	cmp.w	ip, #0
 8006edc:	d115      	bne.n	8006f0a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006ede:	6809      	ldr	r1, [r1, #0]
 8006ee0:	42a9      	cmp	r1, r5
 8006ee2:	d039      	beq.n	8006f58 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ee4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ee6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eec:	1ac2      	subs	r2, r0, r3
 8006eee:	2a10      	cmp	r2, #16
 8006ef0:	d912      	bls.n	8006f18 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ef2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef4:	0741      	lsls	r1, r0, #29
 8006ef6:	d00b      	beq.n	8006f10 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	e7fe      	b.n	8006f08 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8006f0a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f0c:	4665      	mov	r5, ip
 8006f0e:	e7de      	b.n	8006ece <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f10:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f12:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f14:	f7ff ff76 	bl	8006e04 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f18:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f1a:	4916      	ldr	r1, [pc, #88]	@ (8006f74 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f1c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f1e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8006f20:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f22:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f24:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8006f2a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f2e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8006f30:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f34:	bf38      	it	cc
 8006f36:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8006f38:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f3a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8006f3e:	f001 fa05 	bl	800834c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f42:	0763      	lsls	r3, r4, #29
 8006f44:	d00a      	beq.n	8006f5c <pvPortMalloc+0x10c>
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	e7fe      	b.n	8006f56 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006f58:	2400      	movs	r4, #0
 8006f5a:	e7f0      	b.n	8006f3e <pvPortMalloc+0xee>
}
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f62:	bf00      	nop
 8006f64:	20001f58 	.word	0x20001f58
 8006f68:	20001f44 	.word	0x20001f44
 8006f6c:	20001f64 	.word	0x20001f64
 8006f70:	20001f5c 	.word	0x20001f5c
 8006f74:	20001f50 	.word	0x20001f50
 8006f78:	20001f54 	.word	0x20001f54
 8006f7c:	20001f4c 	.word	0x20001f4c

08006f80 <vPortFree>:
{
 8006f80:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006f82:	4604      	mov	r4, r0
 8006f84:	b390      	cbz	r0, 8006fec <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f86:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff0 <vPortFree+0x70>)
 8006f88:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	4213      	tst	r3, r2
 8006f90:	d108      	bne.n	8006fa4 <vPortFree+0x24>
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	e7fe      	b.n	8006fa2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fa4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006fa8:	b141      	cbz	r1, 8006fbc <vPortFree+0x3c>
 8006faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	e7fe      	b.n	8006fba <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fbc:	ea23 0302 	bic.w	r3, r3, r2
 8006fc0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006fc4:	f001 f91e 	bl	8008204 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <vPortFree+0x74>)
 8006fca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006fce:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fd0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fd4:	440b      	add	r3, r1
 8006fd6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fd8:	f7ff ff14 	bl	8006e04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fdc:	4a06      	ldr	r2, [pc, #24]	@ (8006ff8 <vPortFree+0x78>)
 8006fde:	6813      	ldr	r3, [r2, #0]
}
 8006fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006fe8:	f001 b9b0 	b.w	800834c <xTaskResumeAll>
}
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	20001f44 	.word	0x20001f44
 8006ff4:	20001f54 	.word	0x20001f54
 8006ff8:	20001f48 	.word	0x20001f48

08006ffc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ffc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007000:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007004:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007008:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800700a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007010:	4770      	bx	lr

08007012 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007016:	4770      	bx	lr

08007018 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007018:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800701a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007020:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007022:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007024:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007026:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007028:	3301      	adds	r3, #1
 800702a:	6003      	str	r3, [r0, #0]
}
 800702c:	4770      	bx	lr

0800702e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800702e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007030:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007032:	1c63      	adds	r3, r4, #1
 8007034:	d10a      	bne.n	800704c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007036:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800703c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800703e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007040:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007042:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007044:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007046:	3301      	adds	r3, #1
 8007048:	6003      	str	r3, [r0, #0]
}
 800704a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800704c:	f100 0208 	add.w	r2, r0, #8
 8007050:	4613      	mov	r3, r2
 8007052:	6852      	ldr	r2, [r2, #4]
 8007054:	6815      	ldr	r5, [r2, #0]
 8007056:	42a5      	cmp	r5, r4
 8007058:	d9fa      	bls.n	8007050 <vListInsert+0x22>
 800705a:	e7ed      	b.n	8007038 <vListInsert+0xa>

0800705c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800705c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007060:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007062:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007064:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800706a:	bf08      	it	eq
 800706c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800706e:	2200      	movs	r2, #0
 8007070:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	3a01      	subs	r2, #1
 8007076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007078:	6818      	ldr	r0, [r3, #0]
}
 800707a:	4770      	bx	lr

0800707c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800707c:	4808      	ldr	r0, [pc, #32]	@ (80070a0 <prvPortStartFirstTask+0x24>)
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	6800      	ldr	r0, [r0, #0]
 8007082:	f380 8808 	msr	MSP, r0
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f380 8814 	msr	CONTROL, r0
 800708e:	b662      	cpsie	i
 8007090:	b661      	cpsie	f
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	df00      	svc	0
 800709c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800709e:	0000      	.short	0x0000
 80070a0:	e000ed08 	.word	0xe000ed08

080070a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070b4 <vPortEnableVFP+0x10>
 80070a8:	6801      	ldr	r1, [r0, #0]
 80070aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070ae:	6001      	str	r1, [r0, #0]
 80070b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070b2:	0000      	.short	0x0000
 80070b4:	e000ed88 	.word	0xe000ed88

080070b8 <prvTaskExitError>:
{
 80070b8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <prvTaskExitError+0x3c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	d008      	beq.n	80070d8 <prvTaskExitError+0x20>
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	e7fe      	b.n	80070d6 <prvTaskExitError+0x1e>
 80070d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80070e8:	9b01      	ldr	r3, [sp, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0fc      	beq.n	80070e8 <prvTaskExitError+0x30>
}
 80070ee:	b002      	add	sp, #8
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000080 	.word	0x20000080

080070f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <pxPortInitialiseStack+0x28>)
 8007102:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007106:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800710a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800710e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007112:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007116:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800711a:	3844      	subs	r0, #68	@ 0x44
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	080070b9 	.word	0x080070b9
	...

08007130 <SVC_Handler>:
	__asm volatile (
 8007130:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <pxCurrentTCBConst2>)
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	6808      	ldr	r0, [r1, #0]
 8007136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713a:	f380 8809 	msr	PSP, r0
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f380 8811 	msr	BASEPRI, r0
 800714a:	4770      	bx	lr
 800714c:	f3af 8000 	nop.w

08007150 <pxCurrentTCBConst2>:
 8007150:	200124a4 	.word	0x200124a4

08007154 <vPortEnterCritical>:
 8007154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007164:	4a0a      	ldr	r2, [pc, #40]	@ (8007190 <vPortEnterCritical+0x3c>)
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800716a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800716c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800716e:	d10e      	bne.n	800718e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007170:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007174:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007178:	b2db      	uxtb	r3, r3
 800717a:	b143      	cbz	r3, 800718e <vPortEnterCritical+0x3a>
 800717c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	e7fe      	b.n	800718c <vPortEnterCritical+0x38>
}
 800718e:	4770      	bx	lr
 8007190:	20000080 	.word	0x20000080

08007194 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007194:	4a08      	ldr	r2, [pc, #32]	@ (80071b8 <vPortExitCritical+0x24>)
 8007196:	6813      	ldr	r3, [r2, #0]
 8007198:	b943      	cbnz	r3, 80071ac <vPortExitCritical+0x18>
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	e7fe      	b.n	80071aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80071ac:	3b01      	subs	r3, #1
 80071ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071b0:	b90b      	cbnz	r3, 80071b6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071b2:	f383 8811 	msr	BASEPRI, r3
}
 80071b6:	4770      	bx	lr
 80071b8:	20000080 	.word	0x20000080
 80071bc:	00000000 	.word	0x00000000

080071c0 <PendSV_Handler>:
	__asm volatile
 80071c0:	f3ef 8009 	mrs	r0, PSP
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4b15      	ldr	r3, [pc, #84]	@ (8007220 <pxCurrentTCBConst>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f01e 0f10 	tst.w	lr, #16
 80071d0:	bf08      	it	eq
 80071d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071e4:	f380 8811 	msr	BASEPRI, r0
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f001 f944 	bl	800847c <vTaskSwitchContext>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f380 8811 	msr	BASEPRI, r0
 80071fc:	bc09      	pop	{r0, r3}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007206:	f01e 0f10 	tst.w	lr, #16
 800720a:	bf08      	it	eq
 800720c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007210:	f380 8809 	msr	PSP, r0
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst>:
 8007220:	200124a4 	.word	0x200124a4

08007224 <xPortSysTickHandler>:
{
 8007224:	b508      	push	{r3, lr}
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007236:	f000 fff3 	bl	8008220 <xTaskIncrementTick>
 800723a:	b128      	cbz	r0, 8007248 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800723c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007244:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007248:	2300      	movs	r3, #0
 800724a:	f383 8811 	msr	BASEPRI, r3
}
 800724e:	bd08      	pop	{r3, pc}

08007250 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007250:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007254:	2300      	movs	r3, #0
 8007256:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007258:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <vPortSetupTimerInterrupt+0x20>)
 800725c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	fbb3 f3f1 	udiv	r3, r3, r1
 8007266:	3b01      	subs	r3, #1
 8007268:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726a:	2307      	movs	r3, #7
 800726c:	6113      	str	r3, [r2, #16]
}
 800726e:	4770      	bx	lr
 8007270:	20000074 	.word	0x20000074

08007274 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007274:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007278:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800727a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800727e:	4a38      	ldr	r2, [pc, #224]	@ (8007360 <xPortStartScheduler+0xec>)
 8007280:	4291      	cmp	r1, r2
 8007282:	d108      	bne.n	8007296 <xPortStartScheduler+0x22>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	e7fe      	b.n	8007294 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007296:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800729a:	4b32      	ldr	r3, [pc, #200]	@ (8007364 <xPortStartScheduler+0xf0>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d108      	bne.n	80072b2 <xPortStartScheduler+0x3e>
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	e7fe      	b.n	80072b0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007368 <xPortStartScheduler+0xf4>)
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072ba:	22ff      	movs	r2, #255	@ 0xff
 80072bc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072be:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c0:	4a2a      	ldr	r2, [pc, #168]	@ (800736c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072d0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072d2:	4a27      	ldr	r2, [pc, #156]	@ (8007370 <xPortStartScheduler+0xfc>)
 80072d4:	2307      	movs	r3, #7
 80072d6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80072dc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072de:	0609      	lsls	r1, r1, #24
 80072e0:	d40a      	bmi.n	80072f8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d011      	beq.n	800730a <xPortStartScheduler+0x96>
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	e7fe      	b.n	80072f6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80072f8:	3b01      	subs	r3, #1
 80072fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f88d 3003 	strb.w	r3, [sp, #3]
 8007308:	e7e6      	b.n	80072d8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800730a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800730e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	4a15      	ldr	r2, [pc, #84]	@ (8007368 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007314:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007318:	b2db      	uxtb	r3, r3
 800731a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800731c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007324:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007328:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800732c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007330:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007334:	f7ff ff8c 	bl	8007250 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007338:	4b0e      	ldr	r3, [pc, #56]	@ (8007374 <xPortStartScheduler+0x100>)
 800733a:	2500      	movs	r5, #0
 800733c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800733e:	f7ff feb1 	bl	80070a4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007342:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007346:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800734a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800734e:	f7ff fe95 	bl	800707c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007352:	f001 f893 	bl	800847c <vTaskSwitchContext>
	prvTaskExitError();
 8007356:	f7ff feaf 	bl	80070b8 <prvTaskExitError>
}
 800735a:	4628      	mov	r0, r5
 800735c:	b003      	add	sp, #12
 800735e:	bd30      	pop	{r4, r5, pc}
 8007360:	410fc271 	.word	0x410fc271
 8007364:	410fc270 	.word	0x410fc270
 8007368:	e000e400 	.word	0xe000e400
 800736c:	20011f68 	.word	0x20011f68
 8007370:	20011f64 	.word	0x20011f64
 8007374:	20000080 	.word	0x20000080

08007378 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007378:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800737c:	2b0f      	cmp	r3, #15
 800737e:	d90e      	bls.n	800739e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007380:	4a11      	ldr	r2, [pc, #68]	@ (80073c8 <vPortValidateInterruptPriority+0x50>)
 8007382:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007384:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <vPortValidateInterruptPriority+0x54>)
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d908      	bls.n	800739e <vPortValidateInterruptPriority+0x26>
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	e7fe      	b.n	800739c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800739e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073a2:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <vPortValidateInterruptPriority+0x58>)
 80073a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d908      	bls.n	80073c4 <vPortValidateInterruptPriority+0x4c>
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	e7fe      	b.n	80073c2 <vPortValidateInterruptPriority+0x4a>
	}
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	e000e3f0 	.word	0xe000e3f0
 80073cc:	20011f68 	.word	0x20011f68
 80073d0:	20011f64 	.word	0x20011f64

080073d4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073d4:	b510      	push	{r4, lr}
 80073d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d8:	f7ff febc 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073dc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f7ff fed9 	bl	8007194 <vPortExitCritical>

	return xReturn;
}
 80073e2:	fab4 f084 	clz	r0, r4
 80073e6:	0940      	lsrs	r0, r0, #5
 80073e8:	bd10      	pop	{r4, pc}

080073ea <prvCopyDataToQueue>:
{
 80073ea:	b570      	push	{r4, r5, r6, lr}
 80073ec:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80073f2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073f4:	b942      	cbnz	r2, 8007408 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f6:	6806      	ldr	r6, [r0, #0]
 80073f8:	b99e      	cbnz	r6, 8007422 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073fa:	6880      	ldr	r0, [r0, #8]
 80073fc:	f001 f98c 	bl	8008718 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007400:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007402:	3501      	adds	r5, #1
 8007404:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007406:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007408:	b96e      	cbnz	r6, 8007426 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800740a:	6840      	ldr	r0, [r0, #4]
 800740c:	f00c fca7 	bl	8013d5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007410:	6863      	ldr	r3, [r4, #4]
 8007412:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007414:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007416:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007418:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800741c:	bf24      	itt	cs
 800741e:	6823      	ldrcs	r3, [r4, #0]
 8007420:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007422:	2000      	movs	r0, #0
 8007424:	e7ed      	b.n	8007402 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007426:	68c0      	ldr	r0, [r0, #12]
 8007428:	f00c fc99 	bl	8013d5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800742c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	4251      	negs	r1, r2
 8007432:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007434:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007436:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007438:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800743a:	bf3e      	ittt	cc
 800743c:	68a3      	ldrcc	r3, [r4, #8]
 800743e:	185b      	addcc	r3, r3, r1
 8007440:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007442:	2e02      	cmp	r6, #2
 8007444:	d1ed      	bne.n	8007422 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007446:	b10d      	cbz	r5, 800744c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007448:	3d01      	subs	r5, #1
 800744a:	e7ea      	b.n	8007422 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800744c:	4628      	mov	r0, r5
 800744e:	e7d8      	b.n	8007402 <prvCopyDataToQueue+0x18>

08007450 <prvCopyDataFromQueue>:
{
 8007450:	4603      	mov	r3, r0
 8007452:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007456:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007458:	b16a      	cbz	r2, 8007476 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800745c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007462:	bf28      	it	cs
 8007464:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007466:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007468:	bf28      	it	cs
 800746a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800746c:	68d9      	ldr	r1, [r3, #12]
}
 800746e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007472:	f00c bc74 	b.w	8013d5e <memcpy>
}
 8007476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800747a:	4770      	bx	lr

0800747c <prvUnlockQueue>:
{
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007480:	f7ff fe68 	bl	8007154 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007484:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007488:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800748c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800748e:	2d00      	cmp	r5, #0
 8007490:	dd01      	ble.n	8007496 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007492:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007494:	b9b3      	cbnz	r3, 80074c4 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8007496:	23ff      	movs	r3, #255	@ 0xff
 8007498:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800749c:	f7ff fe7a 	bl	8007194 <vPortExitCritical>
	taskENTER_CRITICAL();
 80074a0:	f7ff fe58 	bl	8007154 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80074a4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a8:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80074ac:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	dd01      	ble.n	80074b6 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b2:	6923      	ldr	r3, [r4, #16]
 80074b4:	b97b      	cbnz	r3, 80074d6 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 80074b6:	23ff      	movs	r3, #255	@ 0xff
 80074b8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80074bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80074c0:	f7ff be68 	b.w	8007194 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c4:	4630      	mov	r0, r6
 80074c6:	f001 f84b 	bl	8008560 <xTaskRemoveFromEventList>
 80074ca:	b108      	cbz	r0, 80074d0 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 80074cc:	f001 f8d0 	bl	8008670 <vTaskMissedYield>
			--cTxLock;
 80074d0:	3d01      	subs	r5, #1
 80074d2:	b26d      	sxtb	r5, r5
 80074d4:	e7db      	b.n	800748e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d6:	4630      	mov	r0, r6
 80074d8:	f001 f842 	bl	8008560 <xTaskRemoveFromEventList>
 80074dc:	b108      	cbz	r0, 80074e2 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80074de:	f001 f8c7 	bl	8008670 <vTaskMissedYield>
				--cRxLock;
 80074e2:	3d01      	subs	r5, #1
 80074e4:	b26d      	sxtb	r5, r5
 80074e6:	e7e2      	b.n	80074ae <prvUnlockQueue+0x32>

080074e8 <xQueueGenericReset>:
{
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80074ec:	4604      	mov	r4, r0
 80074ee:	b940      	cbnz	r0, 8007502 <xQueueGenericReset+0x1a>
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	e7fe      	b.n	8007500 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007502:	f7ff fe27 	bl	8007154 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007506:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800750a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800750c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800750e:	434b      	muls	r3, r1
 8007510:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007512:	1a5b      	subs	r3, r3, r1
 8007514:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007516:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007518:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800751a:	2000      	movs	r0, #0
 800751c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800751e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007520:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007524:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007528:	b9a5      	cbnz	r5, 8007554 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	b173      	cbz	r3, 800754c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800752e:	f104 0010 	add.w	r0, r4, #16
 8007532:	f001 f815 	bl	8008560 <xTaskRemoveFromEventList>
 8007536:	b148      	cbz	r0, 800754c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007538:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800753c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007540:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800754c:	f7ff fe22 	bl	8007194 <vPortExitCritical>
}
 8007550:	2001      	movs	r0, #1
 8007552:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007554:	f104 0010 	add.w	r0, r4, #16
 8007558:	f7ff fd50 	bl	8006ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800755c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007560:	f7ff fd4c 	bl	8006ffc <vListInitialise>
 8007564:	e7f2      	b.n	800754c <xQueueGenericReset+0x64>

08007566 <xQueueGenericCreateStatic>:
	{
 8007566:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007568:	460d      	mov	r5, r1
 800756a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800756c:	b940      	cbnz	r0, 8007580 <xQueueGenericCreateStatic+0x1a>
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	e7fe      	b.n	800757e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007580:	b943      	cbnz	r3, 8007594 <xQueueGenericCreateStatic+0x2e>
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	e7fe      	b.n	8007592 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007594:	b14a      	cbz	r2, 80075aa <xQueueGenericCreateStatic+0x44>
 8007596:	b991      	cbnz	r1, 80075be <xQueueGenericCreateStatic+0x58>
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	e7fe      	b.n	80075a8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075aa:	b141      	cbz	r1, 80075be <xQueueGenericCreateStatic+0x58>
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	e7fe      	b.n	80075bc <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075be:	2350      	movs	r3, #80	@ 0x50
 80075c0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075c2:	9b01      	ldr	r3, [sp, #4]
 80075c4:	2b50      	cmp	r3, #80	@ 0x50
 80075c6:	d008      	beq.n	80075da <xQueueGenericCreateStatic+0x74>
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075da:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075dc:	2d00      	cmp	r5, #0
 80075de:	bf08      	it	eq
 80075e0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80075e2:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075e6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 80075ea:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075ec:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075ee:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075f0:	f7ff ff7a 	bl	80074e8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80075f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80075f8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80075fc:	4620      	mov	r0, r4
 80075fe:	b003      	add	sp, #12
 8007600:	bd30      	pop	{r4, r5, pc}

08007602 <xQueueGenericCreate>:
	{
 8007602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007608:	4606      	mov	r6, r0
 800760a:	b940      	cbnz	r0, 800761e <xQueueGenericCreate+0x1c>
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	e7fe      	b.n	800761c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007620:	3050      	adds	r0, #80	@ 0x50
 8007622:	f7ff fc15 	bl	8006e50 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007626:	4604      	mov	r4, r0
 8007628:	b170      	cbz	r0, 8007648 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007630:	b165      	cbz	r5, 800764c <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007632:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8007636:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800763a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800763c:	2101      	movs	r1, #1
 800763e:	4620      	mov	r0, r4
 8007640:	f7ff ff52 	bl	80074e8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007644:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8007648:	4620      	mov	r0, r4
 800764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800764c:	4603      	mov	r3, r0
 800764e:	e7f2      	b.n	8007636 <xQueueGenericCreate+0x34>

08007650 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007650:	b513      	push	{r0, r1, r4, lr}
 8007652:	4613      	mov	r3, r2
 8007654:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007656:	b940      	cbnz	r0, 800766a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	e7fe      	b.n	8007668 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800766a:	4288      	cmp	r0, r1
 800766c:	d208      	bcs.n	8007680 <xQueueCreateCountingSemaphoreStatic+0x30>
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	e7fe      	b.n	800767e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007680:	2202      	movs	r2, #2
 8007682:	9200      	str	r2, [sp, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	4611      	mov	r1, r2
 8007688:	f7ff ff6d 	bl	8007566 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800768c:	b100      	cbz	r0, 8007690 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800768e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007690:	b002      	add	sp, #8
 8007692:	bd10      	pop	{r4, pc}

08007694 <xQueueCreateCountingSemaphore>:
	{
 8007694:	b510      	push	{r4, lr}
 8007696:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007698:	b940      	cbnz	r0, 80076ac <xQueueCreateCountingSemaphore+0x18>
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	e7fe      	b.n	80076aa <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076ac:	4288      	cmp	r0, r1
 80076ae:	d208      	bcs.n	80076c2 <xQueueCreateCountingSemaphore+0x2e>
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	e7fe      	b.n	80076c0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076c2:	2202      	movs	r2, #2
 80076c4:	2100      	movs	r1, #0
 80076c6:	f7ff ff9c 	bl	8007602 <xQueueGenericCreate>
		if( xHandle != NULL )
 80076ca:	b100      	cbz	r0, 80076ce <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076cc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80076ce:	bd10      	pop	{r4, pc}

080076d0 <xQueueGenericSend>:
{
 80076d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80076d4:	460f      	mov	r7, r1
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80076da:	4604      	mov	r4, r0
 80076dc:	b940      	cbnz	r0, 80076f0 <xQueueGenericSend+0x20>
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	e7fe      	b.n	80076ee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076f0:	b951      	cbnz	r1, 8007708 <xQueueGenericSend+0x38>
 80076f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80076f4:	b143      	cbz	r3, 8007708 <xQueueGenericSend+0x38>
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	e7fe      	b.n	8007706 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007708:	2e02      	cmp	r6, #2
 800770a:	d10b      	bne.n	8007724 <xQueueGenericSend+0x54>
 800770c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d008      	beq.n	8007724 <xQueueGenericSend+0x54>
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	e7fe      	b.n	8007722 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007724:	f000 ffaa 	bl	800867c <xTaskGetSchedulerState>
 8007728:	4605      	mov	r5, r0
 800772a:	b320      	cbz	r0, 8007776 <xQueueGenericSend+0xa6>
 800772c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800772e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007732:	f7ff fd0f 	bl	8007154 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007736:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007738:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800773a:	429a      	cmp	r2, r3
 800773c:	d227      	bcs.n	800778e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800773e:	4632      	mov	r2, r6
 8007740:	4639      	mov	r1, r7
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff fe51 	bl	80073ea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007748:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800774a:	b11b      	cbz	r3, 8007754 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800774c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007750:	f000 ff06 	bl	8008560 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007754:	b148      	cbz	r0, 800776a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007756:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800775a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800776a:	f7ff fd13 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 800776e:	2001      	movs	r0, #1
}
 8007770:	b004      	add	sp, #16
 8007772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0d8      	beq.n	800772e <xQueueGenericSend+0x5e>
 800777c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	e7fe      	b.n	800778c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800778e:	2e02      	cmp	r6, #2
 8007790:	d0d5      	beq.n	800773e <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	b91b      	cbnz	r3, 800779e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007796:	f7ff fcfd 	bl	8007194 <vPortExitCritical>
					return errQUEUE_FULL;
 800779a:	2000      	movs	r0, #0
 800779c:	e7e8      	b.n	8007770 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800779e:	b915      	cbnz	r5, 80077a6 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a0:	a802      	add	r0, sp, #8
 80077a2:	f000 ff1d 	bl	80085e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80077a6:	f7ff fcf5 	bl	8007194 <vPortExitCritical>
		vTaskSuspendAll();
 80077aa:	f000 fd2b 	bl	8008204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ae:	f7ff fcd1 	bl	8007154 <vPortEnterCritical>
 80077b2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80077b6:	2bff      	cmp	r3, #255	@ 0xff
 80077b8:	bf08      	it	eq
 80077ba:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80077be:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80077c2:	2bff      	cmp	r3, #255	@ 0xff
 80077c4:	bf08      	it	eq
 80077c6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80077ca:	f7ff fce3 	bl	8007194 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ce:	a901      	add	r1, sp, #4
 80077d0:	a802      	add	r0, sp, #8
 80077d2:	f000 ff11 	bl	80085f8 <xTaskCheckForTimeOut>
 80077d6:	bb38      	cbnz	r0, 8007828 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d8:	f7ff fcbc 	bl	8007154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80077de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d10e      	bne.n	8007802 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077e4:	f7ff fcd6 	bl	8007194 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077e8:	9901      	ldr	r1, [sp, #4]
 80077ea:	f104 0010 	add.w	r0, r4, #16
 80077ee:	f000 fe7f 	bl	80084f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff fe42 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f8:	f000 fda8 	bl	800834c <xTaskResumeAll>
 80077fc:	b148      	cbz	r0, 8007812 <xQueueGenericSend+0x142>
 80077fe:	2501      	movs	r5, #1
 8007800:	e797      	b.n	8007732 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007802:	f7ff fcc7 	bl	8007194 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007806:	4620      	mov	r0, r4
 8007808:	f7ff fe38 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800780c:	f000 fd9e 	bl	800834c <xTaskResumeAll>
 8007810:	e7f5      	b.n	80077fe <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007812:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800781a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	e7ea      	b.n	80077fe <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff fe27 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800782e:	f000 fd8d 	bl	800834c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007832:	e7b2      	b.n	800779a <xQueueGenericSend+0xca>

08007834 <xQueueGenericSendFromISR>:
{
 8007834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4689      	mov	r9, r1
 800783a:	4617      	mov	r7, r2
 800783c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800783e:	4604      	mov	r4, r0
 8007840:	b940      	cbnz	r0, 8007854 <xQueueGenericSendFromISR+0x20>
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	e7fe      	b.n	8007852 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007854:	b951      	cbnz	r1, 800786c <xQueueGenericSendFromISR+0x38>
 8007856:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007858:	b143      	cbz	r3, 800786c <xQueueGenericSendFromISR+0x38>
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	e7fe      	b.n	800786a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800786c:	2e02      	cmp	r6, #2
 800786e:	d10b      	bne.n	8007888 <xQueueGenericSendFromISR+0x54>
 8007870:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d008      	beq.n	8007888 <xQueueGenericSendFromISR+0x54>
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	e7fe      	b.n	8007886 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007888:	f7ff fd76 	bl	8007378 <vPortValidateInterruptPriority>
	__asm volatile
 800788c:	f3ef 8811 	mrs	r8, BASEPRI
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80078a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d301      	bcc.n	80078ac <xQueueGenericSendFromISR+0x78>
 80078a8:	2e02      	cmp	r6, #2
 80078aa:	d11e      	bne.n	80078ea <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 80078ac:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80078b2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078b4:	4632      	mov	r2, r6
 80078b6:	4649      	mov	r1, r9
 80078b8:	4620      	mov	r0, r4
 80078ba:	f7ff fd96 	bl	80073ea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80078be:	1c6b      	adds	r3, r5, #1
 80078c0:	d10e      	bne.n	80078e0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078c4:	b13b      	cbz	r3, 80078d6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078c6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078ca:	f000 fe49 	bl	8008560 <xTaskRemoveFromEventList>
 80078ce:	b110      	cbz	r0, 80078d6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 80078d0:	b10f      	cbz	r7, 80078d6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80078d6:	2001      	movs	r0, #1
	__asm volatile
 80078d8:	f388 8811 	msr	BASEPRI, r8
}
 80078dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078e0:	3501      	adds	r5, #1
 80078e2:	b26d      	sxtb	r5, r5
 80078e4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80078e8:	e7f5      	b.n	80078d6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 80078ea:	2000      	movs	r0, #0
 80078ec:	e7f4      	b.n	80078d8 <xQueueGenericSendFromISR+0xa4>

080078ee <xQueueGiveFromISR>:
{
 80078ee:	b570      	push	{r4, r5, r6, lr}
 80078f0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80078f2:	4604      	mov	r4, r0
 80078f4:	b940      	cbnz	r0, 8007908 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	e7fe      	b.n	8007906 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007908:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800790a:	b143      	cbz	r3, 800791e <xQueueGiveFromISR+0x30>
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	e7fe      	b.n	800791c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	b953      	cbnz	r3, 8007938 <xQueueGiveFromISR+0x4a>
 8007922:	6883      	ldr	r3, [r0, #8]
 8007924:	b143      	cbz	r3, 8007938 <xQueueGiveFromISR+0x4a>
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	e7fe      	b.n	8007936 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007938:	f7ff fd1e 	bl	8007378 <vPortValidateInterruptPriority>
	__asm volatile
 800793c:	f3ef 8611 	mrs	r6, BASEPRI
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007950:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007952:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007954:	4293      	cmp	r3, r2
 8007956:	d919      	bls.n	800798c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800795c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800795e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007960:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007962:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007964:	d10d      	bne.n	8007982 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007966:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007968:	b13b      	cbz	r3, 800797a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800796a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800796e:	f000 fdf7 	bl	8008560 <xTaskRemoveFromEventList>
 8007972:	b110      	cbz	r0, 800797a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007974:	b10d      	cbz	r5, 800797a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800797a:	2001      	movs	r0, #1
	__asm volatile
 800797c:	f386 8811 	msr	BASEPRI, r6
}
 8007980:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007982:	3301      	adds	r3, #1
 8007984:	b25b      	sxtb	r3, r3
 8007986:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800798a:	e7f6      	b.n	800797a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800798c:	2000      	movs	r0, #0
 800798e:	e7f5      	b.n	800797c <xQueueGiveFromISR+0x8e>

08007990 <xQueueReceive>:
{
 8007990:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007994:	460e      	mov	r6, r1
 8007996:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007998:	4604      	mov	r4, r0
 800799a:	b940      	cbnz	r0, 80079ae <xQueueReceive+0x1e>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	e7fe      	b.n	80079ac <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ae:	b951      	cbnz	r1, 80079c6 <xQueueReceive+0x36>
 80079b0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80079b2:	b143      	cbz	r3, 80079c6 <xQueueReceive+0x36>
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	e7fe      	b.n	80079c4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c6:	f000 fe59 	bl	800867c <xTaskGetSchedulerState>
 80079ca:	4605      	mov	r5, r0
 80079cc:	b318      	cbz	r0, 8007a16 <xQueueReceive+0x86>
 80079ce:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80079d0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80079d4:	f7ff fbbe 	bl	8007154 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079da:	b347      	cbz	r7, 8007a2e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079dc:	4631      	mov	r1, r6
 80079de:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079e0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079e2:	f7ff fd35 	bl	8007450 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079e6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	b173      	cbz	r3, 8007a0a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ec:	f104 0010 	add.w	r0, r4, #16
 80079f0:	f000 fdb6 	bl	8008560 <xTaskRemoveFromEventList>
 80079f4:	b148      	cbz	r0, 8007a0a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80079f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80079fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007a0a:	f7ff fbc3 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8007a0e:	2001      	movs	r0, #1
}
 8007a10:	b004      	add	sp, #16
 8007a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0d9      	beq.n	80079d0 <xQueueReceive+0x40>
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	e7fe      	b.n	8007a2c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	b91b      	cbnz	r3, 8007a3a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007a32:	f7ff fbaf 	bl	8007194 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007a36:	2000      	movs	r0, #0
 8007a38:	e7ea      	b.n	8007a10 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007a3a:	b915      	cbnz	r5, 8007a42 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a3c:	a802      	add	r0, sp, #8
 8007a3e:	f000 fdcf 	bl	80085e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a42:	f7ff fba7 	bl	8007194 <vPortExitCritical>
		vTaskSuspendAll();
 8007a46:	f000 fbdd 	bl	8008204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a4a:	f7ff fb83 	bl	8007154 <vPortEnterCritical>
 8007a4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007a52:	2bff      	cmp	r3, #255	@ 0xff
 8007a54:	bf08      	it	eq
 8007a56:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007a5a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007a5e:	2bff      	cmp	r3, #255	@ 0xff
 8007a60:	bf08      	it	eq
 8007a62:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007a66:	f7ff fb95 	bl	8007194 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a6a:	a901      	add	r1, sp, #4
 8007a6c:	a802      	add	r0, sp, #8
 8007a6e:	f000 fdc3 	bl	80085f8 <xTaskCheckForTimeOut>
 8007a72:	bb00      	cbnz	r0, 8007ab6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7ff fcad 	bl	80073d4 <prvIsQueueEmpty>
 8007a7a:	b1b0      	cbz	r0, 8007aaa <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a7c:	9901      	ldr	r1, [sp, #4]
 8007a7e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a82:	f000 fd35 	bl	80084f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7ff fcf8 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a8c:	f000 fc5e 	bl	800834c <xTaskResumeAll>
 8007a90:	b948      	cbnz	r0, 8007aa6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007a92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	2501      	movs	r5, #1
 8007aa8:	e794      	b.n	80079d4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff fce6 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab0:	f000 fc4c 	bl	800834c <xTaskResumeAll>
 8007ab4:	e7f7      	b.n	8007aa6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff fce0 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007abc:	f000 fc46 	bl	800834c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff fc87 	bl	80073d4 <prvIsQueueEmpty>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0ed      	beq.n	8007aa6 <xQueueReceive+0x116>
 8007aca:	e7b4      	b.n	8007a36 <xQueueReceive+0xa6>

08007acc <xQueueSemaphoreTake>:
{
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007ad0:	4604      	mov	r4, r0
{
 8007ad2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007ad4:	b940      	cbnz	r0, 8007ae8 <xQueueSemaphoreTake+0x1c>
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ae8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007aea:	b145      	cbz	r5, 8007afe <xQueueSemaphoreTake+0x32>
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	e7fe      	b.n	8007afc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afe:	f000 fdbd 	bl	800867c <xTaskGetSchedulerState>
 8007b02:	4606      	mov	r6, r0
 8007b04:	b320      	cbz	r0, 8007b50 <xQueueSemaphoreTake+0x84>
 8007b06:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007b08:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8007b0a:	f7ff fb23 	bl	8007154 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b10:	b353      	cbz	r3, 8007b68 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b12:	3b01      	subs	r3, #1
 8007b14:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	b913      	cbnz	r3, 8007b20 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b1a:	f000 fe8d 	bl	8008838 <pvTaskIncrementMutexHeldCount>
 8007b1e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	b173      	cbz	r3, 8007b42 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b24:	f104 0010 	add.w	r0, r4, #16
 8007b28:	f000 fd1a 	bl	8008560 <xTaskRemoveFromEventList>
 8007b2c:	b148      	cbz	r0, 8007b42 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8007b2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007b42:	f7ff fb27 	bl	8007194 <vPortExitCritical>
				return pdPASS;
 8007b46:	2001      	movs	r0, #1
}
 8007b48:	b005      	add	sp, #20
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4c:	4635      	mov	r5, r6
 8007b4e:	e7db      	b.n	8007b08 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0fa      	beq.n	8007b4c <xQueueSemaphoreTake+0x80>
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	e7fe      	b.n	8007b66 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	b953      	cbnz	r3, 8007b82 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	d066      	beq.n	8007c3e <xQueueSemaphoreTake+0x172>
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	e7fe      	b.n	8007b80 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007b82:	b916      	cbnz	r6, 8007b8a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b84:	a802      	add	r0, sp, #8
 8007b86:	f000 fd2b 	bl	80085e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b8a:	f7ff fb03 	bl	8007194 <vPortExitCritical>
		vTaskSuspendAll();
 8007b8e:	f000 fb39 	bl	8008204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b92:	f7ff fadf 	bl	8007154 <vPortEnterCritical>
 8007b96:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b9a:	2bff      	cmp	r3, #255	@ 0xff
 8007b9c:	bf08      	it	eq
 8007b9e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007ba2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ba6:	2bff      	cmp	r3, #255	@ 0xff
 8007ba8:	bf08      	it	eq
 8007baa:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8007bae:	f7ff faf1 	bl	8007194 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bb2:	a901      	add	r1, sp, #4
 8007bb4:	a802      	add	r0, sp, #8
 8007bb6:	f000 fd1f 	bl	80085f8 <xTaskCheckForTimeOut>
 8007bba:	bb50      	cbnz	r0, 8007c12 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f7ff fc09 	bl	80073d4 <prvIsQueueEmpty>
 8007bc2:	b300      	cbz	r0, 8007c06 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	b93b      	cbnz	r3, 8007bd8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007bc8:	f7ff fac4 	bl	8007154 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bcc:	68a0      	ldr	r0, [r4, #8]
 8007bce:	f000 fd65 	bl	800869c <xTaskPriorityInherit>
 8007bd2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007bd4:	f7ff fade 	bl	8007194 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bd8:	9901      	ldr	r1, [sp, #4]
 8007bda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007bde:	f000 fc87 	bl	80084f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fc4a 	bl	800747c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007be8:	f000 fbb0 	bl	800834c <xTaskResumeAll>
 8007bec:	b948      	cbnz	r0, 8007c02 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8007bee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	2601      	movs	r6, #1
 8007c04:	e781      	b.n	8007b0a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff fc38 	bl	800747c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c0c:	f000 fb9e 	bl	800834c <xTaskResumeAll>
 8007c10:	e7f7      	b.n	8007c02 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff fc32 	bl	800747c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c18:	f000 fb98 	bl	800834c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fbd9 	bl	80073d4 <prvIsQueueEmpty>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0ed      	beq.n	8007c02 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8007c26:	b165      	cbz	r5, 8007c42 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8007c28:	f7ff fa94 	bl	8007154 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c2c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007c2e:	b119      	cbz	r1, 8007c38 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c38:	68a0      	ldr	r0, [r4, #8]
 8007c3a:	f000 fdaf 	bl	800879c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007c3e:	f7ff faa9 	bl	8007194 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c42:	2000      	movs	r0, #0
 8007c44:	e780      	b.n	8007b48 <xQueueSemaphoreTake+0x7c>

08007c46 <xQueueReceiveFromISR>:
{
 8007c46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c4a:	4689      	mov	r9, r1
 8007c4c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007c4e:	4604      	mov	r4, r0
 8007c50:	b940      	cbnz	r0, 8007c64 <xQueueReceiveFromISR+0x1e>
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	e7fe      	b.n	8007c62 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c64:	b951      	cbnz	r1, 8007c7c <xQueueReceiveFromISR+0x36>
 8007c66:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c68:	b143      	cbz	r3, 8007c7c <xQueueReceiveFromISR+0x36>
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	e7fe      	b.n	8007c7a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c7c:	f7ff fb7c 	bl	8007378 <vPortValidateInterruptPriority>
	__asm volatile
 8007c80:	f3ef 8711 	mrs	r7, BASEPRI
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c94:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c96:	b30d      	cbz	r5, 8007cdc <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c98:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c9c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c9e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fbd5 	bl	8007450 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ca6:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007ca8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007caa:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007cac:	d111      	bne.n	8007cd2 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	b153      	cbz	r3, 8007cc8 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cb2:	f104 0010 	add.w	r0, r4, #16
 8007cb6:	f000 fc53 	bl	8008560 <xTaskRemoveFromEventList>
 8007cba:	b128      	cbz	r0, 8007cc8 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8007cbc:	f1b8 0f00 	cmp.w	r8, #0
 8007cc0:	d002      	beq.n	8007cc8 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007cc8:	2001      	movs	r0, #1
	__asm volatile
 8007cca:	f387 8811 	msr	BASEPRI, r7
}
 8007cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	b276      	sxtb	r6, r6
 8007cd6:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8007cda:	e7f5      	b.n	8007cc8 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e7f4      	b.n	8007cca <xQueueReceiveFromISR+0x84>

08007ce0 <uxQueueMessagesWaiting>:
{
 8007ce0:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	b940      	cbnz	r0, 8007cf8 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	e7fe      	b.n	8007cf6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8007cf8:	f7ff fa2c 	bl	8007154 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cfc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8007cfe:	f7ff fa49 	bl	8007194 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d02:	4620      	mov	r0, r4
 8007d04:	bd10      	pop	{r4, pc}

08007d06 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8007d06:	b940      	cbnz	r0, 8007d1a <uxQueueMessagesWaitingFromISR+0x14>
 8007d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	e7fe      	b.n	8007d18 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d1a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d1c:	4770      	bx	lr
	...

08007d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d20:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d22:	4a07      	ldr	r2, [pc, #28]	@ (8007d40 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d24:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d26:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007d2a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007d2e:	b91d      	cbnz	r5, 8007d38 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d34:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d36:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d38:	3301      	adds	r3, #1
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d1f3      	bne.n	8007d26 <vQueueAddToRegistry+0x6>
 8007d3e:	e7fa      	b.n	8007d36 <vQueueAddToRegistry+0x16>
 8007d40:	20011f6c 	.word	0x20011f6c

08007d44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d44:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d46:	4a09      	ldr	r2, [pc, #36]	@ (8007d6c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d48:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d4a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007d4e:	4281      	cmp	r1, r0
 8007d50:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007d54:	d106      	bne.n	8007d64 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d56:	4a06      	ldr	r2, [pc, #24]	@ (8007d70 <vQueueUnregisterQueue+0x2c>)
 8007d58:	2100      	movs	r1, #0
 8007d5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d5e:	4422      	add	r2, r4
 8007d60:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d62:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d64:	3301      	adds	r3, #1
 8007d66:	2b08      	cmp	r3, #8
 8007d68:	d1ef      	bne.n	8007d4a <vQueueUnregisterQueue+0x6>
 8007d6a:	e7fa      	b.n	8007d62 <vQueueUnregisterQueue+0x1e>
 8007d6c:	20011f70 	.word	0x20011f70
 8007d70:	20011f6c 	.word	0x20011f6c

08007d74 <vQueueDelete>:
{
 8007d74:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007d76:	b940      	cbnz	r0, 8007d8a <vQueueDelete+0x16>
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	e7fe      	b.n	8007d88 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8007d8a:	f7ff ffdb 	bl	8007d44 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d8e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007d92:	b91b      	cbnz	r3, 8007d9c <vQueueDelete+0x28>
}
 8007d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007d98:	f7ff b8f2 	b.w	8006f80 <vPortFree>
}
 8007d9c:	bd10      	pop	{r4, pc}

08007d9e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d9e:	b570      	push	{r4, r5, r6, lr}
 8007da0:	4604      	mov	r4, r0
 8007da2:	460d      	mov	r5, r1
 8007da4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007da6:	f7ff f9d5 	bl	8007154 <vPortEnterCritical>
 8007daa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007dae:	2bff      	cmp	r3, #255	@ 0xff
 8007db0:	bf04      	itt	eq
 8007db2:	2300      	moveq	r3, #0
 8007db4:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007db8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007dbc:	2bff      	cmp	r3, #255	@ 0xff
 8007dbe:	bf04      	itt	eq
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007dc6:	f7ff f9e5 	bl	8007194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007dcc:	b92b      	cbnz	r3, 8007dda <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dce:	4632      	mov	r2, r6
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007dd6:	f000 fba5 	bl	8008524 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dda:	4620      	mov	r0, r4
	}
 8007ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007de0:	f7ff bb4c 	b.w	800747c <prvUnlockQueue>

08007de4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dea:	f7ff f9b3 	bl	8007154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dee:	4b30      	ldr	r3, [pc, #192]	@ (8007eb0 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8007df0:	4e30      	ldr	r6, [pc, #192]	@ (8007eb4 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	4f30      	ldr	r7, [pc, #192]	@ (8007eb8 <prvAddNewTaskToReadyList+0xd4>)
 8007df6:	3201      	adds	r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007dfa:	6835      	ldr	r5, [r6, #0]
 8007dfc:	2d00      	cmp	r5, #0
 8007dfe:	d14b      	bne.n	8007e98 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e00:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d11f      	bne.n	8007e48 <prvAddNewTaskToReadyList+0x64>
 8007e08:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e0a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e0c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e0e:	f7ff f8f5 	bl	8006ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e12:	2d38      	cmp	r5, #56	@ 0x38
 8007e14:	f108 0814 	add.w	r8, r8, #20
 8007e18:	d1f7      	bne.n	8007e0a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e1a:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007ee0 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8007e1e:	4d27      	ldr	r5, [pc, #156]	@ (8007ebc <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007e20:	4640      	mov	r0, r8
 8007e22:	f7ff f8eb 	bl	8006ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7ff f8e8 	bl	8006ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e2c:	4824      	ldr	r0, [pc, #144]	@ (8007ec0 <prvAddNewTaskToReadyList+0xdc>)
 8007e2e:	f7ff f8e5 	bl	8006ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e32:	4824      	ldr	r0, [pc, #144]	@ (8007ec4 <prvAddNewTaskToReadyList+0xe0>)
 8007e34:	f7ff f8e2 	bl	8006ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e38:	4823      	ldr	r0, [pc, #140]	@ (8007ec8 <prvAddNewTaskToReadyList+0xe4>)
 8007e3a:	f7ff f8df 	bl	8006ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3e:	4b23      	ldr	r3, [pc, #140]	@ (8007ecc <prvAddNewTaskToReadyList+0xe8>)
 8007e40:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e44:	4b22      	ldr	r3, [pc, #136]	@ (8007ed0 <prvAddNewTaskToReadyList+0xec>)
 8007e46:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007e48:	4a22      	ldr	r2, [pc, #136]	@ (8007ed4 <prvAddNewTaskToReadyList+0xf0>)
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007e50:	4a21      	ldr	r2, [pc, #132]	@ (8007ed8 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e52:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007e54:	6811      	ldr	r1, [r2, #0]
 8007e56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e58:	2014      	movs	r0, #20
 8007e5a:	428b      	cmp	r3, r1
 8007e5c:	fb00 7003 	mla	r0, r0, r3, r7
 8007e60:	f104 0104 	add.w	r1, r4, #4
 8007e64:	bf88      	it	hi
 8007e66:	6013      	strhi	r3, [r2, #0]
 8007e68:	f7ff f8d6 	bl	8007018 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007e6c:	f7ff f992 	bl	8007194 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007e70:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <prvAddNewTaskToReadyList+0xf8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	b173      	cbz	r3, 8007e94 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e76:	6833      	ldr	r3, [r6, #0]
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d209      	bcs.n	8007e94 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007e80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
}
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007e98:	4b10      	ldr	r3, [pc, #64]	@ (8007edc <prvAddNewTaskToReadyList+0xf8>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d1d2      	bne.n	8007e48 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ea2:	6832      	ldr	r2, [r6, #0]
 8007ea4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ea6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007ea8:	bf98      	it	ls
 8007eaa:	6034      	strls	r4, [r6, #0]
 8007eac:	e7cc      	b.n	8007e48 <prvAddNewTaskToReadyList+0x64>
 8007eae:	bf00      	nop
 8007eb0:	20011fd0 	.word	0x20011fd0
 8007eb4:	200124a4 	.word	0x200124a4
 8007eb8:	20012044 	.word	0x20012044
 8007ebc:	2001201c 	.word	0x2001201c
 8007ec0:	20012000 	.word	0x20012000
 8007ec4:	20011fec 	.word	0x20011fec
 8007ec8:	20011fd4 	.word	0x20011fd4
 8007ecc:	20012018 	.word	0x20012018
 8007ed0:	20012014 	.word	0x20012014
 8007ed4:	20011fb4 	.word	0x20011fb4
 8007ed8:	20011fc8 	.word	0x20011fc8
 8007edc:	20011fc4 	.word	0x20011fc4
 8007ee0:	20012030 	.word	0x20012030

08007ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ee6:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee8:	4d15      	ldr	r5, [pc, #84]	@ (8007f40 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8007eea:	681c      	ldr	r4, [r3, #0]
{
 8007eec:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eee:	6828      	ldr	r0, [r5, #0]
 8007ef0:	3004      	adds	r0, #4
{
 8007ef2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef4:	f7ff f8b2 	bl	800705c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ef8:	1c73      	adds	r3, r6, #1
 8007efa:	d107      	bne.n	8007f0c <prvAddCurrentTaskToDelayedList+0x28>
 8007efc:	b137      	cbz	r7, 8007f0c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007efe:	6829      	ldr	r1, [r5, #0]
 8007f00:	4810      	ldr	r0, [pc, #64]	@ (8007f44 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f06:	3104      	adds	r1, #4
 8007f08:	f7ff b886 	b.w	8007018 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	19a4      	adds	r4, r4, r6
 8007f10:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f12:	d307      	bcc.n	8007f24 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f14:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <prvAddCurrentTaskToDelayedList+0x64>)
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	6829      	ldr	r1, [r5, #0]
}
 8007f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f1e:	3104      	adds	r1, #4
 8007f20:	f7ff b885 	b.w	800702e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f24:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <prvAddCurrentTaskToDelayedList+0x68>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	6829      	ldr	r1, [r5, #0]
 8007f2a:	3104      	adds	r1, #4
 8007f2c:	f7ff f87f 	bl	800702e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007f36:	bf88      	it	hi
 8007f38:	601c      	strhi	r4, [r3, #0]
}
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	20011fcc 	.word	0x20011fcc
 8007f40:	200124a4 	.word	0x200124a4
 8007f44:	20011fd4 	.word	0x20011fd4
 8007f48:	20012014 	.word	0x20012014
 8007f4c:	20012018 	.word	0x20012018
 8007f50:	20011fb0 	.word	0x20011fb0

08007f54 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f54:	4a06      	ldr	r2, [pc, #24]	@ (8007f70 <prvResetNextTaskUnblockTime+0x1c>)
 8007f56:	6813      	ldr	r3, [r2, #0]
 8007f58:	6819      	ldr	r1, [r3, #0]
 8007f5a:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <prvResetNextTaskUnblockTime+0x20>)
 8007f5c:	b919      	cbnz	r1, 8007f66 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f6a:	68d2      	ldr	r2, [r2, #12]
 8007f6c:	6852      	ldr	r2, [r2, #4]
 8007f6e:	e7f8      	b.n	8007f62 <prvResetNextTaskUnblockTime+0xe>
 8007f70:	20012018 	.word	0x20012018
 8007f74:	20011fb0 	.word	0x20011fb0

08007f78 <prvDeleteTCB>:
	{
 8007f78:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f7a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8007f7e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f80:	b93b      	cbnz	r3, 8007f92 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007f82:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007f84:	f7fe fffc 	bl	8006f80 <vPortFree>
				vPortFree( pxTCB );
 8007f88:	4620      	mov	r0, r4
	}
 8007f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007f8e:	f7fe bff7 	b.w	8006f80 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d0f9      	beq.n	8007f8a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d008      	beq.n	8007fac <prvDeleteTCB+0x34>
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	e7fe      	b.n	8007faa <prvDeleteTCB+0x32>
	}
 8007fac:	bd10      	pop	{r4, pc}
	...

08007fb0 <prvIdleTask>:
{
 8007fb0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb2:	4c13      	ldr	r4, [pc, #76]	@ (8008000 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb4:	4f13      	ldr	r7, [pc, #76]	@ (8008004 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007fb6:	4d14      	ldr	r5, [pc, #80]	@ (8008008 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	b973      	cbnz	r3, 8007fda <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fbc:	4b13      	ldr	r3, [pc, #76]	@ (800800c <prvIdleTask+0x5c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d9f8      	bls.n	8007fb6 <prvIdleTask+0x6>
				taskYIELD();
 8007fc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	e7ed      	b.n	8007fb6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007fda:	f7ff f8bb 	bl	8007154 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe2:	1d30      	adds	r0, r6, #4
 8007fe4:	f7ff f83a 	bl	800705c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007ff4:	f7ff f8ce 	bl	8007194 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7ff ffbd 	bl	8007f78 <prvDeleteTCB>
 8007ffe:	e7db      	b.n	8007fb8 <prvIdleTask+0x8>
 8008000:	20011fe8 	.word	0x20011fe8
 8008004:	20011fec 	.word	0x20011fec
 8008008:	20011fd0 	.word	0x20011fd0
 800800c:	20012044 	.word	0x20012044

08008010 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008018:	0096      	lsls	r6, r2, #2
 800801a:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800801c:	4607      	mov	r7, r0
 800801e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008020:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008022:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008024:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008026:	f00b fdca 	bl	8013bbe <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800802a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800802c:	3e04      	subs	r6, #4
 800802e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008030:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008034:	b3b5      	cbz	r5, 80080a4 <prvInitialiseNewTask.constprop.0+0x94>
 8008036:	1e6b      	subs	r3, r5, #1
 8008038:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800803c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800803e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008042:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008046:	b109      	cbz	r1, 800804c <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008048:	42ab      	cmp	r3, r5
 800804a:	d1f8      	bne.n	800803e <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800804c:	2300      	movs	r3, #0
 800804e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008052:	9d08      	ldr	r5, [sp, #32]
 8008054:	2d37      	cmp	r5, #55	@ 0x37
 8008056:	bf28      	it	cs
 8008058:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800805a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800805e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008060:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008062:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008064:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008068:	f7fe ffd3 	bl	8007012 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008070:	f104 0018 	add.w	r0, r4, #24
 8008074:	f7fe ffcd 	bl	8007012 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008078:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800807c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008080:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008082:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008086:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800808a:	4642      	mov	r2, r8
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff f832 	bl	80070f8 <pxPortInitialiseStack>
 8008094:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008096:	f1b9 0f00 	cmp.w	r9, #0
 800809a:	d001      	beq.n	80080a0 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800809c:	f8c9 4000 	str.w	r4, [r9]
}
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080a4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80080a8:	e7d3      	b.n	8008052 <prvInitialiseNewTask.constprop.0+0x42>

080080aa <xTaskCreateStatic>:
	{
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80080b2:	b945      	cbnz	r5, 80080c6 <xTaskCreateStatic+0x1c>
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	e7fe      	b.n	80080c4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80080c6:	b944      	cbnz	r4, 80080da <xTaskCreateStatic+0x30>
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	e7fe      	b.n	80080d8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80080da:	2660      	movs	r6, #96	@ 0x60
 80080dc:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080de:	9e05      	ldr	r6, [sp, #20]
 80080e0:	2e60      	cmp	r6, #96	@ 0x60
 80080e2:	d008      	beq.n	80080f6 <xTaskCreateStatic+0x4c>
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	e7fe      	b.n	80080f4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080f6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080f8:	2502      	movs	r5, #2
 80080fa:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080fe:	ad04      	add	r5, sp, #16
 8008100:	9501      	str	r5, [sp, #4]
 8008102:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008104:	9402      	str	r4, [sp, #8]
 8008106:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008108:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800810a:	f7ff ff81 	bl	8008010 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff fe68 	bl	8007de4 <prvAddNewTaskToReadyList>
	}
 8008114:	9804      	ldr	r0, [sp, #16]
 8008116:	b006      	add	sp, #24
 8008118:	bd70      	pop	{r4, r5, r6, pc}

0800811a <xTaskCreate>:
	{
 800811a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800811e:	4607      	mov	r7, r0
 8008120:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008122:	0090      	lsls	r0, r2, #2
	{
 8008124:	4688      	mov	r8, r1
 8008126:	4616      	mov	r6, r2
 8008128:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800812a:	f7fe fe91 	bl	8006e50 <pvPortMalloc>
			if( pxStack != NULL )
 800812e:	4605      	mov	r5, r0
 8008130:	b920      	cbnz	r0, 800813c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008136:	b005      	add	sp, #20
 8008138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800813c:	2060      	movs	r0, #96	@ 0x60
 800813e:	f7fe fe87 	bl	8006e50 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008142:	4604      	mov	r4, r0
 8008144:	b198      	cbz	r0, 800816e <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008146:	2300      	movs	r3, #0
 8008148:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800814c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 800814e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008154:	9002      	str	r0, [sp, #8]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4632      	mov	r2, r6
 800815a:	464b      	mov	r3, r9
 800815c:	4641      	mov	r1, r8
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff56 	bl	8008010 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff fe3d 	bl	8007de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800816a:	2001      	movs	r0, #1
 800816c:	e7e3      	b.n	8008136 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800816e:	4628      	mov	r0, r5
 8008170:	f7fe ff06 	bl	8006f80 <vPortFree>
		if( pxNewTCB != NULL )
 8008174:	e7dd      	b.n	8008132 <xTaskCreate+0x18>
	...

08008178 <vTaskStartScheduler>:
{
 8008178:	b510      	push	{r4, lr}
 800817a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800817c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800817e:	aa07      	add	r2, sp, #28
 8008180:	a906      	add	r1, sp, #24
 8008182:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008184:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008188:	f7fe fe24 	bl	8006dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	9a07      	ldr	r2, [sp, #28]
 8008194:	4916      	ldr	r1, [pc, #88]	@ (80081f0 <vTaskStartScheduler+0x78>)
 8008196:	4817      	ldr	r0, [pc, #92]	@ (80081f4 <vTaskStartScheduler+0x7c>)
 8008198:	e9cd 4300 	strd	r4, r3, [sp]
 800819c:	4623      	mov	r3, r4
 800819e:	f7ff ff84 	bl	80080aa <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80081a2:	b318      	cbz	r0, 80081ec <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80081a4:	f000 fba6 	bl	80088f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80081a8:	2801      	cmp	r0, #1
 80081aa:	d114      	bne.n	80081d6 <vTaskStartScheduler+0x5e>
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80081bc:	4b0e      	ldr	r3, [pc, #56]	@ (80081f8 <vTaskStartScheduler+0x80>)
 80081be:	f04f 32ff 	mov.w	r2, #4294967295
 80081c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081c4:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <vTaskStartScheduler+0x84>)
 80081c6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <vTaskStartScheduler+0x88>)
 80081ca:	601c      	str	r4, [r3, #0]
}
 80081cc:	b008      	add	sp, #32
 80081ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80081d2:	f7ff b84f 	b.w	8007274 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081d6:	3001      	adds	r0, #1
 80081d8:	d108      	bne.n	80081ec <vTaskStartScheduler+0x74>
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	e7fe      	b.n	80081ea <vTaskStartScheduler+0x72>
}
 80081ec:	b008      	add	sp, #32
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	0801542c 	.word	0x0801542c
 80081f4:	08007fb1 	.word	0x08007fb1
 80081f8:	20011fb0 	.word	0x20011fb0
 80081fc:	20011fc4 	.word	0x20011fc4
 8008200:	20011fcc 	.word	0x20011fcc

08008204 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008204:	4a02      	ldr	r2, [pc, #8]	@ (8008210 <vTaskSuspendAll+0xc>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	6013      	str	r3, [r2, #0]
}
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20011fac 	.word	0x20011fac

08008214 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008214:	4b01      	ldr	r3, [pc, #4]	@ (800821c <xTaskGetTickCount+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
}
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20011fcc 	.word	0x20011fcc

08008220 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008220:	4b3f      	ldr	r3, [pc, #252]	@ (8008320 <xTaskIncrementTick+0x100>)
 8008222:	681b      	ldr	r3, [r3, #0]
{
 8008224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008228:	2b00      	cmp	r3, #0
 800822a:	d172      	bne.n	8008312 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800822c:	4b3d      	ldr	r3, [pc, #244]	@ (8008324 <xTaskIncrementTick+0x104>)
 800822e:	681c      	ldr	r4, [r3, #0]
 8008230:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008232:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008234:	b9bc      	cbnz	r4, 8008266 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008236:	4b3c      	ldr	r3, [pc, #240]	@ (8008328 <xTaskIncrementTick+0x108>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	b142      	cbz	r2, 8008250 <xTaskIncrementTick+0x30>
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	e7fe      	b.n	800824e <xTaskIncrementTick+0x2e>
 8008250:	4a36      	ldr	r2, [pc, #216]	@ (800832c <xTaskIncrementTick+0x10c>)
 8008252:	6819      	ldr	r1, [r3, #0]
 8008254:	6810      	ldr	r0, [r2, #0]
 8008256:	6018      	str	r0, [r3, #0]
 8008258:	6011      	str	r1, [r2, #0]
 800825a:	4a35      	ldr	r2, [pc, #212]	@ (8008330 <xTaskIncrementTick+0x110>)
 800825c:	6813      	ldr	r3, [r2, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	f7ff fe77 	bl	8007f54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008266:	4d33      	ldr	r5, [pc, #204]	@ (8008334 <xTaskIncrementTick+0x114>)
 8008268:	4e33      	ldr	r6, [pc, #204]	@ (8008338 <xTaskIncrementTick+0x118>)
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	4f33      	ldr	r7, [pc, #204]	@ (800833c <xTaskIncrementTick+0x11c>)
 800826e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008270:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008274:	d212      	bcs.n	800829c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800827a:	2114      	movs	r1, #20
 800827c:	434a      	muls	r2, r1
 800827e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008280:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008282:	4a2f      	ldr	r2, [pc, #188]	@ (8008340 <xTaskIncrementTick+0x120>)
 8008284:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8008286:	bf28      	it	cs
 8008288:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800828c:	2a00      	cmp	r2, #0
 800828e:	bf18      	it	ne
 8008290:	f04f 0b01 	movne.w	fp, #1
}
 8008294:	4658      	mov	r0, fp
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8008328 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80082a0:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8008348 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a4:	f8d9 2000 	ldr.w	r2, [r9]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	b91a      	cbnz	r2, 80082b4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295
 80082b0:	602a      	str	r2, [r5, #0]
					break;
 80082b2:	e7e0      	b.n	8008276 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b4:	f8d9 2000 	ldr.w	r2, [r9]
 80082b8:	68d2      	ldr	r2, [r2, #12]
 80082ba:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082be:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80082c2:	428c      	cmp	r4, r1
 80082c4:	d201      	bcs.n	80082ca <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80082c6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082c8:	e7d5      	b.n	8008276 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ca:	f108 0304 	add.w	r3, r8, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f7fe fec3 	bl	800705c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082d6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80082da:	b119      	cbz	r1, 80082e4 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082dc:	f108 0018 	add.w	r0, r8, #24
 80082e0:	f7fe febc 	bl	800705c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082e4:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80082e8:	f8da 1000 	ldr.w	r1, [sl]
 80082ec:	2314      	movs	r3, #20
 80082ee:	4288      	cmp	r0, r1
 80082f0:	bf88      	it	hi
 80082f2:	f8ca 0000 	strhi.w	r0, [sl]
 80082f6:	9901      	ldr	r1, [sp, #4]
 80082f8:	fb03 6000 	mla	r0, r3, r0, r6
 80082fc:	f7fe fe8c 	bl	8007018 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008300:	6838      	ldr	r0, [r7, #0]
 8008302:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008306:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008308:	4291      	cmp	r1, r2
 800830a:	bf28      	it	cs
 800830c:	f04f 0b01 	movcs.w	fp, #1
 8008310:	e7c8      	b.n	80082a4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8008312:	4a0c      	ldr	r2, [pc, #48]	@ (8008344 <xTaskIncrementTick+0x124>)
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800831a:	f04f 0b00 	mov.w	fp, #0
 800831e:	e7b9      	b.n	8008294 <xTaskIncrementTick+0x74>
 8008320:	20011fac 	.word	0x20011fac
 8008324:	20011fcc 	.word	0x20011fcc
 8008328:	20012018 	.word	0x20012018
 800832c:	20012014 	.word	0x20012014
 8008330:	20011fb8 	.word	0x20011fb8
 8008334:	20011fb0 	.word	0x20011fb0
 8008338:	20012044 	.word	0x20012044
 800833c:	200124a4 	.word	0x200124a4
 8008340:	20011fbc 	.word	0x20011fbc
 8008344:	20011fc0 	.word	0x20011fc0
 8008348:	20011fc8 	.word	0x20011fc8

0800834c <xTaskResumeAll>:
{
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008350:	4c30      	ldr	r4, [pc, #192]	@ (8008414 <xTaskResumeAll+0xc8>)
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	b943      	cbnz	r3, 8008368 <xTaskResumeAll+0x1c>
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	e7fe      	b.n	8008366 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008368:	f7fe fef4 	bl	8007154 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	3b01      	subs	r3, #1
 8008370:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008372:	6824      	ldr	r4, [r4, #0]
 8008374:	b12c      	cbz	r4, 8008382 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008376:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008378:	f7fe ff0c 	bl	8007194 <vPortExitCritical>
}
 800837c:	4620      	mov	r0, r4
 800837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008382:	4b25      	ldr	r3, [pc, #148]	@ (8008418 <xTaskResumeAll+0xcc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0f5      	beq.n	8008376 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800838a:	4d24      	ldr	r5, [pc, #144]	@ (800841c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800838c:	4e24      	ldr	r6, [pc, #144]	@ (8008420 <xTaskResumeAll+0xd4>)
 800838e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008430 <xTaskResumeAll+0xe4>
 8008392:	e01d      	b.n	80083d0 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008394:	68eb      	ldr	r3, [r5, #12]
 8008396:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008398:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800839a:	f104 0018 	add.w	r0, r4, #24
 800839e:	f7fe fe5d 	bl	800705c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a2:	4638      	mov	r0, r7
 80083a4:	f7fe fe5a 	bl	800705c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083aa:	6832      	ldr	r2, [r6, #0]
 80083ac:	2014      	movs	r0, #20
 80083ae:	4293      	cmp	r3, r2
 80083b0:	fb00 8003 	mla	r0, r0, r3, r8
 80083b4:	4639      	mov	r1, r7
 80083b6:	bf88      	it	hi
 80083b8:	6033      	strhi	r3, [r6, #0]
 80083ba:	f7fe fe2d 	bl	8007018 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083be:	4b19      	ldr	r3, [pc, #100]	@ (8008424 <xTaskResumeAll+0xd8>)
 80083c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d302      	bcc.n	80083d0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80083ca:	4b17      	ldr	r3, [pc, #92]	@ (8008428 <xTaskResumeAll+0xdc>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1de      	bne.n	8008394 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80083d6:	b10c      	cbz	r4, 80083dc <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80083d8:	f7ff fdbc 	bl	8007f54 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083dc:	4d13      	ldr	r5, [pc, #76]	@ (800842c <xTaskResumeAll+0xe0>)
 80083de:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80083e0:	b144      	cbz	r4, 80083f4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80083e2:	4e11      	ldr	r6, [pc, #68]	@ (8008428 <xTaskResumeAll+0xdc>)
 80083e4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80083e6:	f7ff ff1b 	bl	8008220 <xTaskIncrementTick>
 80083ea:	b100      	cbz	r0, 80083ee <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80083ec:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083ee:	3c01      	subs	r4, #1
 80083f0:	d1f9      	bne.n	80083e6 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80083f2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <xTaskResumeAll+0xdc>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0bc      	beq.n	8008376 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80083fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008404:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008410:	2401      	movs	r4, #1
 8008412:	e7b1      	b.n	8008378 <xTaskResumeAll+0x2c>
 8008414:	20011fac 	.word	0x20011fac
 8008418:	20011fd0 	.word	0x20011fd0
 800841c:	20012000 	.word	0x20012000
 8008420:	20011fc8 	.word	0x20011fc8
 8008424:	200124a4 	.word	0x200124a4
 8008428:	20011fbc 	.word	0x20011fbc
 800842c:	20011fc0 	.word	0x20011fc0
 8008430:	20012044 	.word	0x20012044

08008434 <vTaskDelay>:
	{
 8008434:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008436:	b950      	cbnz	r0, 800844e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008438:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800843c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008440:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	f3bf 8f6f 	isb	sy
	}
 800844c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800844e:	4b0a      	ldr	r3, [pc, #40]	@ (8008478 <vTaskDelay+0x44>)
 8008450:	6819      	ldr	r1, [r3, #0]
 8008452:	b141      	cbz	r1, 8008466 <vTaskDelay+0x32>
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	e7fe      	b.n	8008464 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008466:	f7ff fecd 	bl	8008204 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800846a:	f7ff fd3b 	bl	8007ee4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800846e:	f7ff ff6d 	bl	800834c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008472:	2800      	cmp	r0, #0
 8008474:	d0e0      	beq.n	8008438 <vTaskDelay+0x4>
 8008476:	e7e9      	b.n	800844c <vTaskDelay+0x18>
 8008478:	20011fac 	.word	0x20011fac

0800847c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800847c:	4b17      	ldr	r3, [pc, #92]	@ (80084dc <vTaskSwitchContext+0x60>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b17      	ldr	r3, [pc, #92]	@ (80084e0 <vTaskSwitchContext+0x64>)
{
 8008482:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008484:	b112      	cbz	r2, 800848c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
}
 800848a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848c:	4d15      	ldr	r5, [pc, #84]	@ (80084e4 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800848e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008490:	682a      	ldr	r2, [r5, #0]
 8008492:	4915      	ldr	r1, [pc, #84]	@ (80084e8 <vTaskSwitchContext+0x6c>)
 8008494:	2614      	movs	r6, #20
 8008496:	fb06 f302 	mul.w	r3, r6, r2
 800849a:	18c8      	adds	r0, r1, r3
 800849c:	58cc      	ldr	r4, [r1, r3]
 800849e:	b18c      	cbz	r4, 80084c4 <vTaskSwitchContext+0x48>
 80084a0:	6844      	ldr	r4, [r0, #4]
 80084a2:	3308      	adds	r3, #8
 80084a4:	6864      	ldr	r4, [r4, #4]
 80084a6:	6044      	str	r4, [r0, #4]
 80084a8:	440b      	add	r3, r1
 80084aa:	429c      	cmp	r4, r3
 80084ac:	bf04      	itt	eq
 80084ae:	6863      	ldreq	r3, [r4, #4]
 80084b0:	6043      	streq	r3, [r0, #4]
 80084b2:	2314      	movs	r3, #20
 80084b4:	fb03 1102 	mla	r1, r3, r2, r1
 80084b8:	684b      	ldr	r3, [r1, #4]
 80084ba:	68d9      	ldr	r1, [r3, #12]
 80084bc:	4b0b      	ldr	r3, [pc, #44]	@ (80084ec <vTaskSwitchContext+0x70>)
 80084be:	6019      	str	r1, [r3, #0]
 80084c0:	602a      	str	r2, [r5, #0]
}
 80084c2:	e7e2      	b.n	800848a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c4:	b942      	cbnz	r2, 80084d8 <vTaskSwitchContext+0x5c>
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	e7fe      	b.n	80084d6 <vTaskSwitchContext+0x5a>
 80084d8:	3a01      	subs	r2, #1
 80084da:	e7dc      	b.n	8008496 <vTaskSwitchContext+0x1a>
 80084dc:	20011fac 	.word	0x20011fac
 80084e0:	20011fbc 	.word	0x20011fbc
 80084e4:	20011fc8 	.word	0x20011fc8
 80084e8:	20012044 	.word	0x20012044
 80084ec:	200124a4 	.word	0x200124a4

080084f0 <vTaskPlaceOnEventList>:
{
 80084f0:	b510      	push	{r4, lr}
 80084f2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80084f4:	b940      	cbnz	r0, 8008508 <vTaskPlaceOnEventList+0x18>
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	e7fe      	b.n	8008506 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <vTaskPlaceOnEventList+0x30>)
 800850a:	6819      	ldr	r1, [r3, #0]
 800850c:	3118      	adds	r1, #24
 800850e:	f7fe fd8e 	bl	800702e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008512:	4620      	mov	r0, r4
 8008514:	2101      	movs	r1, #1
}
 8008516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800851a:	f7ff bce3 	b.w	8007ee4 <prvAddCurrentTaskToDelayedList>
 800851e:	bf00      	nop
 8008520:	200124a4 	.word	0x200124a4

08008524 <vTaskPlaceOnEventListRestricted>:
	{
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	460d      	mov	r5, r1
 8008528:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800852a:	b940      	cbnz	r0, 800853e <vTaskPlaceOnEventListRestricted+0x1a>
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	e7fe      	b.n	800853c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800853e:	4b07      	ldr	r3, [pc, #28]	@ (800855c <vTaskPlaceOnEventListRestricted+0x38>)
 8008540:	6819      	ldr	r1, [r3, #0]
 8008542:	3118      	adds	r1, #24
 8008544:	f7fe fd68 	bl	8007018 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008548:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800854a:	4621      	mov	r1, r4
 800854c:	bf0c      	ite	eq
 800854e:	4628      	moveq	r0, r5
 8008550:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008558:	f7ff bcc4 	b.w	8007ee4 <prvAddCurrentTaskToDelayedList>
 800855c:	200124a4 	.word	0x200124a4

08008560 <xTaskRemoveFromEventList>:
{
 8008560:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008562:	68c3      	ldr	r3, [r0, #12]
 8008564:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008566:	b944      	cbnz	r4, 800857a <xTaskRemoveFromEventList+0x1a>
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	e7fe      	b.n	8008578 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800857a:	f104 0518 	add.w	r5, r4, #24
 800857e:	4628      	mov	r0, r5
 8008580:	f7fe fd6c 	bl	800705c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008584:	4b10      	ldr	r3, [pc, #64]	@ (80085c8 <xTaskRemoveFromEventList+0x68>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	b9db      	cbnz	r3, 80085c2 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800858a:	1d25      	adds	r5, r4, #4
 800858c:	4628      	mov	r0, r5
 800858e:	f7fe fd65 	bl	800705c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008592:	4a0e      	ldr	r2, [pc, #56]	@ (80085cc <xTaskRemoveFromEventList+0x6c>)
 8008594:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008596:	6811      	ldr	r1, [r2, #0]
 8008598:	428b      	cmp	r3, r1
 800859a:	bf88      	it	hi
 800859c:	6013      	strhi	r3, [r2, #0]
 800859e:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <xTaskRemoveFromEventList+0x70>)
 80085a0:	2014      	movs	r0, #20
 80085a2:	4629      	mov	r1, r5
 80085a4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085a8:	f7fe fd36 	bl	8007018 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ac:	4b09      	ldr	r3, [pc, #36]	@ (80085d4 <xTaskRemoveFromEventList+0x74>)
 80085ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80085b6:	bf83      	ittte	hi
 80085b8:	4b07      	ldrhi	r3, [pc, #28]	@ (80085d8 <xTaskRemoveFromEventList+0x78>)
 80085ba:	2001      	movhi	r0, #1
 80085bc:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80085be:	2000      	movls	r0, #0
}
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085c2:	4806      	ldr	r0, [pc, #24]	@ (80085dc <xTaskRemoveFromEventList+0x7c>)
 80085c4:	4629      	mov	r1, r5
 80085c6:	e7ef      	b.n	80085a8 <xTaskRemoveFromEventList+0x48>
 80085c8:	20011fac 	.word	0x20011fac
 80085cc:	20011fc8 	.word	0x20011fc8
 80085d0:	20012044 	.word	0x20012044
 80085d4:	200124a4 	.word	0x200124a4
 80085d8:	20011fbc 	.word	0x20011fbc
 80085dc:	20012000 	.word	0x20012000

080085e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085e0:	4b03      	ldr	r3, [pc, #12]	@ (80085f0 <vTaskInternalSetTimeOutState+0x10>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085e6:	4b03      	ldr	r3, [pc, #12]	@ (80085f4 <vTaskInternalSetTimeOutState+0x14>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6043      	str	r3, [r0, #4]
}
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20011fb8 	.word	0x20011fb8
 80085f4:	20011fcc 	.word	0x20011fcc

080085f8 <xTaskCheckForTimeOut>:
{
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80085fc:	4605      	mov	r5, r0
 80085fe:	b940      	cbnz	r0, 8008612 <xTaskCheckForTimeOut+0x1a>
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	e7fe      	b.n	8008610 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008612:	b941      	cbnz	r1, 8008626 <xTaskCheckForTimeOut+0x2e>
 8008614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	e7fe      	b.n	8008624 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008626:	f7fe fd95 	bl	8007154 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <xTaskCheckForTimeOut+0x70>)
 800862c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	d010      	beq.n	8008656 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008634:	480d      	ldr	r0, [pc, #52]	@ (800866c <xTaskCheckForTimeOut+0x74>)
 8008636:	682e      	ldr	r6, [r5, #0]
 8008638:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800863a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800863c:	4286      	cmp	r6, r0
 800863e:	d001      	beq.n	8008644 <xTaskCheckForTimeOut+0x4c>
 8008640:	428a      	cmp	r2, r1
 8008642:	d90f      	bls.n	8008664 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008644:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008646:	4283      	cmp	r3, r0
 8008648:	d90a      	bls.n	8008660 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800864a:	1a5b      	subs	r3, r3, r1
 800864c:	4413      	add	r3, r2
 800864e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008650:	4628      	mov	r0, r5
 8008652:	f7ff ffc5 	bl	80085e0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008656:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008658:	f7fe fd9c 	bl	8007194 <vPortExitCritical>
}
 800865c:	4620      	mov	r0, r4
 800865e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008664:	2401      	movs	r4, #1
 8008666:	e7f7      	b.n	8008658 <xTaskCheckForTimeOut+0x60>
 8008668:	20011fcc 	.word	0x20011fcc
 800866c:	20011fb8 	.word	0x20011fb8

08008670 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008670:	4b01      	ldr	r3, [pc, #4]	@ (8008678 <vTaskMissedYield+0x8>)
 8008672:	2201      	movs	r2, #1
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	4770      	bx	lr
 8008678:	20011fbc 	.word	0x20011fbc

0800867c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800867c:	4b05      	ldr	r3, [pc, #20]	@ (8008694 <xTaskGetSchedulerState+0x18>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	b133      	cbz	r3, 8008690 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008682:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <xTaskGetSchedulerState+0x1c>)
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	fab0 f080 	clz	r0, r0
 800868a:	0940      	lsrs	r0, r0, #5
 800868c:	0040      	lsls	r0, r0, #1
 800868e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008690:	2001      	movs	r0, #1
	}
 8008692:	4770      	bx	lr
 8008694:	20011fc4 	.word	0x20011fc4
 8008698:	20011fac 	.word	0x20011fac

0800869c <xTaskPriorityInherit>:
	{
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800869e:	4604      	mov	r4, r0
 80086a0:	b338      	cbz	r0, 80086f2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086a2:	4d1a      	ldr	r5, [pc, #104]	@ (800870c <xTaskPriorityInherit+0x70>)
 80086a4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80086a6:	682a      	ldr	r2, [r5, #0]
 80086a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d226      	bcs.n	80086fc <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086ae:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086b0:	4e17      	ldr	r6, [pc, #92]	@ (8008710 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086b2:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b4:	bfa1      	itttt	ge
 80086b6:	682a      	ldrge	r2, [r5, #0]
 80086b8:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 80086ba:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 80086be:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086c0:	2214      	movs	r2, #20
 80086c2:	fb02 6303 	mla	r3, r2, r3, r6
 80086c6:	6942      	ldr	r2, [r0, #20]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d113      	bne.n	80086f4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086cc:	1d07      	adds	r7, r0, #4
 80086ce:	4638      	mov	r0, r7
 80086d0:	f7fe fcc4 	bl	800705c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086d4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008714 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086da:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086de:	2014      	movs	r0, #20
 80086e0:	428b      	cmp	r3, r1
 80086e2:	fb00 6003 	mla	r0, r0, r3, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	bf88      	it	hi
 80086ea:	6013      	strhi	r3, [r2, #0]
 80086ec:	f7fe fc94 	bl	8007018 <vListInsertEnd>
				xReturn = pdTRUE;
 80086f0:	2001      	movs	r0, #1
	}
 80086f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f8:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80086fa:	e7f9      	b.n	80086f0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4298      	cmp	r0, r3
 8008704:	bf2c      	ite	cs
 8008706:	2000      	movcs	r0, #0
 8008708:	2001      	movcc	r0, #1
 800870a:	e7f2      	b.n	80086f2 <xTaskPriorityInherit+0x56>
 800870c:	200124a4 	.word	0x200124a4
 8008710:	20012044 	.word	0x20012044
 8008714:	20011fc8 	.word	0x20011fc8

08008718 <xTaskPriorityDisinherit>:
	{
 8008718:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800871a:	b908      	cbnz	r0, 8008720 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800871c:	2000      	movs	r0, #0
	}
 800871e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008720:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <xTaskPriorityDisinherit+0x78>)
 8008722:	681c      	ldr	r4, [r3, #0]
 8008724:	4284      	cmp	r4, r0
 8008726:	d008      	beq.n	800873a <xTaskPriorityDisinherit+0x22>
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	e7fe      	b.n	8008738 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800873a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800873c:	b943      	cbnz	r3, 8008750 <xTaskPriorityDisinherit+0x38>
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	e7fe      	b.n	800874e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008750:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008752:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008754:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008756:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008758:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800875a:	d0df      	beq.n	800871c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1dd      	bne.n	800871c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008760:	1d25      	adds	r5, r4, #4
 8008762:	4628      	mov	r0, r5
 8008764:	f7fe fc7a 	bl	800705c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008768:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800876a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008770:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008772:	4a08      	ldr	r2, [pc, #32]	@ (8008794 <xTaskPriorityDisinherit+0x7c>)
 8008774:	6811      	ldr	r1, [r2, #0]
 8008776:	428b      	cmp	r3, r1
 8008778:	bf88      	it	hi
 800877a:	6013      	strhi	r3, [r2, #0]
 800877c:	4a06      	ldr	r2, [pc, #24]	@ (8008798 <xTaskPriorityDisinherit+0x80>)
 800877e:	2014      	movs	r0, #20
 8008780:	fb00 2003 	mla	r0, r0, r3, r2
 8008784:	4629      	mov	r1, r5
 8008786:	f7fe fc47 	bl	8007018 <vListInsertEnd>
					xReturn = pdTRUE;
 800878a:	2001      	movs	r0, #1
		return xReturn;
 800878c:	e7c7      	b.n	800871e <xTaskPriorityDisinherit+0x6>
 800878e:	bf00      	nop
 8008790:	200124a4 	.word	0x200124a4
 8008794:	20011fc8 	.word	0x20011fc8
 8008798:	20012044 	.word	0x20012044

0800879c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800879c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800879e:	4604      	mov	r4, r0
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d041      	beq.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 80087a4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80087a6:	b942      	cbnz	r2, 80087ba <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	e7fe      	b.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087ba:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80087bc:	4299      	cmp	r1, r3
 80087be:	bf38      	it	cc
 80087c0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80087c4:	428b      	cmp	r3, r1
 80087c6:	d02f      	beq.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087c8:	2a01      	cmp	r2, #1
 80087ca:	d12d      	bne.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 80087cc:	4a17      	ldr	r2, [pc, #92]	@ (800882c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	4282      	cmp	r2, r0
 80087d2:	d108      	bne.n	80087e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	e7fe      	b.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087e8:	4d11      	ldr	r5, [pc, #68]	@ (8008830 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 80087ea:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087ec:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087ee:	f04f 0214 	mov.w	r2, #20
 80087f2:	fb02 5303 	mla	r3, r2, r3, r5
 80087f6:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f8:	bfa4      	itt	ge
 80087fa:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80087fe:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008800:	429a      	cmp	r2, r3
 8008802:	d111      	bne.n	8008828 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008804:	1d06      	adds	r6, r0, #4
 8008806:	4630      	mov	r0, r6
 8008808:	f7fe fc28 	bl	800705c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800880c:	4a09      	ldr	r2, [pc, #36]	@ (8008834 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800880e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008810:	6811      	ldr	r1, [r2, #0]
 8008812:	2014      	movs	r0, #20
 8008814:	428b      	cmp	r3, r1
 8008816:	fb00 5003 	mla	r0, r0, r3, r5
 800881a:	4631      	mov	r1, r6
	}
 800881c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008820:	bf88      	it	hi
 8008822:	6013      	strhi	r3, [r2, #0]
 8008824:	f7fe bbf8 	b.w	8007018 <vListInsertEnd>
	}
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	bf00      	nop
 800882c:	200124a4 	.word	0x200124a4
 8008830:	20012044 	.word	0x20012044
 8008834:	20011fc8 	.word	0x20011fc8

08008838 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008838:	4b04      	ldr	r3, [pc, #16]	@ (800884c <pvTaskIncrementMutexHeldCount+0x14>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	b11a      	cbz	r2, 8008846 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008842:	3201      	adds	r2, #1
 8008844:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8008846:	6818      	ldr	r0, [r3, #0]
	}
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	200124a4 	.word	0x200124a4

08008850 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008850:	4291      	cmp	r1, r2
{
 8008852:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008854:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008856:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008858:	d80a      	bhi.n	8008870 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	6983      	ldr	r3, [r0, #24]
 800885e:	429a      	cmp	r2, r3
 8008860:	d20d      	bcs.n	800887e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008862:	4b08      	ldr	r3, [pc, #32]	@ (8008884 <prvInsertTimerInActiveList+0x34>)
 8008864:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008866:	6818      	ldr	r0, [r3, #0]
 8008868:	f7fe fbe1 	bl	800702e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800886c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800886e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008870:	429a      	cmp	r2, r3
 8008872:	d201      	bcs.n	8008878 <prvInsertTimerInActiveList+0x28>
 8008874:	4299      	cmp	r1, r3
 8008876:	d202      	bcs.n	800887e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008878:	4b03      	ldr	r3, [pc, #12]	@ (8008888 <prvInsertTimerInActiveList+0x38>)
 800887a:	1d01      	adds	r1, r0, #4
 800887c:	e7f3      	b.n	8008866 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800887e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008880:	e7f5      	b.n	800886e <prvInsertTimerInActiveList+0x1e>
 8008882:	bf00      	nop
 8008884:	200125a4 	.word	0x200125a4
 8008888:	200125a8 	.word	0x200125a8

0800888c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800888c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800888e:	4c11      	ldr	r4, [pc, #68]	@ (80088d4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008890:	f7fe fc60 	bl	8007154 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008894:	6825      	ldr	r5, [r4, #0]
 8008896:	b9bd      	cbnz	r5, 80088c8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008898:	4f0f      	ldr	r7, [pc, #60]	@ (80088d8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800889a:	4e10      	ldr	r6, [pc, #64]	@ (80088dc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800889c:	4638      	mov	r0, r7
 800889e:	f7fe fbad 	bl	8006ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7fe fbaa 	bl	8006ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088a8:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088aa:	4a0e      	ldr	r2, [pc, #56]	@ (80088e4 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80088ac:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088ae:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088b0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80088b2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088b4:	200a      	movs	r0, #10
 80088b6:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088b8:	9500      	str	r5, [sp, #0]
 80088ba:	f7fe fe54 	bl	8007566 <xQueueGenericCreateStatic>
 80088be:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088c0:	b110      	cbz	r0, 80088c8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088c2:	490b      	ldr	r1, [pc, #44]	@ (80088f0 <prvCheckForValidListAndQueue+0x64>)
 80088c4:	f7ff fa2c 	bl	8007d20 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80088c8:	b003      	add	sp, #12
 80088ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80088ce:	f7fe bc61 	b.w	8007194 <vPortExitCritical>
 80088d2:	bf00      	nop
 80088d4:	200125a0 	.word	0x200125a0
 80088d8:	200125c0 	.word	0x200125c0
 80088dc:	200125ac 	.word	0x200125ac
 80088e0:	200125a8 	.word	0x200125a8
 80088e4:	200124f8 	.word	0x200124f8
 80088e8:	200125a4 	.word	0x200125a4
 80088ec:	200124a8 	.word	0x200124a8
 80088f0:	08015431 	.word	0x08015431

080088f4 <xTimerCreateTimerTask>:
{
 80088f4:	b510      	push	{r4, lr}
 80088f6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80088f8:	f7ff ffc8 	bl	800888c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <xTimerCreateTimerTask+0x54>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	b1b3      	cbz	r3, 8008930 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008902:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008904:	aa07      	add	r2, sp, #28
 8008906:	a906      	add	r1, sp, #24
 8008908:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800890a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800890e:	f7fe fa6d 	bl	8006dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	9302      	str	r3, [sp, #8]
 8008916:	9b06      	ldr	r3, [sp, #24]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	2302      	movs	r3, #2
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	490a      	ldr	r1, [pc, #40]	@ (800894c <xTimerCreateTimerTask+0x58>)
 8008922:	480b      	ldr	r0, [pc, #44]	@ (8008950 <xTimerCreateTimerTask+0x5c>)
 8008924:	4623      	mov	r3, r4
 8008926:	f7ff fbc0 	bl	80080aa <xTaskCreateStatic>
 800892a:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <xTimerCreateTimerTask+0x60>)
 800892c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800892e:	b940      	cbnz	r0, 8008942 <xTimerCreateTimerTask+0x4e>
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008940:	e7fe      	b.n	8008940 <xTimerCreateTimerTask+0x4c>
}
 8008942:	2001      	movs	r0, #1
 8008944:	b008      	add	sp, #32
 8008946:	bd10      	pop	{r4, pc}
 8008948:	200125a0 	.word	0x200125a0
 800894c:	08015436 	.word	0x08015436
 8008950:	08008a55 	.word	0x08008a55
 8008954:	2001259c 	.word	0x2001259c

08008958 <xTimerGenericCommand>:
{
 8008958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800895a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800895c:	4604      	mov	r4, r0
{
 800895e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008960:	b940      	cbnz	r0, 8008974 <xTimerGenericCommand+0x1c>
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	e7fe      	b.n	8008972 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008974:	4d0d      	ldr	r5, [pc, #52]	@ (80089ac <xTimerGenericCommand+0x54>)
 8008976:	6828      	ldr	r0, [r5, #0]
 8008978:	b180      	cbz	r0, 800899c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800897a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800897c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008980:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008982:	dc0d      	bgt.n	80089a0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008984:	f7ff fe7a 	bl	800867c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008988:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800898a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800898c:	bf08      	it	eq
 800898e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008990:	6828      	ldr	r0, [r5, #0]
 8008992:	bf18      	it	ne
 8008994:	461a      	movne	r2, r3
 8008996:	4669      	mov	r1, sp
 8008998:	f7fe fe9a 	bl	80076d0 <xQueueGenericSend>
}
 800899c:	b004      	add	sp, #16
 800899e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089a0:	2300      	movs	r3, #0
 80089a2:	4669      	mov	r1, sp
 80089a4:	f7fe ff46 	bl	8007834 <xQueueGenericSendFromISR>
 80089a8:	e7f8      	b.n	800899c <xTimerGenericCommand+0x44>
 80089aa:	bf00      	nop
 80089ac:	200125a0 	.word	0x200125a0

080089b0 <prvSampleTimeNow>:
{
 80089b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80089b4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008a50 <prvSampleTimeNow+0xa0>
{
 80089b8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80089ba:	f7ff fc2b 	bl	8008214 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80089be:	f8d8 3000 	ldr.w	r3, [r8]
 80089c2:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80089c4:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80089c6:	d909      	bls.n	80089dc <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c8:	4f1f      	ldr	r7, [pc, #124]	@ (8008a48 <prvSampleTimeNow+0x98>)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	b96a      	cbnz	r2, 80089ec <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80089d0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a4c <prvSampleTimeNow+0x9c>)
 80089d2:	6811      	ldr	r1, [r2, #0]
 80089d4:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 80089d6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <prvSampleTimeNow+0x2e>
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80089e0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80089e2:	f8c8 5000 	str.w	r5, [r8]
}
 80089e6:	b002      	add	sp, #8
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ec:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ee:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f4:	f104 0a04 	add.w	sl, r4, #4
 80089f8:	4650      	mov	r0, sl
 80089fa:	f7fe fb2f 	bl	800705c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089fe:	6a23      	ldr	r3, [r4, #32]
 8008a00:	4620      	mov	r0, r4
 8008a02:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008a08:	075b      	lsls	r3, r3, #29
 8008a0a:	d5de      	bpl.n	80089ca <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a0c:	69a3      	ldr	r3, [r4, #24]
 8008a0e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8008a10:	4599      	cmp	r9, r3
 8008a12:	d206      	bcs.n	8008a22 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a14:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a16:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a18:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a1a:	4651      	mov	r1, sl
 8008a1c:	f7fe fb07 	bl	800702e <vListInsert>
 8008a20:	e7d3      	b.n	80089ca <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a22:	2300      	movs	r3, #0
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	464a      	mov	r2, r9
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7ff ff94 	bl	8008958 <xTimerGenericCommand>
				configASSERT( xResult );
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1ca      	bne.n	80089ca <prvSampleTimeNow+0x1a>
 8008a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	e7fe      	b.n	8008a44 <prvSampleTimeNow+0x94>
 8008a46:	bf00      	nop
 8008a48:	200125a8 	.word	0x200125a8
 8008a4c:	200125a4 	.word	0x200125a4
 8008a50:	20012598 	.word	0x20012598

08008a54 <prvTimerTask>:
{
 8008a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a58:	4d6e      	ldr	r5, [pc, #440]	@ (8008c14 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a5a:	4e6f      	ldr	r6, [pc, #444]	@ (8008c18 <prvTimerTask+0x1c4>)
{
 8008a5c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	f8d3 8000 	ldr.w	r8, [r3]
 8008a64:	f1b8 0f00 	cmp.w	r8, #0
 8008a68:	d035      	beq.n	8008ad6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a70:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008a72:	f7ff fbc7 	bl	8008204 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a76:	a804      	add	r0, sp, #16
 8008a78:	f7ff ff9a 	bl	80089b0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008a7c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a7e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d169      	bne.n	8008b58 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d14c      	bne.n	8008b22 <prvTimerTask+0xce>
 8008a88:	4540      	cmp	r0, r8
 8008a8a:	d350      	bcc.n	8008b2e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8008a8c:	f7ff fc5e 	bl	800834c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a96:	1d38      	adds	r0, r7, #4
 8008a98:	f7fe fae0 	bl	800705c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008aa0:	0758      	lsls	r0, r3, #29
 8008aa2:	d51a      	bpl.n	8008ada <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	4643      	mov	r3, r8
 8008aa8:	464a      	mov	r2, r9
 8008aaa:	4441      	add	r1, r8
 8008aac:	4638      	mov	r0, r7
 8008aae:	f7ff fecf 	bl	8008850 <prvInsertTimerInActiveList>
 8008ab2:	b1b0      	cbz	r0, 8008ae2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab4:	9400      	str	r4, [sp, #0]
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4621      	mov	r1, r4
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ff4b 	bl	8008958 <xTimerGenericCommand>
			configASSERT( xResult );
 8008ac2:	b970      	cbnz	r0, 8008ae2 <prvTimerTask+0x8e>
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	e7fe      	b.n	8008ad4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ad6:	2401      	movs	r4, #1
 8008ad8:	e7cb      	b.n	8008a72 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ae8:	6830      	ldr	r0, [r6, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	a904      	add	r1, sp, #16
 8008aee:	f7fe ff4f 	bl	8007990 <xQueueReceive>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0b3      	beq.n	8008a5e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008af6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008af8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	db2f      	blt.n	8008b5e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008afe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b00:	6963      	ldr	r3, [r4, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d132      	bne.n	8008b6c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b06:	a803      	add	r0, sp, #12
 8008b08:	f7ff ff52 	bl	80089b0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008b0c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b0e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008b10:	2b09      	cmp	r3, #9
 8008b12:	d8e9      	bhi.n	8008ae8 <prvTimerTask+0x94>
 8008b14:	e8df f003 	tbb	[pc, r3]
 8008b18:	572e2e2e 	.word	0x572e2e2e
 8008b1c:	2e2e765e 	.word	0x2e2e765e
 8008b20:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b22:	4b3e      	ldr	r3, [pc, #248]	@ (8008c1c <prvTimerTask+0x1c8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681c      	ldr	r4, [r3, #0]
 8008b28:	fab4 f484 	clz	r4, r4
 8008b2c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b2e:	6830      	ldr	r0, [r6, #0]
 8008b30:	4622      	mov	r2, r4
 8008b32:	eba8 0109 	sub.w	r1, r8, r9
 8008b36:	f7ff f932 	bl	8007d9e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b3a:	f7ff fc07 	bl	800834c <xTaskResumeAll>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1d2      	bne.n	8008ae8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8008b42:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	e7c7      	b.n	8008ae8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008b58:	f7ff fbf8 	bl	800834c <xTaskResumeAll>
}
 8008b5c:	e7c4      	b.n	8008ae8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b5e:	9b05      	ldr	r3, [sp, #20]
 8008b60:	9907      	ldr	r1, [sp, #28]
 8008b62:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dbbe      	blt.n	8008ae8 <prvTimerTask+0x94>
 8008b6a:	e7c8      	b.n	8008afe <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b6c:	1d20      	adds	r0, r4, #4
 8008b6e:	f7fe fa75 	bl	800705c <uxListRemove>
 8008b72:	e7c8      	b.n	8008b06 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b74:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b78:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b82:	9b05      	ldr	r3, [sp, #20]
 8008b84:	4620      	mov	r0, r4
 8008b86:	4419      	add	r1, r3
 8008b88:	f7ff fe62 	bl	8008850 <prvInsertTimerInActiveList>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d0ab      	beq.n	8008ae8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b90:	6a23      	ldr	r3, [r4, #32]
 8008b92:	4620      	mov	r0, r4
 8008b94:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b96:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b9a:	0759      	lsls	r1, r3, #29
 8008b9c:	d5a4      	bpl.n	8008ae8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b9e:	69a2      	ldr	r2, [r4, #24]
 8008ba0:	9905      	ldr	r1, [sp, #20]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	440a      	add	r2, r1
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7ff fed4 	bl	8008958 <xTimerGenericCommand>
							configASSERT( xResult );
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d199      	bne.n	8008ae8 <prvTimerTask+0x94>
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	e7fe      	b.n	8008bc4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008bd2:	e789      	b.n	8008ae8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bd4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008be0:	9905      	ldr	r1, [sp, #20]
 8008be2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008be4:	b941      	cbnz	r1, 8008bf8 <prvTimerTask+0x1a4>
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	e7fe      	b.n	8008bf6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4401      	add	r1, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff fe27 	bl	8008850 <prvInsertTimerInActiveList>
					break;
 8008c02:	e771      	b.n	8008ae8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008c08:	079a      	lsls	r2, r3, #30
 8008c0a:	d4de      	bmi.n	8008bca <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7fe f9b7 	bl	8006f80 <vPortFree>
 8008c12:	e769      	b.n	8008ae8 <prvTimerTask+0x94>
 8008c14:	200125a8 	.word	0x200125a8
 8008c18:	200125a0 	.word	0x200125a0
 8008c1c:	200125a4 	.word	0x200125a4

08008c20 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8008c20:	8880      	ldrh	r0, [r0, #4]
 8008c22:	4770      	bx	lr

08008c24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	6803      	ldr	r3, [r0, #0]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4798      	blx	r3
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	4606      	mov	r6, r0
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	4628      	mov	r0, r5
 8008c3a:	4798      	blx	r3
 8008c3c:	1ba4      	subs	r4, r4, r6
 8008c3e:	b2a4      	uxth	r4, r4
 8008c40:	fbb4 f0f0 	udiv	r0, r4, r0
 8008c44:	bd70      	pop	{r4, r5, r6, pc}

08008c46 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8008c46:	2300      	movs	r3, #0
 8008c48:	8083      	strh	r3, [r0, #4]
 8008c4a:	4770      	bx	lr

08008c4c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	6803      	ldr	r3, [r0, #0]
 8008c50:	8881      	ldrh	r1, [r0, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c54:	4604      	mov	r4, r0
 8008c56:	4798      	blx	r3
 8008c58:	88a3      	ldrh	r3, [r4, #4]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	80a3      	strh	r3, [r4, #4]
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008c60:	6803      	ldr	r3, [r0, #0]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	4718      	bx	r3

08008c66 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008c66:	4770      	bx	lr

08008c68 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008c68:	4a02      	ldr	r2, [pc, #8]	@ (8008c74 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8008c6a:	6002      	str	r2, [r0, #0]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	8082      	strh	r2, [r0, #4]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	08015cb4 	.word	0x08015cb4

08008c78 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008c78:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	b12b      	cbz	r3, 8008c8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c7e:	b920      	cbnz	r0, 8008c8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c80:	1a5a      	subs	r2, r3, r1
 8008c82:	4250      	negs	r0, r2
 8008c84:	4150      	adcs	r0, r2
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	e7f8      	b.n	8008c7c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8008c8a:	4770      	bx	lr

08008c8c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	6148      	str	r0, [r1, #20]
 8008c90:	618b      	str	r3, [r1, #24]
 8008c92:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c94:	b913      	cbnz	r3, 8008c9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8008c96:	6281      	str	r1, [r0, #40]	@ 0x28
 8008c98:	4770      	bx	lr
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	d1fb      	bne.n	8008c9a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8008ca2:	6199      	str	r1, [r3, #24]
 8008ca4:	4770      	bx	lr

08008ca6 <_ZN8touchgfx9Container9removeAllEv>:
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008caa:	b123      	cbz	r3, 8008cb6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8008cac:	6999      	ldr	r1, [r3, #24]
 8008cae:	6281      	str	r1, [r0, #40]	@ 0x28
 8008cb0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008cb4:	e7f8      	b.n	8008ca8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8008cb6:	4770      	bx	lr

08008cb8 <_ZN8touchgfx9Container6unlinkEv>:
 8008cb8:	2300      	movs	r3, #0
 8008cba:	6283      	str	r3, [r0, #40]	@ 0x28
 8008cbc:	4770      	bx	lr

08008cbe <_ZNK8touchgfx9Container12getSolidRectEv>:
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	8002      	strh	r2, [r0, #0]
 8008cc2:	8042      	strh	r2, [r0, #2]
 8008cc4:	8082      	strh	r2, [r0, #4]
 8008cc6:	80c2      	strh	r2, [r0, #6]
 8008cc8:	4770      	bx	lr

08008cca <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8008cca:	b570      	push	{r4, r5, r6, lr}
 8008ccc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008cce:	460d      	mov	r5, r1
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	b13c      	cbz	r4, 8008ce4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4798      	blx	r3
 8008ce0:	69a4      	ldr	r4, [r4, #24]
 8008ce2:	e7f6      	b.n	8008cd2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008ce4:	bd70      	pop	{r4, r5, r6, pc}

08008ce6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8008ce6:	b538      	push	{r3, r4, r5, lr}
 8008ce8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008cea:	460d      	mov	r5, r1
 8008cec:	b134      	cbz	r4, 8008cfc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	4798      	blx	r3
 8008cf8:	69a4      	ldr	r4, [r4, #24]
 8008cfa:	e7f7      	b.n	8008cec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}

08008cfe <_ZN8touchgfx9ContainerD1Ev>:
 8008cfe:	4770      	bx	lr

08008d00 <_ZN8touchgfx9ContainerD0Ev>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	212c      	movs	r1, #44	@ 0x2c
 8008d04:	4604      	mov	r4, r0
 8008d06:	f00a fd25 	bl	8013754 <_ZdlPvj>
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8008d0e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008d10:	b19b      	cbz	r3, 8008d3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008d12:	428b      	cmp	r3, r1
 8008d14:	d109      	bne.n	8008d2a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6159      	str	r1, [r3, #20]
 8008d1c:	6282      	str	r2, [r0, #40]	@ 0x28
 8008d1e:	b902      	cbnz	r2, 8008d22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8008d20:	4770      	bx	lr
 8008d22:	6199      	str	r1, [r3, #24]
 8008d24:	4770      	bx	lr
 8008d26:	4613      	mov	r3, r2
 8008d28:	b13a      	cbz	r2, 8008d3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008d2a:	699a      	ldr	r2, [r3, #24]
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d1fa      	bne.n	8008d26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8008d30:	698a      	ldr	r2, [r1, #24]
 8008d32:	619a      	str	r2, [r3, #24]
 8008d34:	2300      	movs	r3, #0
 8008d36:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8008d3a:	4770      	bx	lr

08008d3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8008d3c:	b410      	push	{r4}
 8008d3e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008d40:	4604      	mov	r4, r0
 8008d42:	b92b      	cbnz	r3, 8008d50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8008d44:	6803      	ldr	r3, [r0, #0]
 8008d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4718      	bx	r3
 8008d50:	b941      	cbnz	r1, 8008d64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008d52:	6193      	str	r3, [r2, #24]
 8008d54:	6282      	str	r2, [r0, #40]	@ 0x28
 8008d56:	6154      	str	r4, [r2, #20]
 8008d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0f9      	beq.n	8008d58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008d64:	4299      	cmp	r1, r3
 8008d66:	6998      	ldr	r0, [r3, #24]
 8008d68:	d1f9      	bne.n	8008d5e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8008d6a:	6190      	str	r0, [r2, #24]
 8008d6c:	618a      	str	r2, [r1, #24]
 8008d6e:	e7f2      	b.n	8008d56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	461f      	mov	r7, r3
 8008d76:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	b103      	cbz	r3, 8008d82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008d80:	6038      	str	r0, [r7, #0]
 8008d82:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008d84:	b314      	cbz	r4, 8008dcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008d86:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008d8a:	b1eb      	cbz	r3, 8008dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008d90:	428d      	cmp	r5, r1
 8008d92:	db19      	blt.n	8008dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d94:	8923      	ldrh	r3, [r4, #8]
 8008d96:	b289      	uxth	r1, r1
 8008d98:	440b      	add	r3, r1
 8008d9a:	b21b      	sxth	r3, r3
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	da13      	bge.n	8008dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008da0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008da4:	4296      	cmp	r6, r2
 8008da6:	db0f      	blt.n	8008dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008da8:	8963      	ldrh	r3, [r4, #10]
 8008daa:	b292      	uxth	r2, r2
 8008dac:	4413      	add	r3, r2
 8008dae:	b21b      	sxth	r3, r3
 8008db0:	429e      	cmp	r6, r3
 8008db2:	da09      	bge.n	8008dc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	1ab2      	subs	r2, r6, r2
 8008db8:	1a69      	subs	r1, r5, r1
 8008dba:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008dbe:	b212      	sxth	r2, r2
 8008dc0:	463b      	mov	r3, r7
 8008dc2:	b209      	sxth	r1, r1
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	47c0      	blx	r8
 8008dc8:	69a4      	ldr	r4, [r4, #24]
 8008dca:	e7db      	b.n	8008d84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8008dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008dd0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4c6e      	ldr	r4, [pc, #440]	@ (8008f90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8008dd6:	b0a1      	sub	sp, #132	@ 0x84
 8008dd8:	6824      	ldr	r4, [r4, #0]
 8008dda:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8008ddc:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	2400      	movs	r4, #0
 8008de4:	802c      	strh	r4, [r5, #0]
 8008de6:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8008de8:	802c      	strh	r4, [r5, #0]
 8008dea:	601c      	str	r4, [r3, #0]
 8008dec:	4606      	mov	r6, r0
 8008dee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8008df2:	f7ff ffbd 	bl	8008d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008df6:	f1b9 0f03 	cmp.w	r9, #3
 8008dfa:	f340 80c2 	ble.w	8008f82 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8008dfe:	4631      	mov	r1, r6
 8008e00:	a80c      	add	r0, sp, #48	@ 0x30
 8008e02:	f005 f9d3 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008e06:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8008e0a:	9306      	str	r3, [sp, #24]
 8008e0c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	f8d3 a000 	ldr.w	sl, [r3]
 8008e18:	f1ba 0f00 	cmp.w	sl, #0
 8008e1c:	f000 80b4 	beq.w	8008f88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8008e20:	4651      	mov	r1, sl
 8008e22:	a810      	add	r0, sp, #64	@ 0x40
 8008e24:	f005 f9c2 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	9a06      	ldr	r2, [sp, #24]
 8008e2c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8008e30:	189d      	adds	r5, r3, r2
 8008e32:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8008e36:	9a07      	ldr	r2, [sp, #28]
 8008e38:	2002      	movs	r0, #2
 8008e3a:	fb91 f1f0 	sdiv	r1, r1, r0
 8008e3e:	4419      	add	r1, r3
 8008e40:	1a6d      	subs	r5, r5, r1
 8008e42:	9b02      	ldr	r3, [sp, #8]
 8008e44:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8008e48:	4413      	add	r3, r2
 8008e4a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8008e4e:	fb92 f2f0 	sdiv	r2, r2, r0
 8008e52:	440a      	add	r2, r1
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	435b      	muls	r3, r3
 8008e58:	fb05 3505 	mla	r5, r5, r5, r3
 8008e5c:	4f4d      	ldr	r7, [pc, #308]	@ (8008f94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8008e5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e60:	ac10      	add	r4, sp, #64	@ 0x40
 8008e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e6c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008e70:	f1b9 0f0c 	cmp.w	r9, #12
 8008e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e78:	f04f 0303 	mov.w	r3, #3
 8008e7c:	bfc8      	it	gt
 8008e7e:	4698      	movgt	r8, r3
 8008e80:	f8cd 9000 	str.w	r9, [sp]
 8008e84:	f04f 0400 	mov.w	r4, #0
 8008e88:	bfdc      	itt	le
 8008e8a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8008e8e:	fb92 f8f3 	sdivle	r8, r2, r3
 8008e92:	1c63      	adds	r3, r4, #1
 8008e94:	aa10      	add	r2, sp, #64	@ 0x40
 8008e96:	f004 0401 	and.w	r4, r4, #1
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	fb93 f3f8 	sdiv	r3, r3, r8
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3404      	adds	r4, #4
 8008eaa:	f04f 0b00 	mov.w	fp, #0
 8008eae:	9304      	str	r3, [sp, #16]
 8008eb0:	9a04      	ldr	r2, [sp, #16]
 8008eb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008eb6:	fb13 f302 	smulbb	r3, r3, r2
 8008eba:	9a01      	ldr	r2, [sp, #4]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	1899      	adds	r1, r3, r2
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008ec6:	b209      	sxth	r1, r1
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	db4d      	blt.n	8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ecc:	8932      	ldrh	r2, [r6, #8]
 8008ece:	4413      	add	r3, r2
 8008ed0:	b21b      	sxth	r3, r3
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	da48      	bge.n	8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	6827      	ldr	r7, [r4, #0]
 8008eda:	fb17 f703 	smulbb	r7, r7, r3
 8008ede:	9b02      	ldr	r3, [sp, #8]
 8008ee0:	b2bf      	uxth	r7, r7
 8008ee2:	18fa      	adds	r2, r7, r3
 8008ee4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008ee8:	b212      	sxth	r2, r2
 8008eea:	429a      	cmp	r2, r3
 8008eec:	db3c      	blt.n	8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008eee:	8970      	ldrh	r0, [r6, #10]
 8008ef0:	4403      	add	r3, r0
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	da37      	bge.n	8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008efc:	4630      	mov	r0, r6
 8008efe:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008f00:	f7ff ff36 	bl	8008d70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008f04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f06:	b37a      	cbz	r2, 8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008f08:	4552      	cmp	r2, sl
 8008f0a:	d02d      	beq.n	8008f68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	a80e      	add	r0, sp, #56	@ 0x38
 8008f10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f12:	f005 f94b 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008f16:	9a06      	ldr	r2, [sp, #24]
 8008f18:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8008f22:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8008f26:	4413      	add	r3, r2
 8008f28:	f04f 0e02 	mov.w	lr, #2
 8008f2c:	fb91 f1fe 	sdiv	r1, r1, lr
 8008f30:	4401      	add	r1, r0
 8008f32:	1a58      	subs	r0, r3, r1
 8008f34:	9a07      	ldr	r2, [sp, #28]
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8008f3c:	fb9c fcfe 	sdiv	ip, ip, lr
 8008f40:	4413      	add	r3, r2
 8008f42:	448c      	add	ip, r1
 8008f44:	eba3 030c 	sub.w	r3, r3, ip
 8008f48:	435b      	muls	r3, r3
 8008f4a:	fb00 3300 	mla	r3, r0, r0, r3
 8008f4e:	42ab      	cmp	r3, r5
 8008f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f52:	d208      	bcs.n	8008f66 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008f54:	9803      	ldr	r0, [sp, #12]
 8008f56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f58:	6001      	str	r1, [r0, #0]
 8008f5a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	8008      	strh	r0, [r1, #0]
 8008f60:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008f62:	461d      	mov	r5, r3
 8008f64:	800f      	strh	r7, [r1, #0]
 8008f66:	4692      	mov	sl, r2
 8008f68:	f10b 0b01 	add.w	fp, fp, #1
 8008f6c:	f1bb 0f04 	cmp.w	fp, #4
 8008f70:	f104 0408 	add.w	r4, r4, #8
 8008f74:	d19c      	bne.n	8008eb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	9c08      	ldr	r4, [sp, #32]
 8008f7a:	444b      	add	r3, r9
 8008f7c:	4544      	cmp	r4, r8
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	d187      	bne.n	8008e92 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008f82:	b021      	add	sp, #132	@ 0x84
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	f04f 35ff 	mov.w	r5, #4294967295
 8008f8c:	e766      	b.n	8008e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8008f8e:	bf00      	nop
 8008f90:	200125e0 	.word	0x200125e0
 8008f94:	08014814 	.word	0x08014814

08008f98 <_ZN8touchgfx4RectaNERKS0_>:
 8008f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008fa0:	888c      	ldrh	r4, [r1, #4]
 8008fa2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8008fa6:	443c      	add	r4, r7
 8008fa8:	b2a4      	uxth	r4, r4
 8008faa:	fa0f f884 	sxth.w	r8, r4
 8008fae:	45c1      	cmp	r9, r8
 8008fb0:	da2f      	bge.n	8009012 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fb2:	8882      	ldrh	r2, [r0, #4]
 8008fb4:	444a      	add	r2, r9
 8008fb6:	b292      	uxth	r2, r2
 8008fb8:	fa0f fe82 	sxth.w	lr, r2
 8008fbc:	4577      	cmp	r7, lr
 8008fbe:	da28      	bge.n	8009012 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fc0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008fc4:	88cb      	ldrh	r3, [r1, #6]
 8008fc6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8008fca:	442b      	add	r3, r5
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	429e      	cmp	r6, r3
 8008fd0:	da1f      	bge.n	8009012 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fd2:	88c3      	ldrh	r3, [r0, #6]
 8008fd4:	4433      	add	r3, r6
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	fa0f fc83 	sxth.w	ip, r3
 8008fdc:	4565      	cmp	r5, ip
 8008fde:	da18      	bge.n	8009012 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fe0:	454f      	cmp	r7, r9
 8008fe2:	bfb8      	it	lt
 8008fe4:	464f      	movlt	r7, r9
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	bfb8      	it	lt
 8008fea:	4635      	movlt	r5, r6
 8008fec:	45f0      	cmp	r8, lr
 8008fee:	bfd8      	it	le
 8008ff0:	4622      	movle	r2, r4
 8008ff2:	1bd2      	subs	r2, r2, r7
 8008ff4:	8082      	strh	r2, [r0, #4]
 8008ff6:	884a      	ldrh	r2, [r1, #2]
 8008ff8:	88c9      	ldrh	r1, [r1, #6]
 8008ffa:	8007      	strh	r7, [r0, #0]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	b292      	uxth	r2, r2
 8009000:	b211      	sxth	r1, r2
 8009002:	458c      	cmp	ip, r1
 8009004:	bfa8      	it	ge
 8009006:	4613      	movge	r3, r2
 8009008:	1b5b      	subs	r3, r3, r5
 800900a:	80c3      	strh	r3, [r0, #6]
 800900c:	8045      	strh	r5, [r0, #2]
 800900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009012:	2300      	movs	r3, #0
 8009014:	8003      	strh	r3, [r0, #0]
 8009016:	8043      	strh	r3, [r0, #2]
 8009018:	8083      	strh	r3, [r0, #4]
 800901a:	80c3      	strh	r3, [r0, #6]
 800901c:	e7f7      	b.n	800900e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800901e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800901e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	dd06      	ble.n	8009034 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009026:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800902a:	2800      	cmp	r0, #0
 800902c:	bfcc      	ite	gt
 800902e:	2000      	movgt	r0, #0
 8009030:	2001      	movle	r0, #1
 8009032:	4770      	bx	lr
 8009034:	2001      	movs	r0, #1
 8009036:	4770      	bx	lr

08009038 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903c:	2300      	movs	r3, #0
 800903e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009040:	8003      	strh	r3, [r0, #0]
 8009042:	4604      	mov	r4, r0
 8009044:	8043      	strh	r3, [r0, #2]
 8009046:	8083      	strh	r3, [r0, #4]
 8009048:	80c3      	strh	r3, [r0, #6]
 800904a:	2d00      	cmp	r5, #0
 800904c:	d040      	beq.n	80090d0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800904e:	1d28      	adds	r0, r5, #4
 8009050:	f7ff ffe5 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009054:	b988      	cbnz	r0, 800907a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff ffe1 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800905c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009060:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009064:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009068:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800906c:	b138      	cbz	r0, 800907e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800906e:	8022      	strh	r2, [r4, #0]
 8009070:	8063      	strh	r3, [r4, #2]
 8009072:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009076:	f8a4 c006 	strh.w	ip, [r4, #6]
 800907a:	69ad      	ldr	r5, [r5, #24]
 800907c:	e7e5      	b.n	800904a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800907e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009082:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009086:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800908a:	4290      	cmp	r0, r2
 800908c:	4607      	mov	r7, r0
 800908e:	bfa8      	it	ge
 8009090:	4617      	movge	r7, r2
 8009092:	4472      	add	r2, lr
 8009094:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009098:	8027      	strh	r7, [r4, #0]
 800909a:	4299      	cmp	r1, r3
 800909c:	460e      	mov	r6, r1
 800909e:	4440      	add	r0, r8
 80090a0:	bfa8      	it	ge
 80090a2:	461e      	movge	r6, r3
 80090a4:	4471      	add	r1, lr
 80090a6:	4463      	add	r3, ip
 80090a8:	b200      	sxth	r0, r0
 80090aa:	b212      	sxth	r2, r2
 80090ac:	b209      	sxth	r1, r1
 80090ae:	b21b      	sxth	r3, r3
 80090b0:	4290      	cmp	r0, r2
 80090b2:	bfac      	ite	ge
 80090b4:	ebc7 0200 	rsbge	r2, r7, r0
 80090b8:	ebc7 0202 	rsblt	r2, r7, r2
 80090bc:	4299      	cmp	r1, r3
 80090be:	bfac      	ite	ge
 80090c0:	ebc6 0301 	rsbge	r3, r6, r1
 80090c4:	ebc6 0303 	rsblt	r3, r6, r3
 80090c8:	8066      	strh	r6, [r4, #2]
 80090ca:	80a2      	strh	r2, [r4, #4]
 80090cc:	80e3      	strh	r3, [r4, #6]
 80090ce:	e7d4      	b.n	800907a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80090d0:	4620      	mov	r0, r4
 80090d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80090d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090da:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80090de:	b383      	cbz	r3, 8009142 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090e0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80090e2:	b374      	cbz	r4, 8009142 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090e4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80090e8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80090ec:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80090f0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80090f4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80090f8:	b303      	cbz	r3, 800913c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80090fa:	4668      	mov	r0, sp
 80090fc:	1d21      	adds	r1, r4, #4
 80090fe:	f8ad 5000 	strh.w	r5, [sp]
 8009102:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009106:	f8ad 7004 	strh.w	r7, [sp, #4]
 800910a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800910e:	f7ff ff43 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 8009112:	4668      	mov	r0, sp
 8009114:	f7ff ff83 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009118:	b980      	cbnz	r0, 800913c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800911a:	f8bd 3000 	ldrh.w	r3, [sp]
 800911e:	88a2      	ldrh	r2, [r4, #4]
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	f8ad 3000 	strh.w	r3, [sp]
 8009126:	88e2      	ldrh	r2, [r4, #6]
 8009128:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	4669      	mov	r1, sp
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4620      	mov	r0, r4
 800913a:	4798      	blx	r3
 800913c:	69a4      	ldr	r4, [r4, #24]
 800913e:	2c00      	cmp	r4, #0
 8009140:	d1d8      	bne.n	80090f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009142:	b002      	add	sp, #8
 8009144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009148 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009148:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800914a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800914e:	460d      	mov	r5, r1
 8009150:	4616      	mov	r6, r2
 8009152:	b323      	cbz	r3, 800919e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009154:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009156:	b314      	cbz	r4, 800919e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009158:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800915c:	b1eb      	cbz	r3, 800919a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800915e:	6828      	ldr	r0, [r5, #0]
 8009160:	6869      	ldr	r1, [r5, #4]
 8009162:	466b      	mov	r3, sp
 8009164:	c303      	stmia	r3!, {r0, r1}
 8009166:	4668      	mov	r0, sp
 8009168:	1d21      	adds	r1, r4, #4
 800916a:	f7ff ff15 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800916e:	4668      	mov	r0, sp
 8009170:	f7ff ff55 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009174:	b988      	cbnz	r0, 800919a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009176:	f8bd 3000 	ldrh.w	r3, [sp]
 800917a:	88a2      	ldrh	r2, [r4, #4]
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	f8ad 3000 	strh.w	r3, [sp]
 8009182:	88e2      	ldrh	r2, [r4, #6]
 8009184:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	4632      	mov	r2, r6
 8009192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009194:	4669      	mov	r1, sp
 8009196:	4620      	mov	r0, r4
 8009198:	4798      	blx	r3
 800919a:	69a4      	ldr	r4, [r4, #24]
 800919c:	e7db      	b.n	8009156 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800919e:	b002      	add	sp, #8
 80091a0:	bd70      	pop	{r4, r5, r6, pc}

080091a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80091a2:	b513      	push	{r0, r1, r4, lr}
 80091a4:	6803      	ldr	r3, [r0, #0]
 80091a6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 80091aa:	2300      	movs	r3, #0
 80091ac:	e9cd 3300 	strd	r3, r3, [sp]
 80091b0:	466b      	mov	r3, sp
 80091b2:	47a0      	blx	r4
 80091b4:	b002      	add	sp, #8
 80091b6:	bd10      	pop	{r4, pc}

080091b8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80091b8:	2301      	movs	r3, #1
 80091ba:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80091be:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80091c2:	4770      	bx	lr

080091c4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80091c4:	2301      	movs	r3, #1
 80091c6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80091ca:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80091ce:	4770      	bx	lr

080091d0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80091d0:	6843      	ldr	r3, [r0, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	725a      	strb	r2, [r3, #9]
 80091d6:	6840      	ldr	r0, [r0, #4]
 80091d8:	6803      	ldr	r3, [r0, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	4718      	bx	r3

080091de <_ZN8touchgfx3HAL8flushDMAEv>:
 80091de:	6840      	ldr	r0, [r0, #4]
 80091e0:	6803      	ldr	r3, [r0, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	4718      	bx	r3

080091e6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80091e6:	b530      	push	{r4, r5, lr}
 80091e8:	b08b      	sub	sp, #44	@ 0x2c
 80091ea:	6804      	ldr	r4, [r0, #0]
 80091ec:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80091f0:	9509      	str	r5, [sp, #36]	@ 0x24
 80091f2:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80091f6:	9508      	str	r5, [sp, #32]
 80091f8:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80091fc:	9507      	str	r5, [sp, #28]
 80091fe:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8009202:	9506      	str	r5, [sp, #24]
 8009204:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8009208:	9505      	str	r5, [sp, #20]
 800920a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800920e:	9504      	str	r5, [sp, #16]
 8009210:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8009214:	9503      	str	r5, [sp, #12]
 8009216:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800921a:	9502      	str	r5, [sp, #8]
 800921c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009220:	e9cd 3500 	strd	r3, r5, [sp]
 8009224:	4613      	mov	r3, r2
 8009226:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8009228:	2200      	movs	r2, #0
 800922a:	47a0      	blx	r4
 800922c:	b00b      	add	sp, #44	@ 0x2c
 800922e:	bd30      	pop	{r4, r5, pc}

08009230 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009230:	4b04      	ldr	r3, [pc, #16]	@ (8009244 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b123      	cbz	r3, 8009240 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009236:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800923a:	f080 0001 	eor.w	r0, r0, #1
 800923e:	4770      	bx	lr
 8009240:	2001      	movs	r0, #1
 8009242:	4770      	bx	lr
 8009244:	200125de 	.word	0x200125de

08009248 <_ZN8touchgfx3HAL8endFrameEv>:
 8009248:	b510      	push	{r4, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	6840      	ldr	r0, [r0, #4]
 800924e:	6803      	ldr	r3, [r0, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4798      	blx	r3
 8009254:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8009258:	b113      	cbz	r3, 8009260 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800925a:	2301      	movs	r3, #1
 800925c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009260:	bd10      	pop	{r4, pc}

08009262 <_ZN8touchgfx3HAL10initializeEv>:
 8009262:	b510      	push	{r4, lr}
 8009264:	4604      	mov	r4, r0
 8009266:	f7f7 fc0b 	bl	8000a80 <_ZN8touchgfx10OSWrappers10initializeEv>
 800926a:	f7f7 fb0f 	bl	800088c <_ZN8touchgfx4GPIO4initEv>
 800926e:	6860      	ldr	r0, [r4, #4]
 8009270:	6803      	ldr	r3, [r0, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4798      	blx	r3
 8009276:	68e0      	ldr	r0, [r4, #12]
 8009278:	6803      	ldr	r3, [r0, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	4798      	blx	r3
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	4620      	mov	r0, r4
 8009282:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009288:	4718      	bx	r3
	...

0800928c <_ZN8touchgfx3HAL4tickEv>:
 800928c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800928e:	6803      	ldr	r3, [r0, #0]
 8009290:	4d62      	ldr	r5, [pc, #392]	@ (800941c <_ZN8touchgfx3HAL4tickEv+0x190>)
 8009292:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009296:	4604      	mov	r4, r0
 8009298:	4798      	blx	r3
 800929a:	2800      	cmp	r0, #0
 800929c:	f000 809e 	beq.w	80093dc <_ZN8touchgfx3HAL4tickEv+0x150>
 80092a0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d002      	beq.n	80092ae <_ZN8touchgfx3HAL4tickEv+0x22>
 80092a8:	2001      	movs	r0, #1
 80092aa:	f7f7 fa6d 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80092ae:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80092b2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80092b6:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80092ba:	2600      	movs	r6, #0
 80092bc:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80092c0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80092c4:	b133      	cbz	r3, 80092d4 <_ZN8touchgfx3HAL4tickEv+0x48>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4620      	mov	r0, r4
 80092ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80092ce:	4798      	blx	r3
 80092d0:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80092d4:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80092d8:	6862      	ldr	r2, [r4, #4]
 80092da:	f083 0301 	eor.w	r3, r3, #1
 80092de:	7253      	strb	r3, [r2, #9]
 80092e0:	2601      	movs	r6, #1
 80092e2:	702e      	strb	r6, [r5, #0]
 80092e4:	f003 fd10 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 80092e8:	6803      	ldr	r3, [r0, #0]
 80092ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ec:	4798      	blx	r3
 80092ee:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80092f2:	b90b      	cbnz	r3, 80092f8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 80092f4:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80092f8:	f003 fd06 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 80092fc:	6803      	ldr	r3, [r0, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	4798      	blx	r3
 8009302:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009304:	6803      	ldr	r3, [r0, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	4798      	blx	r3
 800930a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800930e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8009312:	3b01      	subs	r3, #1
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800931a:	b10a      	cbz	r2, 8009320 <_ZN8touchgfx3HAL4tickEv+0x94>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1eb      	bne.n	80092f8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8009320:	4a3f      	ldr	r2, [pc, #252]	@ (8009420 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8009322:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8009326:	7813      	ldrb	r3, [r2, #0]
 8009328:	3301      	adds	r3, #1
 800932a:	b25b      	sxtb	r3, r3
 800932c:	4299      	cmp	r1, r3
 800932e:	7013      	strb	r3, [r2, #0]
 8009330:	dc10      	bgt.n	8009354 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8009332:	68e0      	ldr	r0, [r4, #12]
 8009334:	2300      	movs	r3, #0
 8009336:	7013      	strb	r3, [r2, #0]
 8009338:	6803      	ldr	r3, [r0, #0]
 800933a:	aa03      	add	r2, sp, #12
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	a902      	add	r1, sp, #8
 8009340:	4798      	blx	r3
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	2800      	cmp	r0, #0
 8009346:	d059      	beq.n	80093fc <_ZN8touchgfx3HAL4tickEv+0x170>
 8009348:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800934c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009350:	4620      	mov	r0, r4
 8009352:	4798      	blx	r3
 8009354:	6960      	ldr	r0, [r4, #20]
 8009356:	2300      	movs	r3, #0
 8009358:	f88d 3007 	strb.w	r3, [sp, #7]
 800935c:	b158      	cbz	r0, 8009376 <_ZN8touchgfx3HAL4tickEv+0xea>
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	f10d 0107 	add.w	r1, sp, #7
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	4798      	blx	r3
 8009368:	b128      	cbz	r0, 8009376 <_ZN8touchgfx3HAL4tickEv+0xea>
 800936a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800936c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009370:	6803      	ldr	r3, [r0, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	4798      	blx	r3
 8009376:	f104 001c 	add.w	r0, r4, #28
 800937a:	f00a f917 	bl	80135ac <_ZN8touchgfx8Gestures4tickEv>
 800937e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8009382:	b30b      	cbz	r3, 80093c8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8009384:	6920      	ldr	r0, [r4, #16]
 8009386:	6803      	ldr	r3, [r0, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	4798      	blx	r3
 800938c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800938e:	4606      	mov	r6, r0
 8009390:	b903      	cbnz	r3, 8009394 <_ZN8touchgfx3HAL4tickEv+0x108>
 8009392:	6760      	str	r0, [r4, #116]	@ 0x74
 8009394:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009396:	4a23      	ldr	r2, [pc, #140]	@ (8009424 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8009398:	1af3      	subs	r3, r6, r3
 800939a:	4293      	cmp	r3, r2
 800939c:	d914      	bls.n	80093c8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800939e:	6920      	ldr	r0, [r4, #16]
 80093a0:	6803      	ldr	r3, [r0, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	4798      	blx	r3
 80093a6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80093a8:	2264      	movs	r2, #100	@ 0x64
 80093aa:	1af3      	subs	r3, r6, r3
 80093ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80093b4:	2800      	cmp	r0, #0
 80093b6:	dc26      	bgt.n	8009406 <_ZN8touchgfx3HAL4tickEv+0x17a>
 80093b8:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80093bc:	6920      	ldr	r0, [r4, #16]
 80093be:	6803      	ldr	r3, [r0, #0]
 80093c0:	2100      	movs	r1, #0
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	4798      	blx	r3
 80093c6:	6766      	str	r6, [r4, #116]	@ 0x74
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	4620      	mov	r0, r4
 80093cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093d0:	4798      	blx	r3
 80093d2:	f003 fc99 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093da:	4798      	blx	r3
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	4620      	mov	r0, r4
 80093e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80093e4:	4798      	blx	r3
 80093e6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d002      	beq.n	80093f4 <_ZN8touchgfx3HAL4tickEv+0x168>
 80093ee:	2001      	movs	r0, #1
 80093f0:	f7f7 f9f4 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80093f4:	2300      	movs	r3, #0
 80093f6:	702b      	strb	r3, [r5, #0]
 80093f8:	b004      	add	sp, #16
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009400:	4620      	mov	r0, r4
 8009402:	4798      	blx	r3
 8009404:	e7a6      	b.n	8009354 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8009406:	2863      	cmp	r0, #99	@ 0x63
 8009408:	bfcb      	itete	gt
 800940a:	2300      	movgt	r3, #0
 800940c:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8009410:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8009414:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8009418:	e7d0      	b.n	80093bc <_ZN8touchgfx3HAL4tickEv+0x130>
 800941a:	bf00      	nop
 800941c:	200125e4 	.word	0x200125e4
 8009420:	200125e5 	.word	0x200125e5
 8009424:	05f5e100 	.word	0x05f5e100

08009428 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	f7f7 fb58 	bl	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8009430:	6863      	ldr	r3, [r4, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	729a      	strb	r2, [r3, #10]
 8009436:	bd10      	pop	{r4, pc}

08009438 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8009438:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800943a:	301c      	adds	r0, #28
 800943c:	f00a b8b4 	b.w	80135a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08009440 <_ZN8touchgfx3HAL5touchEll>:
 8009440:	b530      	push	{r4, r5, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	4604      	mov	r4, r0
 8009446:	a804      	add	r0, sp, #16
 8009448:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800944c:	f003 fa44 	bl	800c8d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8009450:	9b04      	ldr	r3, [sp, #16]
 8009452:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009456:	a906      	add	r1, sp, #24
 8009458:	9b05      	ldr	r3, [sp, #20]
 800945a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800945e:	a803      	add	r0, sp, #12
 8009460:	f003 fa8c 	bl	800c97c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8009464:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8009468:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800946c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009470:	f104 001c 	add.w	r0, r4, #28
 8009474:	b189      	cbz	r1, 800949a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8009476:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009480:	4613      	mov	r3, r2
 8009482:	462a      	mov	r2, r5
 8009484:	f00a f8a0 	bl	80135c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009488:	b128      	cbz	r0, 8009496 <_ZN8touchgfx3HAL5touchEll+0x56>
 800948a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800948e:	6623      	str	r3, [r4, #96]	@ 0x60
 8009490:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009494:	6663      	str	r3, [r4, #100]	@ 0x64
 8009496:	b007      	add	sp, #28
 8009498:	bd30      	pop	{r4, r5, pc}
 800949a:	f00a f8d5 	bl	8013648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800949e:	2301      	movs	r3, #1
 80094a0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80094a4:	e7f1      	b.n	800948a <_ZN8touchgfx3HAL5touchEll+0x4a>

080094a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80094a6:	b510      	push	{r4, lr}
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d046      	beq.n	800953a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80094ac:	ea81 0002 	eor.w	r0, r1, r2
 80094b0:	07c4      	lsls	r4, r0, #31
 80094b2:	d508      	bpl.n	80094c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80094b4:	440b      	add	r3, r1
 80094b6:	3a01      	subs	r2, #1
 80094b8:	428b      	cmp	r3, r1
 80094ba:	d93e      	bls.n	800953a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80094bc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80094c0:	f801 0b01 	strb.w	r0, [r1], #1
 80094c4:	e7f8      	b.n	80094b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80094c6:	07d0      	lsls	r0, r2, #31
 80094c8:	bf42      	ittt	mi
 80094ca:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80094ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80094d2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d911      	bls.n	80094fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80094da:	ea81 0402 	eor.w	r4, r1, r2
 80094de:	07a4      	lsls	r4, r4, #30
 80094e0:	4610      	mov	r0, r2
 80094e2:	d022      	beq.n	800952a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80094e4:	f023 0401 	bic.w	r4, r3, #1
 80094e8:	440c      	add	r4, r1
 80094ea:	428c      	cmp	r4, r1
 80094ec:	4602      	mov	r2, r0
 80094ee:	d904      	bls.n	80094fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80094f0:	8812      	ldrh	r2, [r2, #0]
 80094f2:	f821 2b02 	strh.w	r2, [r1], #2
 80094f6:	3002      	adds	r0, #2
 80094f8:	e7f7      	b.n	80094ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	f023 0003 	bic.w	r0, r3, #3
 8009502:	4408      	add	r0, r1
 8009504:	4288      	cmp	r0, r1
 8009506:	4614      	mov	r4, r2
 8009508:	d904      	bls.n	8009514 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800950a:	6824      	ldr	r4, [r4, #0]
 800950c:	f841 4b04 	str.w	r4, [r1], #4
 8009510:	3204      	adds	r2, #4
 8009512:	e7f7      	b.n	8009504 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	440b      	add	r3, r1
 800951a:	3a01      	subs	r2, #1
 800951c:	428b      	cmp	r3, r1
 800951e:	d90c      	bls.n	800953a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009520:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009524:	f801 0b01 	strb.w	r0, [r1], #1
 8009528:	e7f8      	b.n	800951c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800952a:	0790      	lsls	r0, r2, #30
 800952c:	d0e7      	beq.n	80094fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800952e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009532:	f821 0b02 	strh.w	r0, [r1], #2
 8009536:	3b02      	subs	r3, #2
 8009538:	e7e1      	b.n	80094fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800953a:	2001      	movs	r0, #1
 800953c:	bd10      	pop	{r4, pc}

0800953e <_ZN8touchgfx3HAL7noTouchEv>:
 800953e:	b510      	push	{r4, lr}
 8009540:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8009544:	4604      	mov	r4, r0
 8009546:	b153      	cbz	r3, 800955e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8009548:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800954c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009550:	2101      	movs	r1, #1
 8009552:	301c      	adds	r0, #28
 8009554:	f00a f878 	bl	8013648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009558:	2300      	movs	r3, #0
 800955a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800955e:	bd10      	pop	{r4, pc}

08009560 <_ZN8touchgfx3HAL3lcdEv>:
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009568:	b10a      	cbz	r2, 800956e <_ZN8touchgfx3HAL3lcdEv+0xe>
 800956a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800956c:	b900      	cbnz	r0, 8009570 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800956e:	6898      	ldr	r0, [r3, #8]
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	200125e0 	.word	0x200125e0

08009578 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800957c:	b085      	sub	sp, #20
 800957e:	ad04      	add	r5, sp, #16
 8009580:	4604      	mov	r4, r0
 8009582:	2000      	movs	r0, #0
 8009584:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009588:	69a0      	ldr	r0, [r4, #24]
 800958a:	6806      	ldr	r6, [r0, #0]
 800958c:	9501      	str	r5, [sp, #4]
 800958e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8009592:	9500      	str	r5, [sp, #0]
 8009594:	6835      	ldr	r5, [r6, #0]
 8009596:	4699      	mov	r9, r3
 8009598:	460f      	mov	r7, r1
 800959a:	4690      	mov	r8, r2
 800959c:	47a8      	blx	r5
 800959e:	4d10      	ldr	r5, [pc, #64]	@ (80095e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80095a0:	4606      	mov	r6, r0
 80095a2:	f8a5 9000 	strh.w	r9, [r5]
 80095a6:	f7ff ffdb 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 80095aa:	6803      	ldr	r3, [r0, #0]
 80095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ae:	4798      	blx	r3
 80095b0:	b128      	cbz	r0, 80095be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80095b2:	2801      	cmp	r0, #1
 80095b4:	d00b      	beq.n	80095ce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80095b6:	4630      	mov	r0, r6
 80095b8:	b005      	add	sp, #20
 80095ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095be:	882b      	ldrh	r3, [r5, #0]
 80095c0:	fb08 7203 	mla	r2, r8, r3, r7
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80095ca:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80095cc:	e7f3      	b.n	80095b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80095ce:	882a      	ldrh	r2, [r5, #0]
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	fb08 7202 	mla	r2, r8, r2, r7
 80095d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80095da:	1a9a      	subs	r2, r3, r2
 80095dc:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80095de:	e7ea      	b.n	80095b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80095e0:	200125da 	.word	0x200125da

080095e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	4b15      	ldr	r3, [pc, #84]	@ (800963c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 80095e8:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80095f0:	fb93 f4f4 	sdiv	r4, r3, r4
 80095f4:	460f      	mov	r7, r1
 80095f6:	4606      	mov	r6, r0
 80095f8:	f7ff ffb2 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 80095fc:	6803      	ldr	r3, [r0, #0]
 80095fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009600:	4798      	blx	r3
 8009602:	2801      	cmp	r0, #1
 8009604:	d00b      	beq.n	800961e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 8009606:	d303      	bcc.n	8009610 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8009608:	2802      	cmp	r0, #2
 800960a:	d010      	beq.n	800962e <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800960c:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009610:	4b0b      	ldr	r3, [pc, #44]	@ (8009640 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8009612:	8819      	ldrh	r1, [r3, #0]
 8009614:	437c      	muls	r4, r7
 8009616:	434c      	muls	r4, r1
 8009618:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800961c:	e7f6      	b.n	800960c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800961e:	4b08      	ldr	r3, [pc, #32]	@ (8009640 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8009620:	8819      	ldrh	r1, [r3, #0]
 8009622:	437c      	muls	r4, r7
 8009624:	434c      	muls	r4, r1
 8009626:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800962a:	1b2d      	subs	r5, r5, r4
 800962c:	e7ee      	b.n	800960c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800962e:	4b04      	ldr	r3, [pc, #16]	@ (8009640 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8009630:	8819      	ldrh	r1, [r3, #0]
 8009632:	437c      	muls	r4, r7
 8009634:	434c      	muls	r4, r1
 8009636:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800963a:	e7e7      	b.n	800960c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800963c:	200125dc 	.word	0x200125dc
 8009640:	200125da 	.word	0x200125da

08009644 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	b08b      	sub	sp, #44	@ 0x2c
 8009648:	4617      	mov	r7, r2
 800964a:	4604      	mov	r4, r0
 800964c:	460e      	mov	r6, r1
 800964e:	461d      	mov	r5, r3
 8009650:	f7ff ff86 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	4798      	blx	r3
 800965a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800965e:	9007      	str	r0, [sp, #28]
 8009660:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009664:	4b0d      	ldr	r3, [pc, #52]	@ (800969c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009682:	9302      	str	r3, [sp, #8]
 8009684:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009688:	e9cd 5300 	strd	r5, r3, [sp]
 800968c:	4631      	mov	r1, r6
 800968e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8009690:	463b      	mov	r3, r7
 8009692:	2200      	movs	r2, #0
 8009694:	4620      	mov	r0, r4
 8009696:	47a8      	blx	r5
 8009698:	b00b      	add	sp, #44	@ 0x2c
 800969a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800969c:	200125da 	.word	0x200125da

080096a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80096a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096a4:	4698      	mov	r8, r3
 80096a6:	6803      	ldr	r3, [r0, #0]
 80096a8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80096aa:	4b15      	ldr	r3, [pc, #84]	@ (8009700 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80096ac:	b08b      	sub	sp, #44	@ 0x2c
 80096ae:	4617      	mov	r7, r2
 80096b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80096b4:	460e      	mov	r6, r1
 80096b6:	4604      	mov	r4, r0
 80096b8:	f7ff ff52 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c0:	4798      	blx	r3
 80096c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80096c6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80096ca:	2302      	movs	r3, #2
 80096cc:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80096d0:	2301      	movs	r3, #1
 80096d2:	9305      	str	r3, [sp, #20]
 80096d4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80096de:	9303      	str	r3, [sp, #12]
 80096e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80096e4:	9302      	str	r3, [sp, #8]
 80096e6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80096ea:	2200      	movs	r2, #0
 80096ec:	e9cd 8300 	strd	r8, r3, [sp]
 80096f0:	4631      	mov	r1, r6
 80096f2:	463b      	mov	r3, r7
 80096f4:	4620      	mov	r0, r4
 80096f6:	47a8      	blx	r5
 80096f8:	b00b      	add	sp, #44	@ 0x2c
 80096fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096fe:	bf00      	nop
 8009700:	200125da 	.word	0x200125da

08009704 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8009704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009708:	4698      	mov	r8, r3
 800970a:	6803      	ldr	r3, [r0, #0]
 800970c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800970e:	4b11      	ldr	r3, [pc, #68]	@ (8009754 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8009710:	b087      	sub	sp, #28
 8009712:	f8b3 9000 	ldrh.w	r9, [r3]
 8009716:	460e      	mov	r6, r1
 8009718:	4617      	mov	r7, r2
 800971a:	4604      	mov	r4, r0
 800971c:	f7ff ff20 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009720:	6803      	ldr	r3, [r0, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	4798      	blx	r3
 8009726:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800972a:	f8cd 900c 	str.w	r9, [sp, #12]
 800972e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8009732:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8009736:	9302      	str	r3, [sp, #8]
 8009738:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	463a      	mov	r2, r7
 8009746:	4643      	mov	r3, r8
 8009748:	4631      	mov	r1, r6
 800974a:	4620      	mov	r0, r4
 800974c:	47a8      	blx	r5
 800974e:	b007      	add	sp, #28
 8009750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009754:	200125da 	.word	0x200125da

08009758 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	4604      	mov	r4, r0
 800975e:	b08f      	sub	sp, #60	@ 0x3c
 8009760:	4610      	mov	r0, r2
 8009762:	460d      	mov	r5, r1
 8009764:	4691      	mov	r9, r2
 8009766:	461e      	mov	r6, r3
 8009768:	f007 f88c 	bl	8010884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f000 809d 	beq.w	80098ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8009914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800977e:	4f61      	ldr	r7, [pc, #388]	@ (8009904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009780:	4620      	mov	r0, r4
 8009782:	4798      	blx	r3
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	4620      	mov	r0, r4
 8009788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978a:	4798      	blx	r3
 800978c:	f8bb 3000 	ldrh.w	r3, [fp]
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8009796:	f8ba 3000 	ldrh.w	r3, [sl]
 800979a:	9302      	str	r3, [sp, #8]
 800979c:	883b      	ldrh	r3, [r7, #0]
 800979e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	4b58      	ldr	r3, [pc, #352]	@ (8009908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	881a      	ldrh	r2, [r3, #0]
 80097aa:	9204      	str	r2, [sp, #16]
 80097ac:	4640      	mov	r0, r8
 80097ae:	f007 f8fd 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80097b2:	8038      	strh	r0, [r7, #0]
 80097b4:	4640      	mov	r0, r8
 80097b6:	f007 f92d 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	b280      	uxth	r0, r0
 80097be:	8018      	strh	r0, [r3, #0]
 80097c0:	4b52      	ldr	r3, [pc, #328]	@ (800990c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d174      	bne.n	80098b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80097c8:	883b      	ldrh	r3, [r7, #0]
 80097ca:	f8ab 3000 	strh.w	r3, [fp]
 80097ce:	f8aa 0000 	strh.w	r0, [sl]
 80097d2:	4648      	mov	r0, r9
 80097d4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80097d8:	f007 f854 	bl	8010884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80097dc:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80097e0:	2200      	movs	r2, #0
 80097e2:	4611      	mov	r1, r2
 80097e4:	4628      	mov	r0, r5
 80097e6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80097ea:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80097ee:	f7f9 f932 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 80097f2:	2301      	movs	r3, #1
 80097f4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80097f8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80097fc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd5c      	ble.n	80098be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009804:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009808:	2b00      	cmp	r3, #0
 800980a:	dd58      	ble.n	80098be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800980c:	462a      	mov	r2, r5
 800980e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009810:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009814:	6851      	ldr	r1, [r2, #4]
 8009816:	c303      	stmia	r3!, {r0, r1}
 8009818:	4631      	mov	r1, r6
 800981a:	a80a      	add	r0, sp, #40	@ 0x28
 800981c:	f7ff fbbc 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 8009820:	4b38      	ldr	r3, [pc, #224]	@ (8009904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009822:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009826:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800982a:	2100      	movs	r1, #0
 800982c:	aa0a      	add	r2, sp, #40	@ 0x28
 800982e:	4b36      	ldr	r3, [pc, #216]	@ (8009908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009830:	910c      	str	r1, [sp, #48]	@ 0x30
 8009832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800983a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800983e:	ab08      	add	r3, sp, #32
 8009840:	e883 0003 	stmia.w	r3, {r0, r1}
 8009844:	4618      	mov	r0, r3
 8009846:	a90c      	add	r1, sp, #48	@ 0x30
 8009848:	f7ff fba6 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800984c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d13c      	bne.n	80098cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8009852:	2000      	movs	r0, #0
 8009854:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8009858:	2600      	movs	r6, #0
 800985a:	682a      	ldr	r2, [r5, #0]
 800985c:	696b      	ldr	r3, [r5, #20]
 800985e:	616e      	str	r6, [r5, #20]
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	6892      	ldr	r2, [r2, #8]
 8009864:	a908      	add	r1, sp, #32
 8009866:	4628      	mov	r0, r5
 8009868:	4790      	blx	r2
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	616b      	str	r3, [r5, #20]
 800986e:	4652      	mov	r2, sl
 8009870:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8009874:	4649      	mov	r1, r9
 8009876:	4628      	mov	r0, r5
 8009878:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800987c:	f7f9 f8eb 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 8009880:	4b23      	ldr	r3, [pc, #140]	@ (8009910 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	801a      	strh	r2, [r3, #0]
 8009886:	4b23      	ldr	r3, [pc, #140]	@ (8009914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8009888:	9a02      	ldr	r2, [sp, #8]
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	4b1d      	ldr	r3, [pc, #116]	@ (8009904 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800988e:	9a03      	ldr	r2, [sp, #12]
 8009890:	801a      	strh	r2, [r3, #0]
 8009892:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009894:	9a04      	ldr	r2, [sp, #16]
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	4620      	mov	r0, r4
 80098a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a2:	4798      	blx	r3
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	4620      	mov	r0, r4
 80098a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098aa:	4798      	blx	r3
 80098ac:	b00f      	add	sp, #60	@ 0x3c
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	883b      	ldrh	r3, [r7, #0]
 80098b4:	f8ab 0000 	strh.w	r0, [fp]
 80098b8:	f8aa 3000 	strh.w	r3, [sl]
 80098bc:	e789      	b.n	80097d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80098be:	462a      	mov	r2, r5
 80098c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80098c2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80098c6:	6851      	ldr	r1, [r2, #4]
 80098c8:	c303      	stmia	r3!, {r0, r1}
 80098ca:	e7a9      	b.n	8009820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80098cc:	a807      	add	r0, sp, #28
 80098ce:	f007 f9e3 	bl	8010c98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80098d2:	4606      	mov	r6, r0
 80098d4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80098d6:	6803      	ldr	r3, [r0, #0]
 80098d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098da:	4798      	blx	r3
 80098dc:	4286      	cmp	r6, r0
 80098de:	d1b8      	bne.n	8009852 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80098e0:	f7ff fe3e 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 80098e4:	6803      	ldr	r3, [r0, #0]
 80098e6:	4606      	mov	r6, r0
 80098e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	a807      	add	r0, sp, #28
 80098ee:	f007 f9d3 	bl	8010c98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	4601      	mov	r1, r0
 80098f6:	4630      	mov	r0, r6
 80098f8:	4798      	blx	r3
 80098fa:	f080 0001 	eor.w	r0, r0, #1
 80098fe:	b2c0      	uxtb	r0, r0
 8009900:	e7a8      	b.n	8009854 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8009902:	bf00      	nop
 8009904:	200125d4 	.word	0x200125d4
 8009908:	200125d6 	.word	0x200125d6
 800990c:	200125d8 	.word	0x200125d8
 8009910:	200125da 	.word	0x200125da
 8009914:	200125dc 	.word	0x200125dc

08009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8009918:	b510      	push	{r4, lr}
 800991a:	4b07      	ldr	r3, [pc, #28]	@ (8009938 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4604      	mov	r4, r0
 8009920:	b13b      	cbz	r3, 8009932 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009926:	4798      	blx	r3
 8009928:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800992a:	4283      	cmp	r3, r0
 800992c:	d101      	bne.n	8009932 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800992e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009930:	bd10      	pop	{r4, pc}
 8009932:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009934:	e7fc      	b.n	8009930 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8009936:	bf00      	nop
 8009938:	200125de 	.word	0x200125de

0800993c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	b08a      	sub	sp, #40	@ 0x28
 8009942:	461d      	mov	r5, r3
 8009944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009948:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800994c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009950:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009954:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009958:	f8ad 301a 	strh.w	r3, [sp, #26]
 800995c:	2400      	movs	r4, #0
 800995e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009962:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8009966:	f8ad 301c 	strh.w	r3, [sp, #28]
 800996a:	4690      	mov	r8, r2
 800996c:	4607      	mov	r7, r0
 800996e:	9404      	str	r4, [sp, #16]
 8009970:	f88d 4020 	strb.w	r4, [sp, #32]
 8009974:	f7ff ffd0 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009978:	fb06 8505 	mla	r5, r6, r5, r8
 800997c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	9505      	str	r5, [sp, #20]
 8009984:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009988:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800998c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8009990:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009994:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009998:	6803      	ldr	r3, [r0, #0]
 800999a:	a901      	add	r1, sp, #4
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	4798      	blx	r3
 80099a0:	b00a      	add	sp, #40	@ 0x28
 80099a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099a6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80099a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099aa:	b08b      	sub	sp, #44	@ 0x2c
 80099ac:	2400      	movs	r4, #0
 80099ae:	461d      	mov	r5, r3
 80099b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099b4:	4688      	mov	r8, r1
 80099b6:	4691      	mov	r9, r2
 80099b8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80099bc:	9404      	str	r4, [sp, #16]
 80099be:	4607      	mov	r7, r0
 80099c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099c4:	f7ff ffa8 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80099c8:	fb06 9505 	mla	r5, r6, r5, r9
 80099cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80099d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80099d4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80099d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	9505      	str	r5, [sp, #20]
 80099e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80099e4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80099e8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80099ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80099f0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80099f4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80099f8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80099fc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009a00:	6803      	ldr	r3, [r0, #0]
 8009a02:	a901      	add	r1, sp, #4
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	4798      	blx	r3
 8009a08:	b00b      	add	sp, #44	@ 0x2c
 8009a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009a10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	b08a      	sub	sp, #40	@ 0x28
 8009a16:	4698      	mov	r8, r3
 8009a18:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009a1c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009a20:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8009a24:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2d0b      	cmp	r5, #11
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8009a34:	d138      	bne.n	8009aa8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8009a36:	2380      	movs	r3, #128	@ 0x80
 8009a38:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009a3c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009a40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009a44:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009a48:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009a4c:	f88d 0020 	strb.w	r0, [sp, #32]
 8009a50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009a54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	9203      	str	r2, [sp, #12]
 8009a5c:	f7ff ff5c 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009a60:	2c0b      	cmp	r4, #11
 8009a62:	bf98      	it	ls
 8009a64:	4b1b      	ldrls	r3, [pc, #108]	@ (8009ad4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8009a66:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009a6a:	bf98      	it	ls
 8009a6c:	5d19      	ldrbls	r1, [r3, r4]
 8009a6e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8009a72:	bf88      	it	hi
 8009a74:	2100      	movhi	r1, #0
 8009a76:	fb02 8307 	mla	r3, r2, r7, r8
 8009a7a:	10c9      	asrs	r1, r1, #3
 8009a7c:	fb01 0003 	mla	r0, r1, r3, r0
 8009a80:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8009a84:	9005      	str	r0, [sp, #20]
 8009a86:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009a8a:	6870      	ldr	r0, [r6, #4]
 8009a8c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8009a90:	2300      	movs	r3, #0
 8009a92:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009a96:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009a9a:	6803      	ldr	r3, [r0, #0]
 8009a9c:	a901      	add	r1, sp, #4
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4798      	blx	r3
 8009aa2:	b00a      	add	sp, #40	@ 0x28
 8009aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa8:	2d02      	cmp	r5, #2
 8009aaa:	d109      	bne.n	8009ac0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8009aac:	28ff      	cmp	r0, #255	@ 0xff
 8009aae:	d105      	bne.n	8009abc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8009ab0:	f1bc 0f00 	cmp.w	ip, #0
 8009ab4:	bf14      	ite	ne
 8009ab6:	2340      	movne	r3, #64	@ 0x40
 8009ab8:	2320      	moveq	r3, #32
 8009aba:	e7bd      	b.n	8009a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009abc:	2340      	movs	r3, #64	@ 0x40
 8009abe:	e7bb      	b.n	8009a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ac0:	28ff      	cmp	r0, #255	@ 0xff
 8009ac2:	d105      	bne.n	8009ad0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009ac4:	f1bc 0f00 	cmp.w	ip, #0
 8009ac8:	bf14      	ite	ne
 8009aca:	2304      	movne	r3, #4
 8009acc:	2301      	moveq	r3, #1
 8009ace:	e7b3      	b.n	8009a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	e7b1      	b.n	8009a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ad4:	08015d70 	.word	0x08015d70

08009ad8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	b08b      	sub	sp, #44	@ 0x2c
 8009ade:	461d      	mov	r5, r3
 8009ae0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009ae4:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8009ae8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8009aec:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009af0:	bf14      	ite	ne
 8009af2:	2308      	movne	r3, #8
 8009af4:	2302      	moveq	r3, #2
 8009af6:	2400      	movs	r4, #0
 8009af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009afc:	4688      	mov	r8, r1
 8009afe:	4693      	mov	fp, r2
 8009b00:	9404      	str	r4, [sp, #16]
 8009b02:	4607      	mov	r7, r0
 8009b04:	f7ff ff08 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009b08:	2e0b      	cmp	r6, #11
 8009b0a:	bf98      	it	ls
 8009b0c:	4b15      	ldrls	r3, [pc, #84]	@ (8009b64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8009b0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8009b12:	bf98      	it	ls
 8009b14:	5d9c      	ldrbls	r4, [r3, r6]
 8009b16:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009b1e:	fb05 b50a 	mla	r5, r5, sl, fp
 8009b22:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009b26:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009b2a:	10e4      	asrs	r4, r4, #3
 8009b2c:	fb04 0405 	mla	r4, r4, r5, r0
 8009b30:	2300      	movs	r3, #0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	9405      	str	r4, [sp, #20]
 8009b36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009b3a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8009b3e:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b42:	f88d 9020 	strb.w	r9, [sp, #32]
 8009b46:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8009b4a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009b4e:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009b52:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8009b56:	6803      	ldr	r3, [r0, #0]
 8009b58:	a901      	add	r1, sp, #4
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4798      	blx	r3
 8009b5e:	b00b      	add	sp, #44	@ 0x2c
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	08015d70 	.word	0x08015d70

08009b68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	461e      	mov	r6, r3
 8009b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8009b70:	460f      	mov	r7, r1
 8009b72:	881d      	ldrh	r5, [r3, #0]
 8009b74:	4690      	mov	r8, r2
 8009b76:	f7ff fcf3 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009b7a:	6803      	ldr	r3, [r0, #0]
 8009b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7e:	4798      	blx	r3
 8009b80:	280b      	cmp	r0, #11
 8009b82:	bf9a      	itte	ls
 8009b84:	4b05      	ldrls	r3, [pc, #20]	@ (8009b9c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8009b86:	5c1c      	ldrbls	r4, [r3, r0]
 8009b88:	2400      	movhi	r4, #0
 8009b8a:	fb08 7005 	mla	r0, r8, r5, r7
 8009b8e:	10e4      	asrs	r4, r4, #3
 8009b90:	fb04 6000 	mla	r0, r4, r0, r6
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	200125da 	.word	0x200125da
 8009b9c:	08015d70 	.word	0x08015d70

08009ba0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8009ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ba2:	b08b      	sub	sp, #44	@ 0x2c
 8009ba4:	461f      	mov	r7, r3
 8009ba6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009baa:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009bae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009bb2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009bb6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009bba:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009bbe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009bc2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009bcc:	f88d 3020 	strb.w	r3, [sp, #32]
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	4616      	mov	r6, r2
 8009bd4:	9504      	str	r5, [sp, #16]
 8009bd6:	f7ff fe9f 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4603      	mov	r3, r0
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff ffc1 	bl	8009b68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009be6:	4b0e      	ldr	r3, [pc, #56]	@ (8009c20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009be8:	9005      	str	r0, [sp, #20]
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009bf0:	f7ff fcb6 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009bf4:	6803      	ldr	r3, [r0, #0]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf8:	4798      	blx	r3
 8009bfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bfc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8009c00:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	6860      	ldr	r0, [r4, #4]
 8009c08:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009c0c:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009c10:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8009c14:	6803      	ldr	r3, [r0, #0]
 8009c16:	a901      	add	r1, sp, #4
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	4798      	blx	r3
 8009c1c:	b00b      	add	sp, #44	@ 0x2c
 8009c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c20:	200125da 	.word	0x200125da

08009c24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c26:	b08d      	sub	sp, #52	@ 0x34
 8009c28:	466b      	mov	r3, sp
 8009c2a:	e883 0006 	stmia.w	r3, {r1, r2}
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9306      	str	r3, [sp, #24]
 8009c32:	6803      	ldr	r3, [r0, #0]
 8009c34:	f8bd 6000 	ldrh.w	r6, [sp]
 8009c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c3a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8009c3e:	2501      	movs	r5, #1
 8009c40:	9503      	str	r5, [sp, #12]
 8009c42:	4604      	mov	r4, r0
 8009c44:	4798      	blx	r3
 8009c46:	463a      	mov	r2, r7
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f7ff ff8b 	bl	8009b68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009c52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c54:	9307      	str	r3, [sp, #28]
 8009c56:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009c5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c62:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8009c68:	9004      	str	r0, [sp, #16]
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009c70:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009c74:	f7ff fc74 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009c78:	6803      	ldr	r3, [r0, #0]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7c:	4798      	blx	r3
 8009c7e:	23ff      	movs	r3, #255	@ 0xff
 8009c80:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009c84:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009c88:	6860      	ldr	r0, [r4, #4]
 8009c8a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009c8e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009c92:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009c96:	6803      	ldr	r3, [r0, #0]
 8009c98:	a903      	add	r1, sp, #12
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	4798      	blx	r3
 8009c9e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009ca0:	b00d      	add	sp, #52	@ 0x34
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	200125da 	.word	0x200125da

08009ca8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	b08c      	sub	sp, #48	@ 0x30
 8009cae:	461e      	mov	r6, r3
 8009cb0:	466d      	mov	r5, sp
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e885 0006 	stmia.w	r5, {r1, r2}
 8009cb8:	9306      	str	r3, [sp, #24]
 8009cba:	6803      	ldr	r3, [r0, #0]
 8009cbc:	f8bd 7000 	ldrh.w	r7, [sp]
 8009cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cc2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8009cc6:	2501      	movs	r5, #1
 8009cc8:	9503      	str	r5, [sp, #12]
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4798      	blx	r3
 8009cce:	4642      	mov	r2, r8
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7ff ff47 	bl	8009b68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009cda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009cde:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009ce2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ce6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009cea:	4b11      	ldr	r3, [pc, #68]	@ (8009d30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009cec:	9004      	str	r0, [sp, #16]
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009cf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cf6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009cfa:	9607      	str	r6, [sp, #28]
 8009cfc:	f7ff fc30 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8009d00:	6803      	ldr	r3, [r0, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	4798      	blx	r3
 8009d06:	23ff      	movs	r3, #255	@ 0xff
 8009d08:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009d0c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009d10:	6860      	ldr	r0, [r4, #4]
 8009d12:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009d16:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009d1a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009d1e:	6803      	ldr	r3, [r0, #0]
 8009d20:	a903      	add	r1, sp, #12
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	4798      	blx	r3
 8009d26:	4630      	mov	r0, r6
 8009d28:	b00c      	add	sp, #48	@ 0x30
 8009d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2e:	bf00      	nop
 8009d30:	200125da 	.word	0x200125da

08009d34 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8009d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d36:	b085      	sub	sp, #20
 8009d38:	ac02      	add	r4, sp, #8
 8009d3a:	e884 0006 	stmia.w	r4, {r1, r2}
 8009d3e:	4605      	mov	r5, r0
 8009d40:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8009d44:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8009d48:	f7ff fde6 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d4c:	463a      	mov	r2, r7
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4631      	mov	r1, r6
 8009d52:	4628      	mov	r0, r5
 8009d54:	f7ff ff08 	bl	8009b68 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009d58:	4a05      	ldr	r2, [pc, #20]	@ (8009d70 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	8812      	ldrh	r2, [r2, #0]
 8009d5e:	9200      	str	r2, [sp, #0]
 8009d60:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8009d62:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009d66:	4603      	mov	r3, r0
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	b005      	add	sp, #20
 8009d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d70:	200125da 	.word	0x200125da

08009d74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	b19b      	cbz	r3, 8009da6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8009d7e:	2002      	movs	r0, #2
 8009d80:	f7f6 fd56 	bl	8000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009d8a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4620      	mov	r0, r4
 8009d92:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8009d96:	f7ff fdbf 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	4601      	mov	r1, r0
 8009d9e:	4620      	mov	r0, r4
 8009da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009da4:	4718      	bx	r3
 8009da6:	bd70      	pop	{r4, r5, r6, pc}

08009da8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009dae:	428b      	cmp	r3, r1
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	d006      	beq.n	8009dc4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8009db6:	6803      	ldr	r3, [r0, #0]
 8009db8:	b929      	cbnz	r1, 8009dc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8009dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009dbe:	4798      	blx	r3
 8009dc0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009dca:	e7f8      	b.n	8009dbe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009dcc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	4b0c      	ldr	r3, [pc, #48]	@ (8009e00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	b953      	cbnz	r3, 8009dec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8009dd6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8009dda:	b93b      	cbnz	r3, 8009dec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8009ddc:	6840      	ldr	r0, [r0, #4]
 8009dde:	f000 f911 	bl	800a004 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009de2:	b118      	cbz	r0, 8009dec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8009de4:	6862      	ldr	r2, [r4, #4]
 8009de6:	7a53      	ldrb	r3, [r2, #9]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0fc      	beq.n	8009de6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8009dec:	f7f6 fe70 	bl	8000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009df0:	4620      	mov	r0, r4
 8009df2:	2100      	movs	r1, #0
 8009df4:	f7ff ffd8 	bl	8009da8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff fd8d 	bl	8009918 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	200125de 	.word	0x200125de

08009e04 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8009e04:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8009e08:	1a13      	subs	r3, r2, r0
 8009e0a:	4258      	negs	r0, r3
 8009e0c:	4158      	adcs	r0, r3
 8009e0e:	4770      	bx	lr

08009e10 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009e10:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfdc      	itt	le
 8009e1a:	6882      	ldrle	r2, [r0, #8]
 8009e1c:	189b      	addle	r3, r3, r2
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	bfcc      	ite	gt
 8009e22:	2000      	movgt	r0, #0
 8009e24:	2001      	movle	r0, #1
 8009e26:	4770      	bx	lr

08009e28 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8009e28:	6902      	ldr	r2, [r0, #16]
 8009e2a:	6843      	ldr	r3, [r0, #4]
 8009e2c:	2024      	movs	r0, #36	@ 0x24
 8009e2e:	fb00 3002 	mla	r0, r0, r2, r3
 8009e32:	4770      	bx	lr

08009e34 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8009e34:	6803      	ldr	r3, [r0, #0]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4718      	bx	r3

08009e3a <_ZN8touchgfx13DMA_Interface7executeEv>:
 8009e3a:	b570      	push	{r4, r5, r6, lr}
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	7203      	strb	r3, [r0, #8]
 8009e40:	4604      	mov	r4, r0
 8009e42:	6840      	ldr	r0, [r0, #4]
 8009e44:	6803      	ldr	r3, [r0, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	4798      	blx	r3
 8009e4a:	6803      	ldr	r3, [r0, #0]
 8009e4c:	2b40      	cmp	r3, #64	@ 0x40
 8009e4e:	4605      	mov	r5, r0
 8009e50:	d00c      	beq.n	8009e6c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009e52:	d810      	bhi.n	8009e76 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d01d      	beq.n	8009e94 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009e58:	d804      	bhi.n	8009e64 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d006      	beq.n	8009e6c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d02c      	beq.n	8009ebc <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	2b08      	cmp	r3, #8
 8009e66:	d01d      	beq.n	8009ea4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	d1fa      	bne.n	8009e62 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e72:	4798      	blx	r3
 8009e74:	e013      	b.n	8009e9e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e7a:	d0f7      	beq.n	8009e6c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009e7c:	d804      	bhi.n	8009e88 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8009e7e:	2b80      	cmp	r3, #128	@ 0x80
 8009e80:	d0f4      	beq.n	8009e6c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e86:	e7f0      	b.n	8009e6a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e8c:	d0ee      	beq.n	8009e6c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e92:	e7e5      	b.n	8009e60 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	7f01      	ldrb	r1, [r0, #28]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	4798      	blx	r3
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea2:	e006      	b.n	8009eb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	7f01      	ldrb	r1, [r0, #28]
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4798      	blx	r3
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eba:	4718      	bx	r3
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec2:	4798      	blx	r3
 8009ec4:	e7f3      	b.n	8009eae <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08009ec6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8009ec6:	4770      	bx	lr

08009ec8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009ec8:	4770      	bx	lr

08009eca <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8009eca:	4770      	bx	lr

08009ecc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009ecc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009ed0:	1ad2      	subs	r2, r2, r3
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	bfdc      	itt	le
 8009ed8:	6884      	ldrle	r4, [r0, #8]
 8009eda:	1912      	addle	r2, r2, r4
 8009edc:	2a01      	cmp	r2, #1
 8009ede:	dd16      	ble.n	8009f0e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009ee0:	6842      	ldr	r2, [r0, #4]
 8009ee2:	2424      	movs	r4, #36	@ 0x24
 8009ee4:	fb04 2303 	mla	r3, r4, r3, r2
 8009ee8:	f101 0220 	add.w	r2, r1, #32
 8009eec:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ef0:	f843 4b04 	str.w	r4, [r3], #4
 8009ef4:	4291      	cmp	r1, r2
 8009ef6:	d1f9      	bne.n	8009eec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8009ef8:	780a      	ldrb	r2, [r1, #0]
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	68c3      	ldr	r3, [r0, #12]
 8009efe:	6882      	ldr	r2, [r0, #8]
 8009f00:	f3bf 8f5b 	dmb	ish
 8009f04:	3301      	adds	r3, #1
 8009f06:	429a      	cmp	r2, r3
 8009f08:	bfd8      	it	le
 8009f0a:	1a9b      	suble	r3, r3, r2
 8009f0c:	60c3      	str	r3, [r0, #12]
 8009f0e:	bd10      	pop	{r4, pc}

08009f10 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009f10:	6903      	ldr	r3, [r0, #16]
 8009f12:	6882      	ldr	r2, [r0, #8]
 8009f14:	f3bf 8f5b 	dmb	ish
 8009f18:	3301      	adds	r3, #1
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	bfd8      	it	le
 8009f1e:	1a9b      	suble	r3, r3, r2
 8009f20:	6103      	str	r3, [r0, #16]
 8009f22:	4770      	bx	lr

08009f24 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4604      	mov	r4, r0
 8009f28:	460e      	mov	r6, r1
 8009f2a:	6860      	ldr	r0, [r4, #4]
 8009f2c:	6803      	ldr	r3, [r0, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4798      	blx	r3
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d1f9      	bne.n	8009f2a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8009f36:	4d0d      	ldr	r5, [pc, #52]	@ (8009f6c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8009f38:	6828      	ldr	r0, [r5, #0]
 8009f3a:	6803      	ldr	r3, [r0, #0]
 8009f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f40:	4798      	blx	r3
 8009f42:	f7f6 fdd3 	bl	8000aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8009f46:	6828      	ldr	r0, [r5, #0]
 8009f48:	2101      	movs	r1, #1
 8009f4a:	f7ff ff2d 	bl	8009da8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009f4e:	6860      	ldr	r0, [r4, #4]
 8009f50:	6803      	ldr	r3, [r0, #0]
 8009f52:	4631      	mov	r1, r6
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	4798      	blx	r3
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5e:	4798      	blx	r3
 8009f60:	6828      	ldr	r0, [r5, #0]
 8009f62:	6803      	ldr	r3, [r0, #0]
 8009f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f6a:	4718      	bx	r3
 8009f6c:	200125e0 	.word	0x200125e0

08009f70 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8009f70:	b508      	push	{r3, lr}
 8009f72:	f7f6 fdad 	bl	8000ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009f7a:	f7f6 bdb1 	b.w	8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08009f7e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	2114      	movs	r1, #20
 8009f82:	4604      	mov	r4, r0
 8009f84:	f009 fbe6 	bl	8013754 <_ZdlPvj>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <_ZN8touchgfx13DMA_Interface5startEv>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4604      	mov	r4, r0
 8009f90:	6840      	ldr	r0, [r0, #4]
 8009f92:	6803      	ldr	r3, [r0, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4798      	blx	r3
 8009f98:	b948      	cbnz	r0, 8009fae <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009f9a:	7a63      	ldrb	r3, [r4, #9]
 8009f9c:	b13b      	cbz	r3, 8009fae <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009f9e:	7a23      	ldrb	r3, [r4, #8]
 8009fa0:	b92b      	cbnz	r3, 8009fae <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fac:	4718      	bx	r3
 8009fae:	bd10      	pop	{r4, pc}

08009fb0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	6840      	ldr	r0, [r0, #4]
 8009fb6:	6803      	ldr	r3, [r0, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4798      	blx	r3
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b930      	cbnz	r0, 8009fce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009fc0:	7a23      	ldrb	r3, [r4, #8]
 8009fc2:	b123      	cbz	r3, 8009fce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009fc4:	6860      	ldr	r0, [r4, #4]
 8009fc6:	6803      	ldr	r3, [r0, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	4798      	blx	r3
 8009fcc:	7225      	strb	r5, [r4, #8]
 8009fce:	6860      	ldr	r0, [r4, #4]
 8009fd0:	6803      	ldr	r3, [r0, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4798      	blx	r3
 8009fd6:	b928      	cbnz	r0, 8009fe4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	4620      	mov	r0, r4
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fe2:	4718      	bx	r3
 8009fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fe8:	f7f6 bd88 	b.w	8000afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009fec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4c04      	ldr	r4, [pc, #16]	@ (800a000 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009ff0:	6082      	str	r2, [r0, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	e9c0 4100 	strd	r4, r1, [r0]
 8009ff8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	08015d84 	.word	0x08015d84

0800a004 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800a004:	6840      	ldr	r0, [r0, #4]
 800a006:	6803      	ldr	r3, [r0, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4718      	bx	r3

0800a00c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800a00c:	2000      	movs	r0, #0
 800a00e:	4770      	bx	lr

0800a010 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800a012:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	4293      	cmp	r3, r2
 800a018:	bf81      	itttt	hi
 800a01a:	4b06      	ldrhi	r3, [pc, #24]	@ (800a034 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800a01c:	681b      	ldrhi	r3, [r3, #0]
 800a01e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800a022:	7858      	ldrbhi	r0, [r3, #1]
 800a024:	bf8c      	ite	hi
 800a026:	f000 0003 	andhi.w	r0, r0, #3
 800a02a:	2000      	movls	r0, #0
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20012634 	.word	0x20012634
 800a034:	20012630 	.word	0x20012630

0800a038 <_ZN8touchgfx8TextAreaD1Ev>:
 800a038:	4770      	bx	lr
	...

0800a03c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800a03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800a042:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	428b      	cmp	r3, r1
 800a048:	4604      	mov	r4, r0
 800a04a:	d918      	bls.n	800a07e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800a050:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800a052:	6818      	ldr	r0, [r3, #0]
 800a054:	f7f9 fb94 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	4606      	mov	r6, r0
 800a05c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a05e:	4620      	mov	r0, r4
 800a060:	4798      	blx	r3
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	4607      	mov	r7, r0
 800a066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a06a:	4620      	mov	r0, r4
 800a06c:	4798      	blx	r3
 800a06e:	463a      	mov	r2, r7
 800a070:	4603      	mov	r3, r0
 800a072:	4631      	mov	r1, r6
 800a074:	4620      	mov	r0, r4
 800a076:	46ac      	mov	ip, r5
 800a078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07c:	4760      	bx	ip
 800a07e:	2000      	movs	r0, #0
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	20012634 	.word	0x20012634
 800a088:	2001263c 	.word	0x2001263c

0800a08c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800a08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a090:	4b17      	ldr	r3, [pc, #92]	@ (800a0f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800a092:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	428b      	cmp	r3, r1
 800a098:	4604      	mov	r4, r0
 800a09a:	d926      	bls.n	800a0ea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800a09c:	4b15      	ldr	r3, [pc, #84]	@ (800a0f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800a0a4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800a0a8:	4b13      	ldr	r3, [pc, #76]	@ (800a0f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800a0aa:	7855      	ldrb	r5, [r2, #1]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a0b2:	6833      	ldr	r3, [r6, #0]
 800a0b4:	69df      	ldr	r7, [r3, #28]
 800a0b6:	4b11      	ldr	r3, [pc, #68]	@ (800a0fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f7f9 fb61 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	4798      	blx	r3
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	4681      	mov	r9, r0
 800a0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4798      	blx	r3
 800a0d4:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a0d8:	9000      	str	r0, [sp, #0]
 800a0da:	464b      	mov	r3, r9
 800a0dc:	4642      	mov	r2, r8
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	47b8      	blx	r7
 800a0e4:	b003      	add	sp, #12
 800a0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e7fa      	b.n	800a0e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800a0ee:	bf00      	nop
 800a0f0:	20012634 	.word	0x20012634
 800a0f4:	20012630 	.word	0x20012630
 800a0f8:	20012638 	.word	0x20012638
 800a0fc:	2001263c 	.word	0x2001263c

0800a100 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800a100:	b40e      	push	{r1, r2, r3}
 800a102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a106:	4b2f      	ldr	r3, [pc, #188]	@ (800a1c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800a108:	881a      	ldrh	r2, [r3, #0]
 800a10a:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	b09d      	sub	sp, #116	@ 0x74
 800a110:	4604      	mov	r4, r0
 800a112:	d954      	bls.n	800a1be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800a114:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a1c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800a118:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800a1cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800a11c:	aa26      	add	r2, sp, #152	@ 0x98
 800a11e:	9202      	str	r2, [sp, #8]
 800a120:	f8d9 2000 	ldr.w	r2, [r9]
 800a124:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800a128:	f8d8 3000 	ldr.w	r3, [r8]
 800a12c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	4628      	mov	r0, r5
 800a134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a136:	4798      	blx	r3
 800a138:	b207      	sxth	r7, r0
 800a13a:	4606      	mov	r6, r0
 800a13c:	a803      	add	r0, sp, #12
 800a13e:	f004 fc26 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	4628      	mov	r0, r5
 800a146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a148:	4798      	blx	r3
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	4682      	mov	sl, r0
 800a14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a150:	4628      	mov	r0, r5
 800a152:	4798      	blx	r3
 800a154:	4653      	mov	r3, sl
 800a156:	9000      	str	r0, [sp, #0]
 800a158:	9a02      	ldr	r2, [sp, #8]
 800a15a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a15c:	a803      	add	r0, sp, #12
 800a15e:	f004 fc71 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a162:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a164:	f8d9 3000 	ldr.w	r3, [r9]
 800a168:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800a16c:	8925      	ldrh	r5, [r4, #8]
 800a16e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800a172:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800a176:	eba5 050c 	sub.w	r5, r5, ip
 800a17a:	784a      	ldrb	r2, [r1, #1]
 800a17c:	f8d8 3000 	ldr.w	r3, [r8]
 800a180:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800a184:	b22d      	sxth	r5, r5
 800a186:	9500      	str	r5, [sp, #0]
 800a188:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a18c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a190:	a803      	add	r0, sp, #12
 800a192:	f002 f90f 	bl	800c3b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800a196:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800a19a:	18b9      	adds	r1, r7, r2
 800a19c:	2900      	cmp	r1, #0
 800a19e:	b203      	sxth	r3, r0
 800a1a0:	dd0b      	ble.n	800a1ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	fb13 f302 	smulbb	r3, r3, r2
 800a1a8:	fb16 3300 	smlabb	r3, r6, r0, r3
 800a1ac:	b21f      	sxth	r7, r3
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	b01d      	add	sp, #116	@ 0x74
 800a1b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b6:	b003      	add	sp, #12
 800a1b8:	4770      	bx	lr
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dcf7      	bgt.n	800a1ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a1be:	2700      	movs	r7, #0
 800a1c0:	e7f5      	b.n	800a1ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a1c2:	bf00      	nop
 800a1c4:	20012634 	.word	0x20012634
 800a1c8:	20012630 	.word	0x20012630
 800a1cc:	20012638 	.word	0x20012638

0800a1d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	4bbc      	ldr	r3, [pc, #752]	@ (800a4c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	b0a9      	sub	sp, #164	@ 0xa4
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	d809      	bhi.n	800a1f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	e9c0 3200 	strd	r3, r2, [r0]
 800a1ee:	6083      	str	r3, [r0, #8]
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	b029      	add	sp, #164	@ 0xa4
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	4eb4      	ldr	r6, [pc, #720]	@ (800a4cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800a1fa:	6833      	ldr	r3, [r6, #0]
 800a1fc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800a200:	4bb3      	ldr	r3, [pc, #716]	@ (800a4d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a208:	4bb2      	ldr	r3, [pc, #712]	@ (800a4d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	f7f9 fab8 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	4681      	mov	r9, r0
 800a214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a216:	4628      	mov	r0, r5
 800a218:	4798      	blx	r3
 800a21a:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800a21c:	b203      	sxth	r3, r0
 800a21e:	4407      	add	r7, r0
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	b2bb      	uxth	r3, r7
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a22a:	4682      	mov	sl, r0
 800a22c:	a80f      	add	r0, sp, #60	@ 0x3c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f040 80a6 	bne.w	800a380 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800a234:	f004 fbab 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	4628      	mov	r0, r5
 800a23c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a23e:	4798      	blx	r3
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	4606      	mov	r6, r0
 800a244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a246:	4628      	mov	r0, r5
 800a248:	4798      	blx	r3
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	4607      	mov	r7, r0
 800a24e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a250:	4620      	mov	r0, r4
 800a252:	4798      	blx	r3
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	4683      	mov	fp, r0
 800a258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a25c:	4620      	mov	r0, r4
 800a25e:	4798      	blx	r3
 800a260:	463b      	mov	r3, r7
 800a262:	e9cd b000 	strd	fp, r0, [sp]
 800a266:	4649      	mov	r1, r9
 800a268:	4632      	mov	r2, r6
 800a26a:	a80f      	add	r0, sp, #60	@ 0x3c
 800a26c:	f004 fbff 	bl	800ea6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a270:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a274:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800a4cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800a278:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a27c:	f04f 0600 	mov.w	r6, #0
 800a280:	bf0c      	ite	eq
 800a282:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800a286:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800a28a:	4637      	mov	r7, r6
 800a28c:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a28e:	f8db 3000 	ldr.w	r3, [fp]
 800a292:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a296:	4629      	mov	r1, r5
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a29e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a2a2:	a80f      	add	r0, sp, #60	@ 0x3c
 800a2a4:	f001 f9a9 	bl	800b5fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	4286      	cmp	r6, r0
 800a2ac:	bfb8      	it	lt
 800a2ae:	4606      	movlt	r6, r0
 800a2b0:	3701      	adds	r7, #1
 800a2b2:	eba9 0903 	sub.w	r9, r9, r3
 800a2b6:	a80f      	add	r0, sp, #60	@ 0x3c
 800a2b8:	b236      	sxth	r6, r6
 800a2ba:	b2bf      	uxth	r7, r7
 800a2bc:	fa0f f989 	sxth.w	r9, r9
 800a2c0:	f004 fb8c 	bl	800e9dc <_ZN8touchgfx12TextProvider11endOfStringEv>
 800a2c4:	b918      	cbnz	r0, 800a2ce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a2c6:	7a2b      	ldrb	r3, [r5, #8]
 800a2c8:	444b      	add	r3, r9
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dcde      	bgt.n	800a28c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	9a04      	ldr	r2, [sp, #16]
 800a2d2:	f895 9009 	ldrb.w	r9, [r5, #9]
 800a2d6:	fb13 f707 	smulbb	r7, r3, r7
 800a2da:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800a2dc:	1aff      	subs	r7, r7, r3
 800a2de:	b2bf      	uxth	r7, r7
 800a2e0:	b23b      	sxth	r3, r7
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	bfa8      	it	ge
 800a2e6:	4657      	movge	r7, sl
 800a2e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a2ec:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	bf08      	it	eq
 800a2f4:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800a2f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2fa:	bf18      	it	ne
 800a2fc:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800a300:	4620      	mov	r0, r4
 800a302:	4798      	blx	r3
 800a304:	444f      	add	r7, r9
 800a306:	fa1f f987 	uxth.w	r9, r7
 800a30a:	2801      	cmp	r0, #1
 800a30c:	fa0f f789 	sxth.w	r7, r9
 800a310:	b2b3      	uxth	r3, r6
 800a312:	f000 80e1 	beq.w	800a4d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800a316:	2802      	cmp	r0, #2
 800a318:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800a31c:	f000 80e2 	beq.w	800a4e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800a320:	7aea      	ldrb	r2, [r5, #11]
 800a322:	7b2d      	ldrb	r5, [r5, #12]
 800a324:	b236      	sxth	r6, r6
 800a326:	1ab6      	subs	r6, r6, r2
 800a328:	442a      	add	r2, r5
 800a32a:	4413      	add	r3, r2
 800a32c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800a330:	fa1f fa86 	uxth.w	sl, r6
 800a334:	b29b      	uxth	r3, r3
 800a336:	2a02      	cmp	r2, #2
 800a338:	fa0f fb8a 	sxth.w	fp, sl
 800a33c:	b21e      	sxth	r6, r3
 800a33e:	f000 80d5 	beq.w	800a4ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800a342:	2a03      	cmp	r2, #3
 800a344:	f000 80dd 	beq.w	800a502 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800a348:	2a01      	cmp	r2, #1
 800a34a:	f040 80e5 	bne.w	800a518 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800a34e:	8925      	ldrh	r5, [r4, #8]
 800a350:	4633      	mov	r3, r6
 800a352:	eba5 0909 	sub.w	r9, r5, r9
 800a356:	463e      	mov	r6, r7
 800a358:	465d      	mov	r5, fp
 800a35a:	461f      	mov	r7, r3
 800a35c:	fa0f fb89 	sxth.w	fp, r9
 800a360:	4b5c      	ldr	r3, [pc, #368]	@ (800a4d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a362:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a364:	6818      	ldr	r0, [r3, #0]
 800a366:	f7f9 fa0b 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a36a:	f8a8 b000 	strh.w	fp, [r8]
 800a36e:	f8a8 5002 	strh.w	r5, [r8, #2]
 800a372:	f8a8 6004 	strh.w	r6, [r8, #4]
 800a376:	f8a8 7006 	strh.w	r7, [r8, #6]
 800a37a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a37e:	e737      	b.n	800a1f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800a380:	f004 fb05 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	4628      	mov	r0, r5
 800a388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a38a:	4798      	blx	r3
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	4607      	mov	r7, r0
 800a390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a392:	4628      	mov	r0, r5
 800a394:	4798      	blx	r3
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	4683      	mov	fp, r0
 800a39a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a39c:	4620      	mov	r0, r4
 800a39e:	4798      	blx	r3
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	9005      	str	r0, [sp, #20]
 800a3a4:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4790      	blx	r2
 800a3ac:	9b05      	ldr	r3, [sp, #20]
 800a3ae:	9001      	str	r0, [sp, #4]
 800a3b0:	463a      	mov	r2, r7
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	a80f      	add	r0, sp, #60	@ 0x3c
 800a3b8:	465b      	mov	r3, fp
 800a3ba:	f004 fb58 	bl	800ea6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a3be:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a3c2:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800a3c6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a3c8:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800a3cc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a3d0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a3d4:	bf0a      	itet	eq
 800a3d6:	464a      	moveq	r2, r9
 800a3d8:	461a      	movne	r2, r3
 800a3da:	4699      	moveq	r9, r3
 800a3dc:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800a3e0:	1ad2      	subs	r2, r2, r3
 800a3e2:	6833      	ldr	r3, [r6, #0]
 800a3e4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800a3e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a3ec:	af0f      	add	r7, sp, #60	@ 0x3c
 800a3ee:	7859      	ldrb	r1, [r3, #1]
 800a3f0:	9707      	str	r7, [sp, #28]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800a3f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a3fc:	f88d 1020 	strb.w	r1, [sp, #32]
 800a400:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a404:	9509      	str	r5, [sp, #36]	@ 0x24
 800a406:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a40a:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800a40e:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800a412:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800a416:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800a41a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800a41e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800a422:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a426:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a42a:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a42e:	b350      	cbz	r0, 800a486 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	4628      	mov	r0, r5
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	4798      	blx	r3
 800a438:	4607      	mov	r7, r0
 800a43a:	b320      	cbz	r0, 800a486 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a43c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a43e:	6803      	ldr	r3, [r0, #0]
 800a440:	4639      	mov	r1, r7
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4798      	blx	r3
 800a446:	4606      	mov	r6, r0
 800a448:	b1e8      	cbz	r0, 800a486 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a44a:	7b43      	ldrb	r3, [r0, #13]
 800a44c:	7a82      	ldrb	r2, [r0, #10]
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a454:	4313      	orrs	r3, r2
 800a456:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a45a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800a45e:	2b06      	cmp	r3, #6
 800a460:	d111      	bne.n	800a486 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a464:	6803      	ldr	r3, [r0, #0]
 800a466:	4632      	mov	r2, r6
 800a468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a46a:	4639      	mov	r1, r7
 800a46c:	4798      	blx	r3
 800a46e:	7b73      	ldrb	r3, [r6, #13]
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800a476:	7ab3      	ldrb	r3, [r6, #10]
 800a478:	4313      	orrs	r3, r2
 800a47a:	4418      	add	r0, r3
 800a47c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a480:	4418      	add	r0, r3
 800a482:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800a486:	2600      	movs	r6, #0
 800a488:	4637      	mov	r7, r6
 800a48a:	a806      	add	r0, sp, #24
 800a48c:	f001 fe8e 	bl	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800a490:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	4286      	cmp	r6, r0
 800a498:	eba9 0903 	sub.w	r9, r9, r3
 800a49c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a4a0:	bfb8      	it	lt
 800a4a2:	4606      	movlt	r6, r0
 800a4a4:	3701      	adds	r7, #1
 800a4a6:	b236      	sxth	r6, r6
 800a4a8:	b2bf      	uxth	r7, r7
 800a4aa:	fa0f f989 	sxth.w	r9, r9
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f43f af0d 	beq.w	800a2ce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a4b4:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f47f af08 	bne.w	800a2ce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a4be:	7a2b      	ldrb	r3, [r5, #8]
 800a4c0:	444b      	add	r3, r9
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dce1      	bgt.n	800a48a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800a4c6:	e702      	b.n	800a2ce <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a4c8:	20012634 	.word	0x20012634
 800a4cc:	20012630 	.word	0x20012630
 800a4d0:	20012638 	.word	0x20012638
 800a4d4:	2001263c 	.word	0x2001263c
 800a4d8:	ebaa 0606 	sub.w	r6, sl, r6
 800a4dc:	2002      	movs	r0, #2
 800a4de:	fb96 f6f0 	sdiv	r6, r6, r0
 800a4e2:	e71d      	b.n	800a320 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a4e4:	441e      	add	r6, r3
 800a4e6:	ebaa 0606 	sub.w	r6, sl, r6
 800a4ea:	e719      	b.n	800a320 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a4ec:	8925      	ldrh	r5, [r4, #8]
 800a4ee:	1aed      	subs	r5, r5, r3
 800a4f0:	eba5 050a 	sub.w	r5, r5, sl
 800a4f4:	fa0f fb85 	sxth.w	fp, r5
 800a4f8:	8965      	ldrh	r5, [r4, #10]
 800a4fa:	eba5 0509 	sub.w	r5, r5, r9
 800a4fe:	b22d      	sxth	r5, r5
 800a500:	e72e      	b.n	800a360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a502:	8965      	ldrh	r5, [r4, #10]
 800a504:	1aed      	subs	r5, r5, r3
 800a506:	eba5 050a 	sub.w	r5, r5, sl
 800a50a:	4633      	mov	r3, r6
 800a50c:	b22d      	sxth	r5, r5
 800a50e:	463e      	mov	r6, r7
 800a510:	f04f 0b00 	mov.w	fp, #0
 800a514:	461f      	mov	r7, r3
 800a516:	e723      	b.n	800a360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a518:	2500      	movs	r5, #0
 800a51a:	e721      	b.n	800a360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800a51c <_ZN8touchgfx8TextAreaD0Ev>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	2148      	movs	r1, #72	@ 0x48
 800a520:	4604      	mov	r4, r0
 800a522:	f009 f917 	bl	8013754 <_ZdlPvj>
 800a526:	4620      	mov	r0, r4
 800a528:	bd10      	pop	{r4, pc}
	...

0800a52c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800a52c:	b513      	push	{r0, r1, r4, lr}
 800a52e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800a532:	4604      	mov	r4, r0
 800a534:	b1fb      	cbz	r3, 800a576 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a536:	4b16      	ldr	r3, [pc, #88]	@ (800a590 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800a538:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	428b      	cmp	r3, r1
 800a53e:	d91a      	bls.n	800a576 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a540:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd16      	ble.n	800a576 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a548:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dd12      	ble.n	800a576 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a550:	4b10      	ldr	r3, [pc, #64]	@ (800a594 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	f7f9 f914 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a558:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	db06      	blt.n	800a570 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a562:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	db02      	blt.n	800a570 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a56a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a56c:	4298      	cmp	r0, r3
 800a56e:	d004      	beq.n	800a57a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800a570:	6953      	ldr	r3, [r2, #20]
 800a572:	4620      	mov	r0, r4
 800a574:	4798      	blx	r3
 800a576:	b002      	add	sp, #8
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800a57e:	c903      	ldmia	r1, {r0, r1}
 800a580:	466b      	mov	r3, sp
 800a582:	e883 0003 	stmia.w	r3, {r0, r1}
 800a586:	6912      	ldr	r2, [r2, #16]
 800a588:	4619      	mov	r1, r3
 800a58a:	4620      	mov	r0, r4
 800a58c:	4790      	blx	r2
 800a58e:	e7f2      	b.n	800a576 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a590:	20012634 	.word	0x20012634
 800a594:	2001263c 	.word	0x2001263c

0800a598 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	4b44      	ldr	r3, [pc, #272]	@ (800a6b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800a59e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	b08e      	sub	sp, #56	@ 0x38
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	d97e      	bls.n	800a6a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a5aa:	6808      	ldr	r0, [r1, #0]
 800a5ac:	4d41      	ldr	r5, [pc, #260]	@ (800a6b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800a5ae:	6849      	ldr	r1, [r1, #4]
 800a5b0:	ab05      	add	r3, sp, #20
 800a5b2:	c303      	stmia	r3!, {r0, r1}
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	6828      	ldr	r0, [r5, #0]
 800a5b8:	f7f9 f8e2 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a5bc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	db11      	blt.n	800a5e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a5c4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	db0d      	blt.n	800a5e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a5cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a5ce:	4298      	cmp	r0, r3
 800a5d0:	d10a      	bne.n	800a5e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a5d2:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800a5d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5da:	ab09      	add	r3, sp, #36	@ 0x24
 800a5dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	a805      	add	r0, sp, #20
 800a5e4:	f7fe fcd8 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800a5e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dd5b      	ble.n	800a6a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a5f0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dd57      	ble.n	800a6a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a5f8:	4f2f      	ldr	r7, [pc, #188]	@ (800a6b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800a5fa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800a602:	4b2e      	ldr	r3, [pc, #184]	@ (800a6bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d04c      	beq.n	800a6a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800a614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a616:	4620      	mov	r0, r4
 800a618:	4798      	blx	r3
 800a61a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800a622:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800a626:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800a62a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a62c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a630:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	9609      	str	r6, [sp, #36]	@ 0x24
 800a638:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a63c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a640:	4b1f      	ldr	r3, [pc, #124]	@ (800a6c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800a642:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800a64c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a64e:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800a652:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800a656:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800a65a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800a65e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a662:	b10a      	cbz	r2, 800a668 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800a664:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a666:	b906      	cbnz	r6, 800a66a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800a668:	689e      	ldr	r6, [r3, #8]
 800a66a:	af07      	add	r7, sp, #28
 800a66c:	4621      	mov	r1, r4
 800a66e:	4638      	mov	r0, r7
 800a670:	f003 fd9c 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a674:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a676:	6828      	ldr	r0, [r5, #0]
 800a678:	f7f9 f882 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	4605      	mov	r5, r0
 800a680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a682:	4620      	mov	r0, r4
 800a684:	4798      	blx	r3
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	4680      	mov	r8, r0
 800a68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a68e:	4620      	mov	r0, r4
 800a690:	4798      	blx	r3
 800a692:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800a696:	ab09      	add	r3, sp, #36	@ 0x24
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	9501      	str	r5, [sp, #4]
 800a69c:	ab05      	add	r3, sp, #20
 800a69e:	e897 0006 	ldmia.w	r7, {r1, r2}
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7f9 f81f 	bl	80036e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a6a8:	b00e      	add	sp, #56	@ 0x38
 800a6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20012634 	.word	0x20012634
 800a6b4:	2001263c 	.word	0x2001263c
 800a6b8:	20012630 	.word	0x20012630
 800a6bc:	20012638 	.word	0x20012638
 800a6c0:	200125e0 	.word	0x200125e0

0800a6c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	6803      	ldr	r3, [r0, #0]
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	4615      	mov	r5, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6dc:	4718      	bx	r3
	...

0800a6e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a71c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800a6e4:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	d214      	bcs.n	800a718 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6f2:	4798      	blx	r3
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	4798      	blx	r3
 800a6fe:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a702:	b22d      	sxth	r5, r5
 800a704:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a708:	4601      	mov	r1, r0
 800a70a:	bf06      	itte	eq
 800a70c:	4602      	moveq	r2, r0
 800a70e:	4629      	moveq	r1, r5
 800a710:	462a      	movne	r2, r5
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff ffd6 	bl	800a6c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800a718:	bd38      	pop	{r3, r4, r5, pc}
 800a71a:	bf00      	nop
 800a71c:	20012634 	.word	0x20012634

0800a720 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800a720:	b530      	push	{r4, r5, lr}
 800a722:	888b      	ldrh	r3, [r1, #4]
 800a724:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800a726:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a72a:	b085      	sub	sp, #20
 800a72c:	4604      	mov	r4, r0
 800a72e:	b923      	cbnz	r3, 800a73a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a730:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a734:	b90b      	cbnz	r3, 800a73a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a736:	f7ff ffd3 	bl	800a6e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	466d      	mov	r5, sp
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a746:	4798      	blx	r3
 800a748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a74c:	343c      	adds	r4, #60	@ 0x3c
 800a74e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a752:	b005      	add	sp, #20
 800a754:	bd30      	pop	{r4, r5, pc}

0800a756 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800a756:	2300      	movs	r3, #0
 800a758:	8083      	strh	r3, [r0, #4]
 800a75a:	80c3      	strh	r3, [r0, #6]
 800a75c:	8003      	strh	r3, [r0, #0]
 800a75e:	8043      	strh	r3, [r0, #2]
 800a760:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800a764:	2bff      	cmp	r3, #255	@ 0xff
 800a766:	bf01      	itttt	eq
 800a768:	890b      	ldrheq	r3, [r1, #8]
 800a76a:	8083      	strheq	r3, [r0, #4]
 800a76c:	894b      	ldrheq	r3, [r1, #10]
 800a76e:	80c3      	strheq	r3, [r0, #6]
 800a770:	4770      	bx	lr
	...

0800a774 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800a774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	6808      	ldr	r0, [r1, #0]
 800a77a:	6849      	ldr	r1, [r1, #4]
 800a77c:	466b      	mov	r3, sp
 800a77e:	c303      	stmia	r3!, {r0, r1}
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	4669      	mov	r1, sp
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	4620      	mov	r0, r4
 800a788:	4798      	blx	r3
 800a78a:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a792:	b10a      	cbz	r2, 800a798 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800a794:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a796:	b900      	cbnz	r0, 800a79a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800a798:	6898      	ldr	r0, [r3, #8]
 800a79a:	6803      	ldr	r3, [r0, #0]
 800a79c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a79e:	6a1d      	ldr	r5, [r3, #32]
 800a7a0:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800a7a4:	4669      	mov	r1, sp
 800a7a6:	47a8      	blx	r5
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bd30      	pop	{r4, r5, pc}
 800a7ac:	200125e0 	.word	0x200125e0

0800a7b0 <_ZN8touchgfx3BoxD1Ev>:
 800a7b0:	4770      	bx	lr

0800a7b2 <_ZN8touchgfx3BoxD0Ev>:
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	212c      	movs	r1, #44	@ 0x2c
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	f008 ffcc 	bl	8013754 <_ZdlPvj>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800a7c0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800a7c4:	b12a      	cbz	r2, 800a7d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a7c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a7ca:	b112      	cbz	r2, 800a7d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a7cc:	6803      	ldr	r3, [r0, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	4718      	bx	r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800a7d4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a7d8:	4770      	bx	lr

0800a7da <_ZN8touchgfx6ButtonD1Ev>:
 800a7da:	4770      	bx	lr

0800a7dc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	880b      	ldrh	r3, [r1, #0]
 800a7e0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	8813      	ldrh	r3, [r2, #0]
 800a7e6:	f825 3f30 	strh.w	r3, [r5, #48]!
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f006 f8dd 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f006 f90d 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	4631      	mov	r1, r6
 800a800:	4620      	mov	r0, r4
 800a802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a804:	4798      	blx	r3
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	4629      	mov	r1, r5
 800a80a:	4620      	mov	r0, r4
 800a80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a812:	4718      	bx	r3

0800a814 <_ZN8touchgfx6ButtonD0Ev>:
 800a814:	b510      	push	{r4, lr}
 800a816:	2134      	movs	r1, #52	@ 0x34
 800a818:	4604      	mov	r4, r0
 800a81a:	f008 ff9b 	bl	8013754 <_ZdlPvj>
 800a81e:	4620      	mov	r0, r4
 800a820:	bd10      	pop	{r4, pc}

0800a822 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800a822:	b510      	push	{r4, lr}
 800a824:	4604      	mov	r4, r0
 800a826:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a828:	b150      	cbz	r0, 800a840 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a82a:	6803      	ldr	r3, [r0, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	4798      	blx	r3
 800a830:	b130      	cbz	r0, 800a840 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a832:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a834:	6803      	ldr	r3, [r0, #0]
 800a836:	4621      	mov	r1, r4
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a83e:	4718      	bx	r3
 800a840:	bd10      	pop	{r4, pc}

0800a842 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800a842:	b510      	push	{r4, lr}
 800a844:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800a848:	2bff      	cmp	r3, #255	@ 0xff
 800a84a:	4604      	mov	r4, r0
 800a84c:	d006      	beq.n	800a85c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800a84e:	2300      	movs	r3, #0
 800a850:	8003      	strh	r3, [r0, #0]
 800a852:	8043      	strh	r3, [r0, #2]
 800a854:	8083      	strh	r3, [r0, #4]
 800a856:	80c3      	strh	r3, [r0, #6]
 800a858:	4620      	mov	r0, r4
 800a85a:	bd10      	pop	{r4, pc}
 800a85c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800a860:	b11b      	cbz	r3, 800a86a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800a862:	3130      	adds	r1, #48	@ 0x30
 800a864:	f006 f90a 	bl	8010a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a868:	e7f6      	b.n	800a858 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800a86a:	312e      	adds	r1, #46	@ 0x2e
 800a86c:	e7fa      	b.n	800a864 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800a870 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a878:	b08a      	sub	sp, #40	@ 0x28
 800a87a:	4604      	mov	r4, r0
 800a87c:	4688      	mov	r8, r1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d066      	beq.n	800a950 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800a882:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a884:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a888:	a805      	add	r0, sp, #20
 800a88a:	f006 f88f 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a88e:	4607      	mov	r7, r0
 800a890:	a805      	add	r0, sp, #20
 800a892:	f006 f8bf 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a896:	f9b8 6000 	ldrsh.w	r6, [r8]
 800a89a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800a89e:	4432      	add	r2, r6
 800a8a0:	b292      	uxth	r2, r2
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	fa0f fc82 	sxth.w	ip, r2
 800a8a8:	459c      	cmp	ip, r3
 800a8aa:	9306      	str	r3, [sp, #24]
 800a8ac:	dd52      	ble.n	800a954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a8ae:	42b7      	cmp	r7, r6
 800a8b0:	dd50      	ble.n	800a954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a8b2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800a8b6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a8ba:	442b      	add	r3, r5
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	b219      	sxth	r1, r3
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	dd47      	ble.n	800a954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a8c4:	42a8      	cmp	r0, r5
 800a8c6:	dd45      	ble.n	800a954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a8c8:	4567      	cmp	r7, ip
 800a8ca:	bfb8      	it	lt
 800a8cc:	b2ba      	uxthlt	r2, r7
 800a8ce:	4288      	cmp	r0, r1
 800a8d0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800a8d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800a8d8:	bfb8      	it	lt
 800a8da:	b283      	uxthlt	r3, r0
 800a8dc:	1b92      	subs	r2, r2, r6
 800a8de:	1b5b      	subs	r3, r3, r5
 800a8e0:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a8e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a8e8:	f8ad 6018 	strh.w	r6, [sp, #24]
 800a8ec:	f8ad 501a 	strh.w	r5, [sp, #26]
 800a8f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800a8f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d026      	beq.n	800a94a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a8fc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd22      	ble.n	800a94a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a904:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dd1e      	ble.n	800a94a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a90c:	2300      	movs	r3, #0
 800a90e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	a908      	add	r1, sp, #32
 800a916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a918:	4620      	mov	r0, r4
 800a91a:	4798      	blx	r3
 800a91c:	4b0f      	ldr	r3, [pc, #60]	@ (800a95c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a924:	b10a      	cbz	r2, 800a92a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800a926:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a928:	b900      	cbnz	r0, 800a92c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800a92a:	6898      	ldr	r0, [r3, #8]
 800a92c:	6801      	ldr	r1, [r0, #0]
 800a92e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800a932:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800a936:	2501      	movs	r5, #1
 800a938:	9502      	str	r5, [sp, #8]
 800a93a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800a93e:	9401      	str	r4, [sp, #4]
 800a940:	ac06      	add	r4, sp, #24
 800a942:	9400      	str	r4, [sp, #0]
 800a944:	688c      	ldr	r4, [r1, #8]
 800a946:	a905      	add	r1, sp, #20
 800a948:	47a0      	blx	r4
 800a94a:	b00a      	add	sp, #40	@ 0x28
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a952:	e797      	b.n	800a884 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800a954:	2300      	movs	r3, #0
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	e7ca      	b.n	800a8f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800a95a:	bf00      	nop
 800a95c:	200125e0 	.word	0x200125e0

0800a960 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800a960:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800a964:	b12a      	cbz	r2, 800a972 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a966:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a96a:	b112      	cbz	r2, 800a972 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	4718      	bx	r3
 800a972:	4770      	bx	lr

0800a974 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800a974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a978:	4b2f      	ldr	r3, [pc, #188]	@ (800aa38 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800a97a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	4293      	cmp	r3, r2
 800a980:	b08d      	sub	sp, #52	@ 0x34
 800a982:	4604      	mov	r4, r0
 800a984:	460f      	mov	r7, r1
 800a986:	d954      	bls.n	800aa32 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a988:	4b2c      	ldr	r3, [pc, #176]	@ (800aa3c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800a990:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800a994:	4a2a      	ldr	r2, [pc, #168]	@ (800aa40 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a99c:	2900      	cmp	r1, #0
 800a99e:	d048      	beq.n	800aa32 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a9a0:	785a      	ldrb	r2, [r3, #1]
 800a9a2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a9a6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a9aa:	4b26      	ldr	r3, [pc, #152]	@ (800aa44 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800a9ac:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800a9b0:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800a9b4:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800a9b8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a9ba:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800a9be:	9107      	str	r1, [sp, #28]
 800a9c0:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800a9c4:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a9c8:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	f88d 8020 	strb.w	r8, [sp, #32]
 800a9d2:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800a9d6:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800a9da:	9609      	str	r6, [sp, #36]	@ 0x24
 800a9dc:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800a9e0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a9e4:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800a9e8:	b10b      	cbz	r3, 800a9ee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800a9ea:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800a9ec:	b905      	cbnz	r5, 800a9f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800a9ee:	6895      	ldr	r5, [r2, #8]
 800a9f0:	ae05      	add	r6, sp, #20
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f003 fbd9 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800a9fc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	f7f8 febe 	bl	8003780 <_ZNK8touchgfx5Texts7getTextEt>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	4680      	mov	r8, r0
 800aa08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	4798      	blx	r3
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4681      	mov	r9, r0
 800aa12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa16:	4620      	mov	r0, r4
 800aa18:	4798      	blx	r3
 800aa1a:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800aa1e:	ab07      	add	r3, sp, #28
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	f8cd 8004 	str.w	r8, [sp, #4]
 800aa26:	463b      	mov	r3, r7
 800aa28:	e896 0006 	ldmia.w	r6, {r1, r2}
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f7f8 fe5a 	bl	80036e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800aa32:	b00d      	add	sp, #52	@ 0x34
 800aa34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa38:	20012634 	.word	0x20012634
 800aa3c:	20012630 	.word	0x20012630
 800aa40:	20012638 	.word	0x20012638
 800aa44:	200125e0 	.word	0x200125e0
 800aa48:	2001263c 	.word	0x2001263c

0800aa4c <_ZN8touchgfx5ImageD1Ev>:
 800aa4c:	4770      	bx	lr

0800aa4e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	880b      	ldrh	r3, [r1, #0]
 800aa52:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800aa54:	4604      	mov	r4, r0
 800aa56:	4608      	mov	r0, r1
 800aa58:	460d      	mov	r5, r1
 800aa5a:	f005 ffa7 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 800aa5e:	4606      	mov	r6, r0
 800aa60:	4628      	mov	r0, r5
 800aa62:	f005 ffd7 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	4605      	mov	r5, r0
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa70:	4798      	blx	r3
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	4629      	mov	r1, r5
 800aa76:	4620      	mov	r0, r4
 800aa78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa7e:	4718      	bx	r3

0800aa80 <_ZN8touchgfx5ImageD0Ev>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	212c      	movs	r1, #44	@ 0x2c
 800aa84:	4604      	mov	r4, r0
 800aa86:	f008 fe65 	bl	8013754 <_ZdlPvj>
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <_ZNK8touchgfx5Image12getSolidRectEv>:
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800aa94:	2bff      	cmp	r3, #255	@ 0xff
 800aa96:	4604      	mov	r4, r0
 800aa98:	d006      	beq.n	800aaa8 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	8003      	strh	r3, [r0, #0]
 800aa9e:	8043      	strh	r3, [r0, #2]
 800aaa0:	8083      	strh	r3, [r0, #4]
 800aaa2:	80c3      	strh	r3, [r0, #6]
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	3126      	adds	r1, #38	@ 0x26
 800aaaa:	f005 ffe7 	bl	8010a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800aaae:	e7f9      	b.n	800aaa4 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800aab0 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800aab0:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800aab4:	b12a      	cbz	r2, 800aac2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aab6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800aaba:	b112      	cbz	r2, 800aac2 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	695b      	ldr	r3, [r3, #20]
 800aac0:	4718      	bx	r3
 800aac2:	4770      	bx	lr

0800aac4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4604      	mov	r4, r0
 800aaca:	b088      	sub	sp, #32
 800aacc:	f854 3b26 	ldr.w	r3, [r4], #38
 800aad0:	2500      	movs	r5, #0
 800aad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad4:	460f      	mov	r7, r1
 800aad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aada:	a904      	add	r1, sp, #16
 800aadc:	4606      	mov	r6, r0
 800aade:	4798      	blx	r3
 800aae0:	4620      	mov	r0, r4
 800aae2:	f005 ff63 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 800aae6:	4680      	mov	r8, r0
 800aae8:	4620      	mov	r0, r4
 800aaea:	f005 ff93 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aaee:	9506      	str	r5, [sp, #24]
 800aaf0:	ad06      	add	r5, sp, #24
 800aaf2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f8ad 801c 	strh.w	r8, [sp, #28]
 800aafe:	f7fe fa4b 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800ab02:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd19      	ble.n	800ab3e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ab0a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	dd15      	ble.n	800ab3e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ab12:	4b0c      	ldr	r3, [pc, #48]	@ (800ab44 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ab1a:	b10a      	cbz	r2, 800ab20 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800ab1c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ab1e:	b900      	cbnz	r0, 800ab22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800ab20:	6898      	ldr	r0, [r3, #8]
 800ab22:	6801      	ldr	r1, [r0, #0]
 800ab24:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ab28:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800ab2c:	2701      	movs	r7, #1
 800ab2e:	9702      	str	r7, [sp, #8]
 800ab30:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800ab34:	e9cd 5600 	strd	r5, r6, [sp]
 800ab38:	688d      	ldr	r5, [r1, #8]
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	47a8      	blx	r5
 800ab3e:	b008      	add	sp, #32
 800ab40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab44:	200125e0 	.word	0x200125e0

0800ab48 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4e:	460c      	mov	r4, r1
 800ab50:	4798      	blx	r3
 800ab52:	1b03      	subs	r3, r0, r4
 800ab54:	4258      	negs	r0, r3
 800ab56:	4158      	adcs	r0, r3
 800ab58:	bd10      	pop	{r4, pc}
	...

0800ab5c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800ab5c:	4b01      	ldr	r3, [pc, #4]	@ (800ab64 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800ab5e:	6019      	str	r1, [r3, #0]
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	200125e8 	.word	0x200125e8

0800ab68 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	4696      	mov	lr, r2
 800ab6e:	4605      	mov	r5, r0
 800ab70:	4614      	mov	r4, r2
 800ab72:	460e      	mov	r6, r1
 800ab74:	461f      	mov	r7, r3
 800ab76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab7a:	b097      	sub	sp, #92	@ 0x5c
 800ab7c:	f10d 0c1c 	add.w	ip, sp, #28
 800ab80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab84:	f8de 3000 	ldr.w	r3, [lr]
 800ab88:	f8cc 3000 	str.w	r3, [ip]
 800ab8c:	f104 0e14 	add.w	lr, r4, #20
 800ab90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab94:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ab98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab9c:	f8de 3000 	ldr.w	r3, [lr]
 800aba0:	f8cc 3000 	str.w	r3, [ip]
 800aba4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800aba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abac:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800abb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abb4:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800abb8:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800abbc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800abc0:	f8de 3000 	ldr.w	r3, [lr]
 800abc4:	f8cc 3000 	str.w	r3, [ip]
 800abc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	9201      	str	r2, [sp, #4]
 800abce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800abd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800abd4:	9200      	str	r2, [sp, #0]
 800abd6:	f8cd 8008 	str.w	r8, [sp, #8]
 800abda:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800abde:	aa07      	add	r2, sp, #28
 800abe0:	463b      	mov	r3, r7
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47d8      	blx	fp
 800abe8:	46a6      	mov	lr, r4
 800abea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abee:	f10d 0c1c 	add.w	ip, sp, #28
 800abf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abf6:	f8de 3000 	ldr.w	r3, [lr]
 800abfa:	f8cc 3000 	str.w	r3, [ip]
 800abfe:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800ac02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ac06:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ac0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac0e:	343c      	adds	r4, #60	@ 0x3c
 800ac10:	f8de 3000 	ldr.w	r3, [lr]
 800ac14:	f8cc 3000 	str.w	r3, [ip]
 800ac18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac1a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ac1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	f8cc 3000 	str.w	r3, [ip]
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ac2e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ac30:	9201      	str	r2, [sp, #4]
 800ac32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ac34:	9200      	str	r2, [sp, #0]
 800ac36:	f8cd 8008 	str.w	r8, [sp, #8]
 800ac3a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800ac3c:	aa07      	add	r2, sp, #28
 800ac3e:	463b      	mov	r3, r7
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47a0      	blx	r4
 800ac46:	b017      	add	sp, #92	@ 0x5c
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	b08d      	sub	sp, #52	@ 0x34
 800ac52:	4688      	mov	r8, r1
 800ac54:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800ac56:	f8d3 c000 	ldr.w	ip, [r3]
 800ac5a:	680f      	ldr	r7, [r1, #0]
 800ac5c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800ac60:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800ac64:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800ac68:	edd3 6a07 	vldr	s13, [r3, #28]
 800ac6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800ac6e:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800ac72:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ac76:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ac7a:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800ac7e:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800ac82:	eba7 070c 	sub.w	r7, r7, ip
 800ac86:	42bc      	cmp	r4, r7
 800ac88:	bfa8      	it	ge
 800ac8a:	463c      	movge	r4, r7
 800ac8c:	ee07 4a90 	vmov	s15, r4
 800ac90:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ac94:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800ac98:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ac9c:	ee65 4a24 	vmul.f32	s9, s10, s9
 800aca0:	ee25 5a27 	vmul.f32	s10, s10, s15
 800aca4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aca8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800acac:	eb09 0e0c 	add.w	lr, r9, ip
 800acb0:	4571      	cmp	r1, lr
 800acb2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800acb6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800acba:	ee36 0a84 	vadd.f32	s0, s13, s8
 800acbe:	ee61 1a87 	vmul.f32	s3, s3, s14
 800acc2:	ee22 2a07 	vmul.f32	s4, s4, s14
 800acc6:	f340 808d 	ble.w	800ade4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800acca:	eba1 060e 	sub.w	r6, r1, lr
 800acce:	fb96 f5f4 	sdiv	r5, r6, r4
 800acd2:	ee07 5a10 	vmov	s14, r5
 800acd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acda:	2d00      	cmp	r5, #0
 800acdc:	fb04 6615 	mls	r6, r4, r5, r6
 800ace0:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ace4:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ace8:	eea7 1a05 	vfma.f32	s2, s14, s10
 800acec:	dd13      	ble.n	800ad16 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800acee:	ee70 6a44 	vsub.f32	s13, s0, s8
 800acf2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800acf6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	bf18      	it	ne
 800ad00:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ad04:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ad08:	bf08      	it	eq
 800ad0a:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ad0e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ad12:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ad16:	fb05 f204 	mul.w	r2, r5, r4
 800ad1a:	1abf      	subs	r7, r7, r2
 800ad1c:	4494      	add	ip, r2
 800ad1e:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ad22:	4411      	add	r1, r2
 800ad24:	eb09 020c 	add.w	r2, r9, ip
 800ad28:	443a      	add	r2, r7
 800ad2a:	b209      	sxth	r1, r1
 800ad2c:	428a      	cmp	r2, r1
 800ad2e:	bfc4      	itt	gt
 800ad30:	eba1 0209 	subgt.w	r2, r1, r9
 800ad34:	eba2 070c 	subgt.w	r7, r2, ip
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	dd50      	ble.n	800adde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800ad3c:	fb97 f1f4 	sdiv	r1, r7, r4
 800ad40:	fb04 7211 	mls	r2, r4, r1, r7
 800ad44:	b90a      	cbnz	r2, 800ad4a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800ad46:	3901      	subs	r1, #1
 800ad48:	4622      	mov	r2, r4
 800ad4a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800ad4e:	6840      	ldr	r0, [r0, #4]
 800ad50:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ad52:	f8d0 a000 	ldr.w	sl, [r0]
 800ad56:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800ad58:	9008      	str	r0, [sp, #32]
 800ad5a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800ad5e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800ad60:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ad64:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ad6c:	445b      	add	r3, fp
 800ad6e:	eef0 6a42 	vmov.f32	s13, s4
 800ad72:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800ad76:	ee21 3a23 	vmul.f32	s6, s2, s7
 800ad7a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800ad7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ad82:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	ee17 7a90 	vmov	r7, s15
 800ad8c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800ad90:	eeb0 7a61 	vmov.f32	s14, s3
 800ad94:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ad98:	ee16 3a90 	vmov	r3, s13
 800ad9c:	fb97 f7f4 	sdiv	r7, r7, r4
 800ada0:	ee17 ca90 	vmov	ip, s15
 800ada4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ada8:	fb9c fcf4 	sdiv	ip, ip, r4
 800adac:	fb0c 3306 	mla	r3, ip, r6, r3
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	ee17 3a10 	vmov	r3, s14
 800adb6:	44b6      	add	lr, r6
 800adb8:	fb04 e505 	mla	r5, r4, r5, lr
 800adbc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800adc0:	fb07 3706 	mla	r7, r7, r6, r3
 800adc4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800adc8:	e9cd 4700 	strd	r4, r7, [sp]
 800adcc:	2900      	cmp	r1, #0
 800adce:	bfcc      	ite	gt
 800add0:	46a1      	movgt	r9, r4
 800add2:	4691      	movle	r9, r2
 800add4:	eba9 0306 	sub.w	r3, r9, r6
 800add8:	f8da 4008 	ldr.w	r4, [sl, #8]
 800addc:	47a0      	blx	r4
 800adde:	b00d      	add	sp, #52	@ 0x34
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	2500      	movs	r5, #0
 800ade6:	462e      	mov	r6, r5
 800ade8:	e799      	b.n	800ad1e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800adec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	b0db      	sub	sp, #364	@ 0x16c
 800adf2:	461d      	mov	r5, r3
 800adf4:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800adf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfa:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800adfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae00:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800ae04:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae06:	6803      	ldr	r3, [r0, #0]
 800ae08:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ae0a:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800ae0c:	9009      	str	r0, [sp, #36]	@ 0x24
 800ae0e:	4614      	mov	r4, r2
 800ae10:	4629      	mov	r1, r5
 800ae12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ae16:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800ae1a:	47b8      	blx	r7
 800ae1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1e:	6058      	str	r0, [r3, #4]
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f000 83a1 	beq.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae26:	682b      	ldr	r3, [r5, #0]
 800ae28:	9314      	str	r3, [sp, #80]	@ 0x50
 800ae2a:	686b      	ldr	r3, [r5, #4]
 800ae2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae2e:	4bc4      	ldr	r3, [pc, #784]	@ (800b140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800ae30:	ed94 7a02 	vldr	s14, [r4, #8]
 800ae34:	7819      	ldrb	r1, [r3, #0]
 800ae36:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800ae3a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae44:	bf16      	itet	ne
 800ae46:	4619      	movne	r1, r3
 800ae48:	4611      	moveq	r1, r2
 800ae4a:	4613      	movne	r3, r2
 800ae4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae50:	9116      	str	r1, [sp, #88]	@ 0x58
 800ae52:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800ae56:	f240 8387 	bls.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae5a:	ed94 7a07 	vldr	s14, [r4, #28]
 800ae5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae66:	f240 837f 	bls.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae6a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800ae6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	f240 8377 	bls.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae7a:	6822      	ldr	r2, [r4, #0]
 800ae7c:	4bb1      	ldr	r3, [pc, #708]	@ (800b144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	f2c0 8372 	blt.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae84:	49b0      	ldr	r1, [pc, #704]	@ (800b148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800ae86:	6963      	ldr	r3, [r4, #20]
 800ae88:	428a      	cmp	r2, r1
 800ae8a:	f300 836d 	bgt.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae8e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800ae92:	48ae      	ldr	r0, [pc, #696]	@ (800b14c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800ae94:	33ff      	adds	r3, #255	@ 0xff
 800ae96:	4283      	cmp	r3, r0
 800ae98:	f200 8366 	bhi.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ae9e:	4dac      	ldr	r5, [pc, #688]	@ (800b150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800aea0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800aea4:	33ff      	adds	r3, #255	@ 0xff
 800aea6:	42ab      	cmp	r3, r5
 800aea8:	f200 835e 	bhi.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800aeac:	6862      	ldr	r2, [r4, #4]
 800aeae:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800aeb2:	33ff      	adds	r3, #255	@ 0xff
 800aeb4:	4283      	cmp	r3, r0
 800aeb6:	f200 8357 	bhi.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800aeba:	69a1      	ldr	r1, [r4, #24]
 800aebc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800aec0:	33ff      	adds	r3, #255	@ 0xff
 800aec2:	4283      	cmp	r3, r0
 800aec4:	f200 8350 	bhi.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800aec8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800aeca:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800aece:	30ff      	adds	r0, #255	@ 0xff
 800aed0:	42a8      	cmp	r0, r5
 800aed2:	f200 8349 	bhi.w	800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800aed6:	428a      	cmp	r2, r1
 800aed8:	f280 8110 	bge.w	800b0fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800aedc:	429a      	cmp	r2, r3
 800aede:	f300 8119 	bgt.w	800b114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800aee2:	4299      	cmp	r1, r3
 800aee4:	f280 811d 	bge.w	800b122 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800aee8:	2502      	movs	r5, #2
 800aeea:	2701      	movs	r7, #1
 800aeec:	46a9      	mov	r9, r5
 800aeee:	46b8      	mov	r8, r7
 800aef0:	f04f 0a00 	mov.w	sl, #0
 800aef4:	4621      	mov	r1, r4
 800aef6:	a849      	add	r0, sp, #292	@ 0x124
 800aef8:	f004 ff14 	bl	800fd24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800aefc:	4622      	mov	r2, r4
 800aefe:	4653      	mov	r3, sl
 800af00:	a949      	add	r1, sp, #292	@ 0x124
 800af02:	f8cd 9000 	str.w	r9, [sp]
 800af06:	a819      	add	r0, sp, #100	@ 0x64
 800af08:	f005 f83c 	bl	800ff84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800af0c:	4622      	mov	r2, r4
 800af0e:	4653      	mov	r3, sl
 800af10:	a949      	add	r1, sp, #292	@ 0x124
 800af12:	f8cd 8000 	str.w	r8, [sp]
 800af16:	a829      	add	r0, sp, #164	@ 0xa4
 800af18:	f005 f834 	bl	800ff84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800af1c:	4643      	mov	r3, r8
 800af1e:	4622      	mov	r2, r4
 800af20:	a949      	add	r1, sp, #292	@ 0x124
 800af22:	f8cd 9000 	str.w	r9, [sp]
 800af26:	a839      	add	r0, sp, #228	@ 0xe4
 800af28:	f005 f82c 	bl	800ff84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800af2c:	42af      	cmp	r7, r5
 800af2e:	bfb5      	itete	lt
 800af30:	2300      	movlt	r3, #0
 800af32:	2301      	movge	r3, #1
 800af34:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800af36:	930e      	strge	r3, [sp, #56]	@ 0x38
 800af38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af3e:	af12      	add	r7, sp, #72	@ 0x48
 800af40:	bfb9      	ittee	lt
 800af42:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800af44:	ac19      	addlt	r4, sp, #100	@ 0x64
 800af46:	ad19      	addge	r5, sp, #100	@ 0x64
 800af48:	ac29      	addge	r4, sp, #164	@ 0xa4
 800af4a:	e887 0003 	stmia.w	r7, {r0, r1}
 800af4e:	b928      	cbnz	r0, 800af5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800af50:	4b80      	ldr	r3, [pc, #512]	@ (800b154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800af52:	6818      	ldr	r0, [r3, #0]
 800af54:	6803      	ldr	r3, [r0, #0]
 800af56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af58:	4798      	blx	r3
 800af5a:	6038      	str	r0, [r7, #0]
 800af5c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800af5e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800af62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800af66:	930c      	str	r3, [sp, #48]	@ 0x30
 800af68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af6a:	6963      	ldr	r3, [r4, #20]
 800af6c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800af6e:	440b      	add	r3, r1
 800af70:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800af74:	4408      	add	r0, r1
 800af76:	b200      	sxth	r0, r0
 800af78:	4283      	cmp	r3, r0
 800af7a:	900d      	str	r0, [sp, #52]	@ 0x34
 800af7c:	f280 80dd 	bge.w	800b13a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800af80:	428b      	cmp	r3, r1
 800af82:	da08      	bge.n	800af96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800af84:	2a00      	cmp	r2, #0
 800af86:	dd06      	ble.n	800af96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800af88:	1acb      	subs	r3, r1, r3
 800af8a:	429a      	cmp	r2, r3
 800af8c:	f2c0 80e4 	blt.w	800b158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800af90:	2b00      	cmp	r3, #0
 800af92:	f300 80e2 	bgt.w	800b15a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800af96:	6967      	ldr	r7, [r4, #20]
 800af98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af9a:	443b      	add	r3, r7
 800af9c:	461f      	mov	r7, r3
 800af9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afa0:	1bdf      	subs	r7, r3, r7
 800afa2:	4297      	cmp	r7, r2
 800afa4:	bfa8      	it	ge
 800afa6:	4617      	movge	r7, r2
 800afa8:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800afac:	2f00      	cmp	r7, #0
 800afae:	f340 8166 	ble.w	800b27e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800afb2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800afb4:	6829      	ldr	r1, [r5, #0]
 800afb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800afba:	f9bb 3000 	ldrsh.w	r3, [fp]
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	4411      	add	r1, r2
 800afc2:	4299      	cmp	r1, r3
 800afc4:	dd1a      	ble.n	800affc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800afc6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800afca:	440b      	add	r3, r1
 800afcc:	4402      	add	r2, r0
 800afce:	b21b      	sxth	r3, r3
 800afd0:	429a      	cmp	r2, r3
 800afd2:	dc13      	bgt.n	800affc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800afd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	9206      	str	r2, [sp, #24]
 800afdc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afde:	9205      	str	r2, [sp, #20]
 800afe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afe2:	9500      	str	r5, [sp, #0]
 800afe4:	e9cd b203 	strd	fp, r2, [sp, #12]
 800afe8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800afea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afec:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800aff0:	a912      	add	r1, sp, #72	@ 0x48
 800aff2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800aff6:	aa49      	add	r2, sp, #292	@ 0x124
 800aff8:	4623      	mov	r3, r4
 800affa:	47c8      	blx	r9
 800affc:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b000:	441a      	add	r2, r3
 800b002:	6963      	ldr	r3, [r4, #20]
 800b004:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b008:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b00c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b010:	68a1      	ldr	r1, [r4, #8]
 800b012:	ed94 6a08 	vldr	s12, [r4, #32]
 800b016:	6022      	str	r2, [r4, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	6163      	str	r3, [r4, #20]
 800b01c:	69a3      	ldr	r3, [r4, #24]
 800b01e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b022:	3b01      	subs	r3, #1
 800b024:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b028:	61a3      	str	r3, [r4, #24]
 800b02a:	6923      	ldr	r3, [r4, #16]
 800b02c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b034:	edd4 6a07 	vldr	s13, [r4, #28]
 800b038:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b03c:	440b      	add	r3, r1
 800b03e:	68e1      	ldr	r1, [r4, #12]
 800b040:	6123      	str	r3, [r4, #16]
 800b042:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b046:	428b      	cmp	r3, r1
 800b048:	edc4 6a07 	vstr	s13, [r4, #28]
 800b04c:	db15      	blt.n	800b07a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800b04e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b052:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b056:	3201      	adds	r2, #1
 800b058:	edc4 6a07 	vstr	s13, [r4, #28]
 800b05c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b066:	1a5b      	subs	r3, r3, r1
 800b068:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b06c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b070:	6123      	str	r3, [r4, #16]
 800b072:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b076:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b07a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b07e:	441a      	add	r2, r3
 800b080:	696b      	ldr	r3, [r5, #20]
 800b082:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b086:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b08a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b08e:	68a9      	ldr	r1, [r5, #8]
 800b090:	ed95 6a08 	vldr	s12, [r5, #32]
 800b094:	602a      	str	r2, [r5, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	616b      	str	r3, [r5, #20]
 800b09a:	69ab      	ldr	r3, [r5, #24]
 800b09c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b0a6:	61ab      	str	r3, [r5, #24]
 800b0a8:	692b      	ldr	r3, [r5, #16]
 800b0aa:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b2:	edd5 6a07 	vldr	s13, [r5, #28]
 800b0b6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b0ba:	440b      	add	r3, r1
 800b0bc:	68e9      	ldr	r1, [r5, #12]
 800b0be:	612b      	str	r3, [r5, #16]
 800b0c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	edc5 6a07 	vstr	s13, [r5, #28]
 800b0ca:	db15      	blt.n	800b0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b0cc:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b0d0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b0d4:	3201      	adds	r2, #1
 800b0d6:	edc5 6a07 	vstr	s13, [r5, #28]
 800b0da:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b0de:	602a      	str	r2, [r5, #0]
 800b0e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b0e4:	1a5b      	subs	r3, r3, r1
 800b0e6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b0ea:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b0ee:	612b      	str	r3, [r5, #16]
 800b0f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0f4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b0f8:	3f01      	subs	r7, #1
 800b0fa:	e757      	b.n	800afac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b0fc:	4299      	cmp	r1, r3
 800b0fe:	dc13      	bgt.n	800b128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b100:	429a      	cmp	r2, r3
 800b102:	da14      	bge.n	800b12e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b104:	2502      	movs	r5, #2
 800b106:	2703      	movs	r7, #3
 800b108:	46a9      	mov	r9, r5
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	f04f 0a01 	mov.w	sl, #1
 800b112:	e6ef      	b.n	800aef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b114:	2501      	movs	r5, #1
 800b116:	2700      	movs	r7, #0
 800b118:	46a9      	mov	r9, r5
 800b11a:	46b8      	mov	r8, r7
 800b11c:	f04f 0a02 	mov.w	sl, #2
 800b120:	e6e8      	b.n	800aef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b122:	2501      	movs	r5, #1
 800b124:	2702      	movs	r7, #2
 800b126:	e6e1      	b.n	800aeec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b128:	2500      	movs	r5, #0
 800b12a:	2701      	movs	r7, #1
 800b12c:	e7f4      	b.n	800b118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b12e:	2702      	movs	r7, #2
 800b130:	2503      	movs	r5, #3
 800b132:	f04f 0900 	mov.w	r9, #0
 800b136:	46b8      	mov	r8, r7
 800b138:	e7e9      	b.n	800b10e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b13a:	4613      	mov	r3, r2
 800b13c:	e728      	b.n	800af90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b13e:	bf00      	nop
 800b140:	200125d8 	.word	0x200125d8
 800b144:	fffd8f01 	.word	0xfffd8f01
 800b148:	00027100 	.word	0x00027100
 800b14c:	0004e1ff 	.word	0x0004e1ff
 800b150:	0004e1fe 	.word	0x0004e1fe
 800b154:	200125e0 	.word	0x200125e0
 800b158:	4613      	mov	r3, r2
 800b15a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800b15c:	9111      	str	r1, [sp, #68]	@ 0x44
 800b15e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800b162:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800b166:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800b168:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800b16c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800b170:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800b174:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800b178:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800b17c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b180:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800b184:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800b188:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800b18c:	469e      	mov	lr, r3
 800b18e:	469c      	mov	ip, r3
 800b190:	f04f 0900 	mov.w	r9, #0
 800b194:	f1bc 0f00 	cmp.w	ip, #0
 800b198:	d147      	bne.n	800b22a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b19a:	eb03 0c07 	add.w	ip, r3, r7
 800b19e:	1ad7      	subs	r7, r2, r3
 800b1a0:	f1b9 0f00 	cmp.w	r9, #0
 800b1a4:	d009      	beq.n	800b1ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b1a6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800b1aa:	9029      	str	r0, [sp, #164]	@ 0xa4
 800b1ac:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800b1b0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800b1b4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800b1b8:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b1ba:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b1bc:	9111      	str	r1, [sp, #68]	@ 0x44
 800b1be:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b1c2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b1c6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b1ca:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b1ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b1d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b1d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b1da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b1de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b1e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b1e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b1ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	f1be 0f00 	cmp.w	lr, #0
 800b1f6:	d031      	beq.n	800b25c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b1f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b1fa:	4431      	add	r1, r6
 800b1fc:	4549      	cmp	r1, r9
 800b1fe:	4450      	add	r0, sl
 800b200:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b204:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b208:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b20c:	db08      	blt.n	800b220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b20e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b212:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b216:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b21a:	3001      	adds	r0, #1
 800b21c:	eba1 0109 	sub.w	r1, r1, r9
 800b220:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b224:	f04f 0801 	mov.w	r8, #1
 800b228:	e7e3      	b.n	800b1f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b22a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b22c:	4431      	add	r1, r6
 800b22e:	4541      	cmp	r1, r8
 800b230:	4450      	add	r0, sl
 800b232:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b236:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b23a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b23e:	db08      	blt.n	800b252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b240:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b244:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b248:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b24c:	3001      	adds	r0, #1
 800b24e:	eba1 0108 	sub.w	r1, r1, r8
 800b252:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b256:	f04f 0901 	mov.w	r9, #1
 800b25a:	e79b      	b.n	800b194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b25c:	449c      	add	ip, r3
 800b25e:	1aff      	subs	r7, r7, r3
 800b260:	f1b8 0f00 	cmp.w	r8, #0
 800b264:	d009      	beq.n	800b27a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b266:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b26a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b26c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b270:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b274:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b278:	911d      	str	r1, [sp, #116]	@ 0x74
 800b27a:	1ad2      	subs	r2, r2, r3
 800b27c:	e68b      	b.n	800af96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b27e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b280:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 80d1 	beq.w	800b42a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b288:	ad19      	add	r5, sp, #100	@ 0x64
 800b28a:	ac39      	add	r4, sp, #228	@ 0xe4
 800b28c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b28e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b296:	930c      	str	r3, [sp, #48]	@ 0x30
 800b298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	440b      	add	r3, r1
 800b29e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b2a2:	4408      	add	r0, r1
 800b2a4:	b200      	sxth	r0, r0
 800b2a6:	4283      	cmp	r3, r0
 800b2a8:	900d      	str	r0, [sp, #52]	@ 0x34
 800b2aa:	f280 80c1 	bge.w	800b430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b2ae:	428b      	cmp	r3, r1
 800b2b0:	da08      	bge.n	800b2c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b2b2:	2a00      	cmp	r2, #0
 800b2b4:	dd06      	ble.n	800b2c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b2b6:	1acb      	subs	r3, r1, r3
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	f2c0 80bb 	blt.w	800b434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f300 80b9 	bgt.w	800b436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b2c4:	6967      	ldr	r7, [r4, #20]
 800b2c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2c8:	443b      	add	r3, r7
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2ce:	1bdf      	subs	r7, r3, r7
 800b2d0:	4297      	cmp	r7, r2
 800b2d2:	bfa8      	it	ge
 800b2d4:	4617      	movge	r7, r2
 800b2d6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b2da:	2f00      	cmp	r7, #0
 800b2dc:	f340 813c 	ble.w	800b558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b2e0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b2e2:	6829      	ldr	r1, [r5, #0]
 800b2e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b2e8:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b2ec:	6820      	ldr	r0, [r4, #0]
 800b2ee:	4411      	add	r1, r2
 800b2f0:	4299      	cmp	r1, r3
 800b2f2:	dd1a      	ble.n	800b32a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b2f4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b2f8:	440b      	add	r3, r1
 800b2fa:	4402      	add	r2, r0
 800b2fc:	b21b      	sxth	r3, r3
 800b2fe:	429a      	cmp	r2, r3
 800b300:	dc13      	bgt.n	800b32a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	9206      	str	r2, [sp, #24]
 800b30a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b30c:	9205      	str	r2, [sp, #20]
 800b30e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b310:	9500      	str	r5, [sp, #0]
 800b312:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b316:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b318:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b31a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b31e:	a912      	add	r1, sp, #72	@ 0x48
 800b320:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b324:	aa49      	add	r2, sp, #292	@ 0x124
 800b326:	4623      	mov	r3, r4
 800b328:	47c8      	blx	r9
 800b32a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b32e:	441a      	add	r2, r3
 800b330:	6963      	ldr	r3, [r4, #20]
 800b332:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b336:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b33a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b33e:	68a1      	ldr	r1, [r4, #8]
 800b340:	ed94 6a08 	vldr	s12, [r4, #32]
 800b344:	6022      	str	r2, [r4, #0]
 800b346:	3301      	adds	r3, #1
 800b348:	6163      	str	r3, [r4, #20]
 800b34a:	69a3      	ldr	r3, [r4, #24]
 800b34c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b350:	3b01      	subs	r3, #1
 800b352:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b356:	61a3      	str	r3, [r4, #24]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b362:	edd4 6a07 	vldr	s13, [r4, #28]
 800b366:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b36a:	440b      	add	r3, r1
 800b36c:	68e1      	ldr	r1, [r4, #12]
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b374:	428b      	cmp	r3, r1
 800b376:	edc4 6a07 	vstr	s13, [r4, #28]
 800b37a:	db15      	blt.n	800b3a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b37c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b380:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b384:	3201      	adds	r2, #1
 800b386:	edc4 6a07 	vstr	s13, [r4, #28]
 800b38a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b38e:	6022      	str	r2, [r4, #0]
 800b390:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b394:	1a5b      	subs	r3, r3, r1
 800b396:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b39a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3a4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b3a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3ac:	441a      	add	r2, r3
 800b3ae:	696b      	ldr	r3, [r5, #20]
 800b3b0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b3b4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b3b8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b3bc:	68a9      	ldr	r1, [r5, #8]
 800b3be:	ed95 6a08 	vldr	s12, [r5, #32]
 800b3c2:	602a      	str	r2, [r5, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	616b      	str	r3, [r5, #20]
 800b3c8:	69ab      	ldr	r3, [r5, #24]
 800b3ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b3d4:	61ab      	str	r3, [r5, #24]
 800b3d6:	692b      	ldr	r3, [r5, #16]
 800b3d8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b3dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3e0:	edd5 6a07 	vldr	s13, [r5, #28]
 800b3e4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b3e8:	440b      	add	r3, r1
 800b3ea:	68e9      	ldr	r1, [r5, #12]
 800b3ec:	612b      	str	r3, [r5, #16]
 800b3ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b3f2:	428b      	cmp	r3, r1
 800b3f4:	edc5 6a07 	vstr	s13, [r5, #28]
 800b3f8:	db15      	blt.n	800b426 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800b3fa:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b3fe:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b402:	3201      	adds	r2, #1
 800b404:	edc5 6a07 	vstr	s13, [r5, #28]
 800b408:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b40c:	602a      	str	r2, [r5, #0]
 800b40e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b412:	1a5b      	subs	r3, r3, r1
 800b414:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b418:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b41c:	612b      	str	r3, [r5, #16]
 800b41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b422:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b426:	3f01      	subs	r7, #1
 800b428:	e757      	b.n	800b2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800b42a:	ad39      	add	r5, sp, #228	@ 0xe4
 800b42c:	ac19      	add	r4, sp, #100	@ 0x64
 800b42e:	e72d      	b.n	800b28c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800b430:	4613      	mov	r3, r2
 800b432:	e744      	b.n	800b2be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800b434:	4613      	mov	r3, r2
 800b436:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800b43a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800b43c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800b440:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800b444:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800b448:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800b44c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800b450:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800b454:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800b458:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800b45a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800b45e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800b462:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800b466:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800b46a:	960e      	str	r6, [sp, #56]	@ 0x38
 800b46c:	469e      	mov	lr, r3
 800b46e:	461f      	mov	r7, r3
 800b470:	f04f 0900 	mov.w	r9, #0
 800b474:	2f00      	cmp	r7, #0
 800b476:	d146      	bne.n	800b506 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800b478:	449c      	add	ip, r3
 800b47a:	1ad7      	subs	r7, r2, r3
 800b47c:	f1b9 0f00 	cmp.w	r9, #0
 800b480:	d009      	beq.n	800b496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800b482:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800b486:	9039      	str	r0, [sp, #228]	@ 0xe4
 800b488:	913d      	str	r1, [sp, #244]	@ 0xf4
 800b48a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800b48e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800b492:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800b496:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b498:	910e      	str	r1, [sp, #56]	@ 0x38
 800b49a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b49e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b4a2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b4a6:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b4aa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b4ae:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b4b2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b4b6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b4ba:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b4be:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b4c2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b4c6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b4ca:	f04f 0800 	mov.w	r8, #0
 800b4ce:	f1be 0f00 	cmp.w	lr, #0
 800b4d2:	d030      	beq.n	800b536 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800b4d4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b4d6:	4431      	add	r1, r6
 800b4d8:	4549      	cmp	r1, r9
 800b4da:	4450      	add	r0, sl
 800b4dc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b4e0:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b4e4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b4e8:	db08      	blt.n	800b4fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800b4ea:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b4ee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b4f2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	eba1 0109 	sub.w	r1, r1, r9
 800b4fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b500:	f04f 0801 	mov.w	r8, #1
 800b504:	e7e3      	b.n	800b4ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800b506:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b508:	4431      	add	r1, r6
 800b50a:	4541      	cmp	r1, r8
 800b50c:	4450      	add	r0, sl
 800b50e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b512:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b516:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b51a:	db08      	blt.n	800b52e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800b51c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b520:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b524:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b528:	3001      	adds	r0, #1
 800b52a:	eba1 0108 	sub.w	r1, r1, r8
 800b52e:	3f01      	subs	r7, #1
 800b530:	f04f 0901 	mov.w	r9, #1
 800b534:	e79e      	b.n	800b474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800b536:	449c      	add	ip, r3
 800b538:	1aff      	subs	r7, r7, r3
 800b53a:	f1b8 0f00 	cmp.w	r8, #0
 800b53e:	d009      	beq.n	800b554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800b540:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b544:	9019      	str	r0, [sp, #100]	@ 0x64
 800b546:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b54a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b54e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b552:	911d      	str	r1, [sp, #116]	@ 0x74
 800b554:	1ad2      	subs	r2, r2, r3
 800b556:	e6b5      	b.n	800b2c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	b923      	cbnz	r3, 800b568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b55e:	4b04      	ldr	r3, [pc, #16]	@ (800b570 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	6803      	ldr	r3, [r0, #0]
 800b564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b566:	4798      	blx	r3
 800b568:	b05b      	add	sp, #364	@ 0x16c
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	bf00      	nop
 800b570:	200125e0 	.word	0x200125e0

0800b574 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	4604      	mov	r4, r0
 800b578:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800b57c:	9805      	ldr	r0, [sp, #20]
 800b57e:	6061      	str	r1, [r4, #4]
 800b580:	2500      	movs	r5, #0
 800b582:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b586:	8263      	strh	r3, [r4, #18]
 800b588:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800b58c:	8025      	strh	r5, [r4, #0]
 800b58e:	7221      	strb	r1, [r4, #8]
 800b590:	7266      	strb	r6, [r4, #9]
 800b592:	60e0      	str	r0, [r4, #12]
 800b594:	8222      	strh	r2, [r4, #16]
 800b596:	82a3      	strh	r3, [r4, #20]
 800b598:	82e5      	strh	r5, [r4, #22]
 800b59a:	8325      	strh	r5, [r4, #24]
 800b59c:	8365      	strh	r5, [r4, #26]
 800b59e:	83a5      	strh	r5, [r4, #28]
 800b5a0:	83e5      	strh	r5, [r4, #30]
 800b5a2:	8425      	strh	r5, [r4, #32]
 800b5a4:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800b5a8:	b32e      	cbz	r6, 800b5f6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b5aa:	6803      	ldr	r3, [r0, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	4798      	blx	r3
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	b300      	cbz	r0, 800b5f6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b5b4:	68e0      	ldr	r0, [r4, #12]
 800b5b6:	6803      	ldr	r3, [r0, #0]
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	4798      	blx	r3
 800b5be:	4605      	mov	r5, r0
 800b5c0:	b1c8      	cbz	r0, 800b5f6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b5c2:	7b43      	ldrb	r3, [r0, #13]
 800b5c4:	7a82      	ldrb	r2, [r0, #10]
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	8423      	strh	r3, [r4, #32]
 800b5d0:	7a63      	ldrb	r3, [r4, #9]
 800b5d2:	2b06      	cmp	r3, #6
 800b5d4:	d10f      	bne.n	800b5f6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b5d6:	68e0      	ldr	r0, [r4, #12]
 800b5d8:	6803      	ldr	r3, [r0, #0]
 800b5da:	462a      	mov	r2, r5
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5de:	4631      	mov	r1, r6
 800b5e0:	4798      	blx	r3
 800b5e2:	7b6b      	ldrb	r3, [r5, #13]
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b5ea:	7aab      	ldrb	r3, [r5, #10]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	4418      	add	r0, r3
 800b5f0:	8c23      	ldrh	r3, [r4, #32]
 800b5f2:	4418      	add	r0, r3
 800b5f4:	8420      	strh	r0, [r4, #32]
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}

0800b5fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800b5fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fe:	2400      	movs	r4, #0
 800b600:	b085      	sub	sp, #20
 800b602:	4681      	mov	r9, r0
 800b604:	4688      	mov	r8, r1
 800b606:	4692      	mov	sl, r2
 800b608:	469b      	mov	fp, r3
 800b60a:	4627      	mov	r7, r4
 800b60c:	4625      	mov	r5, r4
 800b60e:	4626      	mov	r6, r4
 800b610:	4554      	cmp	r4, sl
 800b612:	da2a      	bge.n	800b66a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b614:	2300      	movs	r3, #0
 800b616:	9303      	str	r3, [sp, #12]
 800b618:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b61c:	429d      	cmp	r5, r3
 800b61e:	d004      	beq.n	800b62a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800b620:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b624:	429d      	cmp	r5, r3
 800b626:	bf18      	it	ne
 800b628:	462f      	movne	r7, r5
 800b62a:	ab03      	add	r3, sp, #12
 800b62c:	4642      	mov	r2, r8
 800b62e:	4659      	mov	r1, fp
 800b630:	4648      	mov	r0, r9
 800b632:	f004 f98d 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b636:	4605      	mov	r5, r0
 800b638:	b1b8      	cbz	r0, 800b66a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b63a:	280a      	cmp	r0, #10
 800b63c:	d015      	beq.n	800b66a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b63e:	9a03      	ldr	r2, [sp, #12]
 800b640:	b18a      	cbz	r2, 800b666 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800b642:	7b50      	ldrb	r0, [r2, #13]
 800b644:	7a93      	ldrb	r3, [r2, #10]
 800b646:	8895      	ldrh	r5, [r2, #4]
 800b648:	0040      	lsls	r0, r0, #1
 800b64a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800b64e:	4303      	orrs	r3, r0
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	f8d8 3000 	ldr.w	r3, [r8]
 800b656:	4639      	mov	r1, r7
 800b658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b65a:	4640      	mov	r0, r8
 800b65c:	4798      	blx	r3
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	4418      	add	r0, r3
 800b662:	4406      	add	r6, r0
 800b664:	b2b6      	uxth	r6, r6
 800b666:	3401      	adds	r4, #1
 800b668:	e7d2      	b.n	800b610 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800b66a:	4630      	mov	r0, r6
 800b66c:	b005      	add	sp, #20
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b672 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800b672:	2a02      	cmp	r2, #2
 800b674:	b530      	push	{r4, r5, lr}
 800b676:	d011      	beq.n	800b69c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800b678:	2a03      	cmp	r2, #3
 800b67a:	d01c      	beq.n	800b6b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800b67c:	2a01      	cmp	r2, #1
 800b67e:	d10c      	bne.n	800b69a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b680:	888b      	ldrh	r3, [r1, #4]
 800b682:	8801      	ldrh	r1, [r0, #0]
 800b684:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b688:	8844      	ldrh	r4, [r0, #2]
 800b68a:	8004      	strh	r4, [r0, #0]
 800b68c:	1a5b      	subs	r3, r3, r1
 800b68e:	1a9b      	subs	r3, r3, r2
 800b690:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800b694:	8043      	strh	r3, [r0, #2]
 800b696:	8081      	strh	r1, [r0, #4]
 800b698:	80c2      	strh	r2, [r0, #6]
 800b69a:	bd30      	pop	{r4, r5, pc}
 800b69c:	88cb      	ldrh	r3, [r1, #6]
 800b69e:	8842      	ldrh	r2, [r0, #2]
 800b6a0:	1a9b      	subs	r3, r3, r2
 800b6a2:	88c2      	ldrh	r2, [r0, #6]
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	888a      	ldrh	r2, [r1, #4]
 800b6a8:	8801      	ldrh	r1, [r0, #0]
 800b6aa:	8043      	strh	r3, [r0, #2]
 800b6ac:	1a52      	subs	r2, r2, r1
 800b6ae:	8881      	ldrh	r1, [r0, #4]
 800b6b0:	1a52      	subs	r2, r2, r1
 800b6b2:	8002      	strh	r2, [r0, #0]
 800b6b4:	e7f1      	b.n	800b69a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b6b6:	88cb      	ldrh	r3, [r1, #6]
 800b6b8:	8841      	ldrh	r1, [r0, #2]
 800b6ba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b6be:	f9b0 5000 	ldrsh.w	r5, [r0]
 800b6c2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b6c6:	8045      	strh	r5, [r0, #2]
 800b6c8:	1a5b      	subs	r3, r3, r1
 800b6ca:	1a9b      	subs	r3, r3, r2
 800b6cc:	8003      	strh	r3, [r0, #0]
 800b6ce:	8082      	strh	r2, [r0, #4]
 800b6d0:	80c4      	strh	r4, [r0, #6]
 800b6d2:	e7e2      	b.n	800b69a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800b6d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	b09f      	sub	sp, #124	@ 0x7c
 800b6da:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6dc:	9312      	str	r3, [sp, #72]	@ 0x48
 800b6de:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b6e0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b6e2:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800b6e4:	8812      	ldrh	r2, [r2, #0]
 800b6e6:	889b      	ldrh	r3, [r3, #4]
 800b6e8:	900e      	str	r0, [sp, #56]	@ 0x38
 800b6ea:	4413      	add	r3, r2
 800b6ec:	6828      	ldr	r0, [r5, #0]
 800b6ee:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b6f0:	b21b      	sxth	r3, r3
 800b6f2:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6f4:	6803      	ldr	r3, [r0, #0]
 800b6f6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800b6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6fc:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800b700:	4798      	blx	r3
 800b702:	682b      	ldr	r3, [r5, #0]
 800b704:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b706:	7b1a      	ldrb	r2, [r3, #12]
 800b708:	7adb      	ldrb	r3, [r3, #11]
 800b70a:	9215      	str	r2, [sp, #84]	@ 0x54
 800b70c:	9316      	str	r3, [sp, #88]	@ 0x58
 800b70e:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800b712:	2c00      	cmp	r4, #0
 800b714:	d067      	beq.n	800b7e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800b716:	7c2b      	ldrb	r3, [r5, #16]
 800b718:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800b71a:	2b06      	cmp	r3, #6
 800b71c:	bf14      	ite	ne
 800b71e:	2301      	movne	r3, #1
 800b720:	2302      	moveq	r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	f04f 0900 	mov.w	r9, #0
 800b728:	9310      	str	r3, [sp, #64]	@ 0x40
 800b72a:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800b72e:	464c      	mov	r4, r9
 800b730:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b736:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b738:	4293      	cmp	r3, r2
 800b73a:	f280 808b 	bge.w	800b854 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b73e:	2300      	movs	r3, #0
 800b740:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800b744:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800b748:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b74c:	429c      	cmp	r4, r3
 800b74e:	d006      	beq.n	800b75e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800b750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b752:	f242 020b 	movw	r2, #8203	@ 0x200b
 800b756:	4294      	cmp	r4, r2
 800b758:	bf18      	it	ne
 800b75a:	4623      	movne	r3, r4
 800b75c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b75e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b760:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800b762:	682a      	ldr	r2, [r5, #0]
 800b764:	428b      	cmp	r3, r1
 800b766:	db40      	blt.n	800b7ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800b768:	6813      	ldr	r3, [r2, #0]
 800b76a:	4610      	mov	r0, r2
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	4798      	blx	r3
 800b770:	4604      	mov	r4, r0
 800b772:	6828      	ldr	r0, [r5, #0]
 800b774:	6803      	ldr	r3, [r0, #0]
 800b776:	aa1d      	add	r2, sp, #116	@ 0x74
 800b778:	689f      	ldr	r7, [r3, #8]
 800b77a:	4621      	mov	r1, r4
 800b77c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b780:	47b8      	blx	r7
 800b782:	901c      	str	r0, [sp, #112]	@ 0x70
 800b784:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b788:	429c      	cmp	r4, r3
 800b78a:	f000 80ea 	beq.w	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b78e:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b792:	429c      	cmp	r4, r3
 800b794:	f000 80e5 	beq.w	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b798:	2c00      	cmp	r4, #0
 800b79a:	f000 810c 	beq.w	800b9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b79e:	2c0a      	cmp	r4, #10
 800b7a0:	d05e      	beq.n	800b860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b7a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b7a4:	b36a      	cbz	r2, 800b802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800b7a6:	8894      	ldrh	r4, [r2, #4]
 800b7a8:	f1bb 0f00 	cmp.w	fp, #0
 800b7ac:	d03a      	beq.n	800b824 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800b7ae:	f892 900d 	ldrb.w	r9, [r2, #13]
 800b7b2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b7b6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800b7ba:	f892 900a 	ldrb.w	r9, [r2, #10]
 800b7be:	f1bb 0f01 	cmp.w	fp, #1
 800b7c2:	ea49 0903 	orr.w	r9, r9, r3
 800b7c6:	d133      	bne.n	800b830 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800b7c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7ca:	eba6 0609 	sub.w	r6, r6, r9
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d14d      	bne.n	800b86e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b7d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b7d4:	eb09 0306 	add.w	r3, r9, r6
 800b7d8:	4413      	add	r3, r2
 800b7da:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b7dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	da4e      	bge.n	800b882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b7e4:	e036      	b.n	800b854 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b7e6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b7e8:	e79c      	b.n	800b724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800b7ea:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	ab1d      	add	r3, sp, #116	@ 0x74
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	ab1c      	add	r3, sp, #112	@ 0x70
 800b7f8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b7fa:	f004 f8f2 	bl	800f9e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800b7fe:	4604      	mov	r4, r0
 800b800:	e7c0      	b.n	800b784 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800b802:	6828      	ldr	r0, [r5, #0]
 800b804:	6803      	ldr	r3, [r0, #0]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	4798      	blx	r3
 800b80a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b80e:	4298      	cmp	r0, r3
 800b810:	f000 80a7 	beq.w	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b814:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b818:	4298      	cmp	r0, r3
 800b81a:	f000 80a2 	beq.w	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b81e:	f1bb 0f00 	cmp.w	fp, #0
 800b822:	d100      	bne.n	800b826 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800b824:	444e      	add	r6, r9
 800b826:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b828:	2a00      	cmp	r2, #0
 800b82a:	d1c0      	bne.n	800b7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800b82c:	4691      	mov	r9, r2
 800b82e:	e098      	b.n	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 80c1 	beq.w	800b9ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800b838:	f1bb 0f00 	cmp.w	fp, #0
 800b83c:	d117      	bne.n	800b86e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b83e:	6828      	ldr	r0, [r5, #0]
 800b840:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b842:	6803      	ldr	r3, [r0, #0]
 800b844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b846:	4798      	blx	r3
 800b848:	4406      	add	r6, r0
 800b84a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b84c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b84e:	1af3      	subs	r3, r6, r3
 800b850:	4293      	cmp	r3, r2
 800b852:	dd16      	ble.n	800b882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b854:	2c00      	cmp	r4, #0
 800b856:	f000 80ae 	beq.w	800b9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b85a:	2c0a      	cmp	r4, #10
 800b85c:	f040 809c 	bne.w	800b998 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800b860:	240a      	movs	r4, #10
 800b862:	fab4 f084 	clz	r0, r4
 800b866:	0940      	lsrs	r0, r0, #5
 800b868:	b01f      	add	sp, #124	@ 0x7c
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	6828      	ldr	r0, [r5, #0]
 800b870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b872:	6803      	ldr	r3, [r0, #0]
 800b874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b876:	4798      	blx	r3
 800b878:	f1bb 0f01 	cmp.w	fp, #1
 800b87c:	eba6 0600 	sub.w	r6, r6, r0
 800b880:	d0a7      	beq.n	800b7d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800b882:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b884:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b886:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800b88a:	f9b3 8000 	ldrsh.w	r8, [r3]
 800b88e:	7b43      	ldrb	r3, [r0, #13]
 800b890:	015b      	lsls	r3, r3, #5
 800b892:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b896:	7983      	ldrb	r3, [r0, #6]
 800b898:	4431      	add	r1, r6
 800b89a:	4313      	orrs	r3, r2
 800b89c:	440b      	add	r3, r1
 800b89e:	4543      	cmp	r3, r8
 800b8a0:	db5f      	blt.n	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b8a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8a4:	4299      	cmp	r1, r3
 800b8a6:	da5c      	bge.n	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b8a8:	6828      	ldr	r0, [r5, #0]
 800b8aa:	6803      	ldr	r3, [r0, #0]
 800b8ac:	45b0      	cmp	r8, r6
 800b8ae:	bfc8      	it	gt
 800b8b0:	eba8 0806 	subgt.w	r8, r8, r6
 800b8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b6:	bfcc      	ite	gt
 800b8b8:	fa1f f888 	uxthgt.w	r8, r8
 800b8bc:	f04f 0800 	movle.w	r8, #0
 800b8c0:	4798      	blx	r3
 800b8c2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b8c4:	7b53      	ldrb	r3, [r2, #13]
 800b8c6:	00d9      	lsls	r1, r3, #3
 800b8c8:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800b8cc:	7a11      	ldrb	r1, [r2, #8]
 800b8ce:	4339      	orrs	r1, r7
 800b8d0:	065f      	lsls	r7, r3, #25
 800b8d2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b8d4:	bf44      	itt	mi
 800b8d6:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800b8da:	b209      	sxthmi	r1, r1
 800b8dc:	19c7      	adds	r7, r0, r7
 800b8de:	1a7f      	subs	r7, r7, r1
 800b8e0:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b8e2:	b2bf      	uxth	r7, r7
 800b8e4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b8e8:	fa0f fa87 	sxth.w	sl, r7
 800b8ec:	4551      	cmp	r1, sl
 800b8ee:	dd3c      	ble.n	800b96a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	79d0      	ldrb	r0, [r2, #7]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f8:	4303      	orrs	r3, r0
 800b8fa:	449a      	add	sl, r3
 800b8fc:	4551      	cmp	r1, sl
 800b8fe:	dc30      	bgt.n	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b900:	1bcf      	subs	r7, r1, r7
 800b902:	b23f      	sxth	r7, r7
 800b904:	468a      	mov	sl, r1
 800b906:	9219      	str	r2, [sp, #100]	@ 0x64
 800b908:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b90a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b90c:	6828      	ldr	r0, [r5, #0]
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d12d      	bne.n	800b96e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800b912:	9318      	str	r3, [sp, #96]	@ 0x60
 800b914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b916:	6819      	ldr	r1, [r3, #0]
 800b918:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800b91a:	6801      	ldr	r1, [r0, #0]
 800b91c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b91e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b920:	4788      	blx	r1
 800b922:	79a9      	ldrb	r1, [r5, #6]
 800b924:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b926:	7ba9      	ldrb	r1, [r5, #14]
 800b928:	910a      	str	r1, [sp, #40]	@ 0x28
 800b92a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800b92e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b930:	68a9      	ldr	r1, [r5, #8]
 800b932:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b934:	9306      	str	r3, [sp, #24]
 800b936:	b2bf      	uxth	r7, r7
 800b938:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800b93c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b93e:	9304      	str	r3, [sp, #16]
 800b940:	44b0      	add	r8, r6
 800b942:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800b946:	fa0f f388 	sxth.w	r3, r8
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b94e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b950:	9205      	str	r2, [sp, #20]
 800b952:	f8cd a004 	str.w	sl, [sp, #4]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b95e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800b960:	47b8      	blx	r7
 800b962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b964:	3301      	adds	r3, #1
 800b966:	930d      	str	r3, [sp, #52]	@ 0x34
 800b968:	e6e4      	b.n	800b734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800b96a:	2700      	movs	r7, #0
 800b96c:	e7cb      	b.n	800b906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800b96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b970:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b974:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b976:	f8dc 1000 	ldr.w	r1, [ip]
 800b97a:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800b97e:	79aa      	ldrb	r2, [r5, #6]
 800b980:	9203      	str	r2, [sp, #12]
 800b982:	7baa      	ldrb	r2, [r5, #14]
 800b984:	9202      	str	r2, [sp, #8]
 800b986:	68aa      	ldr	r2, [r5, #8]
 800b988:	e9cd 0200 	strd	r0, r2, [sp]
 800b98c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b98e:	688f      	ldr	r7, [r1, #8]
 800b990:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b992:	4660      	mov	r0, ip
 800b994:	47b8      	blx	r7
 800b996:	e7e4      	b.n	800b962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b998:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b99a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b99c:	3501      	adds	r5, #1
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	f6bf af5f 	bge.w	800b862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b9a8:	f7f7 fe4e 	bl	8003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	b110      	cbz	r0, 800b9b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b9b0:	280a      	cmp	r0, #10
 800b9b2:	d1f2      	bne.n	800b99a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800b9b4:	e754      	b.n	800b860 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	e753      	b.n	800b862 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b9ba:	f1bb 0f00 	cmp.w	fp, #0
 800b9be:	f43f af44 	beq.w	800b84a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800b9c2:	e75e      	b.n	800b882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>:
 800b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	b089      	sub	sp, #36	@ 0x24
 800b9ca:	4699      	mov	r9, r3
 800b9cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b9ce:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 800b9d2:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b9d4:	4683      	mov	fp, r0
 800b9d6:	460d      	mov	r5, r1
 800b9d8:	4690      	mov	r8, r2
 800b9da:	bb1b      	cbnz	r3, 800ba24 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b9dc:	6813      	ldr	r3, [r2, #0]
 800b9de:	4610      	mov	r0, r2
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	4798      	blx	r3
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	b1e8      	cbz	r0, 800ba24 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	4798      	blx	r3
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d03f      	beq.n	800ba7a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9fa:	7b47      	ldrb	r7, [r0, #13]
 800b9fc:	007f      	lsls	r7, r7, #1
 800b9fe:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800ba02:	7a87      	ldrb	r7, [r0, #10]
 800ba04:	431f      	orrs	r7, r3
 800ba06:	6933      	ldr	r3, [r6, #16]
 800ba08:	7c1b      	ldrb	r3, [r3, #16]
 800ba0a:	443c      	add	r4, r7
 800ba0c:	2b06      	cmp	r3, #6
 800ba0e:	b2a4      	uxth	r4, r4
 800ba10:	d108      	bne.n	800ba24 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800ba12:	f8d8 3000 	ldr.w	r3, [r8]
 800ba16:	4651      	mov	r1, sl
 800ba18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4798      	blx	r3
 800ba1e:	4438      	add	r0, r7
 800ba20:	4404      	add	r4, r0
 800ba22:	b2a4      	uxth	r4, r4
 800ba24:	6933      	ldr	r3, [r6, #16]
 800ba26:	795a      	ldrb	r2, [r3, #5]
 800ba28:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ba2c:	bb42      	cbnz	r2, 800ba80 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xbc>
 800ba2e:	f1b9 0f01 	cmp.w	r9, #1
 800ba32:	d101      	bne.n	800ba38 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800ba34:	4423      	add	r3, r4
 800ba36:	802b      	strh	r3, [r5, #0]
 800ba38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba3a:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800ba3e:	fab2 f282 	clz	r2, r2
 800ba42:	0952      	lsrs	r2, r2, #5
 800ba44:	9206      	str	r2, [sp, #24]
 800ba46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba48:	9205      	str	r2, [sp, #20]
 800ba4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ba4c:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800ba50:	6932      	ldr	r2, [r6, #16]
 800ba52:	9202      	str	r2, [sp, #8]
 800ba54:	68f2      	ldr	r2, [r6, #12]
 800ba56:	9201      	str	r2, [sp, #4]
 800ba58:	f9b5 2000 	ldrsh.w	r2, [r5]
 800ba5c:	9200      	str	r2, [sp, #0]
 800ba5e:	e9d6 1200 	ldrd	r1, r2, [r6]
 800ba62:	4658      	mov	r0, fp
 800ba64:	f7ff fe36 	bl	800b6d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800ba68:	6933      	ldr	r3, [r6, #16]
 800ba6a:	795b      	ldrb	r3, [r3, #5]
 800ba6c:	b97b      	cbnz	r3, 800ba8e <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xca>
 800ba6e:	f1b9 0f00 	cmp.w	r9, #0
 800ba72:	d102      	bne.n	800ba7a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800ba74:	8828      	ldrh	r0, [r5, #0]
 800ba76:	4404      	add	r4, r0
 800ba78:	802c      	strh	r4, [r5, #0]
 800ba7a:	b009      	add	sp, #36	@ 0x24
 800ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba80:	2a01      	cmp	r2, #1
 800ba82:	d1d9      	bne.n	800ba38 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800ba84:	f1b9 0f00 	cmp.w	r9, #0
 800ba88:	d1d6      	bne.n	800ba38 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800ba8a:	1b1b      	subs	r3, r3, r4
 800ba8c:	e7d3      	b.n	800ba36 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x72>
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d1f3      	bne.n	800ba7a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800ba92:	f1b9 0f01 	cmp.w	r9, #1
 800ba96:	d1f0      	bne.n	800ba7a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800ba98:	8828      	ldrh	r0, [r5, #0]
 800ba9a:	1b04      	subs	r4, r0, r4
 800ba9c:	e7ec      	b.n	800ba78 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb4>
	...

0800baa0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	b0a9      	sub	sp, #164	@ 0xa4
 800baa6:	4683      	mov	fp, r0
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baac:	4615      	mov	r5, r2
 800baae:	f89d 30d0 	ldrb.w	r3, [sp, #208]	@ 0xd0
 800bab2:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800bab4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bab6:	2264      	movs	r2, #100	@ 0x64
 800bab8:	a80f      	add	r0, sp, #60	@ 0x3c
 800baba:	f008 f950 	bl	8013d5e <memcpy>
 800babe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bac0:	2300      	movs	r3, #0
 800bac2:	930e      	str	r3, [sp, #56]	@ 0x38
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	f040 815e 	bne.w	800bd86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e6>
 800baca:	9207      	str	r2, [sp, #28]
 800bacc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bace:	4690      	mov	r8, r2
 800bad0:	4616      	mov	r6, r2
 800bad2:	9208      	str	r2, [sp, #32]
 800bad4:	4614      	mov	r4, r2
 800bad6:	920a      	str	r2, [sp, #40]	@ 0x28
 800bad8:	4691      	mov	r9, r2
 800bada:	9b07      	ldr	r3, [sp, #28]
 800badc:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800bade:	4293      	cmp	r3, r2
 800bae0:	f280 8103 	bge.w	800bcea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x24a>
 800bae4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bae8:	4599      	cmp	r9, r3
 800baea:	d006      	beq.n	800bafa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a>
 800baec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800baee:	f242 030b 	movw	r3, #8203	@ 0x200b
 800baf2:	4599      	cmp	r9, r3
 800baf4:	bf18      	it	ne
 800baf6:	464a      	movne	r2, r9
 800baf8:	920a      	str	r2, [sp, #40]	@ 0x28
 800bafa:	462a      	mov	r2, r5
 800bafc:	ab0e      	add	r3, sp, #56	@ 0x38
 800bafe:	2100      	movs	r1, #0
 800bb00:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800bb02:	f003 ff25 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bb06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb08:	4681      	mov	r9, r0
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	d06e      	beq.n	800bbec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800bb0e:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800bb12:	682b      	ldr	r3, [r5, #0]
 800bb14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb18:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800bb1c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800bb20:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800bb24:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800bb28:	ea4a 0a00 	orr.w	sl, sl, r0
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	4798      	blx	r3
 800bb30:	4450      	add	r0, sl
 800bb32:	b287      	uxth	r7, r0
 800bb34:	f1b9 0f00 	cmp.w	r9, #0
 800bb38:	f000 80d7 	beq.w	800bcea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x24a>
 800bb3c:	f1b9 0f0a 	cmp.w	r9, #10
 800bb40:	f000 80d3 	beq.w	800bcea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x24a>
 800bb44:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f029 0120 	bic.w	r1, r9, #32
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	b289      	uxth	r1, r1
 800bb52:	d94d      	bls.n	800bbf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800bb54:	295b      	cmp	r1, #91	@ 0x5b
 800bb56:	d04b      	beq.n	800bbf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800bb58:	295d      	cmp	r1, #93	@ 0x5d
 800bb5a:	d049      	beq.n	800bbf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800bb5c:	f029 0202 	bic.w	r2, r9, #2
 800bb60:	b292      	uxth	r2, r2
 800bb62:	f1a2 0a3c 	sub.w	sl, r2, #60	@ 0x3c
 800bb66:	f1da 0200 	rsbs	r2, sl, #0
 800bb6a:	eb42 020a 	adc.w	r2, r2, sl
 800bb6e:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d93d      	bls.n	800bbf4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x154>
 800bb78:	f5a9 6acc 	sub.w	sl, r9, #1632	@ 0x660
 800bb7c:	fa1f fa8a 	uxth.w	sl, sl
 800bb80:	f1ba 0f09 	cmp.w	sl, #9
 800bb84:	bf8c      	ite	hi
 800bb86:	2300      	movhi	r3, #0
 800bb88:	2301      	movls	r3, #1
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	f5a9 63b2 	sub.w	r3, r9, #1424	@ 0x590
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800bb96:	d305      	bcc.n	800bba4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x104>
 800bb98:	f509 6396 	add.w	r3, r9, #1200	@ 0x4b0
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	f5b3 7f6c 	cmp.w	r3, #944	@ 0x3b0
 800bba2:	d229      	bcs.n	800bbf8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x158>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	f083 0301 	eor.w	r3, r3, #1
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800bbb0:	4581      	cmp	r9, r0
 800bbb2:	d023      	beq.n	800bbfc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x15c>
 800bbb4:	f242 000b 	movw	r0, #8203	@ 0x200b
 800bbb8:	eba9 0c00 	sub.w	ip, r9, r0
 800bbbc:	f1dc 0000 	rsbs	r0, ip, #0
 800bbc0:	eb40 000c 	adc.w	r0, r0, ip
 800bbc4:	3941      	subs	r1, #65	@ 0x41
 800bbc6:	2919      	cmp	r1, #25
 800bbc8:	f240 82a8 	bls.w	800c11c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x67c>
 800bbcc:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800bbd0:	f240 8291 	bls.w	800c0f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x656>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f040 828e 	bne.w	800c0f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x656>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f040 828b 	bne.w	800c0f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x656>
 800bbe0:	2e03      	cmp	r6, #3
 800bbe2:	d850      	bhi.n	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800bbe4:	e8df f006 	tbb	[pc, r6]
 800bbe8:	62392b13 	.word	0x62392b13
 800bbec:	4617      	mov	r7, r2
 800bbee:	e7a1      	b.n	800bb34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x94>
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	e7bc      	b.n	800bb6e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xce>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e7c8      	b.n	800bb8a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xea>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e7d7      	b.n	800bbac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x10c>
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	e7e1      	b.n	800bbc4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x124>
 800bc00:	2e03      	cmp	r6, #3
 800bc02:	d840      	bhi.n	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800bc04:	e8df f006 	tbb	[pc, r6]
 800bc08:	46290902 	.word	0x46290902
 800bc0c:	b99b      	cbnz	r3, 800bc36 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x196>
 800bc0e:	f04f 0a01 	mov.w	sl, #1
 800bc12:	4656      	mov	r6, sl
 800bc14:	f8cd a018 	str.w	sl, [sp, #24]
 800bc18:	e017      	b.n	800bc4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1aa>
 800bc1a:	b183      	cbz	r3, 800bc3e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x19e>
 800bc1c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc1e:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc22:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc26:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9905      	ldr	r1, [sp, #20]
 800bc30:	4658      	mov	r0, fp
 800bc32:	f7ff fec7 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc36:	463c      	mov	r4, r7
 800bc38:	f04f 0801 	mov.w	r8, #1
 800bc3c:	e034      	b.n	800bca8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x208>
 800bc3e:	443c      	add	r4, r7
 800bc40:	2601      	movs	r6, #1
 800bc42:	f108 0a01 	add.w	sl, r8, #1
 800bc46:	b2a7      	uxth	r7, r4
 800bc48:	9606      	str	r6, [sp, #24]
 800bc4a:	9b07      	ldr	r3, [sp, #28]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	9b06      	ldr	r3, [sp, #24]
 800bc52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc54:	46d0      	mov	r8, sl
 800bc56:	463c      	mov	r4, r7
 800bc58:	e73f      	b.n	800bada <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a>
 800bc5a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc5c:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc60:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc64:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	462a      	mov	r2, r5
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	9905      	ldr	r1, [sp, #20]
 800bc6e:	4658      	mov	r0, fp
 800bc70:	f7ff fea8 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc74:	e7cb      	b.n	800bc0e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x16e>
 800bc76:	b913      	cbnz	r3, 800bc7e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1de>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f000 825d 	beq.w	800c138 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x698>
 800bc7e:	443c      	add	r4, r7
 800bc80:	f108 0801 	add.w	r8, r8, #1
 800bc84:	b2a4      	uxth	r4, r4
 800bc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc88:	9306      	str	r3, [sp, #24]
 800bc8a:	46c2      	mov	sl, r8
 800bc8c:	4627      	mov	r7, r4
 800bc8e:	e7dc      	b.n	800bc4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1aa>
 800bc90:	2200      	movs	r2, #0
 800bc92:	9206      	str	r2, [sp, #24]
 800bc94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc96:	f102 0a01 	add.w	sl, r2, #1
 800bc9a:	b14b      	cbz	r3, 800bcb0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x210>
 800bc9c:	9b08      	ldr	r3, [sp, #32]
 800bc9e:	441c      	add	r4, r3
 800bca0:	fa17 f484 	uxtah	r4, r7, r4
 800bca4:	44d0      	add	r8, sl
 800bca6:	b2a4      	uxth	r4, r4
 800bca8:	2602      	movs	r6, #2
 800bcaa:	e7ec      	b.n	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800bcac:	2201      	movs	r2, #1
 800bcae:	e7f0      	b.n	800bc92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1f2>
 800bcb0:	9b06      	ldr	r3, [sp, #24]
 800bcb2:	b19b      	cbz	r3, 800bcdc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x23c>
 800bcb4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bcb6:	f8cd 8004 	str.w	r8, [sp, #4]
 800bcba:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bcbe:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	9905      	ldr	r1, [sp, #20]
 800bcc8:	4658      	mov	r0, fp
 800bcca:	f7ff fe7b 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bcce:	9b08      	ldr	r3, [sp, #32]
 800bcd0:	441c      	add	r4, r3
 800bcd2:	fa17 f484 	uxtah	r4, r7, r4
 800bcd6:	b2a7      	uxth	r7, r4
 800bcd8:	2601      	movs	r6, #1
 800bcda:	e7b6      	b.n	800bc4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1aa>
 800bcdc:	9b08      	ldr	r3, [sp, #32]
 800bcde:	443b      	add	r3, r7
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 800bce6:	2603      	movs	r6, #3
 800bce8:	e7cd      	b.n	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800bcea:	2e01      	cmp	r6, #1
 800bcec:	d107      	bne.n	800bcfe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x25e>
 800bcee:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bcf0:	f8cd 8004 	str.w	r8, [sp, #4]
 800bcf4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bcf8:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	e020      	b.n	800bd40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800bcfe:	2e02      	cmp	r6, #2
 800bd00:	d107      	bne.n	800bd12 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x272>
 800bd02:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bd04:	f8cd 8004 	str.w	r8, [sp, #4]
 800bd08:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bd0c:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	e037      	b.n	800bd82 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 800bd12:	2e03      	cmp	r6, #3
 800bd14:	d11a      	bne.n	800bd4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2ac>
 800bd16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd18:	ae0f      	add	r6, sp, #60	@ 0x3c
 800bd1a:	b343      	cbz	r3, 800bd6e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2ce>
 800bd1c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bd1e:	9905      	ldr	r1, [sp, #20]
 800bd20:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bd24:	e9cd 6800 	strd	r6, r8, [sp]
 800bd28:	2301      	movs	r3, #1
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	4658      	mov	r0, fp
 800bd2e:	f7ff fe49 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bd32:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bd34:	9303      	str	r3, [sp, #12]
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	9302      	str	r3, [sp, #8]
 800bd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3c:	e9cd 6300 	strd	r6, r3, [sp]
 800bd40:	2300      	movs	r3, #0
 800bd42:	462a      	mov	r2, r5
 800bd44:	9905      	ldr	r1, [sp, #20]
 800bd46:	4658      	mov	r0, fp
 800bd48:	f7ff fe3c 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bd4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd4e:	b15b      	cbz	r3, 800bd68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2c8>
 800bd50:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bd52:	9303      	str	r3, [sp, #12]
 800bd54:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bd56:	2300      	movs	r3, #0
 800bd58:	9200      	str	r2, [sp, #0]
 800bd5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800bd5e:	462a      	mov	r2, r5
 800bd60:	9905      	ldr	r1, [sp, #20]
 800bd62:	4658      	mov	r0, fp
 800bd64:	f7ff fe2e 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bd68:	b029      	add	sp, #164	@ 0xa4
 800bd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bd70:	9303      	str	r3, [sp, #12]
 800bd72:	9b08      	ldr	r3, [sp, #32]
 800bd74:	441c      	add	r4, r3
 800bd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd78:	4443      	add	r3, r8
 800bd7a:	e9cd 6300 	strd	r6, r3, [sp]
 800bd7e:	b2a4      	uxth	r4, r4
 800bd80:	9402      	str	r4, [sp, #8]
 800bd82:	2301      	movs	r3, #1
 800bd84:	e7dd      	b.n	800bd42 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a2>
 800bd86:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bd8a:	9307      	str	r3, [sp, #28]
 800bd8c:	461e      	mov	r6, r3
 800bd8e:	4698      	mov	r8, r3
 800bd90:	9306      	str	r3, [sp, #24]
 800bd92:	461c      	mov	r4, r3
 800bd94:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd96:	4699      	mov	r9, r3
 800bd98:	9b08      	ldr	r3, [sp, #32]
 800bd9a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	f280 8172 	bge.w	800c086 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5e6>
 800bda2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bda6:	4599      	cmp	r9, r3
 800bda8:	d006      	beq.n	800bdb8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x318>
 800bdaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdac:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bdb0:	4591      	cmp	r9, r2
 800bdb2:	bf18      	it	ne
 800bdb4:	464b      	movne	r3, r9
 800bdb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdb8:	462a      	mov	r2, r5
 800bdba:	ab0e      	add	r3, sp, #56	@ 0x38
 800bdbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdbe:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800bdc0:	f003 fdc6 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bdc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdc6:	4681      	mov	r9, r0
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	d075      	beq.n	800beb8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x418>
 800bdcc:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdd6:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800bdda:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800bdde:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800bde2:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800bde6:	ea4a 0a00 	orr.w	sl, sl, r0
 800bdea:	4628      	mov	r0, r5
 800bdec:	4798      	blx	r3
 800bdee:	4450      	add	r0, sl
 800bdf0:	b287      	uxth	r7, r0
 800bdf2:	f1b9 0f00 	cmp.w	r9, #0
 800bdf6:	f000 8146 	beq.w	800c086 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5e6>
 800bdfa:	f1b9 0f0a 	cmp.w	r9, #10
 800bdfe:	f000 8142 	beq.w	800c086 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5e6>
 800be02:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800be06:	b29b      	uxth	r3, r3
 800be08:	f029 0220 	bic.w	r2, r9, #32
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	b292      	uxth	r2, r2
 800be10:	d954      	bls.n	800bebc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41c>
 800be12:	2a5b      	cmp	r2, #91	@ 0x5b
 800be14:	d052      	beq.n	800bebc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41c>
 800be16:	2a5d      	cmp	r2, #93	@ 0x5d
 800be18:	d050      	beq.n	800bebc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41c>
 800be1a:	f029 0a02 	bic.w	sl, r9, #2
 800be1e:	fa1f fa8a 	uxth.w	sl, sl
 800be22:	f1aa 033c 	sub.w	r3, sl, #60	@ 0x3c
 800be26:	f1d3 0a00 	rsbs	sl, r3, #0
 800be2a:	eb4a 0a03 	adc.w	sl, sl, r3
 800be2e:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800be32:	b29b      	uxth	r3, r3
 800be34:	2b09      	cmp	r3, #9
 800be36:	d944      	bls.n	800bec2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x422>
 800be38:	f5a9 63cc 	sub.w	r3, r9, #1632	@ 0x660
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b09      	cmp	r3, #9
 800be40:	bf8c      	ite	hi
 800be42:	2300      	movhi	r3, #0
 800be44:	2301      	movls	r3, #1
 800be46:	f5a9 61b2 	sub.w	r1, r9, #1424	@ 0x590
 800be4a:	b289      	uxth	r1, r1
 800be4c:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 800be50:	d308      	bcc.n	800be64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 800be52:	f509 6196 	add.w	r1, r9, #1200	@ 0x4b0
 800be56:	b289      	uxth	r1, r1
 800be58:	f5b1 7f6c 	cmp.w	r1, #944	@ 0x3b0
 800be5c:	d302      	bcc.n	800be64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	d001      	beq.n	800be68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c8>
 800be64:	f083 0a01 	eor.w	sl, r3, #1
 800be68:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800be6c:	4589      	cmp	r9, r1
 800be6e:	d02a      	beq.n	800bec6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x426>
 800be70:	f242 010b 	movw	r1, #8203	@ 0x200b
 800be74:	eba9 0c01 	sub.w	ip, r9, r1
 800be78:	f1dc 0100 	rsbs	r1, ip, #0
 800be7c:	eb41 010c 	adc.w	r1, r1, ip
 800be80:	3a41      	subs	r2, #65	@ 0x41
 800be82:	2a19      	cmp	r2, #25
 800be84:	d90a      	bls.n	800be9c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3fc>
 800be86:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800be8a:	f240 8159 	bls.w	800c140 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6a0>
 800be8e:	f1ba 0f00 	cmp.w	sl, #0
 800be92:	f040 8155 	bne.w	800c140 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6a0>
 800be96:	2900      	cmp	r1, #0
 800be98:	f040 8152 	bne.w	800c140 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6a0>
 800be9c:	f1b8 0f07 	cmp.w	r8, #7
 800bea0:	f200 80e7 	bhi.w	800c072 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5d2>
 800bea4:	e8df f018 	tbh	[pc, r8, lsl #1]
 800bea8:	00e5001d 	.word	0x00e5001d
 800beac:	00e50030 	.word	0x00e50030
 800beb0:	00850053 	.word	0x00850053
 800beb4:	00c40068 	.word	0x00c40068
 800beb8:	4617      	mov	r7, r2
 800beba:	e79a      	b.n	800bdf2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x352>
 800bebc:	f04f 0a01 	mov.w	sl, #1
 800bec0:	e7b5      	b.n	800be2e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x38e>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7bf      	b.n	800be46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a6>
 800bec6:	2101      	movs	r1, #1
 800bec8:	e7da      	b.n	800be80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3e0>
 800beca:	2200      	movs	r2, #0
 800becc:	b9cb      	cbnz	r3, 800bf02 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x462>
 800bece:	bb52      	cbnz	r2, 800bf26 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x486>
 800bed0:	2601      	movs	r6, #1
 800bed2:	f04f 0802 	mov.w	r8, #2
 800bed6:	9609      	str	r6, [sp, #36]	@ 0x24
 800bed8:	9b08      	ldr	r3, [sp, #32]
 800beda:	3301      	adds	r3, #1
 800bedc:	9308      	str	r3, [sp, #32]
 800bede:	463c      	mov	r4, r7
 800bee0:	e75a      	b.n	800bd98 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2f8>
 800bee2:	2201      	movs	r2, #1
 800bee4:	e7f2      	b.n	800becc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x42c>
 800bee6:	2200      	movs	r2, #0
 800bee8:	b183      	cbz	r3, 800bf0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x46c>
 800beea:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800beec:	9601      	str	r6, [sp, #4]
 800beee:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bef2:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	462a      	mov	r2, r5
 800bef8:	2301      	movs	r3, #1
 800befa:	9905      	ldr	r1, [sp, #20]
 800befc:	4658      	mov	r0, fp
 800befe:	f7ff fd61 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf02:	463c      	mov	r4, r7
 800bf04:	2601      	movs	r6, #1
 800bf06:	e01e      	b.n	800bf46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800bf08:	2201      	movs	r2, #1
 800bf0a:	e7ed      	b.n	800bee8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x448>
 800bf0c:	b172      	cbz	r2, 800bf2c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x48c>
 800bf0e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf10:	9601      	str	r6, [sp, #4]
 800bf12:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bf16:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	462a      	mov	r2, r5
 800bf1e:	9905      	ldr	r1, [sp, #20]
 800bf20:	4658      	mov	r0, fp
 800bf22:	f7ff fd4f 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf26:	463c      	mov	r4, r7
 800bf28:	2601      	movs	r6, #1
 800bf2a:	e028      	b.n	800bf7e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4de>
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	443c      	add	r4, r7
 800bf30:	2301      	movs	r3, #1
 800bf32:	b2a7      	uxth	r7, r4
 800bf34:	f04f 0802 	mov.w	r8, #2
 800bf38:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3a:	e7cd      	b.n	800bed8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x438>
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	b143      	cbz	r3, 800bf52 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4b2>
 800bf40:	3601      	adds	r6, #1
 800bf42:	443c      	add	r4, r7
 800bf44:	b2a4      	uxth	r4, r4
 800bf46:	f04f 0804 	mov.w	r8, #4
 800bf4a:	4627      	mov	r7, r4
 800bf4c:	e7c4      	b.n	800bed8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x438>
 800bf4e:	2101      	movs	r1, #1
 800bf50:	e7f5      	b.n	800bf3e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x49e>
 800bf52:	f1a9 022c 	sub.w	r2, r9, #44	@ 0x2c
 800bf56:	b292      	uxth	r2, r2
 800bf58:	2a0e      	cmp	r2, #14
 800bf5a:	d806      	bhi.n	800bf6a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4ca>
 800bf5c:	f244 030d 	movw	r3, #16397	@ 0x400d
 800bf60:	fa23 f202 	lsr.w	r2, r3, r2
 800bf64:	07d0      	lsls	r0, r2, #31
 800bf66:	f100 8101 	bmi.w	800c16c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6cc>
 800bf6a:	f2a9 636b 	subw	r3, r9, #1643	@ 0x66b
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	f240 80fb 	bls.w	800c16c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6cc>
 800bf76:	b129      	cbz	r1, 800bf84 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4e4>
 800bf78:	3601      	adds	r6, #1
 800bf7a:	443c      	add	r4, r7
 800bf7c:	b2a4      	uxth	r4, r4
 800bf7e:	f04f 0806 	mov.w	r8, #6
 800bf82:	e7e2      	b.n	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>
 800bf84:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf86:	9601      	str	r6, [sp, #4]
 800bf88:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bf8c:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	462a      	mov	r2, r5
 800bf92:	460b      	mov	r3, r1
 800bf94:	4658      	mov	r0, fp
 800bf96:	9905      	ldr	r1, [sp, #20]
 800bf98:	f7ff fd14 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf9c:	e798      	b.n	800bed0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	b14b      	cbz	r3, 800bfb6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x516>
 800bfa2:	9b07      	ldr	r3, [sp, #28]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	441e      	add	r6, r3
 800bfa8:	9b06      	ldr	r3, [sp, #24]
 800bfaa:	441c      	add	r4, r3
 800bfac:	fa17 f484 	uxtah	r4, r7, r4
 800bfb0:	e7c8      	b.n	800bf44 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a4>
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	e7f4      	b.n	800bfa0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x500>
 800bfb6:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 800bfba:	b18a      	cbz	r2, 800bfe0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x540>
 800bfbc:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bfbe:	9905      	ldr	r1, [sp, #20]
 800bfc0:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bfc4:	e9cd 8600 	strd	r8, r6, [sp]
 800bfc8:	462a      	mov	r2, r5
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f7ff fcfa 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bfd0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bfd2:	9303      	str	r3, [sp, #12]
 800bfd4:	9b06      	ldr	r3, [sp, #24]
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	9b07      	ldr	r3, [sp, #28]
 800bfda:	e9cd 8300 	strd	r8, r3, [sp]
 800bfde:	e79c      	b.n	800bf1a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x47a>
 800bfe0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bfe2:	9905      	ldr	r1, [sp, #20]
 800bfe4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bfe8:	e9cd 8600 	strd	r8, r6, [sp]
 800bfec:	4613      	mov	r3, r2
 800bfee:	4658      	mov	r0, fp
 800bff0:	462a      	mov	r2, r5
 800bff2:	f7ff fce7 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bff6:	9b07      	ldr	r3, [sp, #28]
 800bff8:	1c5e      	adds	r6, r3, #1
 800bffa:	9b06      	ldr	r3, [sp, #24]
 800bffc:	19dc      	adds	r4, r3, r7
 800bffe:	e797      	b.n	800bf30 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x490>
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1b9      	bne.n	800bf78 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d8>
 800c004:	f1ba 0f00 	cmp.w	sl, #0
 800c008:	f000 80b6 	beq.w	800c178 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6d8>
 800c00c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800c00e:	9601      	str	r6, [sp, #4]
 800c010:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800c014:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c016:	9200      	str	r2, [sp, #0]
 800c018:	9905      	ldr	r1, [sp, #20]
 800c01a:	462a      	mov	r2, r5
 800c01c:	4658      	mov	r0, fp
 800c01e:	f7ff fcd1 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c022:	2601      	movs	r6, #1
 800c024:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800c028:	f04f 0802 	mov.w	r8, #2
 800c02c:	e754      	b.n	800bed8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x438>
 800c02e:	b13b      	cbz	r3, 800c040 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a0>
 800c030:	9b07      	ldr	r3, [sp, #28]
 800c032:	3301      	adds	r3, #1
 800c034:	441e      	add	r6, r3
 800c036:	9b06      	ldr	r3, [sp, #24]
 800c038:	441c      	add	r4, r3
 800c03a:	fa17 f484 	uxtah	r4, r7, r4
 800c03e:	e79d      	b.n	800bf7c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4dc>
 800c040:	9a07      	ldr	r2, [sp, #28]
 800c042:	3201      	adds	r2, #1
 800c044:	920c      	str	r2, [sp, #48]	@ 0x30
 800c046:	9a06      	ldr	r2, [sp, #24]
 800c048:	4417      	add	r7, r2
 800c04a:	b2bf      	uxth	r7, r7
 800c04c:	f1ba 0f00 	cmp.w	sl, #0
 800c050:	f000 8098 	beq.w	800c184 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6e4>
 800c054:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800c056:	9601      	str	r6, [sp, #4]
 800c058:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800c05c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c05e:	9200      	str	r2, [sp, #0]
 800c060:	9905      	ldr	r1, [sp, #20]
 800c062:	462a      	mov	r2, r5
 800c064:	4658      	mov	r0, fp
 800c066:	f7ff fcad 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c06a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c06c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800c070:	e7da      	b.n	800c028 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x588>
 800c072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	f47f af68 	bne.w	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>
 800c07a:	f1a8 0202 	sub.w	r2, r8, #2
 800c07e:	4253      	negs	r3, r2
 800c080:	4153      	adcs	r3, r2
 800c082:	9309      	str	r3, [sp, #36]	@ 0x24
 800c084:	e761      	b.n	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>
 800c086:	f1b8 0f02 	cmp.w	r8, #2
 800c08a:	d104      	bne.n	800c096 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5f6>
 800c08c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c08e:	9601      	str	r6, [sp, #4]
 800c090:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c094:	e63a      	b.n	800bd0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x26c>
 800c096:	f008 0805 	and.w	r8, r8, #5
 800c09a:	f1b8 0f04 	cmp.w	r8, #4
 800c09e:	d104      	bne.n	800c0aa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x60a>
 800c0a0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c0a2:	9601      	str	r6, [sp, #4]
 800c0a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c0a8:	e626      	b.n	800bcf8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x258>
 800c0aa:	f1b8 0f05 	cmp.w	r8, #5
 800c0ae:	f47f ae4d 	bne.w	800bd4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2ac>
 800c0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b4:	af0f      	add	r7, sp, #60	@ 0x3c
 800c0b6:	b193      	cbz	r3, 800c0de <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x63e>
 800c0b8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c0ba:	9905      	ldr	r1, [sp, #20]
 800c0bc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c0c0:	e9cd 7600 	strd	r7, r6, [sp]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	462a      	mov	r2, r5
 800c0c8:	4658      	mov	r0, fp
 800c0ca:	f7ff fc7b 	bl	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c0ce:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c0d0:	9303      	str	r3, [sp, #12]
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	9302      	str	r3, [sp, #8]
 800c0d6:	9b07      	ldr	r3, [sp, #28]
 800c0d8:	e9cd 7300 	strd	r7, r3, [sp]
 800c0dc:	e651      	b.n	800bd82 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 800c0de:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	9b06      	ldr	r3, [sp, #24]
 800c0e4:	441c      	add	r4, r3
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	b2a4      	uxth	r4, r4
 800c0ea:	441e      	add	r6, r3
 800c0ec:	9402      	str	r4, [sp, #8]
 800c0ee:	e9cd 7600 	strd	r7, r6, [sp]
 800c0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f4:	e625      	b.n	800bd42 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a2>
 800c0f6:	9906      	ldr	r1, [sp, #24]
 800c0f8:	2900      	cmp	r1, #0
 800c0fa:	f47f ad81 	bne.w	800bc00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x160>
 800c0fe:	b96a      	cbnz	r2, 800c11c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x67c>
 800c100:	2e03      	cmp	r6, #3
 800c102:	f63f adc0 	bhi.w	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800c106:	a201      	add	r2, pc, #4	@ (adr r2, 800c10c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>)
 800c108:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c10c:	0800bc0d 	.word	0x0800bc0d
 800c110:	0800bc1b 	.word	0x0800bc1b
 800c114:	0800bc77 	.word	0x0800bc77
 800c118:	0800bc91 	.word	0x0800bc91
 800c11c:	2e03      	cmp	r6, #3
 800c11e:	f63f adb2 	bhi.w	800bc86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e6>
 800c122:	a201      	add	r2, pc, #4	@ (adr r2, 800c128 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x688>)
 800c124:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c128:	0800bc0d 	.word	0x0800bc0d
 800c12c:	0800bc1b 	.word	0x0800bc1b
 800c130:	0800bc5b 	.word	0x0800bc5b
 800c134:	0800bcad 	.word	0x0800bcad
 800c138:	2301      	movs	r3, #1
 800c13a:	9708      	str	r7, [sp, #32]
 800c13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c13e:	e5d2      	b.n	800bce6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800c140:	f1b8 0f07 	cmp.w	r8, #7
 800c144:	d895      	bhi.n	800c072 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5d2>
 800c146:	a201      	add	r2, pc, #4	@ (adr r2, 800c14c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6ac>)
 800c148:	f852 f028 	ldr.w	pc, [r2, r8, lsl #2]
 800c14c:	0800becb 	.word	0x0800becb
 800c150:	0800c073 	.word	0x0800c073
 800c154:	0800bee7 	.word	0x0800bee7
 800c158:	0800c073 	.word	0x0800c073
 800c15c:	0800bf3d 	.word	0x0800bf3d
 800c160:	0800bf9f 	.word	0x0800bf9f
 800c164:	0800c001 	.word	0x0800c001
 800c168:	0800c02f 	.word	0x0800c02f
 800c16c:	2301      	movs	r3, #1
 800c16e:	9706      	str	r7, [sp, #24]
 800c170:	9307      	str	r3, [sp, #28]
 800c172:	f04f 0805 	mov.w	r8, #5
 800c176:	e6e8      	b.n	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>
 800c178:	2301      	movs	r3, #1
 800c17a:	9706      	str	r7, [sp, #24]
 800c17c:	9307      	str	r3, [sp, #28]
 800c17e:	f04f 0807 	mov.w	r8, #7
 800c182:	e6e2      	b.n	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>
 800c184:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c186:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800c18a:	e6de      	b.n	800bf4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4aa>

0800c18c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	8ac4      	ldrh	r4, [r0, #22]
 800c190:	8b45      	ldrh	r5, [r0, #26]
 800c192:	8343      	strh	r3, [r0, #26]
 800c194:	442c      	add	r4, r5
 800c196:	1ae4      	subs	r4, r4, r3
 800c198:	82c4      	strh	r4, [r0, #22]
 800c19a:	8b83      	ldrh	r3, [r0, #28]
 800c19c:	8b04      	ldrh	r4, [r0, #24]
 800c19e:	4422      	add	r2, r4
 800c1a0:	440c      	add	r4, r1
 800c1a2:	1a59      	subs	r1, r3, r1
 800c1a4:	83c2      	strh	r2, [r0, #30]
 800c1a6:	8304      	strh	r4, [r0, #24]
 800c1a8:	8381      	strh	r1, [r0, #28]
 800c1aa:	bd30      	pop	{r4, r5, pc}

0800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	8a47      	ldrh	r7, [r0, #18]
 800c1b4:	68c0      	ldr	r0, [r0, #12]
 800c1b6:	6803      	ldr	r3, [r0, #0]
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1bc:	4798      	blx	r3
 800c1be:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c1c2:	7a63      	ldrb	r3, [r4, #9]
 800c1c4:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c1c8:	42b7      	cmp	r7, r6
 800c1ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1ce:	bfac      	ite	ge
 800c1d0:	f04f 0900 	movge.w	r9, #0
 800c1d4:	f04f 0901 	movlt.w	r9, #1
 800c1d8:	2b05      	cmp	r3, #5
 800c1da:	d804      	bhi.n	800c1e6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c1dc:	e8df f003 	tbb	[pc, r3]
 800c1e0:	470e0854 	.word	0x470e0854
 800c1e4:	4c4c      	.short	0x4c4c
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	46a9      	mov	r9, r5
 800c1ea:	462e      	mov	r6, r5
 800c1ec:	462f      	mov	r7, r5
 800c1ee:	e00d      	b.n	800c20c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c1f0:	42b7      	cmp	r7, r6
 800c1f2:	bfb4      	ite	lt
 800c1f4:	2600      	movlt	r6, #0
 800c1f6:	2601      	movge	r6, #1
 800c1f8:	2500      	movs	r5, #0
 800c1fa:	e7f7      	b.n	800c1ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c1fc:	42b7      	cmp	r7, r6
 800c1fe:	464d      	mov	r5, r9
 800c200:	f04f 0900 	mov.w	r9, #0
 800c204:	bfb4      	ite	lt
 800c206:	2600      	movlt	r6, #0
 800c208:	2601      	movge	r6, #1
 800c20a:	464f      	mov	r7, r9
 800c20c:	f04f 0800 	mov.w	r8, #0
 800c210:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c214:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c218:	f8cd 8004 	str.w	r8, [sp, #4]
 800c21c:	2300      	movs	r3, #0
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	8823      	ldrh	r3, [r4, #0]
 800c222:	2b20      	cmp	r3, #32
 800c224:	d034      	beq.n	800c290 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c226:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c22a:	1a5a      	subs	r2, r3, r1
 800c22c:	f1d2 0a00 	rsbs	sl, r2, #0
 800c230:	eb4a 0a02 	adc.w	sl, sl, r2
 800c234:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c238:	4293      	cmp	r3, r2
 800c23a:	d009      	beq.n	800c250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	9a01      	ldr	r2, [sp, #4]
 800c240:	bf18      	it	ne
 800c242:	461a      	movne	r2, r3
 800c244:	9201      	str	r2, [sp, #4]
 800c246:	bf0c      	ite	eq
 800c248:	f04f 0a01 	moveq.w	sl, #1
 800c24c:	f04f 0a00 	movne.w	sl, #0
 800c250:	ab03      	add	r3, sp, #12
 800c252:	68e2      	ldr	r2, [r4, #12]
 800c254:	7a21      	ldrb	r1, [r4, #8]
 800c256:	6860      	ldr	r0, [r4, #4]
 800c258:	f003 fb7a 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c25c:	8020      	strh	r0, [r4, #0]
 800c25e:	b9d8      	cbnz	r0, 800c298 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c260:	8ba2      	ldrh	r2, [r4, #28]
 800c262:	2300      	movs	r3, #0
 800c264:	4611      	mov	r1, r2
 800c266:	4620      	mov	r0, r4
 800c268:	f7ff ff90 	bl	800c18c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c26c:	e06e      	b.n	800c34c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c26e:	2500      	movs	r5, #0
 800c270:	46a9      	mov	r9, r5
 800c272:	462e      	mov	r6, r5
 800c274:	2701      	movs	r7, #1
 800c276:	e7c9      	b.n	800c20c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c278:	42b7      	cmp	r7, r6
 800c27a:	f04f 0500 	mov.w	r5, #0
 800c27e:	bfb4      	ite	lt
 800c280:	2700      	movlt	r7, #0
 800c282:	2701      	movge	r7, #1
 800c284:	462e      	mov	r6, r5
 800c286:	e7c1      	b.n	800c20c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c288:	2500      	movs	r5, #0
 800c28a:	46a9      	mov	r9, r5
 800c28c:	2601      	movs	r6, #1
 800c28e:	e7ad      	b.n	800c1ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	f04f 0a01 	mov.w	sl, #1
 800c296:	e7db      	b.n	800c250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c298:	8b63      	ldrh	r3, [r4, #26]
 800c29a:	280a      	cmp	r0, #10
 800c29c:	f103 0301 	add.w	r3, r3, #1
 800c2a0:	8363      	strh	r3, [r4, #26]
 800c2a2:	d0dd      	beq.n	800c260 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c2a4:	9a03      	ldr	r2, [sp, #12]
 800c2a6:	bb62      	cbnz	r2, 800c302 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c2a8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c2ac:	4298      	cmp	r0, r3
 800c2ae:	d003      	beq.n	800c2b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c2b0:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c2b4:	4298      	cmp	r0, r3
 800c2b6:	d1b1      	bne.n	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2b8:	8823      	ldrh	r3, [r4, #0]
 800c2ba:	8ba1      	ldrh	r1, [r4, #28]
 800c2bc:	2b20      	cmp	r3, #32
 800c2be:	d003      	beq.n	800c2c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c2c0:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c2c4:	4283      	cmp	r3, r0
 800c2c6:	d131      	bne.n	800c32c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c2c8:	f1ba 0f00 	cmp.w	sl, #0
 800c2cc:	bf0a      	itet	eq
 800c2ce:	4688      	moveq	r8, r1
 800c2d0:	4650      	movne	r0, sl
 800c2d2:	2001      	moveq	r0, #1
 800c2d4:	440a      	add	r2, r1
 800c2d6:	8b23      	ldrh	r3, [r4, #24]
 800c2d8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c2dc:	b292      	uxth	r2, r2
 800c2de:	83a2      	strh	r2, [r4, #28]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f1b9 0f00 	cmp.w	r9, #0
 800c2e6:	d102      	bne.n	800c2ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	d042      	beq.n	800c372 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c2ec:	b300      	cbz	r0, 800c330 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c2ee:	8c21      	ldrh	r1, [r4, #32]
 800c2f0:	4419      	add	r1, r3
 800c2f2:	458c      	cmp	ip, r1
 800c2f4:	da37      	bge.n	800c366 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c2f6:	8ae1      	ldrh	r1, [r4, #22]
 800c2f8:	2900      	cmp	r1, #0
 800c2fa:	d034      	beq.n	800c366 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c2fc:	4563      	cmp	r3, ip
 800c2fe:	dd8d      	ble.n	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c300:	e01d      	b.n	800c33e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c302:	8893      	ldrh	r3, [r2, #4]
 800c304:	8023      	strh	r3, [r4, #0]
 800c306:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c30a:	9901      	ldr	r1, [sp, #4]
 800c30c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c310:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c314:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c318:	ea4b 0b00 	orr.w	fp, fp, r0
 800c31c:	68e0      	ldr	r0, [r4, #12]
 800c31e:	6803      	ldr	r3, [r0, #0]
 800c320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c322:	4798      	blx	r3
 800c324:	eb0b 0200 	add.w	r2, fp, r0
 800c328:	b292      	uxth	r2, r2
 800c32a:	e7c5      	b.n	800c2b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c32c:	2000      	movs	r0, #0
 800c32e:	e7d1      	b.n	800c2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c330:	4563      	cmp	r3, ip
 800c332:	f77f af73 	ble.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c336:	8ae3      	ldrh	r3, [r4, #22]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f43f af6f 	beq.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c33e:	2301      	movs	r3, #1
 800c340:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c344:	8c22      	ldrh	r2, [r4, #32]
 800c346:	8be3      	ldrh	r3, [r4, #30]
 800c348:	4413      	add	r3, r2
 800c34a:	83e3      	strh	r3, [r4, #30]
 800c34c:	68e0      	ldr	r0, [r4, #12]
 800c34e:	6803      	ldr	r3, [r0, #0]
 800c350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c352:	4798      	blx	r3
 800c354:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c358:	4418      	add	r0, r3
 800c35a:	8a63      	ldrh	r3, [r4, #18]
 800c35c:	1a18      	subs	r0, r3, r0
 800c35e:	8260      	strh	r0, [r4, #18]
 800c360:	b005      	add	sp, #20
 800c362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c366:	2300      	movs	r3, #0
 800c368:	4611      	mov	r1, r2
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7ff ff0e 	bl	800c18c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c370:	e754      	b.n	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c372:	4563      	cmp	r3, ip
 800c374:	dd14      	ble.n	800c3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c376:	b117      	cbz	r7, 800c37e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c378:	2301      	movs	r3, #1
 800c37a:	460a      	mov	r2, r1
 800c37c:	e772      	b.n	800c264 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c37e:	2e00      	cmp	r6, #0
 800c380:	f43f af4c 	beq.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c384:	2800      	cmp	r0, #0
 800c386:	f47f af49 	bne.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	d002      	beq.n	800c396 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c390:	2301      	movs	r3, #1
 800c392:	4642      	mov	r2, r8
 800c394:	e767      	b.n	800c266 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c396:	8ae3      	ldrh	r3, [r4, #22]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f43f af3f 	beq.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c39e:	e7d5      	b.n	800c34c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f47f af3b 	bne.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c3a6:	f1ba 0f00 	cmp.w	sl, #0
 800c3aa:	f43f af37 	beq.w	800c21c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	e7da      	b.n	800c36a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c3b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b08f      	sub	sp, #60	@ 0x3c
 800c3ba:	4617      	mov	r7, r2
 800c3bc:	461c      	mov	r4, r3
 800c3be:	460e      	mov	r6, r1
 800c3c0:	b1d1      	cbz	r1, 800c3f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c8:	4798      	blx	r3
 800c3ca:	4240      	negs	r0, r0
 800c3cc:	b200      	sxth	r0, r0
 800c3ce:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c3d2:	9603      	str	r6, [sp, #12]
 800c3d4:	9700      	str	r7, [sp, #0]
 800c3d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3da:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c3de:	4629      	mov	r1, r5
 800c3e0:	a805      	add	r0, sp, #20
 800c3e2:	f7ff f8c7 	bl	800b574 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c3e6:	2401      	movs	r4, #1
 800c3e8:	a805      	add	r0, sp, #20
 800c3ea:	f7ff fedf 	bl	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c3ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c3f2:	b163      	cbz	r3, 800c40e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c3f4:	3401      	adds	r4, #1
 800c3f6:	e7f7      	b.n	800c3e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c3f8:	f003 fb78 	bl	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c3fc:	2401      	movs	r4, #1
 800c3fe:	280a      	cmp	r0, #10
 800c400:	4628      	mov	r0, r5
 800c402:	bf08      	it	eq
 800c404:	3401      	addeq	r4, #1
 800c406:	f003 fb71 	bl	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d1f7      	bne.n	800c3fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c40e:	b2a0      	uxth	r0, r4
 800c410:	b00f      	add	sp, #60	@ 0x3c
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c414 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	b0e7      	sub	sp, #412	@ 0x19c
 800c41a:	468a      	mov	sl, r1
 800c41c:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 800c420:	9006      	str	r0, [sp, #24]
 800c422:	461c      	mov	r4, r3
 800c424:	f1b9 0f00 	cmp.w	r9, #0
 800c428:	f000 80c6 	beq.w	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80c2 	beq.w	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c434:	7ba3      	ldrb	r3, [r4, #14]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 80be 	beq.w	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c43c:	6810      	ldr	r0, [r2, #0]
 800c43e:	6851      	ldr	r1, [r2, #4]
 800c440:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800c444:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800c448:	af09      	add	r7, sp, #36	@ 0x24
 800c44a:	463b      	mov	r3, r7
 800c44c:	c303      	stmia	r3!, {r0, r1}
 800c44e:	79a2      	ldrb	r2, [r4, #6]
 800c450:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800c454:	7966      	ldrb	r6, [r4, #5]
 800c456:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c45a:	a90b      	add	r1, sp, #44	@ 0x2c
 800c45c:	4638      	mov	r0, r7
 800c45e:	2500      	movs	r5, #0
 800c460:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c462:	f7ff f906 	bl	800b672 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c466:	a90b      	add	r1, sp, #44	@ 0x2c
 800c468:	79a2      	ldrb	r2, [r4, #6]
 800c46a:	4608      	mov	r0, r1
 800c46c:	f7ff f901 	bl	800b672 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c470:	2e00      	cmp	r6, #0
 800c472:	d16a      	bne.n	800c54a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c474:	f894 8004 	ldrb.w	r8, [r4, #4]
 800c478:	ebb8 0805 	subs.w	r8, r8, r5
 800c47c:	bf18      	it	ne
 800c47e:	f04f 0801 	movne.w	r8, #1
 800c482:	4645      	mov	r5, r8
 800c484:	a81b      	add	r0, sp, #108	@ 0x6c
 800c486:	f002 fa82 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800c48a:	6820      	ldr	r0, [r4, #0]
 800c48c:	6803      	ldr	r3, [r0, #0]
 800c48e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c490:	4798      	blx	r3
 800c492:	4683      	mov	fp, r0
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	6803      	ldr	r3, [r0, #0]
 800c498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c49a:	4798      	blx	r3
 800c49c:	465b      	mov	r3, fp
 800c49e:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c4a0:	9000      	str	r0, [sp, #0]
 800c4a2:	4649      	mov	r1, r9
 800c4a4:	a81b      	add	r0, sp, #108	@ 0x6c
 800c4a6:	f002 facd 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c4aa:	6820      	ldr	r0, [r4, #0]
 800c4ac:	6803      	ldr	r3, [r0, #0]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b0:	4798      	blx	r3
 800c4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b6:	4403      	add	r3, r0
 800c4b8:	9305      	str	r3, [sp, #20]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	f893 b009 	ldrb.w	fp, [r3, #9]
 800c4c0:	4483      	add	fp, r0
 800c4c2:	a834      	add	r0, sp, #208	@ 0xd0
 800c4c4:	f002 fa63 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800c4c8:	7c23      	ldrb	r3, [r4, #16]
 800c4ca:	b17b      	cbz	r3, 800c4ec <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	6803      	ldr	r3, [r0, #0]
 800c4d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4d2:	4798      	blx	r3
 800c4d4:	9007      	str	r0, [sp, #28]
 800c4d6:	6820      	ldr	r0, [r4, #0]
 800c4d8:	6802      	ldr	r2, [r0, #0]
 800c4da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c4dc:	4790      	blx	r2
 800c4de:	9b07      	ldr	r3, [sp, #28]
 800c4e0:	9000      	str	r0, [sp, #0]
 800c4e2:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	a834      	add	r0, sp, #208	@ 0xd0
 800c4e8:	f002 faac 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c4ec:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800c4f0:	7be2      	ldrb	r2, [r4, #15]
 800c4f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c4f6:	1a8a      	subs	r2, r1, r2
 800c4f8:	7c21      	ldrb	r1, [r4, #16]
 800c4fa:	9103      	str	r1, [sp, #12]
 800c4fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c500:	9102      	str	r1, [sp, #8]
 800c502:	6821      	ldr	r1, [r4, #0]
 800c504:	9101      	str	r1, [sp, #4]
 800c506:	7961      	ldrb	r1, [r4, #5]
 800c508:	9100      	str	r1, [sp, #0]
 800c50a:	b292      	uxth	r2, r2
 800c50c:	a934      	add	r1, sp, #208	@ 0xd0
 800c50e:	a812      	add	r0, sp, #72	@ 0x48
 800c510:	f7ff f830 	bl	800b574 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c514:	7c23      	ldrb	r3, [r4, #16]
 800c516:	b30b      	cbz	r3, 800c55c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x148>
 800c518:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c51c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c520:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c524:	445b      	add	r3, fp
 800c526:	4293      	cmp	r3, r2
 800c528:	da49      	bge.n	800c5be <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c52a:	a812      	add	r0, sp, #72	@ 0x48
 800c52c:	f7ff fe3e 	bl	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c530:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800c534:	3b01      	subs	r3, #1
 800c536:	b29b      	uxth	r3, r3
 800c538:	454b      	cmp	r3, r9
 800c53a:	9307      	str	r3, [sp, #28]
 800c53c:	d029      	beq.n	800c592 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17e>
 800c53e:	4631      	mov	r1, r6
 800c540:	a81b      	add	r0, sp, #108	@ 0x6c
 800c542:	f7f7 f881 	bl	8003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c546:	9b07      	ldr	r3, [sp, #28]
 800c548:	e7f4      	b.n	800c534 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x120>
 800c54a:	2e01      	cmp	r6, #1
 800c54c:	d103      	bne.n	800c556 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800c54e:	7925      	ldrb	r5, [r4, #4]
 800c550:	3d02      	subs	r5, #2
 800c552:	bf18      	it	ne
 800c554:	2501      	movne	r5, #1
 800c556:	f04f 0801 	mov.w	r8, #1
 800c55a:	e793      	b.n	800c484 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x70>
 800c55c:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 800c560:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c564:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c568:	445b      	add	r3, fp
 800c56a:	4293      	cmp	r3, r2
 800c56c:	da27      	bge.n	800c5be <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c56e:	a81b      	add	r0, sp, #108	@ 0x6c
 800c570:	f003 fabc 	bl	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c574:	b300      	cbz	r0, 800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c576:	280a      	cmp	r0, #10
 800c578:	d1f2      	bne.n	800c560 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c57a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c57e:	444b      	add	r3, r9
 800c580:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c584:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c588:	eba3 0309 	sub.w	r3, r3, r9
 800c58c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c590:	e7e6      	b.n	800c560 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c592:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c596:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c59a:	441a      	add	r2, r3
 800c59c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800c5a0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c5aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c5ae:	b11b      	cbz	r3, 800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5b0:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d0b1      	beq.n	800c51c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x108>
 800c5b8:	b067      	add	sp, #412	@ 0x19c
 800c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	@ 0x34
 800c5c4:	e9cd 7410 	strd	r7, r4, [sp, #64]	@ 0x40
 800c5c8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c5cc:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 800c5d0:	4699      	mov	r9, r3
 800c5d2:	7c23      	ldrb	r3, [r4, #16]
 800c5d4:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 800c5d8:	b113      	cbz	r3, 800c5e0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1cc>
 800c5da:	a812      	add	r0, sp, #72	@ 0x48
 800c5dc:	f7ff fde6 	bl	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c5e0:	f1b8 0f00 	cmp.w	r8, #0
 800c5e4:	d068      	beq.n	800c6b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a4>
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	d061      	beq.n	800c6ae <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x29a>
 800c5ea:	7c23      	ldrb	r3, [r4, #16]
 800c5ec:	b9c3      	cbnz	r3, 800c620 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20c>
 800c5ee:	2264      	movs	r2, #100	@ 0x64
 800c5f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c5f2:	a84d      	add	r0, sp, #308	@ 0x134
 800c5f4:	f007 fbb3 	bl	8013d5e <memcpy>
 800c5f8:	4633      	mov	r3, r6
 800c5fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c5fe:	6821      	ldr	r1, [r4, #0]
 800c600:	a84d      	add	r0, sp, #308	@ 0x134
 800c602:	f7fe fffa 	bl	800b5fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c606:	b200      	sxth	r0, r0
 800c608:	7922      	ldrb	r2, [r4, #4]
 800c60a:	2e00      	cmp	r6, #0
 800c60c:	d144      	bne.n	800c698 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x284>
 800c60e:	2a01      	cmp	r2, #1
 800c610:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c614:	d107      	bne.n	800c626 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800c616:	1a1b      	subs	r3, r3, r0
 800c618:	2002      	movs	r0, #2
 800c61a:	fb93 f3f0 	sdiv	r3, r3, r0
 800c61e:	e005      	b.n	800c62c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c620:	f9bd 0066 	ldrsh.w	r0, [sp, #102]	@ 0x66
 800c624:	e7f0      	b.n	800c608 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f4>
 800c626:	7be2      	ldrb	r2, [r4, #15]
 800c628:	1a9b      	subs	r3, r3, r2
 800c62a:	1a1b      	subs	r3, r3, r0
 800c62c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800c630:	7c23      	ldrb	r3, [r4, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d042      	beq.n	800c6bc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 800c636:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 800c63a:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c63e:	9201      	str	r2, [sp, #4]
 800c640:	f10d 0a34 	add.w	sl, sp, #52	@ 0x34
 800c644:	f10d 0b6c 	add.w	fp, sp, #108	@ 0x6c
 800c648:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800c64c:	6822      	ldr	r2, [r4, #0]
 800c64e:	f8cd b000 	str.w	fp, [sp]
 800c652:	4633      	mov	r3, r6
 800c654:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 800c658:	9806      	ldr	r0, [sp, #24]
 800c65a:	f7ff fa21 	bl	800baa0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>
 800c65e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c662:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800c666:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800c66a:	4413      	add	r3, r2
 800c66c:	1a8a      	subs	r2, r1, r2
 800c66e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c672:	f89d 206a 	ldrb.w	r2, [sp, #106]	@ 0x6a
 800c676:	b21b      	sxth	r3, r3
 800c678:	f8aa 3008 	strh.w	r3, [sl, #8]
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	d19b      	bne.n	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c680:	88fa      	ldrh	r2, [r7, #6]
 800c682:	8879      	ldrh	r1, [r7, #2]
 800c684:	440a      	add	r2, r1
 800c686:	b212      	sxth	r2, r2
 800c688:	4293      	cmp	r3, r2
 800c68a:	dc95      	bgt.n	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c68c:	4658      	mov	r0, fp
 800c68e:	f002 f9a5 	bl	800e9dc <_ZN8touchgfx12TextProvider11endOfStringEv>
 800c692:	2800      	cmp	r0, #0
 800c694:	d09d      	beq.n	800c5d2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1be>
 800c696:	e78f      	b.n	800c5b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c698:	2a01      	cmp	r2, #1
 800c69a:	d103      	bne.n	800c6a4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x290>
 800c69c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c6a0:	4403      	add	r3, r0
 800c6a2:	e7b9      	b.n	800c618 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x204>
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	d1c3      	bne.n	800c630 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x21c>
 800c6a8:	7be3      	ldrb	r3, [r4, #15]
 800c6aa:	4403      	add	r3, r0
 800c6ac:	e7be      	b.n	800c62c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c6ae:	7be2      	ldrb	r2, [r4, #15]
 800c6b0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 800c6b4:	1a9b      	subs	r3, r3, r2
 800c6b6:	e7b9      	b.n	800c62c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c6b8:	7be3      	ldrb	r3, [r4, #15]
 800c6ba:	e7b7      	b.n	800c62c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c6bc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c6c0:	e7bd      	b.n	800c63e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>

0800c6c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d818      	bhi.n	800c6f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c6c6:	e8df f003 	tbb	[pc, r3]
 800c6ca:	0602      	.short	0x0602
 800c6cc:	130d      	.short	0x130d
 800c6ce:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c6d2:	1850      	adds	r0, r2, r1
 800c6d4:	4770      	bx	lr
 800c6d6:	8803      	ldrh	r3, [r0, #0]
 800c6d8:	8880      	ldrh	r0, [r0, #4]
 800c6da:	4418      	add	r0, r3
 800c6dc:	b200      	sxth	r0, r0
 800c6de:	1a80      	subs	r0, r0, r2
 800c6e0:	3801      	subs	r0, #1
 800c6e2:	4770      	bx	lr
 800c6e4:	8803      	ldrh	r3, [r0, #0]
 800c6e6:	8880      	ldrh	r0, [r0, #4]
 800c6e8:	4418      	add	r0, r3
 800c6ea:	b200      	sxth	r0, r0
 800c6ec:	1a40      	subs	r0, r0, r1
 800c6ee:	e7f7      	b.n	800c6e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c6f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c6f4:	4410      	add	r0, r2
 800c6f6:	4770      	bx	lr
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	4770      	bx	lr

0800c6fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d817      	bhi.n	800c730 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c700:	e8df f003 	tbb	[pc, r3]
 800c704:	10090602 	.word	0x10090602
 800c708:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c70c:	1850      	adds	r0, r2, r1
 800c70e:	4770      	bx	lr
 800c710:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c714:	e7fa      	b.n	800c70c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c716:	8843      	ldrh	r3, [r0, #2]
 800c718:	88c0      	ldrh	r0, [r0, #6]
 800c71a:	4418      	add	r0, r3
 800c71c:	b200      	sxth	r0, r0
 800c71e:	1a80      	subs	r0, r0, r2
 800c720:	3801      	subs	r0, #1
 800c722:	4770      	bx	lr
 800c724:	8843      	ldrh	r3, [r0, #2]
 800c726:	88c0      	ldrh	r0, [r0, #6]
 800c728:	4418      	add	r0, r3
 800c72a:	b200      	sxth	r0, r0
 800c72c:	1a40      	subs	r0, r0, r1
 800c72e:	e7f7      	b.n	800c720 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c730:	2000      	movs	r0, #0
 800c732:	4770      	bx	lr

0800c734 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c734:	4b01      	ldr	r3, [pc, #4]	@ (800c73c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	4770      	bx	lr
 800c73c:	200125e8 	.word	0x200125e8

0800c740 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c740:	4603      	mov	r3, r0
 800c742:	b1c8      	cbz	r0, 800c778 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c744:	0c02      	lsrs	r2, r0, #16
 800c746:	0412      	lsls	r2, r2, #16
 800c748:	b9a2      	cbnz	r2, 800c774 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c74a:	0403      	lsls	r3, r0, #16
 800c74c:	2010      	movs	r0, #16
 800c74e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c752:	bf04      	itt	eq
 800c754:	021b      	lsleq	r3, r3, #8
 800c756:	3008      	addeq	r0, #8
 800c758:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c75c:	bf04      	itt	eq
 800c75e:	011b      	lsleq	r3, r3, #4
 800c760:	3004      	addeq	r0, #4
 800c762:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c766:	bf04      	itt	eq
 800c768:	009b      	lsleq	r3, r3, #2
 800c76a:	3002      	addeq	r0, #2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	db04      	blt.n	800c77a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c770:	3001      	adds	r0, #1
 800c772:	4770      	bx	lr
 800c774:	2000      	movs	r0, #0
 800c776:	e7ea      	b.n	800c74e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c778:	2020      	movs	r0, #32
 800c77a:	4770      	bx	lr

0800c77c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	b087      	sub	sp, #28
 800c782:	460d      	mov	r5, r1
 800c784:	4616      	mov	r6, r2
 800c786:	4698      	mov	r8, r3
 800c788:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c78c:	4601      	mov	r1, r0
 800c78e:	b120      	cbz	r0, 800c79a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c790:	b11a      	cbz	r2, 800c79a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c792:	2d1f      	cmp	r5, #31
 800c794:	d801      	bhi.n	800c79a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c796:	2b1f      	cmp	r3, #31
 800c798:	d904      	bls.n	800c7a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c79a:	2000      	movs	r0, #0
 800c79c:	6038      	str	r0, [r7, #0]
 800c79e:	b007      	add	sp, #28
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a4:	b97d      	cbnz	r5, 800c7c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800c7a6:	b143      	cbz	r3, 800c7ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	e9cd 4700 	strd	r4, r7, [sp]
 800c7ae:	462b      	mov	r3, r5
 800c7b0:	4641      	mov	r1, r8
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f7ff ffe2 	bl	800c77c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c7b8:	e7f1      	b.n	800c79e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800c7c4:	e7eb      	b.n	800c79e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c7c6:	fa32 fa05 	lsrs.w	sl, r2, r5
 800c7ca:	d106      	bne.n	800c7da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800c7cc:	4346      	muls	r6, r0
 800c7ce:	fbb6 f0f4 	udiv	r0, r6, r4
 800c7d2:	fb04 6610 	mls	r6, r4, r0, r6
 800c7d6:	603e      	str	r6, [r7, #0]
 800c7d8:	e7e1      	b.n	800c79e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c7da:	2201      	movs	r2, #1
 800c7dc:	40aa      	lsls	r2, r5
 800c7de:	3a01      	subs	r2, #1
 800c7e0:	4016      	ands	r6, r2
 800c7e2:	fa00 fb05 	lsl.w	fp, r0, r5
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	fbbb f9f4 	udiv	r9, fp, r4
 800c7ec:	fb0a f309 	mul.w	r3, sl, r9
 800c7f0:	9303      	str	r3, [sp, #12]
 800c7f2:	f7ff ffa5 	bl	800c740 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	e9cd 4700 	strd	r4, r7, [sp]
 800c7fe:	4601      	mov	r1, r0
 800c800:	4630      	mov	r0, r6
 800c802:	f7ff ffbb 	bl	800c77c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c806:	fb04 b919 	mls	r9, r4, r9, fp
 800c80a:	4606      	mov	r6, r0
 800c80c:	4648      	mov	r0, r9
 800c80e:	eb05 0108 	add.w	r1, r5, r8
 800c812:	f7ff ff95 	bl	800c740 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c816:	ab05      	add	r3, sp, #20
 800c818:	e9cd 4300 	strd	r4, r3, [sp]
 800c81c:	464a      	mov	r2, r9
 800c81e:	4603      	mov	r3, r0
 800c820:	4650      	mov	r0, sl
 800c822:	f7ff ffab 	bl	800c77c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	9a05      	ldr	r2, [sp, #20]
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	4411      	add	r1, r2
 800c82e:	fbb1 f2f4 	udiv	r2, r1, r4
 800c832:	18d3      	adds	r3, r2, r3
 800c834:	441e      	add	r6, r3
 800c836:	fb04 1412 	mls	r4, r4, r2, r1
 800c83a:	4430      	add	r0, r6
 800c83c:	603c      	str	r4, [r7, #0]
 800c83e:	e7ae      	b.n	800c79e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800c840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c844:	b085      	sub	sp, #20
 800c846:	f1b0 0900 	subs.w	r9, r0, #0
 800c84a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c84c:	461d      	mov	r5, r3
 800c84e:	bfbf      	itttt	lt
 800c850:	6823      	ldrlt	r3, [r4, #0]
 800c852:	425b      	neglt	r3, r3
 800c854:	f1c9 0900 	rsblt	r9, r9, #0
 800c858:	6023      	strlt	r3, [r4, #0]
 800c85a:	bfb4      	ite	lt
 800c85c:	f04f 36ff 	movlt.w	r6, #4294967295
 800c860:	2601      	movge	r6, #1
 800c862:	2a00      	cmp	r2, #0
 800c864:	4617      	mov	r7, r2
 800c866:	da04      	bge.n	800c872 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	425b      	negs	r3, r3
 800c86c:	4257      	negs	r7, r2
 800c86e:	4276      	negs	r6, r6
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	2d00      	cmp	r5, #0
 800c874:	4638      	mov	r0, r7
 800c876:	bfba      	itte	lt
 800c878:	426d      	neglt	r5, r5
 800c87a:	f04f 38ff 	movlt.w	r8, #4294967295
 800c87e:	f04f 0801 	movge.w	r8, #1
 800c882:	f7ff ff5d 	bl	800c740 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c886:	ab03      	add	r3, sp, #12
 800c888:	e9cd 5300 	strd	r5, r3, [sp]
 800c88c:	463a      	mov	r2, r7
 800c88e:	4603      	mov	r3, r0
 800c890:	4648      	mov	r0, r9
 800c892:	f7ff ff73 	bl	800c77c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	9a03      	ldr	r2, [sp, #12]
 800c89a:	4546      	cmp	r6, r8
 800c89c:	441a      	add	r2, r3
 800c89e:	fb92 f3f5 	sdiv	r3, r2, r5
 800c8a2:	4418      	add	r0, r3
 800c8a4:	bf18      	it	ne
 800c8a6:	4240      	negne	r0, r0
 800c8a8:	fb05 2313 	mls	r3, r5, r3, r2
 800c8ac:	1c72      	adds	r2, r6, #1
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	d105      	bne.n	800c8be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f1c3 0200 	rsb	r2, r3, #0
 800c8b8:	db0b      	blt.n	800c8d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c8ba:	6022      	str	r2, [r4, #0]
 800c8bc:	e006      	b.n	800c8cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c8be:	2e01      	cmp	r6, #1
 800c8c0:	d104      	bne.n	800c8cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da02      	bge.n	800c8cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c8c6:	442b      	add	r3, r5
 800c8c8:	3801      	subs	r0, #1
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	b005      	add	sp, #20
 800c8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8d2:	3801      	subs	r0, #1
 800c8d4:	1b52      	subs	r2, r2, r5
 800c8d6:	e7f0      	b.n	800c8ba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800c8d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c8d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c8dc:	4c1c      	ldr	r4, [pc, #112]	@ (800c950 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c8de:	6807      	ldr	r7, [r0, #0]
 800c8e0:	69a3      	ldr	r3, [r4, #24]
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b92b      	cbnz	r3, 800c8f2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c8e6:	6840      	ldr	r0, [r0, #4]
 800c8e8:	e9c5 7000 	strd	r7, r0, [r5]
 800c8ec:	b004      	add	sp, #16
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	68a2      	ldr	r2, [r4, #8]
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	ae04      	add	r6, sp, #16
 800c8f8:	f04f 0802 	mov.w	r8, #2
 800c8fc:	fb93 f1f8 	sdiv	r1, r3, r8
 800c900:	440a      	add	r2, r1
 800c902:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c906:	69e1      	ldr	r1, [r4, #28]
 800c908:	9600      	str	r6, [sp, #0]
 800c90a:	463a      	mov	r2, r7
 800c90c:	f7ff ff98 	bl	800c840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c910:	69a3      	ldr	r3, [r4, #24]
 800c912:	686a      	ldr	r2, [r5, #4]
 800c914:	6a21      	ldr	r1, [r4, #32]
 800c916:	9600      	str	r6, [sp, #0]
 800c918:	4607      	mov	r7, r0
 800c91a:	6860      	ldr	r0, [r4, #4]
 800c91c:	f7ff ff90 	bl	800c840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c920:	6962      	ldr	r2, [r4, #20]
 800c922:	69a3      	ldr	r3, [r4, #24]
 800c924:	fb93 f8f8 	sdiv	r8, r3, r8
 800c928:	4442      	add	r2, r8
 800c92a:	9203      	str	r2, [sp, #12]
 800c92c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c92e:	682a      	ldr	r2, [r5, #0]
 800c930:	9600      	str	r6, [sp, #0]
 800c932:	4407      	add	r7, r0
 800c934:	68e0      	ldr	r0, [r4, #12]
 800c936:	f7ff ff83 	bl	800c840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c93a:	9600      	str	r6, [sp, #0]
 800c93c:	4680      	mov	r8, r0
 800c93e:	69a3      	ldr	r3, [r4, #24]
 800c940:	686a      	ldr	r2, [r5, #4]
 800c942:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c944:	6920      	ldr	r0, [r4, #16]
 800c946:	f7ff ff7b 	bl	800c840 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c94a:	4440      	add	r0, r8
 800c94c:	e7cc      	b.n	800c8e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c94e:	bf00      	nop
 800c950:	200125ec 	.word	0x200125ec

0800c954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c954:	4b07      	ldr	r3, [pc, #28]	@ (800c974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d109      	bne.n	800c970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800c95c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c960:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c964:	8003      	strh	r3, [r0, #0]
 800c966:	4b04      	ldr	r3, [pc, #16]	@ (800c978 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	1a9b      	subs	r3, r3, r2
 800c96e:	800b      	strh	r3, [r1, #0]
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	200125d8 	.word	0x200125d8
 800c978:	200125d4 	.word	0x200125d4

0800c97c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	4b07      	ldr	r3, [pc, #28]	@ (800c99c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d108      	bne.n	800c998 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c986:	4b06      	ldr	r3, [pc, #24]	@ (800c9a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c988:	880c      	ldrh	r4, [r1, #0]
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c990:	3b01      	subs	r3, #1
 800c992:	1b1b      	subs	r3, r3, r4
 800c994:	8003      	strh	r3, [r0, #0]
 800c996:	800a      	strh	r2, [r1, #0]
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	200125d8 	.word	0x200125d8
 800c9a0:	200125d4 	.word	0x200125d4

0800c9a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c9a4:	b510      	push	{r4, lr}
 800c9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d10e      	bne.n	800c9cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c9ae:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c9b2:	8843      	ldrh	r3, [r0, #2]
 800c9b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c9b8:	8044      	strh	r4, [r0, #2]
 800c9ba:	18ca      	adds	r2, r1, r3
 800c9bc:	4b05      	ldr	r3, [pc, #20]	@ (800c9d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	1a9b      	subs	r3, r3, r2
 800c9c2:	8003      	strh	r3, [r0, #0]
 800c9c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c9c8:	80c3      	strh	r3, [r0, #6]
 800c9ca:	8081      	strh	r1, [r0, #4]
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	bf00      	nop
 800c9d0:	200125d8 	.word	0x200125d8
 800c9d4:	200125d4 	.word	0x200125d4

0800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c9d8:	4b08      	ldr	r3, [pc, #32]	@ (800c9fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d10c      	bne.n	800c9fa <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800c9e0:	8803      	ldrh	r3, [r0, #0]
 800c9e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c9e6:	8842      	ldrh	r2, [r0, #2]
 800c9e8:	8002      	strh	r2, [r0, #0]
 800c9ea:	185a      	adds	r2, r3, r1
 800c9ec:	4b04      	ldr	r3, [pc, #16]	@ (800ca00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	1a9b      	subs	r3, r3, r2
 800c9f2:	8043      	strh	r3, [r0, #2]
 800c9f4:	88c3      	ldrh	r3, [r0, #6]
 800c9f6:	8083      	strh	r3, [r0, #4]
 800c9f8:	80c1      	strh	r1, [r0, #6]
 800c9fa:	4770      	bx	lr
 800c9fc:	200125d8 	.word	0x200125d8
 800ca00:	200125d4 	.word	0x200125d4

0800ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800ca04:	b510      	push	{r4, lr}
 800ca06:	4b07      	ldr	r3, [pc, #28]	@ (800ca24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d108      	bne.n	800ca20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800ca0e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800ca12:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ca16:	8003      	strh	r3, [r0, #0]
 800ca18:	8893      	ldrh	r3, [r2, #4]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	1b1b      	subs	r3, r3, r4
 800ca1e:	800b      	strh	r3, [r1, #0]
 800ca20:	bd10      	pop	{r4, pc}
 800ca22:	bf00      	nop
 800ca24:	200125d8 	.word	0x200125d8

0800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ca54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	460a      	mov	r2, r1
 800ca32:	d10d      	bne.n	800ca50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800ca34:	8881      	ldrh	r1, [r0, #4]
 800ca36:	8803      	ldrh	r3, [r0, #0]
 800ca38:	440b      	add	r3, r1
 800ca3a:	4601      	mov	r1, r0
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	f821 3b02 	strh.w	r3, [r1], #2
 800ca42:	f7ff ffdf 	bl	800ca04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800ca46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ca4a:	88c2      	ldrh	r2, [r0, #6]
 800ca4c:	8082      	strh	r2, [r0, #4]
 800ca4e:	80c3      	strh	r3, [r0, #6]
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	bf00      	nop
 800ca54:	200125d8 	.word	0x200125d8

0800ca58 <_ZN8touchgfx11Application13requestRedrawEv>:
 800ca58:	4b06      	ldr	r3, [pc, #24]	@ (800ca74 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800ca5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca5e:	4b06      	ldr	r3, [pc, #24]	@ (800ca78 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ca60:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800ca64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca68:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800ca72:	4770      	bx	lr
 800ca74:	200125d4 	.word	0x200125d4
 800ca78:	200125d6 	.word	0x200125d6

0800ca7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800ca7c:	4b03      	ldr	r3, [pc, #12]	@ (800ca8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800ca7e:	6818      	ldr	r0, [r3, #0]
 800ca80:	b110      	cbz	r0, 800ca88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800ca82:	6803      	ldr	r3, [r0, #0]
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	4718      	bx	r3
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	2001261c 	.word	0x2001261c

0800ca90 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ca90:	4770      	bx	lr
	...

0800ca94 <_ZN8touchgfx11Application4drawEv>:
 800ca94:	b507      	push	{r0, r1, r2, lr}
 800ca96:	4b09      	ldr	r3, [pc, #36]	@ (800cabc <_ZN8touchgfx11Application4drawEv+0x28>)
 800ca98:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca9c:	4b08      	ldr	r3, [pc, #32]	@ (800cac0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ca9e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800caa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caa6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	2100      	movs	r1, #0
 800caae:	9100      	str	r1, [sp, #0]
 800cab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cab2:	4669      	mov	r1, sp
 800cab4:	4798      	blx	r3
 800cab6:	b003      	add	sp, #12
 800cab8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cabc:	200125d4 	.word	0x200125d4
 800cac0:	200125d6 	.word	0x200125d6

0800cac4 <_ZN8touchgfx11Application10invalidateEv>:
 800cac4:	4b09      	ldr	r3, [pc, #36]	@ (800caec <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800cac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800caca:	4b09      	ldr	r3, [pc, #36]	@ (800caf0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800cacc:	b082      	sub	sp, #8
 800cace:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cad2:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cad6:	2100      	movs	r1, #0
 800cad8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cadc:	9100      	str	r1, [sp, #0]
 800cade:	6803      	ldr	r3, [r0, #0]
 800cae0:	aa02      	add	r2, sp, #8
 800cae2:	e912 0006 	ldmdb	r2, {r1, r2}
 800cae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae8:	b002      	add	sp, #8
 800caea:	4718      	bx	r3
 800caec:	200125d4 	.word	0x200125d4
 800caf0:	200125d6 	.word	0x200125d6

0800caf4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800caf4:	4b03      	ldr	r3, [pc, #12]	@ (800cb04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800caf6:	6818      	ldr	r0, [r3, #0]
 800caf8:	b110      	cbz	r0, 800cb00 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800cafa:	6803      	ldr	r3, [r0, #0]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	4718      	bx	r3
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	2001261c 	.word	0x2001261c

0800cb08 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800cb08:	4b03      	ldr	r3, [pc, #12]	@ (800cb18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800cb0a:	6818      	ldr	r0, [r3, #0]
 800cb0c:	b110      	cbz	r0, 800cb14 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800cb0e:	6803      	ldr	r3, [r0, #0]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	4718      	bx	r3
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	2001261c 	.word	0x2001261c

0800cb1c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800cb22:	4770      	bx	lr

0800cb24 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800cb24:	4b03      	ldr	r3, [pc, #12]	@ (800cb34 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800cb26:	6818      	ldr	r0, [r3, #0]
 800cb28:	b110      	cbz	r0, 800cb30 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800cb2a:	6803      	ldr	r3, [r0, #0]
 800cb2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb2e:	4718      	bx	r3
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	2001261c 	.word	0x2001261c

0800cb38 <_ZN8touchgfx11ApplicationD1Ev>:
 800cb38:	4770      	bx	lr

0800cb3a <_ZN8touchgfx11ApplicationD0Ev>:
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800cb40:	4604      	mov	r4, r0
 800cb42:	f006 fe07 	bl	8013754 <_ZdlPvj>
 800cb46:	4620      	mov	r0, r4
 800cb48:	bd10      	pop	{r4, pc}

0800cb4a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cb50:	888a      	ldrh	r2, [r1, #4]
 800cb52:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cb56:	4422      	add	r2, r4
 800cb58:	b212      	sxth	r2, r2
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	da15      	bge.n	800cb8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cb5e:	8882      	ldrh	r2, [r0, #4]
 800cb60:	4413      	add	r3, r2
 800cb62:	b21b      	sxth	r3, r3
 800cb64:	429c      	cmp	r4, r3
 800cb66:	da10      	bge.n	800cb8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cb68:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cb6c:	88c9      	ldrh	r1, [r1, #6]
 800cb6e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cb72:	4419      	add	r1, r3
 800cb74:	b209      	sxth	r1, r1
 800cb76:	428a      	cmp	r2, r1
 800cb78:	da07      	bge.n	800cb8a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cb7a:	88c0      	ldrh	r0, [r0, #6]
 800cb7c:	4410      	add	r0, r2
 800cb7e:	b200      	sxth	r0, r0
 800cb80:	4283      	cmp	r3, r0
 800cb82:	bfac      	ite	ge
 800cb84:	2000      	movge	r0, #0
 800cb86:	2001      	movlt	r0, #1
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e7fc      	b.n	800cb88 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cb8e <_ZN8touchgfx4Rect10restrictToEss>:
 800cb8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	b510      	push	{r4, lr}
 800cb96:	da04      	bge.n	800cba2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cb98:	8884      	ldrh	r4, [r0, #4]
 800cb9a:	4423      	add	r3, r4
 800cb9c:	8083      	strh	r3, [r0, #4]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	8003      	strh	r3, [r0, #0]
 800cba2:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cba6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cbaa:	1b09      	subs	r1, r1, r4
 800cbac:	428b      	cmp	r3, r1
 800cbae:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cbb2:	bfc8      	it	gt
 800cbb4:	8081      	strhgt	r1, [r0, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	da04      	bge.n	800cbc4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800cbba:	88c1      	ldrh	r1, [r0, #6]
 800cbbc:	440b      	add	r3, r1
 800cbbe:	80c3      	strh	r3, [r0, #6]
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	8043      	strh	r3, [r0, #2]
 800cbc4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cbc8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cbcc:	1a52      	subs	r2, r2, r1
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	bfc8      	it	gt
 800cbd2:	80c2      	strhgt	r2, [r0, #6]
 800cbd4:	bd10      	pop	{r4, pc}
	...

0800cbd8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800cbdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cbe0:	4b0f      	ldr	r3, [pc, #60]	@ (800cc20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cbea:	f7ff ffd0 	bl	800cb8e <_ZN8touchgfx4Rect10restrictToEss>
 800cbee:	4b0d      	ldr	r3, [pc, #52]	@ (800cc24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	b190      	cbz	r0, 800cc1a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800cbf4:	6803      	ldr	r3, [r0, #0]
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	4798      	blx	r3
 800cbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800cc28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800cbfe:	6818      	ldr	r0, [r3, #0]
 800cc00:	b118      	cbz	r0, 800cc0a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800cc02:	6803      	ldr	r3, [r0, #0]
 800cc04:	4621      	mov	r1, r4
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	4798      	blx	r3
 800cc0a:	4b08      	ldr	r3, [pc, #32]	@ (800cc2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	6803      	ldr	r3, [r0, #0]
 800cc10:	4621      	mov	r1, r4
 800cc12:	69db      	ldr	r3, [r3, #28]
 800cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc18:	4718      	bx	r3
 800cc1a:	bd10      	pop	{r4, pc}
 800cc1c:	200125d6 	.word	0x200125d6
 800cc20:	200125d4 	.word	0x200125d4
 800cc24:	2001261c 	.word	0x2001261c
 800cc28:	20012618 	.word	0x20012618
 800cc2c:	200125e0 	.word	0x200125e0

0800cc30 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	4606      	mov	r6, r0
 800cc34:	4608      	mov	r0, r1
 800cc36:	460f      	mov	r7, r1
 800cc38:	f7fc f9f1 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cc3c:	b9e8      	cbnz	r0, 800cc7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cc3e:	f9b7 5000 	ldrsh.w	r5, [r7]
 800cc42:	f9b6 4000 	ldrsh.w	r4, [r6]
 800cc46:	42a5      	cmp	r5, r4
 800cc48:	db17      	blt.n	800cc7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cc4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cc4e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	db11      	blt.n	800cc7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cc56:	88b9      	ldrh	r1, [r7, #4]
 800cc58:	440d      	add	r5, r1
 800cc5a:	88b1      	ldrh	r1, [r6, #4]
 800cc5c:	440c      	add	r4, r1
 800cc5e:	b22d      	sxth	r5, r5
 800cc60:	b224      	sxth	r4, r4
 800cc62:	42a5      	cmp	r5, r4
 800cc64:	dc09      	bgt.n	800cc7a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cc66:	88f8      	ldrh	r0, [r7, #6]
 800cc68:	4410      	add	r0, r2
 800cc6a:	88f2      	ldrh	r2, [r6, #6]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b200      	sxth	r0, r0
 800cc70:	b21b      	sxth	r3, r3
 800cc72:	4298      	cmp	r0, r3
 800cc74:	bfcc      	ite	gt
 800cc76:	2000      	movgt	r0, #0
 800cc78:	2001      	movle	r0, #1
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc7c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	4604      	mov	r4, r0
 800cc80:	4608      	mov	r0, r1
 800cc82:	460d      	mov	r5, r1
 800cc84:	f7fc f9cb 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cc88:	b978      	cbnz	r0, 800ccaa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7fc f9c7 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cc90:	f9b5 6000 	ldrsh.w	r6, [r5]
 800cc94:	b150      	cbz	r0, 800ccac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800cc96:	8026      	strh	r6, [r4, #0]
 800cc98:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800cc9c:	8063      	strh	r3, [r4, #2]
 800cc9e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cca2:	80a3      	strh	r3, [r4, #4]
 800cca4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cca8:	80e3      	strh	r3, [r4, #6]
 800ccaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccac:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ccb0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800ccb4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ccb8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800ccbc:	88ed      	ldrh	r5, [r5, #6]
 800ccbe:	42b1      	cmp	r1, r6
 800ccc0:	460f      	mov	r7, r1
 800ccc2:	bfa8      	it	ge
 800ccc4:	4637      	movge	r7, r6
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	4466      	add	r6, ip
 800cccc:	bfa8      	it	ge
 800ccce:	4610      	movge	r0, r2
 800ccd0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800ccd4:	8027      	strh	r7, [r4, #0]
 800ccd6:	442a      	add	r2, r5
 800ccd8:	88e5      	ldrh	r5, [r4, #6]
 800ccda:	8060      	strh	r0, [r4, #2]
 800ccdc:	4461      	add	r1, ip
 800ccde:	442b      	add	r3, r5
 800cce0:	b236      	sxth	r6, r6
 800cce2:	b209      	sxth	r1, r1
 800cce4:	b212      	sxth	r2, r2
 800cce6:	b21b      	sxth	r3, r3
 800cce8:	428e      	cmp	r6, r1
 800ccea:	bfac      	ite	ge
 800ccec:	ebc7 0106 	rsbge	r1, r7, r6
 800ccf0:	ebc7 0101 	rsblt	r1, r7, r1
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	bfac      	ite	ge
 800ccf8:	ebc0 0202 	rsbge	r2, r0, r2
 800ccfc:	ebc0 0203 	rsblt	r2, r0, r3
 800cd00:	80a1      	strh	r1, [r4, #4]
 800cd02:	80e2      	strh	r2, [r4, #6]
 800cd04:	e7d1      	b.n	800ccaa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800cd08 <_ZN8touchgfx11Application11getInstanceEv>:
 800cd08:	4b01      	ldr	r3, [pc, #4]	@ (800cd10 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	2001262c 	.word	0x2001262c

0800cd14 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	4b10      	ldr	r3, [pc, #64]	@ (800cd58 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	b1d3      	cbz	r3, 800cd54 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800cd20:	4f0f      	ldr	r7, [pc, #60]	@ (800cd60 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800cd22:	881c      	ldrh	r4, [r3, #0]
 800cd24:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800cd28:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	d90e      	bls.n	800cd4e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cd36:	b10a      	cbz	r2, 800cd3c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800cd38:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cd3a:	b900      	cbnz	r0, 800cd3e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800cd3c:	6898      	ldr	r0, [r3, #8]
 800cd3e:	6803      	ldr	r3, [r0, #0]
 800cd40:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	3401      	adds	r4, #1
 800cd48:	4798      	blx	r3
 800cd4a:	b2a4      	uxth	r4, r4
 800cd4c:	e7ec      	b.n	800cd28 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800cd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd56:	bf00      	nop
 800cd58:	200125de 	.word	0x200125de
 800cd5c:	20000084 	.word	0x20000084
 800cd60:	200125e0 	.word	0x200125e0

0800cd64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	2300      	movs	r3, #0
 800cd68:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800cd6c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cd70:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cd74:	4604      	mov	r4, r0
 800cd76:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cd7a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d90e      	bls.n	800cda0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800cd82:	18e2      	adds	r2, r4, r3
 800cd84:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800cd88:	b122      	cbz	r2, 800cd94 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800cd8a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800cd8e:	6803      	ldr	r3, [r0, #0]
 800cd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd92:	4798      	blx	r3
 800cd94:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cd98:	3301      	adds	r3, #1
 800cd9a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800cd9e:	e7ea      	b.n	800cd76 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800cda0:	bd10      	pop	{r4, pc}

0800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800cda2:	2300      	movs	r3, #0
 800cda4:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cda8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800cdac:	30a4      	adds	r0, #164	@ 0xa4
 800cdae:	f802 3b01 	strb.w	r3, [r2], #1
 800cdb2:	4282      	cmp	r2, r0
 800cdb4:	d1fb      	bne.n	800cdae <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800cdb6:	4770      	bx	lr

0800cdb8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4c0b      	ldr	r4, [pc, #44]	@ (800cde8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	6820      	ldr	r0, [r4, #0]
 800cdc0:	460e      	mov	r6, r1
 800cdc2:	b110      	cbz	r0, 800cdca <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800cdc4:	6803      	ldr	r3, [r0, #0]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	4798      	blx	r3
 800cdca:	1d28      	adds	r0, r5, #4
 800cdcc:	f7ff ffe9 	bl	800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cdd0:	6026      	str	r6, [r4, #0]
 800cdd2:	6833      	ldr	r3, [r6, #0]
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	4798      	blx	r3
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	4628      	mov	r0, r5
 800cdde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cde4:	4718      	bx	r3
 800cde6:	bf00      	nop
 800cde8:	2001261c 	.word	0x2001261c

0800cdec <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800cdf2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800cdf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	461c      	mov	r4, r3
 800cdfc:	461d      	mov	r5, r3
 800cdfe:	459c      	cmp	ip, r3
 800ce00:	dd1a      	ble.n	800ce38 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800ce02:	18c6      	adds	r6, r0, r3
 800ce04:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800ce08:	b16e      	cbz	r6, 800ce26 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d008      	beq.n	800ce20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800ce0e:	fa1f fe82 	uxth.w	lr, r2
 800ce12:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800ce16:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800ce1a:	1887      	adds	r7, r0, r2
 800ce1c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800ce20:	3201      	adds	r2, #1
 800ce22:	3301      	adds	r3, #1
 800ce24:	e7eb      	b.n	800cdfe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800ce26:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800ce2a:	4299      	cmp	r1, r3
 800ce2c:	bfa8      	it	ge
 800ce2e:	3501      	addge	r5, #1
 800ce30:	429e      	cmp	r6, r3
 800ce32:	bfc8      	it	gt
 800ce34:	3401      	addgt	r4, #1
 800ce36:	e7f4      	b.n	800ce22 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800ce38:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800ce3c:	1b49      	subs	r1, r1, r5
 800ce3e:	1b1b      	subs	r3, r3, r4
 800ce40:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800ce44:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ce48:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	dd03      	ble.n	800ce58 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800ce50:	3b01      	subs	r3, #1
 800ce52:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ce56:	e7f7      	b.n	800ce48 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800ce58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ce5c <_ZN8touchgfx11Application15handleTickEventEv>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	4d16      	ldr	r5, [pc, #88]	@ (800ceb8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800ce60:	4604      	mov	r4, r0
 800ce62:	6828      	ldr	r0, [r5, #0]
 800ce64:	b140      	cbz	r0, 800ce78 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ce66:	7a03      	ldrb	r3, [r0, #8]
 800ce68:	b933      	cbnz	r3, 800ce78 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ce6a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce76:	4718      	bx	r3
 800ce78:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800ce7c:	4e0f      	ldr	r6, [pc, #60]	@ (800cebc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800ce7e:	b973      	cbnz	r3, 800ce9e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ce80:	b168      	cbz	r0, 800ce9e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ce82:	7a03      	ldrb	r3, [r0, #8]
 800ce84:	b15b      	cbz	r3, 800ce9e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ce86:	6830      	ldr	r0, [r6, #0]
 800ce88:	b110      	cbz	r0, 800ce90 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800ce8a:	6803      	ldr	r3, [r0, #0]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	4798      	blx	r3
 800ce90:	6828      	ldr	r0, [r5, #0]
 800ce92:	6803      	ldr	r3, [r0, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	4798      	blx	r3
 800ce98:	2301      	movs	r3, #1
 800ce9a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ce9e:	3404      	adds	r4, #4
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7ff ff5f 	bl	800cd64 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7ff ffa0 	bl	800cdec <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800ceac:	6830      	ldr	r0, [r6, #0]
 800ceae:	b110      	cbz	r0, 800ceb6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800ceb0:	6803      	ldr	r3, [r0, #0]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb4:	e7dd      	b.n	800ce72 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	20012620 	.word	0x20012620
 800cebc:	2001261c 	.word	0x2001261c

0800cec0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800cec0:	4603      	mov	r3, r0
 800cec2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800cec6:	2200      	movs	r2, #0
 800cec8:	801a      	strh	r2, [r3, #0]
 800ceca:	805a      	strh	r2, [r3, #2]
 800cecc:	809a      	strh	r2, [r3, #4]
 800cece:	80da      	strh	r2, [r3, #6]
 800ced0:	3308      	adds	r3, #8
 800ced2:	428b      	cmp	r3, r1
 800ced4:	d1f8      	bne.n	800cec8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ced6:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800ceda:	4770      	bx	lr

0800cedc <_ZN8touchgfx11ApplicationC1Ev>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	4606      	mov	r6, r0
 800cee0:	4b1c      	ldr	r3, [pc, #112]	@ (800cf54 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800cee2:	f846 3b04 	str.w	r3, [r6], #4
 800cee6:	4604      	mov	r4, r0
 800cee8:	2500      	movs	r5, #0
 800ceea:	22a8      	movs	r2, #168	@ 0xa8
 800ceec:	2100      	movs	r1, #0
 800ceee:	4630      	mov	r0, r6
 800cef0:	f006 fe65 	bl	8013bbe <memset>
 800cef4:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800cef8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800cefc:	f7ff ffe0 	bl	800cec0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cf00:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800cf04:	f7ff ffdc 	bl	800cec0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cf08:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800cf0c:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800cf10:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800cf14:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800cf18:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800cf1c:	490e      	ldr	r1, [pc, #56]	@ (800cf58 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800cf1e:	480f      	ldr	r0, [pc, #60]	@ (800cf5c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800cf20:	4f0f      	ldr	r7, [pc, #60]	@ (800cf60 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800cf22:	f006 facf 	bl	80134c4 <CRC_Lock>
 800cf26:	4b0f      	ldr	r3, [pc, #60]	@ (800cf64 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800cf28:	b158      	cbz	r0, 800cf42 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800cf2a:	801d      	strh	r5, [r3, #0]
 800cf2c:	4a0e      	ldr	r2, [pc, #56]	@ (800cf68 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	4a0e      	ldr	r2, [pc, #56]	@ (800cf6c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800cf34:	603b      	str	r3, [r7, #0]
 800cf36:	4630      	mov	r0, r6
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	f7ff ff32 	bl	800cda2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cf3e:	4620      	mov	r0, r4
 800cf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cf46:	2002      	movs	r0, #2
 800cf48:	801a      	strh	r2, [r3, #0]
 800cf4a:	6038      	str	r0, [r7, #0]
 800cf4c:	f001 fb72 	bl	800e634 <_ZN8touchgfx6Screen4drawEv>
 800cf50:	e7ec      	b.n	800cf2c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800cf52:	bf00      	nop
 800cf54:	08015f80 	.word	0x08015f80
 800cf58:	b5e8b5cd 	.word	0xb5e8b5cd
 800cf5c:	f407a5c2 	.word	0xf407a5c2
 800cf60:	2001261c 	.word	0x2001261c
 800cf64:	20000084 	.word	0x20000084
 800cf68:	2001262c 	.word	0x2001262c
 800cf6c:	20012620 	.word	0x20012620

0800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800cf70:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	428b      	cmp	r3, r1
 800cf7a:	b510      	push	{r4, lr}
 800cf7c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800cf80:	d908      	bls.n	800cf94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800cf82:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cf86:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	6062      	str	r2, [r4, #4]
 800cf94:	bd10      	pop	{r4, pc}
	...

0800cf98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9c:	4b92      	ldr	r3, [pc, #584]	@ (800d1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 800cf9e:	b08f      	sub	sp, #60	@ 0x3c
 800cfa0:	ac0a      	add	r4, sp, #40	@ 0x28
 800cfa2:	e884 0006 	stmia.w	r4, {r1, r2}
 800cfa6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cfaa:	4b90      	ldr	r3, [pc, #576]	@ (800d1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 800cfac:	4683      	mov	fp, r0
 800cfae:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f7ff fdeb 	bl	800cb8e <_ZN8touchgfx4Rect10restrictToEss>
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f7fc f830 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d170      	bne.n	800d0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800cfc2:	4b8b      	ldr	r3, [pc, #556]	@ (800d1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d06a      	beq.n	800d0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800cfce:	9403      	str	r4, [sp, #12]
 800cfd0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800cfd4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800cfd8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800cfdc:	35a4      	adds	r5, #164	@ 0xa4
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	b15c      	cbz	r4, 800cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	9803      	ldr	r0, [sp, #12]
 800cfe6:	f7ff fe23 	bl	800cc30 <_ZNK8touchgfx4Rect8includesERKS0_>
 800cfea:	3c01      	subs	r4, #1
 800cfec:	b118      	cbz	r0, 800cff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800cfee:	b2a1      	uxth	r1, r4
 800cff0:	9801      	ldr	r0, [sp, #4]
 800cff2:	f7ff ffbd 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cff6:	3d08      	subs	r5, #8
 800cff8:	e7f2      	b.n	800cfe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800cffa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800cffe:	f8cd a010 	str.w	sl, [sp, #16]
 800d002:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d006:	9302      	str	r3, [sp, #8]
 800d008:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d00c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800d010:	9306      	str	r3, [sp, #24]
 800d012:	445c      	add	r4, fp
 800d014:	2500      	movs	r5, #0
 800d016:	4626      	mov	r6, r4
 800d018:	f8cd a014 	str.w	sl, [sp, #20]
 800d01c:	462f      	mov	r7, r5
 800d01e:	9b05      	ldr	r3, [sp, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d073      	beq.n	800d10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 800d024:	9903      	ldr	r1, [sp, #12]
 800d026:	4630      	mov	r0, r6
 800d028:	f7ff fd8f 	bl	800cb4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d02c:	b350      	cbz	r0, 800d084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800d02e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800d032:	f9b6 c000 	ldrsh.w	ip, [r6]
 800d036:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800d03a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800d03e:	45e6      	cmp	lr, ip
 800d040:	db33      	blt.n	800d0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800d042:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d046:	88b3      	ldrh	r3, [r6, #4]
 800d048:	4472      	add	r2, lr
 800d04a:	4463      	add	r3, ip
 800d04c:	b212      	sxth	r2, r2
 800d04e:	b21b      	sxth	r3, r3
 800d050:	429a      	cmp	r2, r3
 800d052:	dc2a      	bgt.n	800d0aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 800d054:	88f3      	ldrh	r3, [r6, #6]
 800d056:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d05a:	fa1f f289 	uxth.w	r2, r9
 800d05e:	4413      	add	r3, r2
 800d060:	b29b      	uxth	r3, r3
 800d062:	45c8      	cmp	r8, r9
 800d064:	fa1f fc88 	uxth.w	ip, r8
 800d068:	fa0f fe83 	sxth.w	lr, r3
 800d06c:	db0f      	blt.n	800d08e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 800d06e:	eba3 030c 	sub.w	r3, r3, ip
 800d072:	1ac9      	subs	r1, r1, r3
 800d074:	b209      	sxth	r1, r1
 800d076:	2900      	cmp	r1, #0
 800d078:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d07c:	dd12      	ble.n	800d0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800d07e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800d082:	4605      	mov	r5, r0
 800d084:	9b05      	ldr	r3, [sp, #20]
 800d086:	3b01      	subs	r3, #1
 800d088:	9305      	str	r3, [sp, #20]
 800d08a:	3e08      	subs	r6, #8
 800d08c:	e7c7      	b.n	800d01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 800d08e:	4461      	add	r1, ip
 800d090:	b209      	sxth	r1, r1
 800d092:	4571      	cmp	r1, lr
 800d094:	dc38      	bgt.n	800d108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800d096:	eba2 020c 	sub.w	r2, r2, ip
 800d09a:	b212      	sxth	r2, r2
 800d09c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d0a0:	2a00      	cmp	r2, #0
 800d0a2:	dcee      	bgt.n	800d082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d0a4:	b00f      	add	sp, #60	@ 0x3c
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0aa:	45c8      	cmp	r8, r9
 800d0ac:	db2c      	blt.n	800d108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800d0ae:	88f3      	ldrh	r3, [r6, #6]
 800d0b0:	4499      	add	r9, r3
 800d0b2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d0b6:	4498      	add	r8, r3
 800d0b8:	fa0f f989 	sxth.w	r9, r9
 800d0bc:	fa0f f888 	sxth.w	r8, r8
 800d0c0:	45c1      	cmp	r9, r8
 800d0c2:	db21      	blt.n	800d108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800d0c4:	88b3      	ldrh	r3, [r6, #4]
 800d0c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800d0ca:	fa1f f28c 	uxth.w	r2, ip
 800d0ce:	4413      	add	r3, r2
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	45e6      	cmp	lr, ip
 800d0d4:	fa1f f88e 	uxth.w	r8, lr
 800d0d8:	fa0f f983 	sxth.w	r9, r3
 800d0dc:	db0a      	blt.n	800d0f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 800d0de:	eba3 0308 	sub.w	r3, r3, r8
 800d0e2:	1ac9      	subs	r1, r1, r3
 800d0e4:	b209      	sxth	r1, r1
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d0ec:	ddda      	ble.n	800d0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800d0ee:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d0f2:	e7c6      	b.n	800d082 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d0f4:	4441      	add	r1, r8
 800d0f6:	b209      	sxth	r1, r1
 800d0f8:	4549      	cmp	r1, r9
 800d0fa:	dc05      	bgt.n	800d108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 800d0fc:	eba2 0208 	sub.w	r2, r2, r8
 800d100:	b212      	sxth	r2, r2
 800d102:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d106:	e7cb      	b.n	800d0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 800d108:	4607      	mov	r7, r0
 800d10a:	e7bb      	b.n	800d084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 800d10c:	2d00      	cmp	r5, #0
 800d10e:	d181      	bne.n	800d014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 800d110:	2f00      	cmp	r7, #0
 800d112:	f000 81df 	beq.w	800d4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d116:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800d11a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800d11e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800d122:	b2b3      	uxth	r3, r6
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	9a05      	ldr	r2, [sp, #20]
 800d128:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d12c:	4413      	add	r3, r2
 800d12e:	b2ba      	uxth	r2, r7
 800d130:	4492      	add	sl, r2
 800d132:	b29b      	uxth	r3, r3
 800d134:	fa1f fa8a 	uxth.w	sl, sl
 800d138:	fa0f f883 	sxth.w	r8, r3
 800d13c:	fa0f f98a 	sxth.w	r9, sl
 800d140:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d054      	beq.n	800d1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 800d14a:	9903      	ldr	r1, [sp, #12]
 800d14c:	4620      	mov	r0, r4
 800d14e:	f7ff fcfc 	bl	800cb4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d152:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d156:	b1c0      	cbz	r0, 800d18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800d158:	f9b4 e000 	ldrsh.w	lr, [r4]
 800d15c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d160:	4576      	cmp	r6, lr
 800d162:	dc22      	bgt.n	800d1aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 800d164:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d168:	44f4      	add	ip, lr
 800d16a:	fa0f fc8c 	sxth.w	ip, ip
 800d16e:	45e0      	cmp	r8, ip
 800d170:	db1b      	blt.n	800d1aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 800d172:	428f      	cmp	r7, r1
 800d174:	fa1f fc81 	uxth.w	ip, r1
 800d178:	88e1      	ldrh	r1, [r4, #6]
 800d17a:	dc0d      	bgt.n	800d198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 800d17c:	ebaa 0c0c 	sub.w	ip, sl, ip
 800d180:	eba1 010c 	sub.w	r1, r1, ip
 800d184:	f8a4 9002 	strh.w	r9, [r4, #2]
 800d188:	80e1      	strh	r1, [r4, #6]
 800d18a:	4628      	mov	r0, r5
 800d18c:	9904      	ldr	r1, [sp, #16]
 800d18e:	3901      	subs	r1, #1
 800d190:	9104      	str	r1, [sp, #16]
 800d192:	3c08      	subs	r4, #8
 800d194:	4605      	mov	r5, r0
 800d196:	e7d3      	b.n	800d140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 800d198:	4461      	add	r1, ip
 800d19a:	b209      	sxth	r1, r1
 800d19c:	4549      	cmp	r1, r9
 800d19e:	dcf5      	bgt.n	800d18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d1a0:	eba2 0c0c 	sub.w	ip, r2, ip
 800d1a4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d1a8:	e7ef      	b.n	800d18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800d1aa:	428f      	cmp	r7, r1
 800d1ac:	dcee      	bgt.n	800d18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d1ae:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d1b2:	4461      	add	r1, ip
 800d1b4:	b209      	sxth	r1, r1
 800d1b6:	4589      	cmp	r9, r1
 800d1b8:	dbe8      	blt.n	800d18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d1ba:	4576      	cmp	r6, lr
 800d1bc:	fa1f fc8e 	uxth.w	ip, lr
 800d1c0:	88a1      	ldrh	r1, [r4, #4]
 800d1c2:	dc07      	bgt.n	800d1d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 800d1c4:	eba3 0c0c 	sub.w	ip, r3, ip
 800d1c8:	eba1 010c 	sub.w	r1, r1, ip
 800d1cc:	f8a4 8000 	strh.w	r8, [r4]
 800d1d0:	80a1      	strh	r1, [r4, #4]
 800d1d2:	e7da      	b.n	800d18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800d1d4:	4461      	add	r1, ip
 800d1d6:	b209      	sxth	r1, r1
 800d1d8:	4588      	cmp	r8, r1
 800d1da:	dbd7      	blt.n	800d18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d1dc:	9905      	ldr	r1, [sp, #20]
 800d1de:	eba1 0c0c 	sub.w	ip, r1, ip
 800d1e2:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d1e6:	e7d0      	b.n	800d18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800d1e8:	200125d6 	.word	0x200125d6
 800d1ec:	200125d4 	.word	0x200125d4
 800d1f0:	200125e0 	.word	0x200125e0
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	f000 816d 	beq.w	800d4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d1fa:	9b06      	ldr	r3, [sp, #24]
 800d1fc:	445b      	add	r3, fp
 800d1fe:	461c      	mov	r4, r3
 800d200:	9b02      	ldr	r3, [sp, #8]
 800d202:	3301      	adds	r3, #1
 800d204:	f000 8166 	beq.w	800d4d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d208:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d20c:	4629      	mov	r1, r5
 800d20e:	9803      	ldr	r0, [sp, #12]
 800d210:	f7ff fd0e 	bl	800cc30 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d214:	b120      	cbz	r0, 800d220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 800d216:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d21a:	9801      	ldr	r0, [sp, #4]
 800d21c:	f7ff fea8 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d220:	9903      	ldr	r1, [sp, #12]
 800d222:	4628      	mov	r0, r5
 800d224:	f7ff fc91 	bl	800cb4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d228:	2800      	cmp	r0, #0
 800d22a:	f000 809c 	beq.w	800d366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 800d22e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d232:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d236:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d23c:	fa1f f189 	uxth.w	r1, r9
 800d240:	eb01 0c03 	add.w	ip, r1, r3
 800d244:	fa1f fa8c 	uxth.w	sl, ip
 800d248:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d24c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d250:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d254:	b283      	uxth	r3, r0
 800d256:	eb03 050c 	add.w	r5, r3, ip
 800d25a:	b2ad      	uxth	r5, r5
 800d25c:	9505      	str	r5, [sp, #20]
 800d25e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d262:	9504      	str	r5, [sp, #16]
 800d264:	4548      	cmp	r0, r9
 800d266:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d26a:	f340 8099 	ble.w	800d3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 800d26e:	1a5b      	subs	r3, r3, r1
 800d270:	b29b      	uxth	r3, r3
 800d272:	4596      	cmp	lr, r2
 800d274:	fa0f f08a 	sxth.w	r0, sl
 800d278:	b21e      	sxth	r6, r3
 800d27a:	dd2e      	ble.n	800d2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 800d27c:	9f02      	ldr	r7, [sp, #8]
 800d27e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d282:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d286:	9f04      	ldr	r7, [sp, #16]
 800d288:	1a3f      	subs	r7, r7, r0
 800d28a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d28e:	fa1f fe8e 	uxth.w	lr, lr
 800d292:	b292      	uxth	r2, r2
 800d294:	ebae 0102 	sub.w	r1, lr, r2
 800d298:	44a6      	add	lr, r4
 800d29a:	4402      	add	r2, r0
 800d29c:	b289      	uxth	r1, r1
 800d29e:	fa0f fe8e 	sxth.w	lr, lr
 800d2a2:	b212      	sxth	r2, r2
 800d2a4:	b20d      	sxth	r5, r1
 800d2a6:	ebae 0202 	sub.w	r2, lr, r2
 800d2aa:	436f      	muls	r7, r5
 800d2ac:	4372      	muls	r2, r6
 800d2ae:	4297      	cmp	r7, r2
 800d2b0:	db09      	blt.n	800d2c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 800d2b2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d2b6:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d2ba:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d2be:	449c      	add	ip, r3
 800d2c0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d2c4:	e684      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d2c6:	4421      	add	r1, r4
 800d2c8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d2cc:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d2d0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d2d4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d2d8:	e67a      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d2da:	9f04      	ldr	r7, [sp, #16]
 800d2dc:	42b8      	cmp	r0, r7
 800d2de:	da27      	bge.n	800d330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 800d2e0:	9902      	ldr	r1, [sp, #8]
 800d2e2:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d2e6:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d2ea:	eb05 010e 	add.w	r1, r5, lr
 800d2ee:	fa1f f881 	uxth.w	r8, r1
 800d2f2:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d2f6:	4411      	add	r1, r2
 800d2f8:	eba1 0108 	sub.w	r1, r1, r8
 800d2fc:	b289      	uxth	r1, r1
 800d2fe:	fa0f f988 	sxth.w	r9, r8
 800d302:	eba2 020e 	sub.w	r2, r2, lr
 800d306:	fa0f f881 	sxth.w	r8, r1
 800d30a:	1a3f      	subs	r7, r7, r0
 800d30c:	4372      	muls	r2, r6
 800d30e:	fb08 f707 	mul.w	r7, r8, r7
 800d312:	42ba      	cmp	r2, r7
 800d314:	dc06      	bgt.n	800d324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 800d316:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d31a:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d31e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d322:	e7ca      	b.n	800d2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800d324:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d328:	4429      	add	r1, r5
 800d32a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d32e:	e64f      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d330:	9805      	ldr	r0, [sp, #20]
 800d332:	ebaa 0000 	sub.w	r0, sl, r0
 800d336:	b280      	uxth	r0, r0
 800d338:	2d06      	cmp	r5, #6
 800d33a:	fa0f fe80 	sxth.w	lr, r0
 800d33e:	d817      	bhi.n	800d370 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 800d340:	9b04      	ldr	r3, [sp, #16]
 800d342:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d346:	1c6b      	adds	r3, r5, #1
 800d348:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d34c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d350:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d354:	9b01      	ldr	r3, [sp, #4]
 800d356:	9801      	ldr	r0, [sp, #4]
 800d358:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d35c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d360:	805a      	strh	r2, [r3, #2]
 800d362:	809e      	strh	r6, [r3, #4]
 800d364:	80d9      	strh	r1, [r3, #6]
 800d366:	9b02      	ldr	r3, [sp, #8]
 800d368:	3b01      	subs	r3, #1
 800d36a:	9302      	str	r3, [sp, #8]
 800d36c:	3c08      	subs	r4, #8
 800d36e:	e747      	b.n	800d200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 800d370:	9a02      	ldr	r2, [sp, #8]
 800d372:	45b6      	cmp	lr, r6
 800d374:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d378:	db0d      	blt.n	800d396 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 800d37a:	449c      	add	ip, r3
 800d37c:	fa1f fc8c 	uxth.w	ip, ip
 800d380:	445a      	add	r2, fp
 800d382:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d386:	448c      	add	ip, r1
 800d388:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d38c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d390:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d394:	e61c      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d396:	445a      	add	r2, fp
 800d398:	4484      	add	ip, r0
 800d39a:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d39e:	e78f      	b.n	800d2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800d3a0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d3a4:	fa1f f18e 	uxth.w	r1, lr
 800d3a8:	eb01 0806 	add.w	r8, r1, r6
 800d3ac:	b293      	uxth	r3, r2
 800d3ae:	fa1f f888 	uxth.w	r8, r8
 800d3b2:	9306      	str	r3, [sp, #24]
 800d3b4:	fa0f f388 	sxth.w	r3, r8
 800d3b8:	9307      	str	r3, [sp, #28]
 800d3ba:	9f06      	ldr	r7, [sp, #24]
 800d3bc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d3c0:	443b      	add	r3, r7
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	4596      	cmp	lr, r2
 800d3c6:	9308      	str	r3, [sp, #32]
 800d3c8:	da24      	bge.n	800d414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 800d3ca:	9905      	ldr	r1, [sp, #20]
 800d3cc:	eba3 0308 	sub.w	r3, r3, r8
 800d3d0:	ebaa 0401 	sub.w	r4, sl, r1
 800d3d4:	b2a4      	uxth	r4, r4
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	b225      	sxth	r5, r4
 800d3da:	b219      	sxth	r1, r3
 800d3dc:	eba2 020e 	sub.w	r2, r2, lr
 800d3e0:	eba9 0000 	sub.w	r0, r9, r0
 800d3e4:	436a      	muls	r2, r5
 800d3e6:	4348      	muls	r0, r1
 800d3e8:	4282      	cmp	r2, r0
 800d3ea:	9a02      	ldr	r2, [sp, #8]
 800d3ec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d3f0:	445a      	add	r2, fp
 800d3f2:	dc06      	bgt.n	800d402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d3fa:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d3fe:	44a4      	add	ip, r4
 800d400:	e75e      	b.n	800d2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800d402:	9904      	ldr	r1, [sp, #16]
 800d404:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d408:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d40c:	4433      	add	r3, r6
 800d40e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d412:	e5dd      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d414:	9f06      	ldr	r7, [sp, #24]
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	1bc9      	subs	r1, r1, r7
 800d41a:	fa0f f78a 	sxth.w	r7, sl
 800d41e:	b289      	uxth	r1, r1
 800d420:	429f      	cmp	r7, r3
 800d422:	fa0f fe81 	sxth.w	lr, r1
 800d426:	dd23      	ble.n	800d470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 800d428:	9a05      	ldr	r2, [sp, #20]
 800d42a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d42e:	9d07      	ldr	r5, [sp, #28]
 800d430:	ebaa 0202 	sub.w	r2, sl, r2
 800d434:	b292      	uxth	r2, r2
 800d436:	eba5 0a03 	sub.w	sl, r5, r3
 800d43a:	b214      	sxth	r4, r2
 800d43c:	eba9 0000 	sub.w	r0, r9, r0
 800d440:	9b02      	ldr	r3, [sp, #8]
 800d442:	fb0e f000 	mul.w	r0, lr, r0
 800d446:	fb04 fa0a 	mul.w	sl, r4, sl
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	4550      	cmp	r0, sl
 800d44e:	445b      	add	r3, fp
 800d450:	db03      	blt.n	800d45a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 800d452:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d456:	4494      	add	ip, r2
 800d458:	e732      	b.n	800d2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800d45a:	9a04      	ldr	r2, [sp, #16]
 800d45c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d460:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d464:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d468:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d46c:	4431      	add	r1, r6
 800d46e:	e75c      	b.n	800d32a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 800d470:	9b08      	ldr	r3, [sp, #32]
 800d472:	eba3 0308 	sub.w	r3, r3, r8
 800d476:	b29b      	uxth	r3, r3
 800d478:	2d06      	cmp	r5, #6
 800d47a:	b218      	sxth	r0, r3
 800d47c:	d813      	bhi.n	800d4a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 800d47e:	9b07      	ldr	r3, [sp, #28]
 800d480:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d484:	1c6b      	adds	r3, r5, #1
 800d486:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d48a:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d48e:	9b01      	ldr	r3, [sp, #4]
 800d490:	9901      	ldr	r1, [sp, #4]
 800d492:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d496:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d49a:	805a      	strh	r2, [r3, #2]
 800d49c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d49e:	809a      	strh	r2, [r3, #4]
 800d4a0:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d4a4:	e75f      	b.n	800d366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 800d4a6:	9c02      	ldr	r4, [sp, #8]
 800d4a8:	4570      	cmp	r0, lr
 800d4aa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d4ae:	db0d      	blt.n	800d4cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800d4b0:	4431      	add	r1, r6
 800d4b2:	9b06      	ldr	r3, [sp, #24]
 800d4b4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d4b8:	b289      	uxth	r1, r1
 800d4ba:	445c      	add	r4, fp
 800d4bc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d4c0:	4419      	add	r1, r3
 800d4c2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d4c6:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d4ca:	e581      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d4cc:	445c      	add	r4, fp
 800d4ce:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d4d2:	e79b      	b.n	800d40c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 800d4d4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d4d8:	1e65      	subs	r5, r4, #1
 800d4da:	b2ad      	uxth	r5, r5
 800d4dc:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d4e0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d4e4:	42b5      	cmp	r5, r6
 800d4e6:	d044      	beq.n	800d572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 800d4e8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d4ec:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d4f0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d4f4:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d4f8:	4282      	cmp	r2, r0
 800d4fa:	d11f      	bne.n	800d53c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800d4fc:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d500:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d504:	459c      	cmp	ip, r3
 800d506:	d119      	bne.n	800d53c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 800d508:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d50c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d510:	19d8      	adds	r0, r3, r7
 800d512:	b200      	sxth	r0, r0
 800d514:	4288      	cmp	r0, r1
 800d516:	d109      	bne.n	800d52c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d518:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d51c:	4413      	add	r3, r2
 800d51e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d522:	4629      	mov	r1, r5
 800d524:	9801      	ldr	r0, [sp, #4]
 800d526:	f7ff fd23 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d52a:	e003      	b.n	800d534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800d52c:	4411      	add	r1, r2
 800d52e:	b209      	sxth	r1, r1
 800d530:	42b9      	cmp	r1, r7
 800d532:	d0f3      	beq.n	800d51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d534:	3d01      	subs	r5, #1
 800d536:	b2ad      	uxth	r5, r5
 800d538:	3c08      	subs	r4, #8
 800d53a:	e7d3      	b.n	800d4e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800d53c:	42b9      	cmp	r1, r7
 800d53e:	d1f9      	bne.n	800d534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800d540:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d544:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d548:	4299      	cmp	r1, r3
 800d54a:	d1f3      	bne.n	800d534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800d54c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d550:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d554:	181f      	adds	r7, r3, r0
 800d556:	b23f      	sxth	r7, r7
 800d558:	42ba      	cmp	r2, r7
 800d55a:	d105      	bne.n	800d568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 800d55c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d560:	440b      	add	r3, r1
 800d562:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d566:	e7dc      	b.n	800d522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 800d568:	440a      	add	r2, r1
 800d56a:	b212      	sxth	r2, r2
 800d56c:	4290      	cmp	r0, r2
 800d56e:	d1e1      	bne.n	800d534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 800d570:	e7f6      	b.n	800d560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 800d572:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d576:	2e07      	cmp	r6, #7
 800d578:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d57c:	d812      	bhi.n	800d5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 800d57e:	1c75      	adds	r5, r6, #1
 800d580:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d584:	9d01      	ldr	r5, [sp, #4]
 800d586:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d58a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d58e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d592:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d596:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d59a:	442c      	add	r4, r5
 800d59c:	8061      	strh	r1, [r4, #2]
 800d59e:	80a2      	strh	r2, [r4, #4]
 800d5a0:	80e3      	strh	r3, [r4, #6]
 800d5a2:	e57f      	b.n	800d0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 800d5a4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d5a8:	3e01      	subs	r6, #1
 800d5aa:	445c      	add	r4, fp
 800d5ac:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d5b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	9305      	str	r3, [sp, #20]
 800d5b8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	1e72      	subs	r2, r6, #1
 800d5c0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	4691      	mov	r9, r2
 800d5c8:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d5cc:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d5d0:	bf14      	ite	ne
 800d5d2:	9905      	ldrne	r1, [sp, #20]
 800d5d4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d5d8:	6818      	ldr	r0, [r3, #0]
 800d5da:	9207      	str	r2, [sp, #28]
 800d5dc:	bf18      	it	ne
 800d5de:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d5e2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d5e6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d5ea:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d5ee:	9306      	str	r3, [sp, #24]
 800d5f0:	fb18 f801 	smulbb	r8, r8, r1
 800d5f4:	6859      	ldr	r1, [r3, #4]
 800d5f6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d5fa:	4671      	mov	r1, lr
 800d5fc:	a80c      	add	r0, sp, #48	@ 0x30
 800d5fe:	f7ff fb3d 	bl	800cc7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d602:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d606:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d60a:	9b04      	ldr	r3, [sp, #16]
 800d60c:	9a02      	ldr	r2, [sp, #8]
 800d60e:	fb10 f001 	smulbb	r0, r0, r1
 800d612:	fb02 8803 	mla	r8, r2, r3, r8
 800d616:	eba0 0108 	sub.w	r1, r0, r8
 800d61a:	f04f 0c08 	mov.w	ip, #8
 800d61e:	fb90 f0fc 	sdiv	r0, r0, ip
 800d622:	4288      	cmp	r0, r1
 800d624:	dc20      	bgt.n	800d668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 800d626:	4551      	cmp	r1, sl
 800d628:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d62c:	da03      	bge.n	800d636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69e>
 800d62e:	b1d9      	cbz	r1, 800d668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d0>
 800d630:	468a      	mov	sl, r1
 800d632:	464f      	mov	r7, r9
 800d634:	4635      	mov	r5, r6
 800d636:	f109 39ff 	add.w	r9, r9, #4294967295
 800d63a:	f119 0f02 	cmn.w	r9, #2
 800d63e:	d1c5      	bne.n	800d5cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 800d640:	4616      	mov	r6, r2
 800d642:	3201      	adds	r2, #1
 800d644:	f1a4 0408 	sub.w	r4, r4, #8
 800d648:	d1b6      	bne.n	800d5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800d64a:	9b01      	ldr	r3, [sp, #4]
 800d64c:	b2ac      	uxth	r4, r5
 800d64e:	00ed      	lsls	r5, r5, #3
 800d650:	1958      	adds	r0, r3, r5
 800d652:	1c7b      	adds	r3, r7, #1
 800d654:	d10b      	bne.n	800d66e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d6>
 800d656:	4601      	mov	r1, r0
 800d658:	9803      	ldr	r0, [sp, #12]
 800d65a:	f7ff fb0f 	bl	800cc7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d65e:	4621      	mov	r1, r4
 800d660:	9801      	ldr	r0, [sp, #4]
 800d662:	f7ff fc85 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d666:	e4b3      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 800d668:	464f      	mov	r7, r9
 800d66a:	4635      	mov	r5, r6
 800d66c:	e7ed      	b.n	800d64a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b2>
 800d66e:	9b01      	ldr	r3, [sp, #4]
 800d670:	00ff      	lsls	r7, r7, #3
 800d672:	19d9      	adds	r1, r3, r7
 800d674:	f7ff fb02 	bl	800cc7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	cb03      	ldmia	r3!, {r0, r1}
 800d67c:	445f      	add	r7, fp
 800d67e:	445d      	add	r5, fp
 800d680:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d684:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d688:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	6869      	ldr	r1, [r5, #4]
 800d690:	c303      	stmia	r3!, {r0, r1}
 800d692:	e7e4      	b.n	800d65e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>

0800d694 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d698:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d69c:	b0a1      	sub	sp, #132	@ 0x84
 800d69e:	4604      	mov	r4, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fb fcbc 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	b948      	cbnz	r0, 800d6be <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4798      	blx	r3
 800d6b6:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d6ba:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d6be:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d149      	bne.n	800d75a <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 800d6c6:	4bb1      	ldr	r3, [pc, #708]	@ (800d98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 800d6ce:	1ebb      	subs	r3, r7, #2
 800d6d0:	425f      	negs	r7, r3
 800d6d2:	415f      	adcs	r7, r3
 800d6d4:	4bae      	ldr	r3, [pc, #696]	@ (800d990 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d040      	beq.n	800d75e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800d6dc:	4dad      	ldr	r5, [pc, #692]	@ (800d994 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f7fb fc9d 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d139      	bne.n	800d75e <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7ff f95a 	bl	800c9a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	6829      	ldr	r1, [r5, #0]
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f6:	686a      	ldr	r2, [r5, #4]
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	4798      	blx	r3
 800d6fc:	802e      	strh	r6, [r5, #0]
 800d6fe:	806e      	strh	r6, [r5, #2]
 800d700:	80ae      	strh	r6, [r5, #4]
 800d702:	80ee      	strh	r6, [r5, #6]
 800d704:	af0f      	add	r7, sp, #60	@ 0x3c
 800d706:	4ea4      	ldr	r6, [pc, #656]	@ (800d998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 800d708:	4638      	mov	r0, r7
 800d70a:	f7ff fbd9 	bl	800cec0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d70e:	8835      	ldrh	r5, [r6, #0]
 800d710:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 800d714:	462b      	mov	r3, r5
 800d716:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d71a:	4563      	cmp	r3, ip
 800d71c:	d224      	bcs.n	800d768 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 800d71e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800d722:	2907      	cmp	r1, #7
 800d724:	d816      	bhi.n	800d754 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d726:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d72a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d72e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d732:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 800d736:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 800d73a:	1c4a      	adds	r2, r1, #1
 800d73c:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 800d740:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 800d744:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 800d748:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d74c:	f8a2 8004 	strh.w	r8, [r2, #4]
 800d750:	f8a2 e006 	strh.w	lr, [r2, #6]
 800d754:	3301      	adds	r3, #1
 800d756:	b29b      	uxth	r3, r3
 800d758:	e7df      	b.n	800d71a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800d75a:	2701      	movs	r7, #1
 800d75c:	e7ba      	b.n	800d6d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 800d75e:	2f00      	cmp	r7, #0
 800d760:	d1d0      	bne.n	800d704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 800d762:	b021      	add	sp, #132	@ 0x84
 800d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d768:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d76c:	42ab      	cmp	r3, r5
 800d76e:	d90c      	bls.n	800d78a <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 800d770:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800d774:	6822      	ldr	r2, [r4, #0]
 800d776:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d77a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d77c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d780:	4620      	mov	r0, r4
 800d782:	3501      	adds	r5, #1
 800d784:	47b8      	blx	r7
 800d786:	b2ad      	uxth	r5, r5
 800d788:	e7ee      	b.n	800d768 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 800d78a:	4d80      	ldr	r5, [pc, #512]	@ (800d98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f8>)
 800d78c:	6828      	ldr	r0, [r5, #0]
 800d78e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800d792:	2b01      	cmp	r3, #1
 800d794:	f040 813b 	bne.w	800da0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x37a>
 800d798:	4a80      	ldr	r2, [pc, #512]	@ (800d99c <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 800d79a:	8833      	ldrh	r3, [r6, #0]
 800d79c:	7812      	ldrb	r2, [r2, #0]
 800d79e:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 800d7a2:	2a01      	cmp	r2, #1
 800d7a4:	d014      	beq.n	800d7d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d7a6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800d7aa:	32ae      	adds	r2, #174	@ 0xae
 800d7ac:	f04f 0900 	mov.w	r9, #0
 800d7b0:	4283      	cmp	r3, r0
 800d7b2:	f102 0208 	add.w	r2, r2, #8
 800d7b6:	f280 8082 	bge.w	800d8be <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800d7ba:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 800d7be:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 800d7c2:	4439      	add	r1, r7
 800d7c4:	b209      	sxth	r1, r1
 800d7c6:	4589      	cmp	r9, r1
 800d7c8:	bfb8      	it	lt
 800d7ca:	4689      	movlt	r9, r1
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	e7ef      	b.n	800d7b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 800d7d0:	4f73      	ldr	r7, [pc, #460]	@ (800d9a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 800d7d2:	883a      	ldrh	r2, [r7, #0]
 800d7d4:	4693      	mov	fp, r2
 800d7d6:	4283      	cmp	r3, r0
 800d7d8:	da08      	bge.n	800d7ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 800d7da:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 800d7de:	3301      	adds	r3, #1
 800d7e0:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 800d7e4:	458b      	cmp	fp, r1
 800d7e6:	bfa8      	it	ge
 800d7e8:	468b      	movge	fp, r1
 800d7ea:	e7f4      	b.n	800d7d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2a0f      	cmp	r2, #15
 800d7f0:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800d9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 800d7f4:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d7f8:	bf8c      	ite	hi
 800d7fa:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 800d7fe:	f04f 0801 	movls.w	r8, #1
 800d802:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d806:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800d80a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d80e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800d812:	6828      	ldr	r0, [r5, #0]
 800d814:	455b      	cmp	r3, fp
 800d816:	f340 80c7 	ble.w	800d9a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 800d81a:	6803      	ldr	r3, [r0, #0]
 800d81c:	f8b7 a000 	ldrh.w	sl, [r7]
 800d820:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d824:	4798      	blx	r3
 800d826:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	ebaa 0000 	sub.w	r0, sl, r0
 800d830:	b280      	uxth	r0, r0
 800d832:	ebac 0e08 	sub.w	lr, ip, r8
 800d836:	4570      	cmp	r0, lr
 800d838:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 800d83c:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 800d840:	dd05      	ble.n	800d84e <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 800d842:	4558      	cmp	r0, fp
 800d844:	dd03      	ble.n	800d84e <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ba>
 800d846:	b901      	cbnz	r1, 800d84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800d848:	b392      	cbz	r2, 800d8b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x21c>
 800d84a:	4658      	mov	r0, fp
 800d84c:	e006      	b.n	800d85c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1c8>
 800d84e:	2900      	cmp	r1, #0
 800d850:	d1fb      	bne.n	800d84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800d852:	2a00      	cmp	r2, #0
 800d854:	d1f9      	bne.n	800d84a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b6>
 800d856:	4558      	cmp	r0, fp
 800d858:	bfb8      	it	lt
 800d85a:	4658      	movlt	r0, fp
 800d85c:	f9b9 3000 	ldrsh.w	r3, [r9]
 800d860:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800d864:	2200      	movs	r2, #0
 800d866:	ebac 0000 	sub.w	r0, ip, r0
 800d86a:	f8b6 a000 	ldrh.w	sl, [r6]
 800d86e:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d872:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 800d876:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d87a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d87e:	4553      	cmp	r3, sl
 800d880:	ddc5      	ble.n	800d80e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800d882:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800d886:	ab0d      	add	r3, sp, #52	@ 0x34
 800d888:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d88c:	6851      	ldr	r1, [r2, #4]
 800d88e:	c303      	stmia	r3!, {r0, r1}
 800d890:	a80d      	add	r0, sp, #52	@ 0x34
 800d892:	a90b      	add	r1, sp, #44	@ 0x2c
 800d894:	f7fb fb80 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800d898:	a80d      	add	r0, sp, #52	@ 0x34
 800d89a:	f7fb fbc0 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d89e:	b920      	cbnz	r0, 800d8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x216>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	a90d      	add	r1, sp, #52	@ 0x34
 800d8a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4798      	blx	r3
 800d8aa:	f10a 0a01 	add.w	sl, sl, #1
 800d8ae:	e7e4      	b.n	800d87a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e6>
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	4790      	blx	r2
 800d8bc:	e7a7      	b.n	800d80e <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 800d8be:	4b39      	ldr	r3, [pc, #228]	@ (800d9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 800d8c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800d9a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>
 800d8c4:	881f      	ldrh	r7, [r3, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800d8cc:	2f0f      	cmp	r7, #15
 800d8ce:	bf8c      	ite	hi
 800d8d0:	08ff      	lsrhi	r7, r7, #3
 800d8d2:	2701      	movls	r7, #1
 800d8d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800d8d8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800d8dc:	6828      	ldr	r0, [r5, #0]
 800d8de:	4413      	add	r3, r2
 800d8e0:	b21b      	sxth	r3, r3
 800d8e2:	454b      	cmp	r3, r9
 800d8e4:	da60      	bge.n	800d9a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 800d8e6:	6803      	ldr	r3, [r0, #0]
 800d8e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d8ec:	4798      	blx	r3
 800d8ee:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800d8f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800d8f6:	682a      	ldr	r2, [r5, #0]
 800d8f8:	4473      	add	r3, lr
 800d8fa:	b21b      	sxth	r3, r3
 800d8fc:	eb03 0e07 	add.w	lr, r3, r7
 800d900:	4570      	cmp	r0, lr
 800d902:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 800d906:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 800d90a:	da0d      	bge.n	800d928 <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 800d90c:	4548      	cmp	r0, r9
 800d90e:	da0b      	bge.n	800d928 <_ZN8touchgfx11Application15drawCachedAreasEv+0x294>
 800d910:	f1bc 0f00 	cmp.w	ip, #0
 800d914:	d138      	bne.n	800d988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800d916:	2900      	cmp	r1, #0
 800d918:	d136      	bne.n	800d988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800d91a:	6813      	ldr	r3, [r2, #0]
 800d91c:	2101      	movs	r1, #1
 800d91e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d922:	4610      	mov	r0, r2
 800d924:	4798      	blx	r3
 800d926:	e7d5      	b.n	800d8d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800d928:	f1bc 0f00 	cmp.w	ip, #0
 800d92c:	d12c      	bne.n	800d988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800d92e:	bb59      	cbnz	r1, 800d988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f4>
 800d930:	4548      	cmp	r0, r9
 800d932:	bfa8      	it	ge
 800d934:	4648      	movge	r0, r9
 800d936:	f9b8 2000 	ldrsh.w	r2, [r8]
 800d93a:	f8b6 a000 	ldrh.w	sl, [r6]
 800d93e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d942:	2100      	movs	r1, #0
 800d944:	1ac0      	subs	r0, r0, r3
 800d946:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d94a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800d94e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d952:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d956:	4553      	cmp	r3, sl
 800d958:	ddbc      	ble.n	800d8d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800d95a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800d95e:	ab0d      	add	r3, sp, #52	@ 0x34
 800d960:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d964:	6851      	ldr	r1, [r2, #4]
 800d966:	c303      	stmia	r3!, {r0, r1}
 800d968:	a80d      	add	r0, sp, #52	@ 0x34
 800d96a:	a90b      	add	r1, sp, #44	@ 0x2c
 800d96c:	f7fb fb14 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800d970:	a80d      	add	r0, sp, #52	@ 0x34
 800d972:	f7fb fb54 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d976:	b920      	cbnz	r0, 800d982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ee>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	a90d      	add	r1, sp, #52	@ 0x34
 800d97c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d97e:	4620      	mov	r0, r4
 800d980:	4798      	blx	r3
 800d982:	f10a 0a01 	add.w	sl, sl, #1
 800d986:	e7e4      	b.n	800d952 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2be>
 800d988:	4648      	mov	r0, r9
 800d98a:	e7d4      	b.n	800d936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a2>
 800d98c:	200125e0 	.word	0x200125e0
 800d990:	20012618 	.word	0x20012618
 800d994:	20012624 	.word	0x20012624
 800d998:	20000084 	.word	0x20000084
 800d99c:	200125d8 	.word	0x200125d8
 800d9a0:	200125d4 	.word	0x200125d4
 800d9a4:	200125d6 	.word	0x200125d6
 800d9a8:	6828      	ldr	r0, [r5, #0]
 800d9aa:	6803      	ldr	r3, [r0, #0]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ae:	4798      	blx	r3
 800d9b0:	4ba5      	ldr	r3, [pc, #660]	@ (800dc48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f43f aed4 	beq.w	800d762 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800d9c0:	4ba2      	ldr	r3, [pc, #648]	@ (800dc4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 800d9c2:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 800d9c6:	881b      	ldrh	r3, [r3, #0]
 800d9c8:	a80f      	add	r0, sp, #60	@ 0x3c
 800d9ca:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 800d9ce:	42b3      	cmp	r3, r6
 800d9d0:	f4bf aec7 	bcs.w	800d762 <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 800d9d4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800d9d8:	2907      	cmp	r1, #7
 800d9da:	d815      	bhi.n	800da08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x374>
 800d9dc:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d9e0:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800d9e4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800d9e8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800d9ec:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800d9f0:	1c4a      	adds	r2, r1, #1
 800d9f2:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800d9f6:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 800d9fa:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 800d9fe:	f8a2 e002 	strh.w	lr, [r2, #2]
 800da02:	f8a2 c004 	strh.w	ip, [r2, #4]
 800da06:	80d7      	strh	r7, [r2, #6]
 800da08:	3301      	adds	r3, #1
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	e7df      	b.n	800d9ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800da0e:	2b02      	cmp	r3, #2
 800da10:	f040 80d1 	bne.w	800dbb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800da14:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800da18:	9308      	str	r3, [sp, #32]
 800da1a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 800da1e:	9307      	str	r3, [sp, #28]
 800da20:	6803      	ldr	r3, [r0, #0]
 800da22:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 800da26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da2a:	4798      	blx	r3
 800da2c:	4b88      	ldr	r3, [pc, #544]	@ (800dc50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	4b88      	ldr	r3, [pc, #544]	@ (800dc54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 800da34:	881e      	ldrh	r6, [r3, #0]
 800da36:	4b88      	ldr	r3, [pc, #544]	@ (800dc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da3e:	2b01      	cmp	r3, #1
 800da40:	bf1c      	itt	ne
 800da42:	9b02      	ldrne	r3, [sp, #8]
 800da44:	9602      	strne	r6, [sp, #8]
 800da46:	b2bf      	uxth	r7, r7
 800da48:	fa0f f887 	sxth.w	r8, r7
 800da4c:	4682      	mov	sl, r0
 800da4e:	f04f 0000 	mov.w	r0, #0
 800da52:	bf18      	it	ne
 800da54:	461e      	movne	r6, r3
 800da56:	f7f2 fe97 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800da5a:	fb96 fbfb 	sdiv	fp, r6, fp
 800da5e:	fb0b f808 	mul.w	r8, fp, r8
 800da62:	45c2      	cmp	sl, r8
 800da64:	da0c      	bge.n	800da80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 800da66:	6828      	ldr	r0, [r5, #0]
 800da68:	6803      	ldr	r3, [r0, #0]
 800da6a:	210a      	movs	r1, #10
 800da6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da70:	4798      	blx	r3
 800da72:	6828      	ldr	r0, [r5, #0]
 800da74:	6803      	ldr	r3, [r0, #0]
 800da76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da7a:	4798      	blx	r3
 800da7c:	4682      	mov	sl, r0
 800da7e:	e7f0      	b.n	800da62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 800da80:	2000      	movs	r0, #0
 800da82:	f7f2 feab 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800da86:	fa1f f38b 	uxth.w	r3, fp
 800da8a:	fb17 f703 	smulbb	r7, r7, r3
 800da8e:	9304      	str	r3, [sp, #16]
 800da90:	b2bb      	uxth	r3, r7
 800da92:	9305      	str	r3, [sp, #20]
 800da94:	f04f 0800 	mov.w	r8, #0
 800da98:	0973      	lsrs	r3, r6, #5
 800da9a:	4f70      	ldr	r7, [pc, #448]	@ (800dc5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 800da9c:	9306      	str	r3, [sp, #24]
 800da9e:	4645      	mov	r5, r8
 800daa0:	42b5      	cmp	r5, r6
 800daa2:	d085      	beq.n	800d9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800daa4:	6838      	ldr	r0, [r7, #0]
 800daa6:	6803      	ldr	r3, [r0, #0]
 800daa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800daac:	4798      	blx	r3
 800daae:	4582      	cmp	sl, r0
 800dab0:	4681      	mov	r9, r0
 800dab2:	d907      	bls.n	800dac4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 800dab4:	f1b8 0f00 	cmp.w	r8, #0
 800dab8:	d007      	beq.n	800daca <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	6803      	ldr	r3, [r0, #0]
 800dabe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dac2:	e774      	b.n	800d9ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800dac4:	f1b8 0f00 	cmp.w	r8, #0
 800dac8:	d003      	beq.n	800dad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 800daca:	454d      	cmp	r5, r9
 800dacc:	d3f5      	bcc.n	800daba <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 800dace:	f04f 0801 	mov.w	r8, #1
 800dad2:	9a04      	ldr	r2, [sp, #16]
 800dad4:	fb95 f3fb 	sdiv	r3, r5, fp
 800dad8:	9303      	str	r3, [sp, #12]
 800dada:	3301      	adds	r3, #1
 800dadc:	fb13 f302 	smulbb	r3, r3, r2
 800dae0:	b299      	uxth	r1, r3
 800dae2:	f1b8 0f00 	cmp.w	r8, #0
 800dae6:	d04e      	beq.n	800db86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f2>
 800dae8:	eb09 030b 	add.w	r3, r9, fp
 800daec:	42b3      	cmp	r3, r6
 800daee:	bfa8      	it	ge
 800daf0:	4633      	movge	r3, r6
 800daf2:	9807      	ldr	r0, [sp, #28]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	428b      	cmp	r3, r1
 800daf8:	bf94      	ite	ls
 800dafa:	ebc5 0203 	rsbls	r2, r5, r3
 800dafe:	ebc5 0201 	rsbhi	r2, r5, r1
 800db02:	4282      	cmp	r2, r0
 800db04:	bfa8      	it	ge
 800db06:	4602      	movge	r2, r0
 800db08:	9808      	ldr	r0, [sp, #32]
 800db0a:	fa1f fa82 	uxth.w	sl, r2
 800db0e:	4582      	cmp	sl, r0
 800db10:	d205      	bcs.n	800db1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 800db12:	fa15 f082 	uxtah	r0, r5, r2
 800db16:	4286      	cmp	r6, r0
 800db18:	d001      	beq.n	800db1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 800db1a:	4299      	cmp	r1, r3
 800db1c:	d240      	bcs.n	800dba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50c>
 800db1e:	2001      	movs	r0, #1
 800db20:	9209      	str	r2, [sp, #36]	@ 0x24
 800db22:	f7f2 fe31 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800db26:	6838      	ldr	r0, [r7, #0]
 800db28:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800db2c:	6803      	ldr	r3, [r0, #0]
 800db2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db32:	4798      	blx	r3
 800db34:	4b48      	ldr	r3, [pc, #288]	@ (800dc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800db36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	b212      	sxth	r2, r2
 800db42:	f04f 0000 	mov.w	r0, #0
 800db46:	d122      	bne.n	800db8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fa>
 800db48:	1b73      	subs	r3, r6, r5
 800db4a:	eba3 030a 	sub.w	r3, r3, sl
 800db4e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800db52:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 800db56:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800db5a:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	a90d      	add	r1, sp, #52	@ 0x34
 800db62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db64:	4620      	mov	r0, r4
 800db66:	4798      	blx	r3
 800db68:	6838      	ldr	r0, [r7, #0]
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	4259      	negs	r1, r3
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	b209      	sxth	r1, r1
 800db72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db76:	4798      	blx	r3
 800db78:	4455      	add	r5, sl
 800db7a:	2001      	movs	r0, #1
 800db7c:	b2ad      	uxth	r5, r5
 800db7e:	f7f2 fe2d 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800db82:	46ca      	mov	sl, r9
 800db84:	e78c      	b.n	800daa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 800db86:	9b05      	ldr	r3, [sp, #20]
 800db88:	eba9 0303 	sub.w	r3, r9, r3
 800db8c:	e7b1      	b.n	800daf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 800db8e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800db92:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 800db96:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 800db9a:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 800db9e:	e7de      	b.n	800db5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ca>
 800dba0:	6838      	ldr	r0, [r7, #0]
 800dba2:	6803      	ldr	r3, [r0, #0]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba6:	4798      	blx	r3
 800dba8:	6838      	ldr	r0, [r7, #0]
 800dbaa:	9906      	ldr	r1, [sp, #24]
 800dbac:	6803      	ldr	r3, [r0, #0]
 800dbae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dbb2:	4798      	blx	r3
 800dbb4:	e7e5      	b.n	800db82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ee>
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	f040 8130 	bne.w	800de1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x788>
 800dbbc:	4b26      	ldr	r3, [pc, #152]	@ (800dc58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 800dbbe:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800dbca:	f000 8093 	beq.w	800dcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800dbce:	8832      	ldrh	r2, [r6, #0]
 800dbd0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800dbd4:	3201      	adds	r2, #1
 800dbd6:	b292      	uxth	r2, r2
 800dbd8:	2900      	cmp	r1, #0
 800dbda:	f43f aee9 	beq.w	800d9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dbde:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 800dbe2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 800dbe6:	441d      	add	r5, r3
 800dbe8:	b22d      	sxth	r5, r5
 800dbea:	4694      	mov	ip, r2
 800dbec:	f04f 0800 	mov.w	r8, #0
 800dbf0:	fa1f f38c 	uxth.w	r3, ip
 800dbf4:	4299      	cmp	r1, r3
 800dbf6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800dbfa:	f240 80ba 	bls.w	800dd72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6de>
 800dbfe:	4427      	add	r7, r4
 800dc00:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800dc04:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800dc08:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800dc0c:	4283      	cmp	r3, r0
 800dc0e:	f340 809c 	ble.w	800dd4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b6>
 800dc12:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 800dc16:	4405      	add	r5, r0
 800dc18:	b22d      	sxth	r5, r5
 800dc1a:	429d      	cmp	r5, r3
 800dc1c:	bfa8      	it	ge
 800dc1e:	461d      	movge	r5, r3
 800dc20:	46e0      	mov	r8, ip
 800dc22:	f10c 0c01 	add.w	ip, ip, #1
 800dc26:	e7e3      	b.n	800dbf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>
 800dc28:	d10a      	bne.n	800dc40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5ac>
 800dc2a:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 800dc2e:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800dc32:	4562      	cmp	r2, ip
 800dc34:	bfb8      	it	lt
 800dc36:	4662      	movlt	r2, ip
 800dc38:	4288      	cmp	r0, r1
 800dc3a:	bfb8      	it	lt
 800dc3c:	4698      	movlt	r8, r3
 800dc3e:	e082      	b.n	800dd46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 800dc40:	428a      	cmp	r2, r1
 800dc42:	bfb8      	it	lt
 800dc44:	460a      	movlt	r2, r1
 800dc46:	e07e      	b.n	800dd46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b2>
 800dc48:	200125de 	.word	0x200125de
 800dc4c:	20000084 	.word	0x20000084
 800dc50:	200125d6 	.word	0x200125d6
 800dc54:	200125d4 	.word	0x200125d4
 800dc58:	200125d8 	.word	0x200125d8
 800dc5c:	200125e0 	.word	0x200125e0
 800dc60:	19e1      	adds	r1, r4, r7
 800dc62:	ab0d      	add	r3, sp, #52	@ 0x34
 800dc64:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800dc68:	6849      	ldr	r1, [r1, #4]
 800dc6a:	c303      	stmia	r3!, {r0, r1}
 800dc6c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 800dc70:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800dc74:	454b      	cmp	r3, r9
 800dc76:	bfb8      	it	lt
 800dc78:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 800dc7c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800dc80:	440b      	add	r3, r1
 800dc82:	1a9b      	subs	r3, r3, r2
 800dc84:	a80d      	add	r0, sp, #52	@ 0x34
 800dc86:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800dc8a:	f7fe fea5 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc8e:	a80d      	add	r0, sp, #52	@ 0x34
 800dc90:	f7fb f9c5 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc94:	bb70      	cbnz	r0, 800dcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800dc96:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 800dc9a:	6828      	ldr	r0, [r5, #0]
 800dc9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800dca0:	f8d0 e000 	ldr.w	lr, [r0]
 800dca4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800dca8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800dcac:	45cc      	cmp	ip, r9
 800dcae:	bfd4      	ite	le
 800dcb0:	fa1f fc8c 	uxthle.w	ip, ip
 800dcb4:	fa1f fc89 	uxthgt.w	ip, r9
 800dcb8:	f8cd c000 	str.w	ip, [sp]
 800dcbc:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 800dcc0:	47d8      	blx	fp
 800dcc2:	4683      	mov	fp, r0
 800dcc4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800dcc8:	a80d      	add	r0, sp, #52	@ 0x34
 800dcca:	f7fe fe6b 	bl	800c9a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	4427      	add	r7, r4
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcd6:	a90d      	add	r1, sp, #52	@ 0x34
 800dcd8:	4798      	blx	r3
 800dcda:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 800dcde:	eba0 000b 	sub.w	r0, r0, fp
 800dce2:	b200      	sxth	r0, r0
 800dce4:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 800dce8:	b920      	cbnz	r0, 800dcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x660>
 800dcea:	fa1f f188 	uxth.w	r1, r8
 800dcee:	4650      	mov	r0, sl
 800dcf0:	f7ff f93e 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dcf4:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800dcf8:	f1bb 0f00 	cmp.w	fp, #0
 800dcfc:	f43f ae58 	beq.w	800d9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd00:	8833      	ldrh	r3, [r6, #0]
 800dd02:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800dd06:	3301      	adds	r3, #1
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	f04f 0800 	mov.w	r8, #0
 800dd0e:	b299      	uxth	r1, r3
 800dd10:	458b      	cmp	fp, r1
 800dd12:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800dd16:	d9a3      	bls.n	800dc60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 800dd18:	4427      	add	r7, r4
 800dd1a:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800dd1e:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 800dd22:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 800dd26:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800dd2a:	4408      	add	r0, r1
 800dd2c:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800dd30:	4461      	add	r1, ip
 800dd32:	b200      	sxth	r0, r0
 800dd34:	b209      	sxth	r1, r1
 800dd36:	4288      	cmp	r0, r1
 800dd38:	f6bf af76 	bge.w	800dc28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x594>
 800dd3c:	4584      	cmp	ip, r0
 800dd3e:	4662      	mov	r2, ip
 800dd40:	4698      	mov	r8, r3
 800dd42:	bfb8      	it	lt
 800dd44:	4602      	movlt	r2, r0
 800dd46:	3301      	adds	r3, #1
 800dd48:	e7e1      	b.n	800dd0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x67a>
 800dd4a:	d10e      	bne.n	800dd6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d6>
 800dd4c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800dd50:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800dd54:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800dd58:	4473      	add	r3, lr
 800dd5a:	b21b      	sxth	r3, r3
 800dd5c:	429d      	cmp	r5, r3
 800dd5e:	bfa8      	it	ge
 800dd60:	461d      	movge	r5, r3
 800dd62:	4287      	cmp	r7, r0
 800dd64:	bfb8      	it	lt
 800dd66:	46e0      	movlt	r8, ip
 800dd68:	e75b      	b.n	800dc22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 800dd6a:	4285      	cmp	r5, r0
 800dd6c:	bfa8      	it	ge
 800dd6e:	4605      	movge	r5, r0
 800dd70:	e757      	b.n	800dc22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58e>
 800dd72:	eb0a 0007 	add.w	r0, sl, r7
 800dd76:	4427      	add	r7, r4
 800dd78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800dd7c:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800dd80:	45cb      	cmp	fp, r9
 800dd82:	bfbe      	ittt	lt
 800dd84:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 800dd88:	445d      	addlt	r5, fp
 800dd8a:	b22d      	sxthlt	r5, r5
 800dd8c:	f7fb f947 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd90:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd94:	2800      	cmp	r0, #0
 800dd96:	f47f af1f 	bne.w	800dbd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x544>
 800dd9a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800dd9e:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800dda2:	482b      	ldr	r0, [pc, #172]	@ (800de50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7bc>)
 800dda4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800dda8:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800ddac:	6800      	ldr	r0, [r0, #0]
 800ddae:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 800ddb2:	1aad      	subs	r5, r5, r2
 800ddb4:	454d      	cmp	r5, r9
 800ddb6:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800ddba:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ddbe:	bfa8      	it	ge
 800ddc0:	464d      	movge	r5, r9
 800ddc2:	f8d0 c000 	ldr.w	ip, [r0]
 800ddc6:	b2ad      	uxth	r5, r5
 800ddc8:	fa1f fb8b 	uxth.w	fp, fp
 800ddcc:	455d      	cmp	r5, fp
 800ddce:	bf94      	ite	ls
 800ddd0:	9500      	strls	r5, [sp, #0]
 800ddd2:	f8cd b000 	strhi.w	fp, [sp]
 800ddd6:	b292      	uxth	r2, r2
 800ddd8:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	b289      	uxth	r1, r1
 800dde0:	47a8      	blx	r5
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800dde8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddea:	a90d      	add	r1, sp, #52	@ 0x34
 800ddec:	4620      	mov	r0, r4
 800ddee:	4798      	blx	r3
 800ddf0:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 800ddf4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ddf8:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800ddfc:	1a5b      	subs	r3, r3, r1
 800ddfe:	440a      	add	r2, r1
 800de00:	b21b      	sxth	r3, r3
 800de02:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800de06:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f47f aedf 	bne.w	800dbce <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 800de10:	fa1f f188 	uxth.w	r1, r8
 800de14:	4650      	mov	r0, sl
 800de16:	f7ff f8ab 	bl	800cf70 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800de1a:	e6d8      	b.n	800dbce <_ZN8touchgfx11Application15drawCachedAreasEv+0x53a>
 800de1c:	8835      	ldrh	r5, [r6, #0]
 800de1e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800de22:	42ab      	cmp	r3, r5
 800de24:	f67f adc4 	bls.w	800d9b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800de28:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800de2c:	ab0d      	add	r3, sp, #52	@ 0x34
 800de2e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800de32:	6851      	ldr	r1, [r2, #4]
 800de34:	c303      	stmia	r3!, {r0, r1}
 800de36:	a80d      	add	r0, sp, #52	@ 0x34
 800de38:	f7fb f8f1 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 800de3c:	b920      	cbnz	r0, 800de48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b4>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	a90d      	add	r1, sp, #52	@ 0x34
 800de42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de44:	4620      	mov	r0, r4
 800de46:	4798      	blx	r3
 800de48:	3501      	adds	r5, #1
 800de4a:	b2ad      	uxth	r5, r5
 800de4c:	e7e7      	b.n	800de1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x78a>
 800de4e:	bf00      	nop
 800de50:	200125e0 	.word	0x200125e0

0800de54 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800de54:	4b03      	ldr	r3, [pc, #12]	@ (800de64 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800de56:	2200      	movs	r2, #0
 800de58:	801a      	strh	r2, [r3, #0]
 800de5a:	805a      	strh	r2, [r3, #2]
 800de5c:	809a      	strh	r2, [r3, #4]
 800de5e:	80da      	strh	r2, [r3, #6]
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20012624 	.word	0x20012624

0800de68 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 800de68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6c:	4604      	mov	r4, r0
 800de6e:	b09c      	sub	sp, #112	@ 0x70
 800de70:	a803      	add	r0, sp, #12
 800de72:	4615      	mov	r5, r2
 800de74:	460e      	mov	r6, r1
 800de76:	461f      	mov	r7, r3
 800de78:	f000 fd89 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	4620      	mov	r0, r4
 800de80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de82:	4798      	blx	r3
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	4680      	mov	r8, r0
 800de88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de8a:	4620      	mov	r0, r4
 800de8c:	4798      	blx	r3
 800de8e:	4629      	mov	r1, r5
 800de90:	9000      	str	r0, [sp, #0]
 800de92:	4643      	mov	r3, r8
 800de94:	463a      	mov	r2, r7
 800de96:	a803      	add	r0, sp, #12
 800de98:	f000 fdd4 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de9c:	2500      	movs	r5, #0
 800de9e:	a803      	add	r0, sp, #12
 800dea0:	f000 fd9c 	bl	800e9dc <_ZN8touchgfx12TextProvider11endOfStringEv>
 800dea4:	b958      	cbnz	r0, 800debe <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x56>
 800dea6:	4633      	mov	r3, r6
 800dea8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800deac:	4621      	mov	r1, r4
 800deae:	a803      	add	r0, sp, #12
 800deb0:	f7fd fba3 	bl	800b5fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800deb4:	b203      	sxth	r3, r0
 800deb6:	42ab      	cmp	r3, r5
 800deb8:	bfc8      	it	gt
 800deba:	4605      	movgt	r5, r0
 800debc:	e7ef      	b.n	800de9e <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x36>
 800debe:	4628      	mov	r0, r5
 800dec0:	b01c      	add	sp, #112	@ 0x70
 800dec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dec6 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dec6:	b508      	push	{r3, lr}
 800dec8:	6803      	ldr	r3, [r0, #0]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	4798      	blx	r3
 800dece:	b128      	cbz	r0, 800dedc <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800ded0:	7b43      	ldrb	r3, [r0, #13]
 800ded2:	7a80      	ldrb	r0, [r0, #10]
 800ded4:	005b      	lsls	r3, r3, #1
 800ded6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deda:	4318      	orrs	r0, r3
 800dedc:	bd08      	pop	{r3, pc}

0800dede <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800dede:	b40e      	push	{r1, r2, r3}
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	b09e      	sub	sp, #120	@ 0x78
 800dee4:	ab23      	add	r3, sp, #140	@ 0x8c
 800dee6:	4605      	mov	r5, r0
 800dee8:	f853 4b04 	ldr.w	r4, [r3], #4
 800deec:	9303      	str	r3, [sp, #12]
 800deee:	a805      	add	r0, sp, #20
 800def0:	f000 fd4d 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	4628      	mov	r0, r5
 800def8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800defa:	4798      	blx	r3
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	4606      	mov	r6, r0
 800df00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df02:	4628      	mov	r0, r5
 800df04:	4798      	blx	r3
 800df06:	4633      	mov	r3, r6
 800df08:	ae1e      	add	r6, sp, #120	@ 0x78
 800df0a:	4621      	mov	r1, r4
 800df0c:	9000      	str	r0, [sp, #0]
 800df0e:	9a03      	ldr	r2, [sp, #12]
 800df10:	2400      	movs	r4, #0
 800df12:	a805      	add	r0, sp, #20
 800df14:	f000 fd96 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df18:	f846 4d68 	str.w	r4, [r6, #-104]!
 800df1c:	462a      	mov	r2, r5
 800df1e:	4633      	mov	r3, r6
 800df20:	4621      	mov	r1, r4
 800df22:	a805      	add	r0, sp, #20
 800df24:	f001 fd14 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df28:	b1f0      	cbz	r0, 800df68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800df2a:	280a      	cmp	r0, #10
 800df2c:	d018      	beq.n	800df60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800df2e:	9f04      	ldr	r7, [sp, #16]
 800df30:	b1b7      	cbz	r7, 800df60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800df32:	7b78      	ldrb	r0, [r7, #13]
 800df34:	7a3b      	ldrb	r3, [r7, #8]
 800df36:	88ea      	ldrh	r2, [r5, #6]
 800df38:	00c1      	lsls	r1, r0, #3
 800df3a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800df3e:	4319      	orrs	r1, r3
 800df40:	0643      	lsls	r3, r0, #25
 800df42:	bf44      	itt	mi
 800df44:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800df48:	b219      	sxthmi	r1, r3
 800df4a:	0100      	lsls	r0, r0, #4
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800df52:	4303      	orrs	r3, r0
 800df54:	4413      	add	r3, r2
 800df56:	1a5b      	subs	r3, r3, r1
 800df58:	b21b      	sxth	r3, r3
 800df5a:	429c      	cmp	r4, r3
 800df5c:	bfb8      	it	lt
 800df5e:	461c      	movlt	r4, r3
 800df60:	4633      	mov	r3, r6
 800df62:	462a      	mov	r2, r5
 800df64:	2100      	movs	r1, #0
 800df66:	e7dc      	b.n	800df22 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800df68:	b2a0      	uxth	r0, r4
 800df6a:	b01e      	add	sp, #120	@ 0x78
 800df6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df70:	b003      	add	sp, #12
 800df72:	4770      	bx	lr

0800df74 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800df74:	7a43      	ldrb	r3, [r0, #9]
 800df76:	8880      	ldrh	r0, [r0, #4]
 800df78:	4418      	add	r0, r3
 800df7a:	b280      	uxth	r0, r0
 800df7c:	4770      	bx	lr

0800df7e <_ZNK8touchgfx4Font13getFontHeightEv>:
 800df7e:	6803      	ldr	r3, [r0, #0]
 800df80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df82:	4718      	bx	r3

0800df84 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800df84:	b40e      	push	{r1, r2, r3}
 800df86:	b570      	push	{r4, r5, r6, lr}
 800df88:	b09d      	sub	sp, #116	@ 0x74
 800df8a:	ab21      	add	r3, sp, #132	@ 0x84
 800df8c:	4604      	mov	r4, r0
 800df8e:	f853 5b04 	ldr.w	r5, [r3], #4
 800df92:	9302      	str	r3, [sp, #8]
 800df94:	a803      	add	r0, sp, #12
 800df96:	f000 fcfa 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	4620      	mov	r0, r4
 800df9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfa0:	4798      	blx	r3
 800dfa2:	6823      	ldr	r3, [r4, #0]
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	4798      	blx	r3
 800dfac:	4633      	mov	r3, r6
 800dfae:	9000      	str	r0, [sp, #0]
 800dfb0:	9a02      	ldr	r2, [sp, #8]
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	a803      	add	r0, sp, #12
 800dfb6:	f000 fd45 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dfba:	a803      	add	r0, sp, #12
 800dfbc:	f001 fd96 	bl	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfc0:	2401      	movs	r4, #1
 800dfc2:	b2a3      	uxth	r3, r4
 800dfc4:	b140      	cbz	r0, 800dfd8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800dfc6:	280a      	cmp	r0, #10
 800dfc8:	bf08      	it	eq
 800dfca:	3301      	addeq	r3, #1
 800dfcc:	a803      	add	r0, sp, #12
 800dfce:	bf08      	it	eq
 800dfd0:	b21c      	sxtheq	r4, r3
 800dfd2:	f001 fd8b 	bl	800faec <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfd6:	e7f4      	b.n	800dfc2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dfd8:	4618      	mov	r0, r3
 800dfda:	b01d      	add	sp, #116	@ 0x74
 800dfdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe0:	b003      	add	sp, #12
 800dfe2:	4770      	bx	lr

0800dfe4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dfe4:	b40e      	push	{r1, r2, r3}
 800dfe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe8:	b09e      	sub	sp, #120	@ 0x78
 800dfea:	ab23      	add	r3, sp, #140	@ 0x8c
 800dfec:	4604      	mov	r4, r0
 800dfee:	f853 5b04 	ldr.w	r5, [r3], #4
 800dff2:	9303      	str	r3, [sp, #12]
 800dff4:	a805      	add	r0, sp, #20
 800dff6:	f000 fcca 	bl	800e98e <_ZN8touchgfx12TextProviderC1Ev>
 800dffa:	6823      	ldr	r3, [r4, #0]
 800dffc:	4620      	mov	r0, r4
 800dffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e000:	4798      	blx	r3
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	4606      	mov	r6, r0
 800e006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e008:	4620      	mov	r0, r4
 800e00a:	4798      	blx	r3
 800e00c:	4633      	mov	r3, r6
 800e00e:	4629      	mov	r1, r5
 800e010:	9000      	str	r0, [sp, #0]
 800e012:	9a03      	ldr	r2, [sp, #12]
 800e014:	a805      	add	r0, sp, #20
 800e016:	ad1e      	add	r5, sp, #120	@ 0x78
 800e018:	f000 fd14 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e01c:	2100      	movs	r1, #0
 800e01e:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e022:	4622      	mov	r2, r4
 800e024:	462b      	mov	r3, r5
 800e026:	a805      	add	r0, sp, #20
 800e028:	f001 fc92 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e02c:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e030:	b1d8      	cbz	r0, 800e06a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e032:	280a      	cmp	r0, #10
 800e034:	d012      	beq.n	800e05c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e036:	9804      	ldr	r0, [sp, #16]
 800e038:	b180      	cbz	r0, 800e05c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e03a:	7b47      	ldrb	r7, [r0, #13]
 800e03c:	88e2      	ldrh	r2, [r4, #6]
 800e03e:	00fb      	lsls	r3, r7, #3
 800e040:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e044:	7a03      	ldrb	r3, [r0, #8]
 800e046:	430b      	orrs	r3, r1
 800e048:	0679      	lsls	r1, r7, #25
 800e04a:	bf44      	itt	mi
 800e04c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e050:	b21b      	sxthmi	r3, r3
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	b21b      	sxth	r3, r3
 800e056:	429e      	cmp	r6, r3
 800e058:	bfa8      	it	ge
 800e05a:	461e      	movge	r6, r3
 800e05c:	462b      	mov	r3, r5
 800e05e:	4622      	mov	r2, r4
 800e060:	2100      	movs	r1, #0
 800e062:	a805      	add	r0, sp, #20
 800e064:	f001 fc74 	bl	800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e068:	e7e2      	b.n	800e030 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e06a:	4630      	mov	r0, r6
 800e06c:	b01e      	add	sp, #120	@ 0x78
 800e06e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e072:	b003      	add	sp, #12
 800e074:	4770      	bx	lr

0800e076 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e076:	b513      	push	{r0, r1, r4, lr}
 800e078:	6803      	ldr	r3, [r0, #0]
 800e07a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e07e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e082:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e086:	2400      	movs	r4, #0
 800e088:	9400      	str	r4, [sp, #0]
 800e08a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	4669      	mov	r1, sp
 800e092:	4798      	blx	r3
 800e094:	b002      	add	sp, #8
 800e096:	bd10      	pop	{r4, pc}

0800e098 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	680b      	ldr	r3, [r1, #0]
 800e09c:	460c      	mov	r4, r1
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	4798      	blx	r3
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	4798      	blx	r3
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	bd38      	pop	{r3, r4, r5, pc}

0800e0b2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e0b2:	b410      	push	{r4}
 800e0b4:	880a      	ldrh	r2, [r1, #0]
 800e0b6:	8884      	ldrh	r4, [r0, #4]
 800e0b8:	4422      	add	r2, r4
 800e0ba:	800a      	strh	r2, [r1, #0]
 800e0bc:	88c4      	ldrh	r4, [r0, #6]
 800e0be:	884a      	ldrh	r2, [r1, #2]
 800e0c0:	4422      	add	r2, r4
 800e0c2:	804a      	strh	r2, [r1, #2]
 800e0c4:	6940      	ldr	r0, [r0, #20]
 800e0c6:	b120      	cbz	r0, 800e0d2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e0c8:	6803      	ldr	r3, [r0, #0]
 800e0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d0:	4718      	bx	r3
 800e0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	8882      	ldrh	r2, [r0, #4]
 800e0dc:	880b      	ldrh	r3, [r1, #0]
 800e0de:	4413      	add	r3, r2
 800e0e0:	800b      	strh	r3, [r1, #0]
 800e0e2:	88c2      	ldrh	r2, [r0, #6]
 800e0e4:	884b      	ldrh	r3, [r1, #2]
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	4413      	add	r3, r2
 800e0ea:	804b      	strh	r3, [r1, #2]
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	1d01      	adds	r1, r0, #4
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7fa ff51 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e0f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	dd0b      	ble.n	800e116 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e0fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e102:	2b00      	cmp	r3, #0
 800e104:	dd07      	ble.n	800e116 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e106:	6968      	ldr	r0, [r5, #20]
 800e108:	b128      	cbz	r0, 800e116 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e10a:	6803      	ldr	r3, [r0, #0]
 800e10c:	4621      	mov	r1, r4
 800e10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e114:	4718      	bx	r3
 800e116:	bd70      	pop	{r4, r5, r6, pc}

0800e118 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	8882      	ldrh	r2, [r0, #4]
 800e11c:	880b      	ldrh	r3, [r1, #0]
 800e11e:	4413      	add	r3, r2
 800e120:	800b      	strh	r3, [r1, #0]
 800e122:	88c2      	ldrh	r2, [r0, #6]
 800e124:	884b      	ldrh	r3, [r1, #2]
 800e126:	460c      	mov	r4, r1
 800e128:	4413      	add	r3, r2
 800e12a:	804b      	strh	r3, [r1, #2]
 800e12c:	4605      	mov	r5, r0
 800e12e:	1d01      	adds	r1, r0, #4
 800e130:	4620      	mov	r0, r4
 800e132:	f7fa ff31 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e136:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dd19      	ble.n	800e172 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e13e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dd15      	ble.n	800e172 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e146:	6968      	ldr	r0, [r5, #20]
 800e148:	b128      	cbz	r0, 800e156 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e14a:	6803      	ldr	r3, [r0, #0]
 800e14c:	4621      	mov	r1, r4
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e154:	4718      	bx	r3
 800e156:	4b07      	ldr	r3, [pc, #28]	@ (800e174 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3304      	adds	r3, #4
 800e15c:	429d      	cmp	r5, r3
 800e15e:	d108      	bne.n	800e172 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e160:	f7fe fdd2 	bl	800cd08 <_ZN8touchgfx11Application11getInstanceEv>
 800e164:	6803      	ldr	r3, [r0, #0]
 800e166:	6821      	ldr	r1, [r4, #0]
 800e168:	6862      	ldr	r2, [r4, #4]
 800e16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e16c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e170:	4718      	bx	r3
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	2001261c 	.word	0x2001261c

0800e178 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4604      	mov	r4, r0
 800e17c:	4616      	mov	r6, r2
 800e17e:	460d      	mov	r5, r1
 800e180:	b901      	cbnz	r1, 800e184 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e182:	b192      	cbz	r2, 800e1aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e184:	6823      	ldr	r3, [r4, #0]
 800e186:	4620      	mov	r0, r4
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	4798      	blx	r3
 800e18c:	88e2      	ldrh	r2, [r4, #6]
 800e18e:	88a1      	ldrh	r1, [r4, #4]
 800e190:	4432      	add	r2, r6
 800e192:	4429      	add	r1, r5
 800e194:	4620      	mov	r0, r4
 800e196:	b212      	sxth	r2, r2
 800e198:	b209      	sxth	r1, r1
 800e19a:	f7f4 fc5c 	bl	8002a56 <_ZN8touchgfx8Drawable5setXYEss>
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	699b      	ldr	r3, [r3, #24]
 800e1a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1a8:	4718      	bx	r3
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}

0800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e1ac:	b510      	push	{r4, lr}
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	4608      	mov	r0, r1
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	8023      	strh	r3, [r4, #0]
 800e1b6:	8063      	strh	r3, [r4, #2]
 800e1b8:	6803      	ldr	r3, [r0, #0]
 800e1ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e1be:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e1c2:	80a1      	strh	r1, [r4, #4]
 800e1c4:	80e2      	strh	r2, [r4, #6]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4798      	blx	r3
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	bd10      	pop	{r4, pc}

0800e1d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e1d0:	b530      	push	{r4, r5, lr}
 800e1d2:	8083      	strh	r3, [r0, #4]
 800e1d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e1d8:	80c3      	strh	r3, [r0, #6]
 800e1da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e1de:	7203      	strb	r3, [r0, #8]
 800e1e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e1e4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e1e8:	7243      	strb	r3, [r0, #9]
 800e1ea:	7a83      	ldrb	r3, [r0, #10]
 800e1ec:	6141      	str	r1, [r0, #20]
 800e1ee:	f365 0306 	bfi	r3, r5, #0, #7
 800e1f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e1f6:	8302      	strh	r2, [r0, #24]
 800e1f8:	f365 13c7 	bfi	r3, r5, #7, #1
 800e1fc:	7283      	strb	r3, [r0, #10]
 800e1fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e202:	72c3      	strb	r3, [r0, #11]
 800e204:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e208:	7303      	strb	r3, [r0, #12]
 800e20a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e20e:	81c3      	strh	r3, [r0, #14]
 800e210:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e214:	8203      	strh	r3, [r0, #16]
 800e216:	4b01      	ldr	r3, [pc, #4]	@ (800e21c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e218:	6003      	str	r3, [r0, #0]
 800e21a:	bd30      	pop	{r4, r5, pc}
 800e21c:	08015fd4 	.word	0x08015fd4

0800e220 <_ZNK8touchgfx9ConstFont4findEt>:
 800e220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e222:	6944      	ldr	r4, [r0, #20]
 800e224:	b3bc      	cbz	r4, 800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e226:	88a3      	ldrh	r3, [r4, #4]
 800e228:	8b02      	ldrh	r2, [r0, #24]
 800e22a:	1acb      	subs	r3, r1, r3
 800e22c:	f102 32ff 	add.w	r2, r2, #4294967295
 800e230:	d431      	bmi.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e232:	4293      	cmp	r3, r2
 800e234:	dd0c      	ble.n	800e250 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e236:	230e      	movs	r3, #14
 800e238:	fb03 4302 	mla	r3, r3, r2, r4
 800e23c:	889b      	ldrh	r3, [r3, #4]
 800e23e:	1a5b      	subs	r3, r3, r1
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	429a      	cmp	r2, r3
 800e244:	db27      	blt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e246:	2b00      	cmp	r3, #0
 800e248:	bfbc      	itt	lt
 800e24a:	2302      	movlt	r3, #2
 800e24c:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e250:	2500      	movs	r5, #0
 800e252:	260e      	movs	r6, #14
 800e254:	4295      	cmp	r5, r2
 800e256:	dc1e      	bgt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e258:	fb06 4003 	mla	r0, r6, r3, r4
 800e25c:	8887      	ldrh	r7, [r0, #4]
 800e25e:	42b9      	cmp	r1, r7
 800e260:	d01a      	beq.n	800e298 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e262:	d20d      	bcs.n	800e280 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e264:	1e5a      	subs	r2, r3, #1
 800e266:	4295      	cmp	r5, r2
 800e268:	dc15      	bgt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e26a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e26e:	1a5b      	subs	r3, r3, r1
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	429a      	cmp	r2, r3
 800e274:	db0f      	blt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e276:	429d      	cmp	r5, r3
 800e278:	ddec      	ble.n	800e254 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e27a:	1953      	adds	r3, r2, r5
 800e27c:	105b      	asrs	r3, r3, #1
 800e27e:	e7e9      	b.n	800e254 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e280:	1c5d      	adds	r5, r3, #1
 800e282:	42aa      	cmp	r2, r5
 800e284:	db07      	blt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e286:	8a43      	ldrh	r3, [r0, #18]
 800e288:	1acb      	subs	r3, r1, r3
 800e28a:	442b      	add	r3, r5
 800e28c:	429d      	cmp	r5, r3
 800e28e:	dc02      	bgt.n	800e296 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e290:	429a      	cmp	r2, r3
 800e292:	dadf      	bge.n	800e254 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e294:	e7f1      	b.n	800e27a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e296:	2000      	movs	r0, #0
 800e298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e29a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29c:	4604      	mov	r4, r0
 800e29e:	4617      	mov	r7, r2
 800e2a0:	461e      	mov	r6, r3
 800e2a2:	b911      	cbnz	r1, 800e2aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e2a4:	2500      	movs	r5, #0
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2aa:	290a      	cmp	r1, #10
 800e2ac:	d0fa      	beq.n	800e2a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2ae:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e2b2:	4291      	cmp	r1, r2
 800e2b4:	d0f6      	beq.n	800e2a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2b6:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e2ba:	4291      	cmp	r1, r2
 800e2bc:	d0f2      	beq.n	800e2a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2be:	f7ff ffaf 	bl	800e220 <_ZNK8touchgfx9ConstFont4findEt>
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	b950      	cbnz	r0, 800e2dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	4798      	blx	r3
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f7ff ffa5 	bl	800e220 <_ZNK8touchgfx9ConstFont4findEt>
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0e3      	beq.n	800e2a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	4629      	mov	r1, r5
 800e2e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4798      	blx	r3
 800e2e6:	6038      	str	r0, [r7, #0]
 800e2e8:	6823      	ldr	r3, [r4, #0]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ee:	4798      	blx	r3
 800e2f0:	7030      	strb	r0, [r6, #0]
 800e2f2:	e7d8      	b.n	800e2a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e2f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	4770      	bx	lr

0800e2f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e2f8:	2001      	movs	r0, #1
 800e2fa:	4770      	bx	lr

0800e2fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e2fc:	2002      	movs	r0, #2
 800e2fe:	4770      	bx	lr

0800e300 <_ZN8touchgfx6ScreenD1Ev>:
 800e300:	4770      	bx	lr

0800e302 <_ZN8touchgfx12GestureEventD1Ev>:
 800e302:	4770      	bx	lr

0800e304 <_ZN8touchgfx9DragEventD1Ev>:
 800e304:	4770      	bx	lr

0800e306 <_ZN8touchgfx10ClickEventD1Ev>:
 800e306:	4770      	bx	lr

0800e308 <_ZN8touchgfx10ClickEventD0Ev>:
 800e308:	b510      	push	{r4, lr}
 800e30a:	210c      	movs	r1, #12
 800e30c:	4604      	mov	r4, r0
 800e30e:	f005 fa21 	bl	8013754 <_ZdlPvj>
 800e312:	4620      	mov	r0, r4
 800e314:	bd10      	pop	{r4, pc}

0800e316 <_ZN8touchgfx9DragEventD0Ev>:
 800e316:	b510      	push	{r4, lr}
 800e318:	2110      	movs	r1, #16
 800e31a:	4604      	mov	r4, r0
 800e31c:	f005 fa1a 	bl	8013754 <_ZdlPvj>
 800e320:	4620      	mov	r0, r4
 800e322:	bd10      	pop	{r4, pc}

0800e324 <_ZN8touchgfx12GestureEventD0Ev>:
 800e324:	b510      	push	{r4, lr}
 800e326:	210c      	movs	r1, #12
 800e328:	4604      	mov	r4, r0
 800e32a:	f005 fa13 	bl	8013754 <_ZdlPvj>
 800e32e:	4620      	mov	r0, r4
 800e330:	bd10      	pop	{r4, pc}

0800e332 <_ZN8touchgfx6ScreenD0Ev>:
 800e332:	b510      	push	{r4, lr}
 800e334:	213c      	movs	r1, #60	@ 0x3c
 800e336:	4604      	mov	r4, r0
 800e338:	f005 fa0c 	bl	8013754 <_ZdlPvj>
 800e33c:	4620      	mov	r0, r4
 800e33e:	bd10      	pop	{r4, pc}

0800e340 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e340:	b530      	push	{r4, r5, lr}
 800e342:	460d      	mov	r5, r1
 800e344:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e346:	b087      	sub	sp, #28
 800e348:	4604      	mov	r4, r0
 800e34a:	b301      	cbz	r1, 800e38e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e34c:	a801      	add	r0, sp, #4
 800e34e:	f7ff ff2d 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e352:	892a      	ldrh	r2, [r5, #8]
 800e354:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e358:	7928      	ldrb	r0, [r5, #4]
 800e35a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e35e:	f88d 0010 	strb.w	r0, [sp, #16]
 800e362:	1ad2      	subs	r2, r2, r3
 800e364:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e366:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e368:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e36c:	441a      	add	r2, r3
 800e36e:	896b      	ldrh	r3, [r5, #10]
 800e370:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e374:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e378:	1b5b      	subs	r3, r3, r5
 800e37a:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800e37c:	442b      	add	r3, r5
 800e37e:	4d05      	ldr	r5, [pc, #20]	@ (800e394 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e380:	9503      	str	r5, [sp, #12]
 800e382:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	a903      	add	r1, sp, #12
 800e38a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e38c:	4798      	blx	r3
 800e38e:	b007      	add	sp, #28
 800e390:	bd30      	pop	{r4, r5, pc}
 800e392:	bf00      	nop
 800e394:	08016064 	.word	0x08016064

0800e398 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e39e:	b08a      	sub	sp, #40	@ 0x28
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	b113      	cbz	r3, 800e3ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e3a6:	790b      	ldrb	r3, [r1, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d044      	beq.n	800e436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3ac:	f104 0804 	add.w	r8, r4, #4
 800e3b0:	4641      	mov	r1, r8
 800e3b2:	a803      	add	r0, sp, #12
 800e3b4:	f7ff fefa 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3b8:	792b      	ldrb	r3, [r5, #4]
 800e3ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e3be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e3c2:	b983      	cbnz	r3, 800e3e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e3c4:	892a      	ldrh	r2, [r5, #8]
 800e3c6:	88e9      	ldrh	r1, [r5, #6]
 800e3c8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800e3cc:	1b92      	subs	r2, r2, r6
 800e3ce:	1bc9      	subs	r1, r1, r7
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	b212      	sxth	r2, r2
 800e3da:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e3de:	b209      	sxth	r1, r1
 800e3e0:	4640      	mov	r0, r8
 800e3e2:	f7fa fcf5 	bl	8008dd0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e3e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3e8:	b329      	cbz	r1, 800e436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3ea:	a805      	add	r0, sp, #20
 800e3ec:	f7ff fede 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e3f4:	792b      	ldrb	r3, [r5, #4]
 800e3f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e3f8:	f88d 3020 	strb.w	r3, [sp, #32]
 800e3fc:	1abf      	subs	r7, r7, r2
 800e3fe:	88ea      	ldrh	r2, [r5, #6]
 800e400:	4417      	add	r7, r2
 800e402:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e404:	4417      	add	r7, r2
 800e406:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e40a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e40e:	1ab6      	subs	r6, r6, r2
 800e410:	892a      	ldrh	r2, [r5, #8]
 800e412:	4416      	add	r6, r2
 800e414:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e416:	4416      	add	r6, r2
 800e418:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e41c:	4a07      	ldr	r2, [pc, #28]	@ (800e43c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e41e:	9207      	str	r2, [sp, #28]
 800e420:	2600      	movs	r6, #0
 800e422:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e426:	6803      	ldr	r3, [r0, #0]
 800e428:	a907      	add	r1, sp, #28
 800e42a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e42c:	4798      	blx	r3
 800e42e:	792b      	ldrb	r3, [r5, #4]
 800e430:	b10b      	cbz	r3, 800e436 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e432:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e436:	b00a      	add	sp, #40	@ 0x28
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	0801603c 	.word	0x0801603c

0800e440 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	460c      	mov	r4, r1
 800e446:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e448:	b088      	sub	sp, #32
 800e44a:	4605      	mov	r5, r0
 800e44c:	2900      	cmp	r1, #0
 800e44e:	d06d      	beq.n	800e52c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e450:	4668      	mov	r0, sp
 800e452:	f7ff feab 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e456:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e458:	88e3      	ldrh	r3, [r4, #6]
 800e45a:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e45e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e462:	440b      	add	r3, r1
 800e464:	b21b      	sxth	r3, r3
 800e466:	4543      	cmp	r3, r8
 800e468:	db31      	blt.n	800e4ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e46a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e46e:	44c4      	add	ip, r8
 800e470:	fa0f fc8c 	sxth.w	ip, ip
 800e474:	4563      	cmp	r3, ip
 800e476:	da2a      	bge.n	800e4ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e478:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e47a:	8926      	ldrh	r6, [r4, #8]
 800e47c:	4416      	add	r6, r2
 800e47e:	b236      	sxth	r6, r6
 800e480:	42be      	cmp	r6, r7
 800e482:	db24      	blt.n	800e4ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e484:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e488:	4438      	add	r0, r7
 800e48a:	b200      	sxth	r0, r0
 800e48c:	4286      	cmp	r6, r0
 800e48e:	da1e      	bge.n	800e4ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e490:	8963      	ldrh	r3, [r4, #10]
 800e492:	4419      	add	r1, r3
 800e494:	b209      	sxth	r1, r1
 800e496:	4541      	cmp	r1, r8
 800e498:	db08      	blt.n	800e4ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e49a:	4561      	cmp	r1, ip
 800e49c:	da06      	bge.n	800e4ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	441a      	add	r2, r3
 800e4a2:	b212      	sxth	r2, r2
 800e4a4:	42ba      	cmp	r2, r7
 800e4a6:	db01      	blt.n	800e4ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4a8:	4282      	cmp	r2, r0
 800e4aa:	db10      	blt.n	800e4ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4ac:	4b21      	ldr	r3, [pc, #132]	@ (800e534 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800e4b6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4be:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4c6:	6803      	ldr	r3, [r0, #0]
 800e4c8:	a904      	add	r1, sp, #16
 800e4ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4cc:	4798      	blx	r3
 800e4ce:	1d29      	adds	r1, r5, #4
 800e4d0:	a802      	add	r0, sp, #8
 800e4d2:	f7ff fe6b 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e4da:	88e0      	ldrh	r0, [r4, #6]
 800e4dc:	7921      	ldrb	r1, [r4, #4]
 800e4de:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e4e2:	8922      	ldrh	r2, [r4, #8]
 800e4e4:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e4e6:	f88d 1014 	strb.w	r1, [sp, #20]
 800e4ea:	eba3 0808 	sub.w	r8, r3, r8
 800e4ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e4f2:	1bdf      	subs	r7, r3, r7
 800e4f4:	b2bb      	uxth	r3, r7
 800e4f6:	fa1f f888 	uxth.w	r8, r8
 800e4fa:	8967      	ldrh	r7, [r4, #10]
 800e4fc:	89a4      	ldrh	r4, [r4, #12]
 800e4fe:	4440      	add	r0, r8
 800e500:	4460      	add	r0, ip
 800e502:	441a      	add	r2, r3
 800e504:	44b8      	add	r8, r7
 800e506:	4423      	add	r3, r4
 800e508:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e50c:	4433      	add	r3, r6
 800e50e:	4432      	add	r2, r6
 800e510:	44e0      	add	r8, ip
 800e512:	4c09      	ldr	r4, [pc, #36]	@ (800e538 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e514:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e516:	9404      	str	r4, [sp, #16]
 800e518:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e51c:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e520:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e524:	6803      	ldr	r3, [r0, #0]
 800e526:	a904      	add	r1, sp, #16
 800e528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e52a:	4798      	blx	r3
 800e52c:	b008      	add	sp, #32
 800e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e532:	bf00      	nop
 800e534:	0801603c 	.word	0x0801603c
 800e538:	08016050 	.word	0x08016050

0800e53c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e53e:	4604      	mov	r4, r0
 800e540:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e544:	3201      	adds	r2, #1
 800e546:	d112      	bne.n	800e56e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e548:	6803      	ldr	r3, [r0, #0]
 800e54a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e54e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e552:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e556:	2500      	movs	r5, #0
 800e558:	9500      	str	r5, [sp, #0]
 800e55a:	466d      	mov	r5, sp
 800e55c:	4629      	mov	r1, r5
 800e55e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e564:	4798      	blx	r3
 800e566:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e56a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e56e:	4620      	mov	r0, r4
 800e570:	b003      	add	sp, #12
 800e572:	bd30      	pop	{r4, r5, pc}

0800e574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e574:	b513      	push	{r0, r1, r4, lr}
 800e576:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e57a:	3301      	adds	r3, #1
 800e57c:	4604      	mov	r4, r0
 800e57e:	d109      	bne.n	800e594 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e580:	4601      	mov	r1, r0
 800e582:	4668      	mov	r0, sp
 800e584:	f7ff fe12 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e588:	f8bd 3000 	ldrh.w	r3, [sp]
 800e58c:	8423      	strh	r3, [r4, #32]
 800e58e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e592:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e594:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e598:	b002      	add	sp, #8
 800e59a:	bd10      	pop	{r4, pc}

0800e59c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e59c:	b513      	push	{r0, r1, r4, lr}
 800e59e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	d109      	bne.n	800e5bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e5a8:	4601      	mov	r1, r0
 800e5aa:	4668      	mov	r0, sp
 800e5ac:	f7ff fdfe 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5b4:	8423      	strh	r3, [r4, #32]
 800e5b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e5bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e5c0:	b002      	add	sp, #8
 800e5c2:	bd10      	pop	{r4, pc}

0800e5c4 <_ZN8touchgfx6ScreenC1Ev>:
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	4b16      	ldr	r3, [pc, #88]	@ (800e624 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e5ca:	f845 3b04 	str.w	r3, [r5], #4
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	8103      	strh	r3, [r0, #8]
 800e5d2:	8143      	strh	r3, [r0, #10]
 800e5d4:	8183      	strh	r3, [r0, #12]
 800e5d6:	81c3      	strh	r3, [r0, #14]
 800e5d8:	8203      	strh	r3, [r0, #16]
 800e5da:	8243      	strh	r3, [r0, #18]
 800e5dc:	8283      	strh	r3, [r0, #20]
 800e5de:	82c3      	strh	r3, [r0, #22]
 800e5e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e5e4:	6203      	str	r3, [r0, #32]
 800e5e6:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e5e8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e5ea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e5ee:	4a0e      	ldr	r2, [pc, #56]	@ (800e628 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e5f0:	6343      	str	r3, [r0, #52]	@ 0x34
 800e5f2:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e62c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e5f8:	6042      	str	r2, [r0, #4]
 800e5fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e5fe:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e600:	4a0b      	ldr	r2, [pc, #44]	@ (800e630 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e602:	4604      	mov	r4, r0
 800e604:	2101      	movs	r1, #1
 800e606:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e60a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e60e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e612:	4628      	mov	r0, r5
 800e614:	4798      	blx	r3
 800e616:	6863      	ldr	r3, [r4, #4]
 800e618:	4628      	mov	r0, r5
 800e61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e61c:	4631      	mov	r1, r6
 800e61e:	4798      	blx	r3
 800e620:	4620      	mov	r0, r4
 800e622:	bd70      	pop	{r4, r5, r6, pc}
 800e624:	08016078 	.word	0x08016078
 800e628:	08015ce8 	.word	0x08015ce8
 800e62c:	200125d6 	.word	0x200125d6
 800e630:	200125d4 	.word	0x200125d4

0800e634 <_ZN8touchgfx6Screen4drawEv>:
 800e634:	b507      	push	{r0, r1, r2, lr}
 800e636:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e638:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e63c:	4b08      	ldr	r3, [pc, #32]	@ (800e660 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e63e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e642:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e646:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e64a:	6803      	ldr	r3, [r0, #0]
 800e64c:	2100      	movs	r1, #0
 800e64e:	9100      	str	r1, [sp, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	4669      	mov	r1, sp
 800e654:	4798      	blx	r3
 800e656:	b003      	add	sp, #12
 800e658:	f85d fb04 	ldr.w	pc, [sp], #4
 800e65c:	200125d4 	.word	0x200125d4
 800e660:	200125d6 	.word	0x200125d6

0800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	b089      	sub	sp, #36	@ 0x24
 800e670:	4680      	mov	r8, r0
 800e672:	460c      	mov	r4, r1
 800e674:	4615      	mov	r5, r2
 800e676:	dd0e      	ble.n	800e696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e678:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	dd0a      	ble.n	800e696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e680:	4628      	mov	r0, r5
 800e682:	f7ff ff5b 	bl	800e53c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e686:	4621      	mov	r1, r4
 800e688:	f7fe fa5f 	bl	800cb4a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e68c:	69eb      	ldr	r3, [r5, #28]
 800e68e:	b928      	cbnz	r0, 800e69c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e690:	461d      	mov	r5, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1f4      	bne.n	800e680 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e696:	b009      	add	sp, #36	@ 0x24
 800e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69c:	ae04      	add	r6, sp, #16
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 80b5 	beq.w	800e80e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e6a4:	682b      	ldr	r3, [r5, #0]
 800e6a6:	4629      	mov	r1, r5
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	a802      	add	r0, sp, #8
 800e6ac:	4798      	blx	r3
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f7ff ff60 	bl	800e574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e6b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e6b8:	4407      	add	r7, r0
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f7ff ff6e 	bl	800e59c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e6c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e6c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e6c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e6cc:	4418      	add	r0, r3
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e6d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e6d8:	b23f      	sxth	r7, r7
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e6e4:	f7fa fc58 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7ff ff27 	bl	800e53c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6f4:	ab06      	add	r3, sp, #24
 800e6f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fa fc4b 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e702:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e706:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e70a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e70e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e712:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e716:	4299      	cmp	r1, r3
 800e718:	d10b      	bne.n	800e732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e71a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e71e:	4552      	cmp	r2, sl
 800e720:	d107      	bne.n	800e732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e722:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e726:	455a      	cmp	r2, fp
 800e728:	d103      	bne.n	800e732 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e72a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e72e:	454a      	cmp	r2, r9
 800e730:	d06d      	beq.n	800e80e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e732:	f1bb 0f00 	cmp.w	fp, #0
 800e736:	dd65      	ble.n	800e804 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e738:	f1b9 0f00 	cmp.w	r9, #0
 800e73c:	dd62      	ble.n	800e804 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e73e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e742:	fa1f f08a 	uxth.w	r0, sl
 800e746:	4552      	cmp	r2, sl
 800e748:	9000      	str	r0, [sp, #0]
 800e74a:	da12      	bge.n	800e772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	9b00      	ldr	r3, [sp, #0]
 800e750:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e754:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e758:	1a9a      	subs	r2, r3, r2
 800e75a:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e75e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e762:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e766:	69ea      	ldr	r2, [r5, #28]
 800e768:	4631      	mov	r1, r6
 800e76a:	4640      	mov	r0, r8
 800e76c:	f7ff ff7a 	bl	800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e770:	9b01      	ldr	r3, [sp, #4]
 800e772:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e776:	429a      	cmp	r2, r3
 800e778:	b29f      	uxth	r7, r3
 800e77a:	da0d      	bge.n	800e798 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e77c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e780:	1aba      	subs	r2, r7, r2
 800e782:	f8ad a012 	strh.w	sl, [sp, #18]
 800e786:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e78a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e78e:	69ea      	ldr	r2, [r5, #28]
 800e790:	4631      	mov	r1, r6
 800e792:	4640      	mov	r0, r8
 800e794:	f7ff ff66 	bl	800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e798:	8822      	ldrh	r2, [r4, #0]
 800e79a:	88a3      	ldrh	r3, [r4, #4]
 800e79c:	445f      	add	r7, fp
 800e79e:	4413      	add	r3, r2
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b2bf      	uxth	r7, r7
 800e7a4:	b23a      	sxth	r2, r7
 800e7a6:	b219      	sxth	r1, r3
 800e7a8:	4291      	cmp	r1, r2
 800e7aa:	dd0d      	ble.n	800e7c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e7ac:	1bdb      	subs	r3, r3, r7
 800e7ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7b2:	f8ad a012 	strh.w	sl, [sp, #18]
 800e7b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e7be:	69ea      	ldr	r2, [r5, #28]
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7ff ff4e 	bl	800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7c8:	88e2      	ldrh	r2, [r4, #6]
 800e7ca:	8863      	ldrh	r3, [r4, #2]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	9a00      	ldr	r2, [sp, #0]
 800e7d0:	444a      	add	r2, r9
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	fa1f f982 	uxth.w	r9, r2
 800e7d8:	fa0f f289 	sxth.w	r2, r9
 800e7dc:	b219      	sxth	r1, r3
 800e7de:	428a      	cmp	r2, r1
 800e7e0:	da15      	bge.n	800e80e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e7e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e7e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e7ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e7ee:	eba3 0309 	sub.w	r3, r3, r9
 800e7f2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e7f6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e7fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7fe:	69ea      	ldr	r2, [r5, #28]
 800e800:	4631      	mov	r1, r6
 800e802:	e001      	b.n	800e808 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e804:	69ea      	ldr	r2, [r5, #28]
 800e806:	4621      	mov	r1, r4
 800e808:	4640      	mov	r0, r8
 800e80a:	f7ff ff2b 	bl	800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e80e:	4628      	mov	r0, r5
 800e810:	f7ff fe94 	bl	800e53c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e814:	6861      	ldr	r1, [r4, #4]
 800e816:	4602      	mov	r2, r0
 800e818:	6820      	ldr	r0, [r4, #0]
 800e81a:	4633      	mov	r3, r6
 800e81c:	c303      	stmia	r3!, {r0, r1}
 800e81e:	4611      	mov	r1, r2
 800e820:	4630      	mov	r0, r6
 800e822:	f7fa fbb9 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e826:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f77f af33 	ble.w	800e696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e830:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e834:	2b00      	cmp	r3, #0
 800e836:	f77f af2e 	ble.w	800e696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e83a:	4628      	mov	r0, r5
 800e83c:	f7ff fe9a 	bl	800e574 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e840:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e844:	1a18      	subs	r0, r3, r0
 800e846:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e84a:	4628      	mov	r0, r5
 800e84c:	f7ff fea6 	bl	800e59c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e850:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e854:	1a18      	subs	r0, r3, r0
 800e856:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	4631      	mov	r1, r6
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	4628      	mov	r0, r5
 800e862:	4798      	blx	r3
 800e864:	e717      	b.n	800e696 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e866 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e866:	b570      	push	{r4, r5, r6, lr}
 800e868:	460c      	mov	r4, r1
 800e86a:	b086      	sub	sp, #24
 800e86c:	1d06      	adds	r6, r0, #4
 800e86e:	2300      	movs	r3, #0
 800e870:	4631      	mov	r1, r6
 800e872:	4605      	mov	r5, r0
 800e874:	a802      	add	r0, sp, #8
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	f7ff fc98 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e87c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e880:	8822      	ldrh	r2, [r4, #0]
 800e882:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e886:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e88a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e88e:	1ad2      	subs	r2, r2, r3
 800e890:	8863      	ldrh	r3, [r4, #2]
 800e892:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e896:	1a5b      	subs	r3, r3, r1
 800e898:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e89c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e8a0:	aa01      	add	r2, sp, #4
 800e8a2:	a904      	add	r1, sp, #16
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e8aa:	f7fa fc4d 	bl	8009148 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e8ae:	9a01      	ldr	r2, [sp, #4]
 800e8b0:	b11a      	cbz	r2, 800e8ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	f7ff fed5 	bl	800e664 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e8ba:	b006      	add	sp, #24
 800e8bc:	bd70      	pop	{r4, r5, r6, pc}

0800e8be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e8be:	b530      	push	{r4, r5, lr}
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e8c8:	b085      	sub	sp, #20
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	6851      	ldr	r1, [r2, #4]
 800e8ce:	466b      	mov	r3, sp
 800e8d0:	c303      	stmia	r3!, {r0, r1}
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	4668      	mov	r0, sp
 800e8d6:	f7fa fb5f 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 800e8da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e8de:	b12b      	cbz	r3, 800e8ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e8e0:	4669      	mov	r1, sp
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f7ff ffbf 	bl	800e866 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e8e8:	b005      	add	sp, #20
 800e8ea:	bd30      	pop	{r4, r5, pc}
 800e8ec:	3404      	adds	r4, #4
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	a802      	add	r0, sp, #8
 800e8f2:	f7ff fc5b 	bl	800e1ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e8f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e8fe:	1a9b      	subs	r3, r3, r2
 800e900:	f8ad 3000 	strh.w	r3, [sp]
 800e904:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e908:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e90c:	4669      	mov	r1, sp
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	4620      	mov	r0, r4
 800e912:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e916:	f7fa fbde 	bl	80090d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e91a:	e7e5      	b.n	800e8e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e91c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e91c:	680a      	ldr	r2, [r1, #0]
 800e91e:	460b      	mov	r3, r1
 800e920:	6992      	ldr	r2, [r2, #24]
 800e922:	1d01      	adds	r1, r0, #4
 800e924:	4618      	mov	r0, r3
 800e926:	4710      	bx	r2

0800e928 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e928:	4298      	cmp	r0, r3
 800e92a:	d200      	bcs.n	800e92e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e92c:	b913      	cbnz	r3, 800e934 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e92e:	440a      	add	r2, r1
 800e930:	b210      	sxth	r0, r2
 800e932:	4770      	bx	lr
 800e934:	ee07 0a90 	vmov	s15, r0
 800e938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e93c:	ee07 3a90 	vmov	s15, r3
 800e940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e94c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e950:	ee07 2a90 	vmov	s15, r2
 800e954:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e958:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e95c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e960:	ee07 1a90 	vmov	s15, r1
 800e964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e968:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e96c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	bfcc      	ite	gt
 800e97a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e97e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e986:	ee17 3a90 	vmov	r3, s15
 800e98a:	b218      	sxth	r0, r3
 800e98c:	4770      	bx	lr

0800e98e <_ZN8touchgfx12TextProviderC1Ev>:
 800e98e:	b538      	push	{r3, r4, r5, lr}
 800e990:	2500      	movs	r5, #0
 800e992:	2302      	movs	r3, #2
 800e994:	4604      	mov	r4, r0
 800e996:	e9c0 5500 	strd	r5, r5, [r0]
 800e99a:	7403      	strb	r3, [r0, #16]
 800e99c:	6145      	str	r5, [r0, #20]
 800e99e:	7605      	strb	r5, [r0, #24]
 800e9a0:	83c5      	strh	r5, [r0, #30]
 800e9a2:	8405      	strh	r5, [r0, #32]
 800e9a4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e9a6:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e9a8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e9aa:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e9ae:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e9b2:	220e      	movs	r2, #14
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	304c      	adds	r0, #76	@ 0x4c
 800e9b8:	f005 f901 	bl	8013bbe <memset>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e9c4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e9c8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e9cc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e9d0:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e9d4:	f7f4 fe7e 	bl	80036d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e9d8:	4620      	mov	r0, r4
 800e9da:	bd38      	pop	{r3, r4, r5, pc}

0800e9dc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800e9dc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e9de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e9e2:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800e9e4:	fab0 f080 	clz	r0, r0
 800e9e8:	0940      	lsrs	r0, r0, #5
 800e9ea:	4770      	bx	lr

0800e9ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e9ec:	b530      	push	{r4, r5, lr}
 800e9ee:	2500      	movs	r5, #0
 800e9f0:	2401      	movs	r4, #1
 800e9f2:	6843      	ldr	r3, [r0, #4]
 800e9f4:	b913      	cbnz	r3, 800e9fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e9f6:	6803      	ldr	r3, [r0, #0]
 800e9f8:	b313      	cbz	r3, 800ea40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e9fa:	6043      	str	r3, [r0, #4]
 800e9fc:	7e03      	ldrb	r3, [r0, #24]
 800e9fe:	b143      	cbz	r3, 800ea12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800ea00:	6943      	ldr	r3, [r0, #20]
 800ea02:	b12b      	cbz	r3, 800ea10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800ea04:	881a      	ldrh	r2, [r3, #0]
 800ea06:	b11a      	cbz	r2, 800ea10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800ea08:	1c9a      	adds	r2, r3, #2
 800ea0a:	6142      	str	r2, [r0, #20]
 800ea0c:	8818      	ldrh	r0, [r3, #0]
 800ea0e:	bd30      	pop	{r4, r5, pc}
 800ea10:	7605      	strb	r5, [r0, #24]
 800ea12:	6843      	ldr	r3, [r0, #4]
 800ea14:	8819      	ldrh	r1, [r3, #0]
 800ea16:	b199      	cbz	r1, 800ea40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800ea18:	1c9a      	adds	r2, r3, #2
 800ea1a:	2902      	cmp	r1, #2
 800ea1c:	6042      	str	r2, [r0, #4]
 800ea1e:	d1f5      	bne.n	800ea0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800ea20:	7c03      	ldrb	r3, [r0, #16]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d8e5      	bhi.n	800e9f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	3302      	adds	r3, #2
 800ea2a:	7402      	strb	r2, [r0, #16]
 800ea2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ea30:	6143      	str	r3, [r0, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0dd      	beq.n	800e9f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d0da      	beq.n	800e9f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea3c:	7604      	strb	r4, [r0, #24]
 800ea3e:	e7d8      	b.n	800e9f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea40:	2000      	movs	r0, #0
 800ea42:	e7e4      	b.n	800ea0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800ea44:	b430      	push	{r4, r5}
 800ea46:	6001      	str	r1, [r0, #0]
 800ea48:	2100      	movs	r1, #0
 800ea4a:	6041      	str	r1, [r0, #4]
 800ea4c:	6815      	ldr	r5, [r2, #0]
 800ea4e:	6085      	str	r5, [r0, #8]
 800ea50:	6852      	ldr	r2, [r2, #4]
 800ea52:	6443      	str	r3, [r0, #68]	@ 0x44
 800ea54:	9b02      	ldr	r3, [sp, #8]
 800ea56:	60c2      	str	r2, [r0, #12]
 800ea58:	7401      	strb	r1, [r0, #16]
 800ea5a:	6141      	str	r1, [r0, #20]
 800ea5c:	7601      	strb	r1, [r0, #24]
 800ea5e:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ea60:	8401      	strh	r1, [r0, #32]
 800ea62:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800ea66:	6483      	str	r3, [r0, #72]	@ 0x48
 800ea68:	bc30      	pop	{r4, r5}
 800ea6a:	f7f4 be33 	b.w	80036d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800ea6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800ea6e:	b408      	push	{r3}
 800ea70:	b510      	push	{r4, lr}
 800ea72:	b085      	sub	sp, #20
 800ea74:	ac07      	add	r4, sp, #28
 800ea76:	f854 3b04 	ldr.w	r3, [r4], #4
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	4622      	mov	r2, r4
 800ea80:	9403      	str	r4, [sp, #12]
 800ea82:	f7ff ffdf 	bl	800ea44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ea86:	b005      	add	sp, #20
 800ea88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea8c:	b001      	add	sp, #4
 800ea8e:	4770      	bx	lr

0800ea90 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 800ea90:	2301      	movs	r3, #1
 800ea92:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ea96:	4770      	bx	lr

0800ea98 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	f8b0 b036 	ldrh.w	fp, [r0, #54]	@ 0x36
 800eaa0:	eb00 064b 	add.w	r6, r0, fp, lsl #1
 800eaa4:	b087      	sub	sp, #28
 800eaa6:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 813e 	beq.w	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800eaae:	2b7f      	cmp	r3, #127	@ 0x7f
 800eab0:	d819      	bhi.n	800eae6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800eab2:	2901      	cmp	r1, #1
 800eab4:	d117      	bne.n	800eae6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800eab6:	2b3c      	cmp	r3, #60	@ 0x3c
 800eab8:	f000 83d2 	beq.w	800f260 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c8>
 800eabc:	2b3e      	cmp	r3, #62	@ 0x3e
 800eabe:	f000 83d1 	beq.w	800f264 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7cc>
 800eac2:	2b28      	cmp	r3, #40	@ 0x28
 800eac4:	f000 83d0 	beq.w	800f268 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d0>
 800eac8:	2b29      	cmp	r3, #41	@ 0x29
 800eaca:	f000 83cf 	beq.w	800f26c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d4>
 800eace:	2b5b      	cmp	r3, #91	@ 0x5b
 800ead0:	f000 83ce 	beq.w	800f270 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d8>
 800ead4:	2b5d      	cmp	r3, #93	@ 0x5d
 800ead6:	f000 83cd 	beq.w	800f274 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7dc>
 800eada:	2b7b      	cmp	r3, #123	@ 0x7b
 800eadc:	f000 83cc 	beq.w	800f278 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e0>
 800eae0:	2b7d      	cmp	r3, #125	@ 0x7d
 800eae2:	f000 83cb 	beq.w	800f27c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e4>
 800eae6:	f10b 0201 	add.w	r2, fp, #1
 800eaea:	b292      	uxth	r2, r2
 800eaec:	2a09      	cmp	r2, #9
 800eaee:	4611      	mov	r1, r2
 800eaf0:	bf88      	it	hi
 800eaf2:	f1a2 010a 	subhi.w	r1, r2, #10
 800eaf6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800eafa:	9102      	str	r1, [sp, #8]
 800eafc:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 800eafe:	f10b 0102 	add.w	r1, fp, #2
 800eb02:	b289      	uxth	r1, r1
 800eb04:	2909      	cmp	r1, #9
 800eb06:	bf88      	it	hi
 800eb08:	390a      	subhi	r1, #10
 800eb0a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800eb0e:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 800eb10:	f240 6151 	movw	r1, #1617	@ 0x651
 800eb14:	428d      	cmp	r5, r1
 800eb16:	d125      	bne.n	800eb64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800eb18:	f2a3 614b 	subw	r1, r3, #1611	@ 0x64b
 800eb1c:	b289      	uxth	r1, r1
 800eb1e:	2914      	cmp	r1, #20
 800eb20:	d914      	bls.n	800eb4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800eb22:	f023 0104 	bic.w	r1, r3, #4
 800eb26:	b289      	uxth	r1, r1
 800eb28:	f5b1 6fce 	cmp.w	r1, #1648	@ 0x670
 800eb2c:	d00e      	beq.n	800eb4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800eb2e:	f2a3 61d6 	subw	r1, r3, #1750	@ 0x6d6
 800eb32:	b289      	uxth	r1, r1
 800eb34:	2917      	cmp	r1, #23
 800eb36:	d804      	bhi.n	800eb42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xaa>
 800eb38:	4fad      	ldr	r7, [pc, #692]	@ (800edf0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800eb3a:	fa27 f101 	lsr.w	r1, r7, r1
 800eb3e:	07c9      	lsls	r1, r1, #31
 800eb40:	d404      	bmi.n	800eb4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800eb42:	f6a3 01e4 	subw	r1, r3, #2276	@ 0x8e4
 800eb46:	b289      	uxth	r1, r1
 800eb48:	291a      	cmp	r1, #26
 800eb4a:	d80b      	bhi.n	800eb64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800eb4c:	2a0a      	cmp	r2, #10
 800eb4e:	bf28      	it	cs
 800eb50:	2200      	movcs	r2, #0
 800eb52:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800eb56:	f240 6151 	movw	r1, #1617	@ 0x651
 800eb5a:	8471      	strh	r1, [r6, #34]	@ 0x22
 800eb5c:	8453      	strh	r3, [r2, #34]	@ 0x22
 800eb5e:	461a      	mov	r2, r3
 800eb60:	462b      	mov	r3, r5
 800eb62:	4615      	mov	r5, r2
 800eb64:	f2a3 6222 	subw	r2, r3, #1570	@ 0x622
 800eb68:	b292      	uxth	r2, r2
 800eb6a:	2a18      	cmp	r2, #24
 800eb6c:	d90d      	bls.n	800eb8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800eb6e:	f5a3 62c8 	sub.w	r2, r3, #1600	@ 0x640
 800eb72:	b292      	uxth	r2, r2
 800eb74:	2a0a      	cmp	r2, #10
 800eb76:	d908      	bls.n	800eb8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800eb78:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800eb7c:	19da      	adds	r2, r3, r7
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	2a62      	cmp	r2, #98	@ 0x62
 800eb82:	d902      	bls.n	800eb8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800eb84:	2b20      	cmp	r3, #32
 800eb86:	f040 80d0 	bne.w	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800eb8a:	f10b 0103 	add.w	r1, fp, #3
 800eb8e:	b289      	uxth	r1, r1
 800eb90:	2909      	cmp	r1, #9
 800eb92:	460a      	mov	r2, r1
 800eb94:	bf88      	it	hi
 800eb96:	f1a1 020a 	subhi.w	r2, r1, #10
 800eb9a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800eb9e:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800eba2:	f10b 0204 	add.w	r2, fp, #4
 800eba6:	b292      	uxth	r2, r2
 800eba8:	2a09      	cmp	r2, #9
 800ebaa:	bf88      	it	hi
 800ebac:	3a0a      	subhi	r2, #10
 800ebae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ebb2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ebb4:	f2a2 6622 	subw	r6, r2, #1570	@ 0x622
 800ebb8:	2e18      	cmp	r6, #24
 800ebba:	f240 80ba 	bls.w	800ed32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800ebbe:	f5a2 66c8 	sub.w	r6, r2, #1600	@ 0x640
 800ebc2:	2e0a      	cmp	r6, #10
 800ebc4:	f240 80b5 	bls.w	800ed32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800ebc8:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800ebcc:	4432      	add	r2, r6
 800ebce:	2a62      	cmp	r2, #98	@ 0x62
 800ebd0:	f240 80af 	bls.w	800ed32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800ebd4:	f2a3 6227 	subw	r2, r3, #1575	@ 0x627
 800ebd8:	b292      	uxth	r2, r2
 800ebda:	2a21      	cmp	r2, #33	@ 0x21
 800ebdc:	f200 80a9 	bhi.w	800ed32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800ebe0:	f2a4 6227 	subw	r2, r4, #1575	@ 0x627
 800ebe4:	b292      	uxth	r2, r2
 800ebe6:	2a23      	cmp	r2, #35	@ 0x23
 800ebe8:	d82e      	bhi.n	800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ebea:	f2ac 622f 	subw	r2, ip, #1583	@ 0x62f
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	2a18      	cmp	r2, #24
 800ebf2:	d829      	bhi.n	800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ebf4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ebf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ebfc:	f5a2 4282 	sub.w	r2, r2, #16640	@ 0x4100
 800ec00:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 800ec04:	3a1a      	subs	r2, #26
 800ec06:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800ec0a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ec0e:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800ec10:	4462      	add	r2, ip
 800ec12:	b292      	uxth	r2, r2
 800ec14:	b1c7      	cbz	r7, 800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ec16:	8b3e      	ldrh	r6, [r7, #24]
 800ec18:	b1b6      	cbz	r6, 800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ec1a:	f8d7 9000 	ldr.w	r9, [r7]
 800ec1e:	f04f 0e00 	mov.w	lr, #0
 800ec22:	eb06 070e 	add.w	r7, r6, lr
 800ec26:	f04f 080a 	mov.w	r8, #10
 800ec2a:	107f      	asrs	r7, r7, #1
 800ec2c:	fb08 fa07 	mul.w	sl, r8, r7
 800ec30:	eb09 080a 	add.w	r8, r9, sl
 800ec34:	f839 a00a 	ldrh.w	sl, [r9, sl]
 800ec38:	4552      	cmp	r2, sl
 800ec3a:	d961      	bls.n	800ed00 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x268>
 800ec3c:	f107 0e01 	add.w	lr, r7, #1
 800ec40:	e000      	b.n	800ec44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ac>
 800ec42:	463e      	mov	r6, r7
 800ec44:	45b6      	cmp	lr, r6
 800ec46:	dbec      	blt.n	800ec22 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x18a>
 800ec48:	f5a3 62c5 	sub.w	r2, r3, #1576	@ 0x628
 800ec4c:	b292      	uxth	r2, r2
 800ec4e:	2a22      	cmp	r2, #34	@ 0x22
 800ec50:	d971      	bls.n	800ed36 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29e>
 800ec52:	f2a5 624b 	subw	r2, r5, #1611	@ 0x64b
 800ec56:	b292      	uxth	r2, r2
 800ec58:	2a14      	cmp	r2, #20
 800ec5a:	d918      	bls.n	800ec8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800ec5c:	f5b5 6fce 	cmp.w	r5, #1648	@ 0x670
 800ec60:	d015      	beq.n	800ec8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800ec62:	f240 6274 	movw	r2, #1652	@ 0x674
 800ec66:	4295      	cmp	r5, r2
 800ec68:	d011      	beq.n	800ec8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800ec6a:	f2a5 62d6 	subw	r2, r5, #1750	@ 0x6d6
 800ec6e:	b292      	uxth	r2, r2
 800ec70:	2a17      	cmp	r2, #23
 800ec72:	d804      	bhi.n	800ec7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1e6>
 800ec74:	495e      	ldr	r1, [pc, #376]	@ (800edf0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800ec76:	fa21 f202 	lsr.w	r2, r1, r2
 800ec7a:	07d2      	lsls	r2, r2, #31
 800ec7c:	d407      	bmi.n	800ec8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800ec7e:	f6a5 02e4 	subw	r2, r5, #2276	@ 0x8e4
 800ec82:	b292      	uxth	r2, r2
 800ec84:	2a1a      	cmp	r2, #26
 800ec86:	d902      	bls.n	800ec8e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800ec88:	46a4      	mov	ip, r4
 800ec8a:	462c      	mov	r4, r5
 800ec8c:	2500      	movs	r5, #0
 800ec8e:	2b20      	cmp	r3, #32
 800ec90:	d005      	beq.n	800ec9e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x206>
 800ec92:	f2a3 6226 	subw	r2, r3, #1574	@ 0x626
 800ec96:	b292      	uxth	r2, r2
 800ec98:	2a24      	cmp	r2, #36	@ 0x24
 800ec9a:	f200 8136 	bhi.w	800ef0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800ec9e:	f2a4 6222 	subw	r2, r4, #1570	@ 0x622
 800eca2:	b292      	uxth	r2, r2
 800eca4:	2ab3      	cmp	r2, #179	@ 0xb3
 800eca6:	f200 8130 	bhi.w	800ef0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800ecaa:	f240 6244 	movw	r2, #1604	@ 0x644
 800ecae:	4294      	cmp	r4, r2
 800ecb0:	d104      	bne.n	800ecbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x224>
 800ecb2:	f240 6227 	movw	r2, #1575	@ 0x627
 800ecb6:	4594      	cmp	ip, r2
 800ecb8:	f000 8127 	beq.w	800ef0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800ecbc:	f240 624f 	movw	r2, #1615	@ 0x64f
 800ecc0:	4295      	cmp	r5, r2
 800ecc2:	f000 8122 	beq.w	800ef0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800ecc6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	f000 811e 	beq.w	800ef0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800ecce:	8b8a      	ldrh	r2, [r1, #28]
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	f000 811b 	beq.w	800ef0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x474>
 800ecd6:	b2e4      	uxtb	r4, r4
 800ecd8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800ecdc:	6889      	ldr	r1, [r1, #8]
 800ecde:	b2a4      	uxth	r4, r4
 800ece0:	2700      	movs	r7, #0
 800ece2:	f04f 080a 	mov.w	r8, #10
 800ece6:	19d6      	adds	r6, r2, r7
 800ece8:	1076      	asrs	r6, r6, #1
 800ecea:	fb08 fc06 	mul.w	ip, r8, r6
 800ecee:	eb01 0e0c 	add.w	lr, r1, ip
 800ecf2:	f831 c00c 	ldrh.w	ip, [r1, ip]
 800ecf6:	4564      	cmp	r4, ip
 800ecf8:	f240 810a 	bls.w	800ef10 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x478>
 800ecfc:	1c77      	adds	r7, r6, #1
 800ecfe:	e101      	b.n	800ef04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46c>
 800ed00:	d39f      	bcc.n	800ec42 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1aa>
 800ed02:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ed06:	42aa      	cmp	r2, r5
 800ed08:	d19e      	bne.n	800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ed0a:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800ed0c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ed0e:	3b03      	subs	r3, #3
 800ed10:	2909      	cmp	r1, #9
 800ed12:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ed14:	bf88      	it	hi
 800ed16:	f1ab 0207 	subhi.w	r2, fp, #7
 800ed1a:	f04f 0301 	mov.w	r3, #1
 800ed1e:	bf88      	it	hi
 800ed20:	86c2      	strhhi	r2, [r0, #54]	@ 0x36
 800ed22:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ed26:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	b007      	add	sp, #28
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	2b20      	cmp	r3, #32
 800ed34:	d188      	bne.n	800ec48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ed36:	f2a5 622c 	subw	r2, r5, #1580	@ 0x62c
 800ed3a:	b292      	uxth	r2, r2
 800ed3c:	2a25      	cmp	r2, #37	@ 0x25
 800ed3e:	d888      	bhi.n	800ec52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ed40:	f2a4 622c 	subw	r2, r4, #1580	@ 0x62c
 800ed44:	b291      	uxth	r1, r2
 800ed46:	2925      	cmp	r1, #37	@ 0x25
 800ed48:	d914      	bls.n	800ed74 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2dc>
 800ed4a:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ed4e:	f000 82ec 	beq.w	800f32a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x892>
 800ed52:	f240 62d2 	movw	r2, #1746	@ 0x6d2
 800ed56:	4294      	cmp	r4, r2
 800ed58:	f47f af7b 	bne.w	800ec52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ed5c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800ed60:	00d2      	lsls	r2, r2, #3
 800ed62:	2b20      	cmp	r3, #32
 800ed64:	b292      	uxth	r2, r2
 800ed66:	d107      	bne.n	800ed78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800ed68:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800ed6c:	3a30      	subs	r2, #48	@ 0x30
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	2127      	movs	r1, #39	@ 0x27
 800ed72:	e017      	b.n	800eda4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 800ed74:	2b20      	cmp	r3, #32
 800ed76:	d034      	beq.n	800ede2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x34a>
 800ed78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ed7c:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
 800ed80:	0112      	lsls	r2, r2, #4
 800ed82:	f502 42e5 	add.w	r2, r2, #29312	@ 0x7280
 800ed86:	b292      	uxth	r2, r2
 800ed88:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 800ed8c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800ed90:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ed94:	b292      	uxth	r2, r2
 800ed96:	f000 82d2 	beq.w	800f33e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a6>
 800ed9a:	f240 66d2 	movw	r6, #1746	@ 0x6d2
 800ed9e:	42b4      	cmp	r4, r6
 800eda0:	bf08      	it	eq
 800eda2:	2127      	moveq	r1, #39	@ 0x27
 800eda4:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800eda6:	2f00      	cmp	r7, #0
 800eda8:	f43f af53 	beq.w	800ec52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800edac:	8b7e      	ldrh	r6, [r7, #26]
 800edae:	2e00      	cmp	r6, #0
 800edb0:	f43f af4f 	beq.w	800ec52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800edb4:	440a      	add	r2, r1
 800edb6:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 800edba:	6879      	ldr	r1, [r7, #4]
 800edbc:	b292      	uxth	r2, r2
 800edbe:	f04f 0e00 	mov.w	lr, #0
 800edc2:	f04f 0a0a 	mov.w	sl, #10
 800edc6:	eb06 070e 	add.w	r7, r6, lr
 800edca:	107f      	asrs	r7, r7, #1
 800edcc:	fb0a f807 	mul.w	r8, sl, r7
 800edd0:	eb01 0908 	add.w	r9, r1, r8
 800edd4:	f831 8008 	ldrh.w	r8, [r1, r8]
 800edd8:	4542      	cmp	r2, r8
 800edda:	d90b      	bls.n	800edf4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>
 800eddc:	f107 0e01 	add.w	lr, r7, #1
 800ede0:	e003      	b.n	800edea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x352>
 800ede2:	f64c 72d0 	movw	r2, #53200	@ 0xcfd0
 800ede6:	e7cf      	b.n	800ed88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f0>
 800ede8:	463e      	mov	r6, r7
 800edea:	4576      	cmp	r6, lr
 800edec:	dceb      	bgt.n	800edc6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x32e>
 800edee:	e730      	b.n	800ec52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800edf0:	00f67e7f 	.word	0x00f67e7f
 800edf4:	d3f8      	bcc.n	800ede8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x350>
 800edf6:	f109 0102 	add.w	r1, r9, #2
 800edfa:	2500      	movs	r5, #0
 800edfc:	2202      	movs	r2, #2
 800edfe:	2d00      	cmp	r5, #0
 800ee00:	bf0c      	ite	eq
 800ee02:	4614      	moveq	r4, r2
 800ee04:	1c54      	addne	r4, r2, #1
 800ee06:	3401      	adds	r4, #1
 800ee08:	445c      	add	r4, fp
 800ee0a:	f8df c388 	ldr.w	ip, [pc, #904]	@ 800f194 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800ee0e:	b2a4      	uxth	r4, r4
 800ee10:	2c09      	cmp	r4, #9
 800ee12:	4626      	mov	r6, r4
 800ee14:	bf88      	it	hi
 800ee16:	f1a4 060a 	subhi.w	r6, r4, #10
 800ee1a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ee1e:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 800ee20:	f2a6 674b 	subw	r7, r6, #1611	@ 0x64b
 800ee24:	2f14      	cmp	r7, #20
 800ee26:	d978      	bls.n	800ef1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800ee28:	f026 0704 	bic.w	r7, r6, #4
 800ee2c:	f5b7 6fce 	cmp.w	r7, #1648	@ 0x670
 800ee30:	d073      	beq.n	800ef1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800ee32:	f2a6 67d6 	subw	r7, r6, #1750	@ 0x6d6
 800ee36:	b2bf      	uxth	r7, r7
 800ee38:	2f17      	cmp	r7, #23
 800ee3a:	d803      	bhi.n	800ee44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ac>
 800ee3c:	fa2c f707 	lsr.w	r7, ip, r7
 800ee40:	07ff      	lsls	r7, r7, #31
 800ee42:	d46a      	bmi.n	800ef1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800ee44:	f6a6 07e4 	subw	r7, r6, #2276	@ 0x8e4
 800ee48:	2f1a      	cmp	r7, #26
 800ee4a:	d966      	bls.n	800ef1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800ee4c:	f2a6 6422 	subw	r4, r6, #1570	@ 0x622
 800ee50:	2c18      	cmp	r4, #24
 800ee52:	d965      	bls.n	800ef20 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800ee54:	f5a6 64c8 	sub.w	r4, r6, #1600	@ 0x640
 800ee58:	2c0a      	cmp	r4, #10
 800ee5a:	d961      	bls.n	800ef20 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800ee5c:	f46f 6cce 	mvn.w	ip, #1648	@ 0x670
 800ee60:	4466      	add	r6, ip
 800ee62:	2e62      	cmp	r6, #98	@ 0x62
 800ee64:	bf94      	ite	ls
 800ee66:	2400      	movls	r4, #0
 800ee68:	2401      	movhi	r4, #1
 800ee6a:	9401      	str	r4, [sp, #4]
 800ee6c:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800ee70:	f084 0401 	eor.w	r4, r4, #1
 800ee74:	9404      	str	r4, [sp, #16]
 800ee76:	9c01      	ldr	r4, [sp, #4]
 800ee78:	2c00      	cmp	r4, #0
 800ee7a:	9c04      	ldr	r4, [sp, #16]
 800ee7c:	bf0c      	ite	eq
 800ee7e:	2702      	moveq	r7, #2
 800ee80:	2700      	movne	r7, #0
 800ee82:	193c      	adds	r4, r7, r4
 800ee84:	9400      	str	r4, [sp, #0]
 800ee86:	2900      	cmp	r1, #0
 800ee88:	f000 8186 	beq.w	800f198 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 800ee8c:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	f040 8221 	bne.w	800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ee96:	2a00      	cmp	r2, #0
 800ee98:	f000 821e 	beq.w	800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ee9c:	eb0b 0402 	add.w	r4, fp, r2
 800eea0:	b2a4      	uxth	r4, r4
 800eea2:	2c09      	cmp	r4, #9
 800eea4:	bf88      	it	hi
 800eea6:	3c0a      	subhi	r4, #10
 800eea8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800eeac:	4eb9      	ldr	r6, [pc, #740]	@ (800f194 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>)
 800eeae:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800eeb0:	f102 0e01 	add.w	lr, r2, #1
 800eeb4:	f2a4 6c4b 	subw	ip, r4, #1611	@ 0x64b
 800eeb8:	f1bc 0f14 	cmp.w	ip, #20
 800eebc:	d915      	bls.n	800eeea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eebe:	f024 0c04 	bic.w	ip, r4, #4
 800eec2:	f5bc 6fce 	cmp.w	ip, #1648	@ 0x670
 800eec6:	d010      	beq.n	800eeea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eec8:	f2a4 6cd6 	subw	ip, r4, #1750	@ 0x6d6
 800eecc:	fa1f fc8c 	uxth.w	ip, ip
 800eed0:	f1bc 0f17 	cmp.w	ip, #23
 800eed4:	d804      	bhi.n	800eee0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>
 800eed6:	fa26 fc0c 	lsr.w	ip, r6, ip
 800eeda:	f01c 0f01 	tst.w	ip, #1
 800eede:	d104      	bne.n	800eeea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eee0:	f6a4 0ce4 	subw	ip, r4, #2276	@ 0x8e4
 800eee4:	f1bc 0f1a 	cmp.w	ip, #26
 800eee8:	d81c      	bhi.n	800ef24 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 800eeea:	eb0b 040e 	add.w	r4, fp, lr
 800eeee:	b2a4      	uxth	r4, r4
 800eef0:	2c09      	cmp	r4, #9
 800eef2:	bf88      	it	hi
 800eef4:	3c0a      	subhi	r4, #10
 800eef6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800eefa:	f10e 0e01 	add.w	lr, lr, #1
 800eefe:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800ef00:	e7d8      	b.n	800eeb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41c>
 800ef02:	4632      	mov	r2, r6
 800ef04:	4297      	cmp	r7, r2
 800ef06:	f6ff aeee 	blt.w	800ece6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x24e>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	e776      	b.n	800edfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ef10:	d3f7      	bcc.n	800ef02 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46a>
 800ef12:	f10e 0102 	add.w	r1, lr, #2
 800ef16:	2201      	movs	r2, #1
 800ef18:	e771      	b.n	800edfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ef1a:	3401      	adds	r4, #1
 800ef1c:	b2a4      	uxth	r4, r4
 800ef1e:	e777      	b.n	800ee10 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x378>
 800ef20:	2400      	movs	r4, #0
 800ef22:	e7a2      	b.n	800ee6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3d2>
 800ef24:	6c86      	ldr	r6, [r0, #72]	@ 0x48
 800ef26:	2e00      	cmp	r6, #0
 800ef28:	d07a      	beq.n	800f020 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800ef2a:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ef2e:	eb04 0c0a 	add.w	ip, r4, sl
 800ef32:	f1bc 0f19 	cmp.w	ip, #25
 800ef36:	d840      	bhi.n	800efba <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x522>
 800ef38:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800ef3c:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ef40:	68f7      	ldr	r7, [r6, #12]
 800ef42:	444c      	add	r4, r9
 800ef44:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
 800ef48:	f10e 0401 	add.w	r4, lr, #1
 800ef4c:	44de      	add	lr, fp
 800ef4e:	fa1f fe8e 	uxth.w	lr, lr
 800ef52:	f1be 0f09 	cmp.w	lr, #9
 800ef56:	bf88      	it	hi
 800ef58:	f1ae 0e0a 	subhi.w	lr, lr, #10
 800ef5c:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800ef60:	445c      	add	r4, fp
 800ef62:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800ef66:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800f194 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800ef6a:	b2a4      	uxth	r4, r4
 800ef6c:	f2ae 684b 	subw	r8, lr, #1611	@ 0x64b
 800ef70:	f1b8 0f14 	cmp.w	r8, #20
 800ef74:	d915      	bls.n	800efa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ef76:	f02e 0804 	bic.w	r8, lr, #4
 800ef7a:	f5b8 6fce 	cmp.w	r8, #1648	@ 0x670
 800ef7e:	d010      	beq.n	800efa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ef80:	f2ae 68d6 	subw	r8, lr, #1750	@ 0x6d6
 800ef84:	fa1f f888 	uxth.w	r8, r8
 800ef88:	f1b8 0f17 	cmp.w	r8, #23
 800ef8c:	d804      	bhi.n	800ef98 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x500>
 800ef8e:	fa29 f808 	lsr.w	r8, r9, r8
 800ef92:	f018 0f01 	tst.w	r8, #1
 800ef96:	d104      	bne.n	800efa2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ef98:	f6ae 08e4 	subw	r8, lr, #2276	@ 0x8e4
 800ef9c:	f1b8 0f1a 	cmp.w	r8, #26
 800efa0:	d846      	bhi.n	800f030 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x598>
 800efa2:	2c09      	cmp	r4, #9
 800efa4:	46a6      	mov	lr, r4
 800efa6:	bf88      	it	hi
 800efa8:	f1a4 0e0a 	subhi.w	lr, r4, #10
 800efac:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800efb0:	3401      	adds	r4, #1
 800efb2:	b2a4      	uxth	r4, r4
 800efb4:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800efb8:	e7d8      	b.n	800ef6c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4d4>
 800efba:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800efbe:	eb04 0c08 	add.w	ip, r4, r8
 800efc2:	f1bc 0f09 	cmp.w	ip, #9
 800efc6:	d806      	bhi.n	800efd6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x53e>
 800efc8:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800efcc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800efd0:	4464      	add	r4, ip
 800efd2:	6937      	ldr	r7, [r6, #16]
 800efd4:	e7b6      	b.n	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4ac>
 800efd6:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800efda:	eb04 0c07 	add.w	ip, r4, r7
 800efde:	f1bc 0f62 	cmp.w	ip, #98	@ 0x62
 800efe2:	d81d      	bhi.n	800f020 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800efe4:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 800efe8:	f1bc 0f00 	cmp.w	ip, #0
 800efec:	d0ac      	beq.n	800ef48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800efee:	6977      	ldr	r7, [r6, #20]
 800eff0:	9703      	str	r7, [sp, #12]
 800eff2:	f04f 0900 	mov.w	r9, #0
 800eff6:	eb0c 0809 	add.w	r8, ip, r9
 800effa:	270a      	movs	r7, #10
 800effc:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f000:	fb07 fa08 	mul.w	sl, r7, r8
 800f004:	9f03      	ldr	r7, [sp, #12]
 800f006:	4457      	add	r7, sl
 800f008:	9705      	str	r7, [sp, #20]
 800f00a:	9f03      	ldr	r7, [sp, #12]
 800f00c:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800f010:	45a2      	cmp	sl, r4
 800f012:	d208      	bcs.n	800f026 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58e>
 800f014:	f108 0901 	add.w	r9, r8, #1
 800f018:	e000      	b.n	800f01c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x584>
 800f01a:	46c4      	mov	ip, r8
 800f01c:	45cc      	cmp	ip, r9
 800f01e:	dcea      	bgt.n	800eff6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x55e>
 800f020:	f04f 0c00 	mov.w	ip, #0
 800f024:	e790      	b.n	800ef48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800f026:	d8f8      	bhi.n	800f01a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x582>
 800f028:	9c05      	ldr	r4, [sp, #20]
 800f02a:	f104 0c02 	add.w	ip, r4, #2
 800f02e:	e78b      	b.n	800ef48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800f030:	2e00      	cmp	r6, #0
 800f032:	d05d      	beq.n	800f0f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800f034:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800f038:	eb0e 040a 	add.w	r4, lr, sl
 800f03c:	2c19      	cmp	r4, #25
 800f03e:	d829      	bhi.n	800f094 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5fc>
 800f040:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800f044:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f048:	68f7      	ldr	r7, [r6, #12]
 800f04a:	444c      	add	r4, r9
 800f04c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800f050:	f1bc 0f00 	cmp.w	ip, #0
 800f054:	d00f      	beq.n	800f076 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f056:	f8bc c006 	ldrh.w	ip, [ip, #6]
 800f05a:	f1bc 0f00 	cmp.w	ip, #0
 800f05e:	d00a      	beq.n	800f076 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f060:	b14c      	cbz	r4, 800f076 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f062:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800f066:	f1bc 0f00 	cmp.w	ip, #0
 800f06a:	f040 8109 	bne.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f06e:	88e4      	ldrh	r4, [r4, #6]
 800f070:	2c00      	cmp	r4, #0
 800f072:	f040 8105 	bne.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f076:	9c00      	ldr	r4, [sp, #0]
 800f078:	2c02      	cmp	r4, #2
 800f07a:	d13f      	bne.n	800f0fc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x664>
 800f07c:	880c      	ldrh	r4, [r1, #0]
 800f07e:	2c00      	cmp	r4, #0
 800f080:	f000 80fe 	beq.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f084:	f240 6444 	movw	r4, #1604	@ 0x644
 800f088:	42a3      	cmp	r3, r4
 800f08a:	f040 80f9 	bne.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f08e:	2401      	movs	r4, #1
 800f090:	9401      	str	r4, [sp, #4]
 800f092:	e0dc      	b.n	800f24e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800f094:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800f098:	eb0e 0408 	add.w	r4, lr, r8
 800f09c:	2c09      	cmp	r4, #9
 800f09e:	d806      	bhi.n	800f0ae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x616>
 800f0a0:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f0a4:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800f0a8:	443c      	add	r4, r7
 800f0aa:	6937      	ldr	r7, [r6, #16]
 800f0ac:	e7ce      	b.n	800f04c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b4>
 800f0ae:	f46f 64ce 	mvn.w	r4, #1648	@ 0x670
 800f0b2:	4474      	add	r4, lr
 800f0b4:	2c62      	cmp	r4, #98	@ 0x62
 800f0b6:	d81b      	bhi.n	800f0f0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800f0b8:	8bf4      	ldrh	r4, [r6, #30]
 800f0ba:	2c00      	cmp	r4, #0
 800f0bc:	d0c8      	beq.n	800f050 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f0be:	6977      	ldr	r7, [r6, #20]
 800f0c0:	9703      	str	r7, [sp, #12]
 800f0c2:	f04f 0900 	mov.w	r9, #0
 800f0c6:	eb04 0809 	add.w	r8, r4, r9
 800f0ca:	270a      	movs	r7, #10
 800f0cc:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f0d0:	fb07 fa08 	mul.w	sl, r7, r8
 800f0d4:	9f03      	ldr	r7, [sp, #12]
 800f0d6:	4457      	add	r7, sl
 800f0d8:	9705      	str	r7, [sp, #20]
 800f0da:	9f03      	ldr	r7, [sp, #12]
 800f0dc:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800f0e0:	45f2      	cmp	sl, lr
 800f0e2:	d207      	bcs.n	800f0f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 800f0e4:	f108 0901 	add.w	r9, r8, #1
 800f0e8:	e000      	b.n	800f0ec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x654>
 800f0ea:	4644      	mov	r4, r8
 800f0ec:	45a1      	cmp	r9, r4
 800f0ee:	dbea      	blt.n	800f0c6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x62e>
 800f0f0:	2400      	movs	r4, #0
 800f0f2:	e7ad      	b.n	800f050 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f0f4:	d8f9      	bhi.n	800f0ea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x652>
 800f0f6:	9c05      	ldr	r4, [sp, #20]
 800f0f8:	3402      	adds	r4, #2
 800f0fa:	e7a9      	b.n	800f050 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f0fc:	9c00      	ldr	r4, [sp, #0]
 800f0fe:	2c03      	cmp	r4, #3
 800f100:	f040 80be 	bne.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f104:	884c      	ldrh	r4, [r1, #2]
 800f106:	2c00      	cmp	r4, #0
 800f108:	f000 80ba 	beq.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f10c:	f240 6444 	movw	r4, #1604	@ 0x644
 800f110:	42a3      	cmp	r3, r4
 800f112:	f040 80b5 	bne.w	800f280 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f116:	2401      	movs	r4, #1
 800f118:	9401      	str	r4, [sp, #4]
 800f11a:	884c      	ldrh	r4, [r1, #2]
 800f11c:	2c00      	cmp	r4, #0
 800f11e:	f000 8096 	beq.w	800f24e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800f122:	2401      	movs	r4, #1
 800f124:	9400      	str	r4, [sp, #0]
 800f126:	e0de      	b.n	800f2e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f128:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800f12c:	eb03 0408 	add.w	r4, r3, r8
 800f130:	b2a4      	uxth	r4, r4
 800f132:	2c09      	cmp	r4, #9
 800f134:	d806      	bhi.n	800f144 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ac>
 800f136:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800f13a:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f13e:	443c      	add	r4, r7
 800f140:	6936      	ldr	r6, [r6, #16]
 800f142:	e0ac      	b.n	800f29e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x806>
 800f144:	f46f 6ace 	mvn.w	sl, #1648	@ 0x670
 800f148:	eb03 040a 	add.w	r4, r3, sl
 800f14c:	b2a4      	uxth	r4, r4
 800f14e:	2c62      	cmp	r4, #98	@ 0x62
 800f150:	d819      	bhi.n	800f186 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800f152:	8bf4      	ldrh	r4, [r6, #30]
 800f154:	b1bc      	cbz	r4, 800f186 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800f156:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800f15a:	f04f 0c00 	mov.w	ip, #0
 800f15e:	4626      	mov	r6, r4
 800f160:	f04f 0a0a 	mov.w	sl, #10
 800f164:	eb06 040c 	add.w	r4, r6, ip
 800f168:	1064      	asrs	r4, r4, #1
 800f16a:	fb0a f804 	mul.w	r8, sl, r4
 800f16e:	eb0e 0908 	add.w	r9, lr, r8
 800f172:	f83e 8008 	ldrh.w	r8, [lr, r8]
 800f176:	4598      	cmp	r8, r3
 800f178:	d207      	bcs.n	800f18a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 800f17a:	f104 0c01 	add.w	ip, r4, #1
 800f17e:	e000      	b.n	800f182 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ea>
 800f180:	4626      	mov	r6, r4
 800f182:	45b4      	cmp	ip, r6
 800f184:	dbee      	blt.n	800f164 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6cc>
 800f186:	2600      	movs	r6, #0
 800f188:	e08b      	b.n	800f2a2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f18a:	d8f9      	bhi.n	800f180 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6e8>
 800f18c:	f109 0602 	add.w	r6, r9, #2
 800f190:	e087      	b.n	800f2a2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f192:	bf00      	nop
 800f194:	00f67e7f 	.word	0x00f67e7f
 800f198:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800f19a:	b18c      	cbz	r4, 800f1c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f19c:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f1a0:	eb03 0609 	add.w	r6, r3, r9
 800f1a4:	b2b6      	uxth	r6, r6
 800f1a6:	2e19      	cmp	r6, #25
 800f1a8:	d812      	bhi.n	800f1d0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x738>
 800f1aa:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800f1ae:	f46f 68c4 	mvn.w	r8, #1568	@ 0x620
 800f1b2:	68e4      	ldr	r4, [r4, #12]
 800f1b4:	4441      	add	r1, r8
 800f1b6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800f1ba:	2900      	cmp	r1, #0
 800f1bc:	f040 808c 	bne.w	800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f1c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f1c4:	f47f adb1 	bne.w	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 800f1ce:	e5ac      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f1d0:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800f1d4:	eb03 060c 	add.w	r6, r3, ip
 800f1d8:	b2b6      	uxth	r6, r6
 800f1da:	2e09      	cmp	r6, #9
 800f1dc:	d806      	bhi.n	800f1ec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x754>
 800f1de:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800f1e2:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f1e6:	4439      	add	r1, r7
 800f1e8:	6924      	ldr	r4, [r4, #16]
 800f1ea:	e7e4      	b.n	800f1b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x71e>
 800f1ec:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800f1f0:	199e      	adds	r6, r3, r6
 800f1f2:	b2b6      	uxth	r6, r6
 800f1f4:	2e62      	cmp	r6, #98	@ 0x62
 800f1f6:	d8e3      	bhi.n	800f1c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f1f8:	8be6      	ldrh	r6, [r4, #30]
 800f1fa:	2e00      	cmp	r6, #0
 800f1fc:	d0e0      	beq.n	800f1c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f1fe:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800f202:	f04f 090a 	mov.w	r9, #10
 800f206:	4634      	mov	r4, r6
 800f208:	1866      	adds	r6, r4, r1
 800f20a:	1076      	asrs	r6, r6, #1
 800f20c:	fb09 fc06 	mul.w	ip, r9, r6
 800f210:	eb0e 080c 	add.w	r8, lr, ip
 800f214:	f83e c00c 	ldrh.w	ip, [lr, ip]
 800f218:	459c      	cmp	ip, r3
 800f21a:	d205      	bcs.n	800f228 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x790>
 800f21c:	1c71      	adds	r1, r6, #1
 800f21e:	e000      	b.n	800f222 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78a>
 800f220:	4634      	mov	r4, r6
 800f222:	428c      	cmp	r4, r1
 800f224:	dcf0      	bgt.n	800f208 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x770>
 800f226:	e7cb      	b.n	800f1c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f228:	d8fa      	bhi.n	800f220 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x788>
 800f22a:	f108 0102 	add.w	r1, r8, #2
 800f22e:	e053      	b.n	800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f230:	9c00      	ldr	r4, [sp, #0]
 800f232:	2c03      	cmp	r4, #3
 800f234:	d104      	bne.n	800f240 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7a8>
 800f236:	88cc      	ldrh	r4, [r1, #6]
 800f238:	2c00      	cmp	r4, #0
 800f23a:	f43f af6c 	beq.w	800f116 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x67e>
 800f23e:	e052      	b.n	800f2e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f240:	9c00      	ldr	r4, [sp, #0]
 800f242:	2c01      	cmp	r4, #1
 800f244:	f43f af69 	beq.w	800f11a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x682>
 800f248:	9c00      	ldr	r4, [sp, #0]
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	d14b      	bne.n	800f2e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f24e:	880c      	ldrh	r4, [r1, #0]
 800f250:	b924      	cbnz	r4, 800f25c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c4>
 800f252:	884f      	ldrh	r7, [r1, #2]
 800f254:	1c3c      	adds	r4, r7, #0
 800f256:	bf18      	it	ne
 800f258:	2401      	movne	r4, #1
 800f25a:	e763      	b.n	800f124 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800f25c:	2400      	movs	r4, #0
 800f25e:	e761      	b.n	800f124 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800f260:	233e      	movs	r3, #62	@ 0x3e
 800f262:	e562      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f264:	233c      	movs	r3, #60	@ 0x3c
 800f266:	e560      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f268:	2329      	movs	r3, #41	@ 0x29
 800f26a:	e55e      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f26c:	2328      	movs	r3, #40	@ 0x28
 800f26e:	e55c      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f270:	235d      	movs	r3, #93	@ 0x5d
 800f272:	e55a      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f274:	235b      	movs	r3, #91	@ 0x5b
 800f276:	e558      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f278:	237d      	movs	r3, #125	@ 0x7d
 800f27a:	e556      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f27c:	237b      	movs	r3, #123	@ 0x7b
 800f27e:	e554      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f280:	b17e      	cbz	r6, 800f2a2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f282:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800f286:	eb03 040a 	add.w	r4, r3, sl
 800f28a:	b2a4      	uxth	r4, r4
 800f28c:	2c19      	cmp	r4, #25
 800f28e:	f63f af4b 	bhi.w	800f128 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 800f292:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800f296:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f29a:	68f6      	ldr	r6, [r6, #12]
 800f29c:	444c      	add	r4, r9
 800f29e:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800f2a2:	9c02      	ldr	r4, [sp, #8]
 800f2a4:	9f04      	ldr	r7, [sp, #16]
 800f2a6:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800f2a8:	f2a4 6422 	subw	r4, r4, #1570	@ 0x622
 800f2ac:	b2a4      	uxth	r4, r4
 800f2ae:	2cb1      	cmp	r4, #177	@ 0xb1
 800f2b0:	bf8c      	ite	hi
 800f2b2:	f04f 0c00 	movhi.w	ip, #0
 800f2b6:	f04f 0c02 	movls.w	ip, #2
 800f2ba:	44bc      	add	ip, r7
 800f2bc:	b166      	cbz	r6, 800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f2be:	f836 e01c 	ldrh.w	lr, [r6, ip, lsl #1]
 800f2c2:	f1be 0f00 	cmp.w	lr, #0
 800f2c6:	d007      	beq.n	800f2d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f2c8:	2cb1      	cmp	r4, #177	@ 0xb1
 800f2ca:	bf94      	ite	ls
 800f2cc:	2200      	movls	r2, #0
 800f2ce:	2201      	movhi	r2, #1
 800f2d0:	e9cd c200 	strd	ip, r2, [sp]
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	9c00      	ldr	r4, [sp, #0]
 800f2da:	2c02      	cmp	r4, #2
 800f2dc:	d1a8      	bne.n	800f230 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x798>
 800f2de:	888c      	ldrh	r4, [r1, #4]
 800f2e0:	2c00      	cmp	r4, #0
 800f2e2:	f43f aed4 	beq.w	800f08e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5f6>
 800f2e6:	9c00      	ldr	r4, [sp, #0]
 800f2e8:	9e00      	ldr	r6, [sp, #0]
 800f2ea:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800f2ee:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 800f2f2:	2900      	cmp	r1, #0
 800f2f4:	f43f ad19 	beq.w	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f2f8:	9b01      	ldr	r3, [sp, #4]
 800f2fa:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f2fe:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800f300:	b292      	uxth	r2, r2
 800f302:	1a9b      	subs	r3, r3, r2
 800f304:	445a      	add	r2, fp
 800f306:	b292      	uxth	r2, r2
 800f308:	2a09      	cmp	r2, #9
 800f30a:	bf88      	it	hi
 800f30c:	3a0a      	subhi	r2, #10
 800f30e:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f310:	86c2      	strh	r2, [r0, #54]	@ 0x36
 800f312:	b145      	cbz	r5, 800f326 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x88e>
 800f314:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f316:	3301      	adds	r3, #1
 800f318:	b29b      	uxth	r3, r3
 800f31a:	2b0a      	cmp	r3, #10
 800f31c:	bf28      	it	cs
 800f31e:	2300      	movcs	r3, #0
 800f320:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f324:	8445      	strh	r5, [r0, #34]	@ 0x22
 800f326:	8823      	ldrh	r3, [r4, #0]
 800f328:	e4ff      	b.n	800ed2a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f32a:	2b20      	cmp	r3, #32
 800f32c:	f47f ad24 	bne.w	800ed78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800f330:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800f334:	00d2      	lsls	r2, r2, #3
 800f336:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800f33a:	3a30      	subs	r2, #48	@ 0x30
 800f33c:	b292      	uxth	r2, r2
 800f33e:	f240 6152 	movw	r1, #1618	@ 0x652
 800f342:	e52f      	b.n	800eda4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>

0800f344 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f346:	4605      	mov	r5, r0
 800f348:	4608      	mov	r0, r1
 800f34a:	b1e9      	cbz	r1, 800f388 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800f34c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800f350:	460b      	mov	r3, r1
 800f352:	f101 0708 	add.w	r7, r1, #8
 800f356:	4622      	mov	r2, r4
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	6859      	ldr	r1, [r3, #4]
 800f35c:	4626      	mov	r6, r4
 800f35e:	c603      	stmia	r6!, {r0, r1}
 800f360:	3308      	adds	r3, #8
 800f362:	42bb      	cmp	r3, r7
 800f364:	4634      	mov	r4, r6
 800f366:	d1f7      	bne.n	800f358 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f368:	6818      	ldr	r0, [r3, #0]
 800f36a:	6030      	str	r0, [r6, #0]
 800f36c:	889b      	ldrh	r3, [r3, #4]
 800f36e:	80b3      	strh	r3, [r6, #4]
 800f370:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800f374:	015b      	lsls	r3, r3, #5
 800f376:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f37a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800f37e:	430b      	orrs	r3, r1
 800f380:	425b      	negs	r3, r3
 800f382:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800f386:	4610      	mov	r0, r2
 800f388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f38a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f38a:	b538      	push	{r3, r4, r5, lr}
 800f38c:	460c      	mov	r4, r1
 800f38e:	6811      	ldr	r1, [r2, #0]
 800f390:	4610      	mov	r0, r2
 800f392:	68cd      	ldr	r5, [r1, #12]
 800f394:	4619      	mov	r1, r3
 800f396:	47a8      	blx	r5
 800f398:	2800      	cmp	r0, #0
 800f39a:	bf08      	it	eq
 800f39c:	4620      	moveq	r0, r4
 800f39e:	bd38      	pop	{r3, r4, r5, pc}

0800f3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	468c      	mov	ip, r1
 800f3a6:	4605      	mov	r5, r0
 800f3a8:	4614      	mov	r4, r2
 800f3aa:	b942      	cbnz	r2, 800f3be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800f3ac:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800f3b0:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800f3b4:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3be:	7b50      	ldrb	r0, [r2, #13]
 800f3c0:	8893      	ldrh	r3, [r2, #4]
 800f3c2:	0106      	lsls	r6, r0, #4
 800f3c4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f3c8:	79e6      	ldrb	r6, [r4, #7]
 800f3ca:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800f3ce:	4316      	orrs	r6, r2
 800f3d0:	185a      	adds	r2, r3, r1
 800f3d2:	b291      	uxth	r1, r2
 800f3d4:	291d      	cmp	r1, #29
 800f3d6:	b2b7      	uxth	r7, r6
 800f3d8:	d87e      	bhi.n	800f4d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f3da:	2201      	movs	r2, #1
 800f3dc:	408a      	lsls	r2, r1
 800f3de:	498a      	ldr	r1, [pc, #552]	@ (800f608 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800f3e0:	420a      	tst	r2, r1
 800f3e2:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800f3e6:	d12d      	bne.n	800f444 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800f3e8:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800f3ec:	d074      	beq.n	800f4d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f3ee:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800f3f2:	4623      	mov	r3, r4
 800f3f4:	f104 0e08 	add.w	lr, r4, #8
 800f3f8:	4614      	mov	r4, r2
 800f3fa:	6818      	ldr	r0, [r3, #0]
 800f3fc:	6859      	ldr	r1, [r3, #4]
 800f3fe:	4694      	mov	ip, r2
 800f400:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f404:	3308      	adds	r3, #8
 800f406:	4573      	cmp	r3, lr
 800f408:	4662      	mov	r2, ip
 800f40a:	d1f6      	bne.n	800f3fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800f40c:	6818      	ldr	r0, [r3, #0]
 800f40e:	f8cc 0000 	str.w	r0, [ip]
 800f412:	889b      	ldrh	r3, [r3, #4]
 800f414:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f418:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800f41c:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800f420:	b2b3      	uxth	r3, r6
 800f422:	1aca      	subs	r2, r1, r3
 800f424:	b292      	uxth	r2, r2
 800f426:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800f42a:	10d2      	asrs	r2, r2, #3
 800f42c:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800f430:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800f434:	4302      	orrs	r2, r0
 800f436:	1bcf      	subs	r7, r1, r7
 800f438:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800f43c:	1afb      	subs	r3, r7, r3
 800f43e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800f442:	e7b9      	b.n	800f3b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f444:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800f448:	4623      	mov	r3, r4
 800f44a:	f104 0808 	add.w	r8, r4, #8
 800f44e:	4614      	mov	r4, r2
 800f450:	6818      	ldr	r0, [r3, #0]
 800f452:	6859      	ldr	r1, [r3, #4]
 800f454:	4696      	mov	lr, r2
 800f456:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f45a:	3308      	adds	r3, #8
 800f45c:	4543      	cmp	r3, r8
 800f45e:	4672      	mov	r2, lr
 800f460:	d1f6      	bne.n	800f450 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	f8ce 0000 	str.w	r0, [lr]
 800f468:	889b      	ldrh	r3, [r3, #4]
 800f46a:	f8ae 3004 	strh.w	r3, [lr, #4]
 800f46e:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800f470:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f474:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800f476:	f640 6333 	movw	r3, #3635	@ 0xe33
 800f47a:	4299      	cmp	r1, r3
 800f47c:	d111      	bne.n	800f4a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800f47e:	f8dc 3000 	ldr.w	r3, [ip]
 800f482:	4660      	mov	r0, ip
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	4798      	blx	r3
 800f488:	7b41      	ldrb	r1, [r0, #13]
 800f48a:	00cb      	lsls	r3, r1, #3
 800f48c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f490:	7a03      	ldrb	r3, [r0, #8]
 800f492:	4313      	orrs	r3, r2
 800f494:	064a      	lsls	r2, r1, #25
 800f496:	bf44      	itt	mi
 800f498:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f49c:	b21b      	sxthmi	r3, r3
 800f49e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800f4a2:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800f4a6:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800f4aa:	443b      	add	r3, r7
 800f4ac:	4433      	add	r3, r6
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800f4b4:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800f4b8:	10db      	asrs	r3, r3, #3
 800f4ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f4be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800f4c8:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800f4cc:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800f4d0:	1a9b      	subs	r3, r3, r2
 800f4d2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800f4d6:	e76f      	b.n	800f3b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f4d8:	f023 0204 	bic.w	r2, r3, #4
 800f4dc:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800f4e0:	428a      	cmp	r2, r1
 800f4e2:	d003      	beq.n	800f4ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800f4e4:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d137      	bne.n	800f55c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800f4ec:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	f104 0808 	add.w	r8, r4, #8
 800f4f6:	4634      	mov	r4, r6
 800f4f8:	6810      	ldr	r0, [r2, #0]
 800f4fa:	6851      	ldr	r1, [r2, #4]
 800f4fc:	46b6      	mov	lr, r6
 800f4fe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f502:	3208      	adds	r2, #8
 800f504:	4542      	cmp	r2, r8
 800f506:	4676      	mov	r6, lr
 800f508:	d1f6      	bne.n	800f4f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800f50a:	6810      	ldr	r0, [r2, #0]
 800f50c:	f8ce 0000 	str.w	r0, [lr]
 800f510:	8892      	ldrh	r2, [r2, #4]
 800f512:	f8ae 2004 	strh.w	r2, [lr, #4]
 800f516:	3b01      	subs	r3, #1
 800f518:	b29b      	uxth	r3, r3
 800f51a:	4662      	mov	r2, ip
 800f51c:	4621      	mov	r1, r4
 800f51e:	4628      	mov	r0, r5
 800f520:	f7ff ff33 	bl	800f38a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f524:	7b41      	ldrb	r1, [r0, #13]
 800f526:	00cb      	lsls	r3, r1, #3
 800f528:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f52c:	7a03      	ldrb	r3, [r0, #8]
 800f52e:	0648      	lsls	r0, r1, #25
 800f530:	ea43 0302 	orr.w	r3, r3, r2
 800f534:	bf44      	itt	mi
 800f536:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f53a:	b21b      	sxthmi	r3, r3
 800f53c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800f540:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800f544:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800f548:	005b      	lsls	r3, r3, #1
 800f54a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f54e:	4313      	orrs	r3, r2
 800f550:	115a      	asrs	r2, r3, #5
 800f552:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f556:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800f55a:	e046      	b.n	800f5ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800f55c:	00c2      	lsls	r2, r0, #3
 800f55e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800f562:	7a22      	ldrb	r2, [r4, #8]
 800f564:	430a      	orrs	r2, r1
 800f566:	0641      	lsls	r1, r0, #25
 800f568:	bf44      	itt	mi
 800f56a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800f56e:	b212      	sxthmi	r2, r2
 800f570:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800f574:	f640 6109 	movw	r1, #3593	@ 0xe09
 800f578:	f023 0210 	bic.w	r2, r3, #16
 800f57c:	428a      	cmp	r2, r1
 800f57e:	d003      	beq.n	800f588 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800f580:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f584:	4293      	cmp	r3, r2
 800f586:	d13d      	bne.n	800f604 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800f588:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800f58c:	f104 0808 	add.w	r8, r4, #8
 800f590:	4696      	mov	lr, r2
 800f592:	6820      	ldr	r0, [r4, #0]
 800f594:	6861      	ldr	r1, [r4, #4]
 800f596:	4616      	mov	r6, r2
 800f598:	c603      	stmia	r6!, {r0, r1}
 800f59a:	3408      	adds	r4, #8
 800f59c:	4544      	cmp	r4, r8
 800f59e:	4632      	mov	r2, r6
 800f5a0:	d1f7      	bne.n	800f592 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800f5a2:	6820      	ldr	r0, [r4, #0]
 800f5a4:	6030      	str	r0, [r6, #0]
 800f5a6:	88a1      	ldrh	r1, [r4, #4]
 800f5a8:	80b1      	strh	r1, [r6, #4]
 800f5aa:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800f5ae:	0076      	lsls	r6, r6, #1
 800f5b0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f5b4:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800f5b8:	4316      	orrs	r6, r2
 800f5ba:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	bf1a      	itte	ne
 800f5c2:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f5c6:	b29b      	uxthne	r3, r3
 800f5c8:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800f5cc:	4662      	mov	r2, ip
 800f5ce:	4671      	mov	r1, lr
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	4674      	mov	r4, lr
 800f5d4:	f7ff fed9 	bl	800f38a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f5d8:	7b43      	ldrb	r3, [r0, #13]
 800f5da:	7a82      	ldrb	r2, [r0, #10]
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	1af6      	subs	r6, r6, r3
 800f5e6:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800f5ea:	7b61      	ldrb	r1, [r4, #13]
 800f5ec:	00cb      	lsls	r3, r1, #3
 800f5ee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f5f2:	7a23      	ldrb	r3, [r4, #8]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	064a      	lsls	r2, r1, #25
 800f5f8:	bf44      	itt	mi
 800f5fa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f5fe:	b21b      	sxthmi	r3, r3
 800f600:	1bdb      	subs	r3, r3, r7
 800f602:	e71c      	b.n	800f43e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800f604:	2300      	movs	r3, #0
 800f606:	e7a6      	b.n	800f556 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800f608:	3fc00079 	.word	0x3fc00079

0800f60c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800f60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f610:	4604      	mov	r4, r0
 800f612:	b942      	cbnz	r2, 800f626 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800f614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f618:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800f61c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800f620:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800f624:	e047      	b.n	800f6b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f626:	7b51      	ldrb	r1, [r2, #13]
 800f628:	8893      	ldrh	r3, [r2, #4]
 800f62a:	010d      	lsls	r5, r1, #4
 800f62c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800f630:	79d5      	ldrb	r5, [r2, #7]
 800f632:	4305      	orrs	r5, r0
 800f634:	2d04      	cmp	r5, #4
 800f636:	bfcc      	ite	gt
 800f638:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800f63c:	f04f 0e01 	movle.w	lr, #1
 800f640:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800f644:	f200 80ab 	bhi.w	800f79e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800f648:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800f64c:	4283      	cmp	r3, r0
 800f64e:	d216      	bcs.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f650:	f240 605b 	movw	r0, #1627	@ 0x65b
 800f654:	4283      	cmp	r3, r0
 800f656:	d859      	bhi.n	800f70c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800f658:	f240 6057 	movw	r0, #1623	@ 0x657
 800f65c:	4283      	cmp	r3, r0
 800f65e:	d20e      	bcs.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f660:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f664:	d24a      	bcs.n	800f6fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800f666:	f240 604e 	movw	r0, #1614	@ 0x64e
 800f66a:	4283      	cmp	r3, r0
 800f66c:	d207      	bcs.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f66e:	f240 601a 	movw	r0, #1562	@ 0x61a
 800f672:	4283      	cmp	r3, r0
 800f674:	d02a      	beq.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f676:	d821      	bhi.n	800f6bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800f678:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800f67c:	d35b      	bcc.n	800f736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f67e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800f682:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f686:	f040 80d0 	bne.w	800f82a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f68a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800f68e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f692:	f040 80ca 	bne.w	800f82a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f696:	00cb      	lsls	r3, r1, #3
 800f698:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f69c:	7a13      	ldrb	r3, [r2, #8]
 800f69e:	0649      	lsls	r1, r1, #25
 800f6a0:	ea43 0300 	orr.w	r3, r3, r0
 800f6a4:	bf44      	itt	mi
 800f6a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f6aa:	b21b      	sxthmi	r3, r3
 800f6ac:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f6b0:	1b5d      	subs	r5, r3, r5
 800f6b2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6bc:	f240 604b 	movw	r0, #1611	@ 0x64b
 800f6c0:	4283      	cmp	r3, r0
 800f6c2:	d338      	bcc.n	800f736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f6c4:	f240 604c 	movw	r0, #1612	@ 0x64c
 800f6c8:	4283      	cmp	r3, r0
 800f6ca:	d9d8      	bls.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f6cc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800f6d0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800f6d4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f6d8:	f040 80f2 	bne.w	800f8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f6dc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f6e0:	f040 80ee 	bne.w	800f8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f6e4:	00cb      	lsls	r3, r1, #3
 800f6e6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f6ea:	7a13      	ldrb	r3, [r2, #8]
 800f6ec:	064e      	lsls	r6, r1, #25
 800f6ee:	ea43 0300 	orr.w	r3, r3, r0
 800f6f2:	bf44      	itt	mi
 800f6f4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f6f8:	b21b      	sxthmi	r3, r3
 800f6fa:	e7d9      	b.n	800f6b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800f6fc:	f240 6054 	movw	r0, #1620	@ 0x654
 800f700:	4283      	cmp	r3, r0
 800f702:	d8e3      	bhi.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f704:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f708:	d9e0      	bls.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f70a:	e7b8      	b.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f70c:	f240 6074 	movw	r0, #1652	@ 0x674
 800f710:	4283      	cmp	r3, r0
 800f712:	d0b4      	beq.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f714:	d82d      	bhi.n	800f772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800f716:	f240 605e 	movw	r0, #1630	@ 0x65e
 800f71a:	4283      	cmp	r3, r0
 800f71c:	d804      	bhi.n	800f728 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800f71e:	f240 605d 	movw	r0, #1629	@ 0x65d
 800f722:	4283      	cmp	r3, r0
 800f724:	d3d2      	bcc.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f726:	e7aa      	b.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f728:	f240 605f 	movw	r0, #1631	@ 0x65f
 800f72c:	4283      	cmp	r3, r0
 800f72e:	d0cd      	beq.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f730:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800f734:	d0a3      	beq.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f736:	00cb      	lsls	r3, r1, #3
 800f738:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f73c:	7a13      	ldrb	r3, [r2, #8]
 800f73e:	0649      	lsls	r1, r1, #25
 800f740:	ea43 0300 	orr.w	r3, r3, r0
 800f744:	bf44      	itt	mi
 800f746:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f74a:	b21b      	sxthmi	r3, r3
 800f74c:	1b5d      	subs	r5, r3, r5
 800f74e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f752:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f756:	7b53      	ldrb	r3, [r2, #13]
 800f758:	015b      	lsls	r3, r3, #5
 800f75a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f75e:	7993      	ldrb	r3, [r2, #6]
 800f760:	430b      	orrs	r3, r1
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	2105      	movs	r1, #5
 800f766:	fb93 f3f1 	sdiv	r3, r3, r1
 800f76a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800f76e:	440b      	add	r3, r1
 800f770:	e756      	b.n	800f620 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800f772:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800f776:	4283      	cmp	r3, r0
 800f778:	d809      	bhi.n	800f78e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800f77a:	f240 60df 	movw	r0, #1759	@ 0x6df
 800f77e:	4283      	cmp	r3, r0
 800f780:	f4bf af7d 	bcs.w	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f784:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800f788:	2b05      	cmp	r3, #5
 800f78a:	d8d4      	bhi.n	800f736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f78c:	e777      	b.n	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f78e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800f792:	4283      	cmp	r3, r0
 800f794:	d09a      	beq.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f796:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800f79a:	4283      	cmp	r3, r0
 800f79c:	e7ca      	b.n	800f734 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800f79e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800f7a2:	d22b      	bcs.n	800f7fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800f7a4:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800f7a8:	4283      	cmp	r3, r0
 800f7aa:	d28f      	bcs.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f7ac:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800f7b0:	4283      	cmp	r3, r0
 800f7b2:	d816      	bhi.n	800f7e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800f7b4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800f7b8:	4283      	cmp	r3, r0
 800f7ba:	f4bf af60 	bcs.w	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f7be:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800f7c2:	4283      	cmp	r3, r0
 800f7c4:	d80a      	bhi.n	800f7dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800f7c6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800f7ca:	4283      	cmp	r3, r0
 800f7cc:	f4bf af57 	bcs.w	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f7d0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800f7d4:	4283      	cmp	r3, r0
 800f7d6:	f43f af79 	beq.w	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f7da:	e7ac      	b.n	800f736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f7dc:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800f7e0:	e7f8      	b.n	800f7d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800f7e2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800f7e6:	4283      	cmp	r3, r0
 800f7e8:	d802      	bhi.n	800f7f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800f7ea:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800f7ee:	e798      	b.n	800f722 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800f7f0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800f7f4:	4283      	cmp	r3, r0
 800f7f6:	f47f af42 	bne.w	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f7fa:	e767      	b.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f7fc:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800f800:	4283      	cmp	r3, r0
 800f802:	f43f af63 	beq.w	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f806:	d802      	bhi.n	800f80e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800f808:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800f80c:	e7f2      	b.n	800f7f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800f80e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800f812:	4283      	cmp	r3, r0
 800f814:	d805      	bhi.n	800f822 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800f816:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800f81a:	4283      	cmp	r3, r0
 800f81c:	f4ff af2f 	bcc.w	800f67e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f820:	e754      	b.n	800f6cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f822:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800f826:	4283      	cmp	r3, r0
 800f828:	e7af      	b.n	800f78a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800f82a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f82e:	4617      	mov	r7, r2
 800f830:	f102 0808 	add.w	r8, r2, #8
 800f834:	4666      	mov	r6, ip
 800f836:	6838      	ldr	r0, [r7, #0]
 800f838:	6879      	ldr	r1, [r7, #4]
 800f83a:	46e6      	mov	lr, ip
 800f83c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f840:	3708      	adds	r7, #8
 800f842:	4547      	cmp	r7, r8
 800f844:	46f4      	mov	ip, lr
 800f846:	d1f6      	bne.n	800f836 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800f848:	6838      	ldr	r0, [r7, #0]
 800f84a:	f8ce 0000 	str.w	r0, [lr]
 800f84e:	88b9      	ldrh	r1, [r7, #4]
 800f850:	f8ae 1004 	strh.w	r1, [lr, #4]
 800f854:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f858:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f85c:	d009      	beq.n	800f872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800f85e:	7b51      	ldrb	r1, [r2, #13]
 800f860:	7992      	ldrb	r2, [r2, #6]
 800f862:	0149      	lsls	r1, r1, #5
 800f864:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f868:	4311      	orrs	r1, r2
 800f86a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f86e:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f872:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f876:	b2ad      	uxth	r5, r5
 800f878:	d00d      	beq.n	800f896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800f87a:	442b      	add	r3, r5
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f882:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f886:	10db      	asrs	r3, r3, #3
 800f888:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f88c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f890:	4313      	orrs	r3, r2
 800f892:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f896:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f89a:	00cb      	lsls	r3, r1, #3
 800f89c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f8a0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f8a4:	064f      	lsls	r7, r1, #25
 800f8a6:	ea43 0302 	orr.w	r3, r3, r2
 800f8aa:	bf44      	itt	mi
 800f8ac:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f8b0:	b21b      	sxthmi	r3, r3
 800f8b2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f8b6:	1b5b      	subs	r3, r3, r5
 800f8b8:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f8bc:	4632      	mov	r2, r6
 800f8be:	e6fa      	b.n	800f6b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f8c0:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f8c4:	4617      	mov	r7, r2
 800f8c6:	f102 0908 	add.w	r9, r2, #8
 800f8ca:	4666      	mov	r6, ip
 800f8cc:	6838      	ldr	r0, [r7, #0]
 800f8ce:	6879      	ldr	r1, [r7, #4]
 800f8d0:	46e0      	mov	r8, ip
 800f8d2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	454f      	cmp	r7, r9
 800f8da:	46c4      	mov	ip, r8
 800f8dc:	d1f6      	bne.n	800f8cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800f8de:	6838      	ldr	r0, [r7, #0]
 800f8e0:	f8c8 0000 	str.w	r0, [r8]
 800f8e4:	88b9      	ldrh	r1, [r7, #4]
 800f8e6:	f8a8 1004 	strh.w	r1, [r8, #4]
 800f8ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f8ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f8f2:	d009      	beq.n	800f908 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800f8f4:	7b51      	ldrb	r1, [r2, #13]
 800f8f6:	7992      	ldrb	r2, [r2, #6]
 800f8f8:	0149      	lsls	r1, r1, #5
 800f8fa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f8fe:	4311      	orrs	r1, r2
 800f900:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f904:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f908:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f90c:	d00e      	beq.n	800f92c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800f90e:	eba3 030e 	sub.w	r3, r3, lr
 800f912:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f916:	b29b      	uxth	r3, r3
 800f918:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f91c:	10db      	asrs	r3, r3, #3
 800f91e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f922:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f926:	4313      	orrs	r3, r2
 800f928:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f92c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f930:	00cb      	lsls	r3, r1, #3
 800f932:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f936:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f93a:	0648      	lsls	r0, r1, #25
 800f93c:	ea43 0302 	orr.w	r3, r3, r2
 800f940:	bf44      	itt	mi
 800f942:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f946:	b21b      	sxthmi	r3, r3
 800f948:	1b5d      	subs	r5, r3, r5
 800f94a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f94e:	e7b5      	b.n	800f8bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800f950 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800f950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f954:	461e      	mov	r6, r3
 800f956:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f958:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f95c:	4604      	mov	r4, r0
 800f95e:	4617      	mov	r7, r2
 800f960:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f964:	f7f3 fe70 	bl	8003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f968:	4605      	mov	r5, r0
 800f96a:	b918      	cbnz	r0, 800f974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800f96c:	6030      	str	r0, [r6, #0]
 800f96e:	4628      	mov	r0, r5
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	4601      	mov	r1, r0
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	4638      	mov	r0, r7
 800f97c:	4798      	blx	r3
 800f97e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f986:	4602      	mov	r2, r0
 800f988:	6030      	str	r0, [r6, #0]
 800f98a:	d213      	bcs.n	800f9b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f98c:	4643      	mov	r3, r8
 800f98e:	4639      	mov	r1, r7
 800f990:	4620      	mov	r0, r4
 800f992:	f7ff fe3b 	bl	800f60c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f996:	6030      	str	r0, [r6, #0]
 800f998:	6833      	ldr	r3, [r6, #0]
 800f99a:	b143      	cbz	r3, 800f9ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f99c:	7b5a      	ldrb	r2, [r3, #13]
 800f99e:	7a9b      	ldrb	r3, [r3, #10]
 800f9a0:	0052      	lsls	r2, r2, #1
 800f9a2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	bf0c      	ite	eq
 800f9aa:	2301      	moveq	r3, #1
 800f9ac:	2300      	movne	r3, #0
 800f9ae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f9b2:	e7dc      	b.n	800f96e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f9b4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800f9bc:	d804      	bhi.n	800f9c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f9be:	4639      	mov	r1, r7
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7ff fced 	bl	800f3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f9c6:	e7e6      	b.n	800f996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f9c8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0e3      	beq.n	800f998 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f9d0:	f640 1302 	movw	r3, #2306	@ 0x902
 800f9d4:	429d      	cmp	r5, r3
 800f9d6:	d1df      	bne.n	800f998 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f9d8:	4601      	mov	r1, r0
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7ff fcb2 	bl	800f344 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f9e0:	e7d9      	b.n	800f996 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f9e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800f9e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e6:	461e      	mov	r6, r3
 800f9e8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f9ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	4617      	mov	r7, r2
 800f9f2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f9f6:	f7f3 fe27 	bl	8003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	b918      	cbnz	r0, 800fa06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800f9fe:	6030      	str	r0, [r6, #0]
 800fa00:	4628      	mov	r0, r5
 800fa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	4601      	mov	r1, r0
 800fa0a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800fa0e:	4638      	mov	r0, r7
 800fa10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fa14:	47c8      	blx	r9
 800fa16:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800fa1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa1e:	4602      	mov	r2, r0
 800fa20:	6030      	str	r0, [r6, #0]
 800fa22:	d213      	bcs.n	800fa4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800fa24:	4643      	mov	r3, r8
 800fa26:	4639      	mov	r1, r7
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f7ff fdef 	bl	800f60c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fa2e:	6030      	str	r0, [r6, #0]
 800fa30:	6833      	ldr	r3, [r6, #0]
 800fa32:	b143      	cbz	r3, 800fa46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800fa34:	7b5a      	ldrb	r2, [r3, #13]
 800fa36:	7a9b      	ldrb	r3, [r3, #10]
 800fa38:	0052      	lsls	r2, r2, #1
 800fa3a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	bf0c      	ite	eq
 800fa42:	2301      	moveq	r3, #1
 800fa44:	2300      	movne	r3, #0
 800fa46:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800fa4a:	e7d9      	b.n	800fa00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800fa4c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa54:	d804      	bhi.n	800fa60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800fa56:	4639      	mov	r1, r7
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f7ff fca1 	bl	800f3a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800fa5e:	e7e6      	b.n	800fa2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800fa60:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d0e3      	beq.n	800fa30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800fa68:	f640 1302 	movw	r3, #2306	@ 0x902
 800fa6c:	429d      	cmp	r5, r3
 800fa6e:	d1df      	bne.n	800fa30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800fa70:	4601      	mov	r1, r0
 800fa72:	4620      	mov	r0, r4
 800fa74:	f7ff fc66 	bl	800f344 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fa78:	e7d9      	b.n	800fa2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800fa7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800fa7a:	b510      	push	{r4, lr}
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800fa82:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800fa84:	b1f1      	cbz	r1, 800fac4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800fa86:	2b0a      	cmp	r3, #10
 800fa88:	d02f      	beq.n	800faea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800fa8a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800fa8c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800fa90:	3901      	subs	r1, #1
 800fa92:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800fa94:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800fa98:	1c51      	adds	r1, r2, #1
 800fa9a:	b289      	uxth	r1, r1
 800fa9c:	2901      	cmp	r1, #1
 800fa9e:	bf84      	itt	hi
 800faa0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800faa4:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800faa6:	f103 0201 	add.w	r2, r3, #1
 800faaa:	8722      	strh	r2, [r4, #56]	@ 0x38
 800faac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800faae:	bf98      	it	ls
 800fab0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800fab2:	4413      	add	r3, r2
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	2b09      	cmp	r3, #9
 800fab8:	bf88      	it	hi
 800faba:	3b0a      	subhi	r3, #10
 800fabc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fac0:	8458      	strh	r0, [r3, #34]	@ 0x22
 800fac2:	e7dc      	b.n	800fa7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800fac4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800fac6:	2b0a      	cmp	r3, #10
 800fac8:	d00f      	beq.n	800faea <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800faca:	4620      	mov	r0, r4
 800facc:	f7fe ff8e 	bl	800e9ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800fad0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	8722      	strh	r2, [r4, #56]	@ 0x38
 800fad6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800fad8:	4413      	add	r3, r2
 800fada:	b29b      	uxth	r3, r3
 800fadc:	2b09      	cmp	r3, #9
 800fade:	bf88      	it	hi
 800fae0:	3b0a      	subhi	r3, #10
 800fae2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fae6:	8458      	strh	r0, [r3, #34]	@ 0x22
 800fae8:	e7ec      	b.n	800fac4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800faea:	bd10      	pop	{r4, pc}

0800faec <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800faec:	b538      	push	{r3, r4, r5, lr}
 800faee:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800faf0:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800faf4:	4604      	mov	r4, r0
 800faf6:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800faf8:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800fafa:	3a01      	subs	r2, #1
 800fafc:	8702      	strh	r2, [r0, #56]	@ 0x38
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	b292      	uxth	r2, r2
 800fb02:	2a09      	cmp	r2, #9
 800fb04:	bf86      	itte	hi
 800fb06:	3b09      	subhi	r3, #9
 800fb08:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800fb0a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800fb0c:	f7ff ffb5 	bl	800fa7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800fb10:	8c23      	ldrh	r3, [r4, #32]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	bf9c      	itt	ls
 800fb16:	3301      	addls	r3, #1
 800fb18:	8423      	strhls	r3, [r4, #32]
 800fb1a:	8be3      	ldrh	r3, [r4, #30]
 800fb1c:	b90b      	cbnz	r3, 800fb22 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800fb1e:	2302      	movs	r3, #2
 800fb20:	83e3      	strh	r3, [r4, #30]
 800fb22:	8be3      	ldrh	r3, [r4, #30]
 800fb24:	3b01      	subs	r3, #1
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	83e3      	strh	r3, [r4, #30]
 800fb2a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fb2e:	4628      	mov	r0, r5
 800fb30:	8365      	strh	r5, [r4, #26]
 800fb32:	bd38      	pop	{r3, r4, r5, pc}

0800fb34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800fb34:	428a      	cmp	r2, r1
 800fb36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb3a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800fb3c:	d931      	bls.n	800fba2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800fb3e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800fb40:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800fb44:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800fb48:	19ee      	adds	r6, r5, r7
 800fb4a:	1a54      	subs	r4, r2, r1
 800fb4c:	3e01      	subs	r6, #1
 800fb4e:	fa1f fe84 	uxth.w	lr, r4
 800fb52:	b2b4      	uxth	r4, r6
 800fb54:	eba4 090e 	sub.w	r9, r4, lr
 800fb58:	fa1f f989 	uxth.w	r9, r9
 800fb5c:	2c09      	cmp	r4, #9
 800fb5e:	4626      	mov	r6, r4
 800fb60:	bf88      	it	hi
 800fb62:	f1a4 060a 	subhi.w	r6, r4, #10
 800fb66:	f1bc 0f00 	cmp.w	ip, #0
 800fb6a:	bf08      	it	eq
 800fb6c:	f04f 0c02 	moveq.w	ip, #2
 800fb70:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800fb74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb78:	fa1f fc8c 	uxth.w	ip, ip
 800fb7c:	3c01      	subs	r4, #1
 800fb7e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800fb82:	b2a4      	uxth	r4, r4
 800fb84:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800fb88:	454c      	cmp	r4, r9
 800fb8a:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800fb8e:	d1e5      	bne.n	800fb5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800fb90:	eba5 050e 	sub.w	r5, r5, lr
 800fb94:	eb0e 0408 	add.w	r4, lr, r8
 800fb98:	8705      	strh	r5, [r0, #56]	@ 0x38
 800fb9a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800fb9e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800fba2:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800fba4:	1a64      	subs	r4, r4, r1
 800fba6:	4439      	add	r1, r7
 800fba8:	b289      	uxth	r1, r1
 800fbaa:	2909      	cmp	r1, #9
 800fbac:	bf88      	it	hi
 800fbae:	390a      	subhi	r1, #10
 800fbb0:	8704      	strh	r4, [r0, #56]	@ 0x38
 800fbb2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800fbb4:	250a      	movs	r5, #10
 800fbb6:	b18a      	cbz	r2, 800fbdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800fbb8:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	b292      	uxth	r2, r2
 800fbbe:	3101      	adds	r1, #1
 800fbc0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800fbc4:	8701      	strh	r1, [r0, #56]	@ 0x38
 800fbc6:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800fbc8:	b901      	cbnz	r1, 800fbcc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800fbca:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800fbcc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800fbce:	3901      	subs	r1, #1
 800fbd0:	b289      	uxth	r1, r1
 800fbd2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800fbd4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800fbd8:	844c      	strh	r4, [r1, #34]	@ 0x22
 800fbda:	e7ec      	b.n	800fbb6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800fbdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe0:	f7ff bf4b 	b.w	800fa7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800fbe4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	2500      	movs	r5, #0
 800fbe8:	4295      	cmp	r5, r2
 800fbea:	d011      	beq.n	800fc10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800fbec:	8bc4      	ldrh	r4, [r0, #30]
 800fbee:	f831 6b02 	ldrh.w	r6, [r1], #2
 800fbf2:	4414      	add	r4, r2
 800fbf4:	3c01      	subs	r4, #1
 800fbf6:	1b64      	subs	r4, r4, r5
 800fbf8:	b2a4      	uxth	r4, r4
 800fbfa:	2c01      	cmp	r4, #1
 800fbfc:	bf88      	it	hi
 800fbfe:	3c02      	subhi	r4, #2
 800fc00:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800fc04:	8b64      	ldrh	r4, [r4, #26]
 800fc06:	42b4      	cmp	r4, r6
 800fc08:	d117      	bne.n	800fc3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800fc0a:	3501      	adds	r5, #1
 800fc0c:	b2ad      	uxth	r5, r5
 800fc0e:	e7eb      	b.n	800fbe8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800fc10:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800fc14:	2400      	movs	r4, #0
 800fc16:	4413      	add	r3, r2
 800fc18:	b2a2      	uxth	r2, r4
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	da0f      	bge.n	800fc3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800fc1e:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800fc20:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800fc24:	4432      	add	r2, r6
 800fc26:	b292      	uxth	r2, r2
 800fc28:	2a09      	cmp	r2, #9
 800fc2a:	bf88      	it	hi
 800fc2c:	3a0a      	subhi	r2, #10
 800fc2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800fc32:	3401      	adds	r4, #1
 800fc34:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800fc36:	42aa      	cmp	r2, r5
 800fc38:	d0ee      	beq.n	800fc18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	bd70      	pop	{r4, r5, r6, pc}
 800fc3e:	2001      	movs	r0, #1
 800fc40:	e7fc      	b.n	800fc3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800fc42 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800fc42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc46:	4605      	mov	r5, r0
 800fc48:	4616      	mov	r6, r2
 800fc4a:	1c8c      	adds	r4, r1, #2
 800fc4c:	8809      	ldrh	r1, [r1, #0]
 800fc4e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800fc52:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800fc56:	42b3      	cmp	r3, r6
 800fc58:	d124      	bne.n	800fca4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800fc5a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800fc5e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800fc62:	f001 070f 	and.w	r7, r1, #15
 800fc66:	f8cd 8000 	str.w	r8, [sp]
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	4652      	mov	r2, sl
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4628      	mov	r0, r5
 800fc72:	f7ff ffb7 	bl	800fbe4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800fc76:	4683      	mov	fp, r0
 800fc78:	b168      	cbz	r0, 800fc96 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800fc7a:	eb0a 0109 	add.w	r1, sl, r9
 800fc7e:	4441      	add	r1, r8
 800fc80:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800fc84:	463a      	mov	r2, r7
 800fc86:	4649      	mov	r1, r9
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f7ff ff53 	bl	800fb34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800fc8e:	4658      	mov	r0, fp
 800fc90:	b003      	add	sp, #12
 800fc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc96:	eb07 010a 	add.w	r1, r7, sl
 800fc9a:	4449      	add	r1, r9
 800fc9c:	4441      	add	r1, r8
 800fc9e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800fca2:	e7d2      	b.n	800fc4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800fca4:	f04f 0b00 	mov.w	fp, #0
 800fca8:	e7f1      	b.n	800fc8e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800fcaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800fcaa:	b570      	push	{r4, r5, r6, lr}
 800fcac:	8810      	ldrh	r0, [r2, #0]
 800fcae:	4298      	cmp	r0, r3
 800fcb0:	d817      	bhi.n	800fce2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fcb2:	1e48      	subs	r0, r1, #1
 800fcb4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800fcb8:	4298      	cmp	r0, r3
 800fcba:	d312      	bcc.n	800fce2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	428c      	cmp	r4, r1
 800fcc0:	d20f      	bcs.n	800fce2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800fcc2:	1860      	adds	r0, r4, r1
 800fcc4:	1040      	asrs	r0, r0, #1
 800fcc6:	0085      	lsls	r5, r0, #2
 800fcc8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800fccc:	42b3      	cmp	r3, r6
 800fcce:	d902      	bls.n	800fcd6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	b284      	uxth	r4, r0
 800fcd4:	e7f3      	b.n	800fcbe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fcd6:	d201      	bcs.n	800fcdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800fcd8:	b281      	uxth	r1, r0
 800fcda:	e7f0      	b.n	800fcbe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fcdc:	442a      	add	r2, r5
 800fcde:	8850      	ldrh	r0, [r2, #2]
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
 800fce2:	2000      	movs	r0, #0
 800fce4:	e7fc      	b.n	800fce0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800fce6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800fce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcea:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800fcec:	886f      	ldrh	r7, [r5, #2]
 800fcee:	4604      	mov	r4, r0
 800fcf0:	087f      	lsrs	r7, r7, #1
 800fcf2:	260b      	movs	r6, #11
 800fcf4:	3e01      	subs	r6, #1
 800fcf6:	d013      	beq.n	800fd20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800fcf8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800fcfa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fcfe:	462a      	mov	r2, r5
 800fd00:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800fd04:	4639      	mov	r1, r7
 800fd06:	4643      	mov	r3, r8
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f7ff ffce 	bl	800fcaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800fd0e:	b138      	cbz	r0, 800fd20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800fd10:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800fd14:	4642      	mov	r2, r8
 800fd16:	4620      	mov	r0, r4
 800fd18:	f7ff ff93 	bl	800fc42 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	d1e9      	bne.n	800fcf4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800fd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	694a      	ldr	r2, [r1, #20]
 800fd28:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800fd2a:	684b      	ldr	r3, [r1, #4]
 800fd2c:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800fd2e:	1b54      	subs	r4, r2, r5
 800fd30:	f000 8106 	beq.w	800ff40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800fd34:	1b9b      	subs	r3, r3, r6
 800fd36:	d003      	beq.n	800fd40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800fd38:	4363      	muls	r3, r4
 800fd3a:	2210      	movs	r2, #16
 800fd3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd40:	680c      	ldr	r4, [r1, #0]
 800fd42:	698a      	ldr	r2, [r1, #24]
 800fd44:	1b65      	subs	r5, r4, r5
 800fd46:	f000 80fd 	beq.w	800ff44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800fd4a:	1b92      	subs	r2, r2, r6
 800fd4c:	d003      	beq.n	800fd56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800fd4e:	436a      	muls	r2, r5
 800fd50:	2410      	movs	r4, #16
 800fd52:	fb92 f2f4 	sdiv	r2, r2, r4
 800fd56:	1a9b      	subs	r3, r3, r2
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800ff80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800fd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd68:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fd6c:	460a      	mov	r2, r1
 800fd6e:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800fd72:	4603      	mov	r3, r0
 800fd74:	f100 040c 	add.w	r4, r0, #12
 800fd78:	eeb1 6a43 	vneg.f32	s12, s6
 800fd7c:	edd2 7a02 	vldr	s15, [r2, #8]
 800fd80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fd84:	3214      	adds	r2, #20
 800fd86:	ece3 6a01 	vstmia	r3!, {s13}
 800fd8a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800fd8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fd92:	429c      	cmp	r4, r3
 800fd94:	edc3 7a02 	vstr	s15, [r3, #8]
 800fd98:	ed52 7a01 	vldr	s15, [r2, #-4]
 800fd9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fda0:	edc3 7a05 	vstr	s15, [r3, #20]
 800fda4:	d1ea      	bne.n	800fd7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800fda6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fda8:	698b      	ldr	r3, [r1, #24]
 800fdaa:	edd0 4a02 	vldr	s9, [r0, #8]
 800fdae:	edd0 3a00 	vldr	s7, [r0]
 800fdb2:	edd0 6a01 	vldr	s13, [r0, #4]
 800fdb6:	ed90 5a05 	vldr	s10, [r0, #20]
 800fdba:	ed90 2a03 	vldr	s4, [r0, #12]
 800fdbe:	edd0 5a04 	vldr	s11, [r0, #16]
 800fdc2:	ed90 1a07 	vldr	s2, [r0, #28]
 800fdc6:	edd0 2a06 	vldr	s5, [r0, #24]
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	ee07 3a90 	vmov	s15, r3
 800fdd0:	684b      	ldr	r3, [r1, #4]
 800fdd2:	1a9b      	subs	r3, r3, r2
 800fdd4:	ee07 3a10 	vmov	s14, r3
 800fdd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fddc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800fde0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fde4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800fde8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fdec:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800fdf0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fdf4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800fdf8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fdfc:	ee32 5a45 	vsub.f32	s10, s4, s10
 800fe00:	ee67 7a83 	vmul.f32	s15, s15, s6
 800fe04:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800fe08:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fe0a:	694a      	ldr	r2, [r1, #20]
 800fe0c:	1b13      	subs	r3, r2, r4
 800fe0e:	ee07 3a10 	vmov	s14, r3
 800fe12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe16:	680b      	ldr	r3, [r1, #0]
 800fe18:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe1c:	1b1b      	subs	r3, r3, r4
 800fe1e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800fe22:	ee07 3a10 	vmov	s14, r3
 800fe26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe2e:	eee6 4a87 	vfma.f32	s9, s13, s14
 800fe32:	ee64 4a86 	vmul.f32	s9, s9, s12
 800fe36:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800fe3a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fe3c:	698b      	ldr	r3, [r1, #24]
 800fe3e:	1a9b      	subs	r3, r3, r2
 800fe40:	ee06 3a90 	vmov	s13, r3
 800fe44:	684b      	ldr	r3, [r1, #4]
 800fe46:	1a9b      	subs	r3, r3, r2
 800fe48:	ee07 3a10 	vmov	s14, r3
 800fe4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fe50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe54:	ee66 6a84 	vmul.f32	s13, s13, s8
 800fe58:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe5c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800fe60:	eee5 6a87 	vfma.f32	s13, s11, s14
 800fe64:	ee66 6a83 	vmul.f32	s13, s13, s6
 800fe68:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800fe6c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fe6e:	694a      	ldr	r2, [r1, #20]
 800fe70:	1b13      	subs	r3, r2, r4
 800fe72:	ee07 3a10 	vmov	s14, r3
 800fe76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe7a:	680b      	ldr	r3, [r1, #0]
 800fe7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe80:	1b1b      	subs	r3, r3, r4
 800fe82:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800fe86:	ee07 3a10 	vmov	s14, r3
 800fe8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe92:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fe96:	edd0 5a08 	vldr	s11, [r0, #32]
 800fe9a:	ee25 5a06 	vmul.f32	s10, s10, s12
 800fe9e:	ee31 1a65 	vsub.f32	s2, s2, s11
 800fea2:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800fea6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fea8:	698b      	ldr	r3, [r1, #24]
 800feaa:	1a9b      	subs	r3, r3, r2
 800feac:	ee07 3a10 	vmov	s14, r3
 800feb0:	684b      	ldr	r3, [r1, #4]
 800feb2:	1a9b      	subs	r3, r3, r2
 800feb4:	ee01 3a90 	vmov	s3, r3
 800feb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800febc:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800fec0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fec4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800fec8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800fecc:	ee61 1a84 	vmul.f32	s3, s3, s8
 800fed0:	eea1 7a21 	vfma.f32	s14, s2, s3
 800fed4:	ee27 7a03 	vmul.f32	s14, s14, s6
 800fed8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800fedc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fede:	694a      	ldr	r2, [r1, #20]
 800fee0:	1b13      	subs	r3, r2, r4
 800fee2:	ee03 3a10 	vmov	s6, r3
 800fee6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800feea:	680b      	ldr	r3, [r1, #0]
 800feec:	ee23 3a04 	vmul.f32	s6, s6, s8
 800fef0:	1b1b      	subs	r3, r3, r4
 800fef2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800fef6:	ee03 3a10 	vmov	s6, r3
 800fefa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800fefe:	ee23 4a04 	vmul.f32	s8, s6, s8
 800ff02:	eee1 5a04 	vfma.f32	s11, s2, s8
 800ff06:	ee25 6a86 	vmul.f32	s12, s11, s12
 800ff0a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800ff0e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800ff12:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800ff16:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800ff1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1e:	dd13      	ble.n	800ff48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800ff20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff24:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800ff28:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800ff2a:	eee3 7a87 	vfma.f32	s15, s7, s14
 800ff2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	dd15      	ble.n	800ff64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800ff38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff3c:	6403      	str	r3, [r0, #64]	@ 0x40
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	4623      	mov	r3, r4
 800ff42:	e6fd      	b.n	800fd40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800ff44:	462a      	mov	r2, r5
 800ff46:	e706      	b.n	800fd56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800ff48:	d502      	bpl.n	800ff50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800ff4a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800ff4e:	e7e9      	b.n	800ff24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800ff50:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800ff54:	eea3 2a85 	vfma.f32	s4, s7, s10
 800ff58:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800ff5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff60:	dade      	bge.n	800ff20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800ff62:	e7f2      	b.n	800ff4a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800ff64:	d502      	bpl.n	800ff6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800ff66:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800ff6a:	e7e7      	b.n	800ff3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800ff6c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800ff70:	eee3 4a86 	vfma.f32	s9, s7, s12
 800ff74:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800ff78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7c:	dadc      	bge.n	800ff38 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800ff7e:	e7f2      	b.n	800ff66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800ff80:	3d800000 	.word	0x3d800000

0800ff84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800ff84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff88:	2714      	movs	r7, #20
 800ff8a:	435f      	muls	r7, r3
 800ff8c:	eb02 0c07 	add.w	ip, r2, r7
 800ff90:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800ff94:	f115 0e0f 	adds.w	lr, r5, #15
 800ff98:	f100 80a2 	bmi.w	80100e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800ff9c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800ffa0:	9c08      	ldr	r4, [sp, #32]
 800ffa2:	f8c0 e014 	str.w	lr, [r0, #20]
 800ffa6:	2614      	movs	r6, #20
 800ffa8:	4366      	muls	r6, r4
 800ffaa:	eb02 0806 	add.w	r8, r2, r6
 800ffae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ffb2:	f115 040f 	adds.w	r4, r5, #15
 800ffb6:	f100 809f 	bmi.w	80100f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800ffba:	1124      	asrs	r4, r4, #4
 800ffbc:	eba4 040e 	sub.w	r4, r4, lr
 800ffc0:	6184      	str	r4, [r0, #24]
 800ffc2:	2c00      	cmp	r4, #0
 800ffc4:	f000 808a 	beq.w	80100dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800ffc8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800ffcc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ffd0:	5995      	ldr	r5, [r2, r6]
 800ffd2:	eba4 0809 	sub.w	r8, r4, r9
 800ffd6:	59d4      	ldr	r4, [r2, r7]
 800ffd8:	eba5 0a04 	sub.w	sl, r5, r4
 800ffdc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800ffe0:	fb0e fe05 	mul.w	lr, lr, r5
 800ffe4:	fb0a ee19 	mls	lr, sl, r9, lr
 800ffe8:	fb08 e404 	mla	r4, r8, r4, lr
 800ffec:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800fff0:	3c01      	subs	r4, #1
 800fff2:	19a4      	adds	r4, r4, r6
 800fff4:	f100 808c 	bmi.w	8010110 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800fff8:	fb94 fef6 	sdiv	lr, r4, r6
 800fffc:	f8c0 e000 	str.w	lr, [r0]
 8010000:	fb06 441e 	mls	r4, r6, lr, r4
 8010004:	6104      	str	r4, [r0, #16]
 8010006:	2d00      	cmp	r5, #0
 8010008:	f2c0 8095 	blt.w	8010136 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801000c:	fb95 f4f6 	sdiv	r4, r5, r6
 8010010:	6044      	str	r4, [r0, #4]
 8010012:	fb06 5514 	mls	r5, r6, r4, r5
 8010016:	6085      	str	r5, [r0, #8]
 8010018:	60c6      	str	r6, [r0, #12]
 801001a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801001e:	6945      	ldr	r5, [r0, #20]
 8010020:	59d2      	ldr	r2, [r2, r7]
 8010022:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8010158 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8010026:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801002a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801002e:	ee07 4a10 	vmov	s14, r4
 8010032:	6804      	ldr	r4, [r0, #0]
 8010034:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8010038:	ee07 2a90 	vmov	s15, r2
 801003c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010044:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010048:	ee27 7a26 	vmul.f32	s14, s14, s13
 801004c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010050:	edd3 6a00 	vldr	s13, [r3]
 8010054:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010058:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801005c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010060:	edc0 6a07 	vstr	s13, [r0, #28]
 8010064:	edd0 6a01 	vldr	s13, [r0, #4]
 8010068:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801006c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8010070:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010074:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010078:	ed80 6a08 	vstr	s12, [r0, #32]
 801007c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801007e:	6242      	str	r2, [r0, #36]	@ 0x24
 8010080:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8010084:	ed93 6a03 	vldr	s12, [r3, #12]
 8010088:	eea5 6a87 	vfma.f32	s12, s11, s14
 801008c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8010090:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010094:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8010098:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801009c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80100a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80100a4:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80100a8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80100aa:	6302      	str	r2, [r0, #48]	@ 0x30
 80100ac:	ed93 6a06 	vldr	s12, [r3, #24]
 80100b0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80100b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80100b8:	eeb0 7a46 	vmov.f32	s14, s12
 80100bc:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80100c0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80100c4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80100c8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80100cc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80100d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80100d4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80100d8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80100da:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80100dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e0:	f1c5 0501 	rsb	r5, r5, #1
 80100e4:	f015 050f 	ands.w	r5, r5, #15
 80100e8:	bf18      	it	ne
 80100ea:	2501      	movne	r5, #1
 80100ec:	2410      	movs	r4, #16
 80100ee:	fb9e fef4 	sdiv	lr, lr, r4
 80100f2:	ebae 0e05 	sub.w	lr, lr, r5
 80100f6:	e753      	b.n	800ffa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80100f8:	f1c5 0501 	rsb	r5, r5, #1
 80100fc:	f015 050f 	ands.w	r5, r5, #15
 8010100:	bf18      	it	ne
 8010102:	2501      	movne	r5, #1
 8010104:	f04f 0910 	mov.w	r9, #16
 8010108:	fb94 f4f9 	sdiv	r4, r4, r9
 801010c:	1b64      	subs	r4, r4, r5
 801010e:	e755      	b.n	800ffbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8010110:	4264      	negs	r4, r4
 8010112:	fb94 fef6 	sdiv	lr, r4, r6
 8010116:	f1ce 0800 	rsb	r8, lr, #0
 801011a:	fb06 441e 	mls	r4, r6, lr, r4
 801011e:	f8c0 8000 	str.w	r8, [r0]
 8010122:	6104      	str	r4, [r0, #16]
 8010124:	2c00      	cmp	r4, #0
 8010126:	f43f af6e 	beq.w	8010006 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801012a:	ea6f 0e0e 	mvn.w	lr, lr
 801012e:	f8c0 e000 	str.w	lr, [r0]
 8010132:	1b34      	subs	r4, r6, r4
 8010134:	e766      	b.n	8010004 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8010136:	426d      	negs	r5, r5
 8010138:	fb95 f4f6 	sdiv	r4, r5, r6
 801013c:	f1c4 0e00 	rsb	lr, r4, #0
 8010140:	fb06 5514 	mls	r5, r6, r4, r5
 8010144:	f8c0 e004 	str.w	lr, [r0, #4]
 8010148:	6085      	str	r5, [r0, #8]
 801014a:	2d00      	cmp	r5, #0
 801014c:	f43f af64 	beq.w	8010018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8010150:	43e4      	mvns	r4, r4
 8010152:	6044      	str	r4, [r0, #4]
 8010154:	1b75      	subs	r5, r6, r5
 8010156:	e75e      	b.n	8010016 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8010158:	3d800000 	.word	0x3d800000

0801015c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801015c:	4602      	mov	r2, r0
 801015e:	b148      	cbz	r0, 8010174 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8010160:	2300      	movs	r3, #0
 8010162:	b298      	uxth	r0, r3
 8010164:	3301      	adds	r3, #1
 8010166:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801016a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801016e:	2900      	cmp	r1, #0
 8010170:	d1f7      	bne.n	8010162 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8010172:	4770      	bx	lr
 8010174:	4770      	bx	lr

08010176 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8010176:	b530      	push	{r4, r5, lr}
 8010178:	4604      	mov	r4, r0
 801017a:	b159      	cbz	r1, 8010194 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801017c:	b148      	cbz	r0, 8010192 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801017e:	2300      	movs	r3, #0
 8010180:	b298      	uxth	r0, r3
 8010182:	4282      	cmp	r2, r0
 8010184:	d905      	bls.n	8010192 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8010186:	5ccd      	ldrb	r5, [r1, r3]
 8010188:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801018c:	3301      	adds	r3, #1
 801018e:	2d00      	cmp	r5, #0
 8010190:	d1f6      	bne.n	8010180 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8010192:	bd30      	pop	{r4, r5, pc}
 8010194:	4608      	mov	r0, r1
 8010196:	e7fc      	b.n	8010192 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08010198 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8010198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019a:	b08b      	sub	sp, #44	@ 0x2c
 801019c:	468c      	mov	ip, r1
 801019e:	2100      	movs	r1, #0
 80101a0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80101a4:	4604      	mov	r4, r0
 80101a6:	261f      	movs	r6, #31
 80101a8:	af01      	add	r7, sp, #4
 80101aa:	fb94 fef3 	sdiv	lr, r4, r3
 80101ae:	fb03 441e 	mls	r4, r3, lr, r4
 80101b2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80101b6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80101ba:	b2ec      	uxtb	r4, r5
 80101bc:	2d09      	cmp	r5, #9
 80101be:	bfd4      	ite	le
 80101c0:	3430      	addle	r4, #48	@ 0x30
 80101c2:	3457      	addgt	r4, #87	@ 0x57
 80101c4:	b2e4      	uxtb	r4, r4
 80101c6:	55bc      	strb	r4, [r7, r6]
 80101c8:	4674      	mov	r4, lr
 80101ca:	1e71      	subs	r1, r6, #1
 80101cc:	b974      	cbnz	r4, 80101ec <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	da05      	bge.n	80101de <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80101d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80101d4:	4419      	add	r1, r3
 80101d6:	232d      	movs	r3, #45	@ 0x2d
 80101d8:	f801 3c24 	strb.w	r3, [r1, #-36]
 80101dc:	1eb1      	subs	r1, r6, #2
 80101de:	3101      	adds	r1, #1
 80101e0:	4439      	add	r1, r7
 80101e2:	4660      	mov	r0, ip
 80101e4:	f7ff ffc7 	bl	8010176 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80101e8:	b00b      	add	sp, #44	@ 0x2c
 80101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ec:	460e      	mov	r6, r1
 80101ee:	e7dc      	b.n	80101aa <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080101f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80101f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101f2:	b08b      	sub	sp, #44	@ 0x2c
 80101f4:	468c      	mov	ip, r1
 80101f6:	2100      	movs	r1, #0
 80101f8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80101fc:	ae01      	add	r6, sp, #4
 80101fe:	211f      	movs	r1, #31
 8010200:	fbb0 f7f3 	udiv	r7, r0, r3
 8010204:	fb03 0517 	mls	r5, r3, r7, r0
 8010208:	b2ec      	uxtb	r4, r5
 801020a:	2d09      	cmp	r5, #9
 801020c:	bfd4      	ite	le
 801020e:	3430      	addle	r4, #48	@ 0x30
 8010210:	3457      	addgt	r4, #87	@ 0x57
 8010212:	b2e4      	uxtb	r4, r4
 8010214:	558c      	strb	r4, [r1, r6]
 8010216:	4638      	mov	r0, r7
 8010218:	1e4c      	subs	r4, r1, #1
 801021a:	b92f      	cbnz	r7, 8010228 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801021c:	4431      	add	r1, r6
 801021e:	4660      	mov	r0, ip
 8010220:	f7ff ffa9 	bl	8010176 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8010224:	b00b      	add	sp, #44	@ 0x2c
 8010226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010228:	4621      	mov	r1, r4
 801022a:	e7e9      	b.n	8010200 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801022c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	4691      	mov	r9, r2
 8010232:	b085      	sub	sp, #20
 8010234:	6802      	ldr	r2, [r0, #0]
 8010236:	9201      	str	r2, [sp, #4]
 8010238:	4688      	mov	r8, r1
 801023a:	4683      	mov	fp, r0
 801023c:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8010240:	9103      	str	r1, [sp, #12]
 8010242:	4610      	mov	r0, r2
 8010244:	461c      	mov	r4, r3
 8010246:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801024a:	9302      	str	r3, [sp, #8]
 801024c:	f7ff ff86 	bl	801015c <_ZN8touchgfx7Unicode6strlenEPKt>
 8010250:	f1b8 0f00 	cmp.w	r8, #0
 8010254:	bf0c      	ite	eq
 8010256:	4684      	moveq	ip, r0
 8010258:	f100 0c01 	addne.w	ip, r0, #1
 801025c:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8010260:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8010264:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010266:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8010268:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801026c:	9903      	ldr	r1, [sp, #12]
 801026e:	fa1f fc8c 	uxth.w	ip, ip
 8010272:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010276:	d041      	beq.n	80102fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8010278:	d834      	bhi.n	80102e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801027a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801027e:	d059      	beq.n	8010334 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8010280:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8010284:	d03a      	beq.n	80102fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8010286:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801028a:	d034      	beq.n	80102f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801028c:	2400      	movs	r4, #0
 801028e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8010292:	3a01      	subs	r2, #1
 8010294:	b169      	cbz	r1, 80102b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010296:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010298:	458c      	cmp	ip, r1
 801029a:	da09      	bge.n	80102b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801029c:	eba1 010c 	sub.w	r1, r1, ip
 80102a0:	b289      	uxth	r1, r1
 80102a2:	b933      	cbnz	r3, 80102b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80102a4:	2e00      	cmp	r6, #0
 80102a6:	d051      	beq.n	801034c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d04f      	beq.n	801034c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80102ac:	440c      	add	r4, r1
 80102ae:	b2a4      	uxth	r4, r4
 80102b0:	2100      	movs	r1, #0
 80102b2:	682b      	ldr	r3, [r5, #0]
 80102b4:	4293      	cmp	r3, r2
 80102b6:	da07      	bge.n	80102c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80102b8:	f1b8 0f00 	cmp.w	r8, #0
 80102bc:	d004      	beq.n	80102c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80102be:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80102c2:	682b      	ldr	r3, [r5, #0]
 80102c4:	3301      	adds	r3, #1
 80102c6:	602b      	str	r3, [r5, #0]
 80102c8:	2730      	movs	r7, #48	@ 0x30
 80102ca:	2c00      	cmp	r4, #0
 80102cc:	d04e      	beq.n	801036c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80102ce:	682e      	ldr	r6, [r5, #0]
 80102d0:	3c01      	subs	r4, #1
 80102d2:	42b2      	cmp	r2, r6
 80102d4:	b2a4      	uxth	r4, r4
 80102d6:	dd49      	ble.n	801036c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80102d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	3301      	adds	r3, #1
 80102e0:	602b      	str	r3, [r5, #0]
 80102e2:	e7f2      	b.n	80102ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80102e4:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 80102e8:	d01d      	beq.n	8010326 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80102ea:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 80102ee:	d002      	beq.n	80102f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80102f0:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80102f4:	e7c9      	b.n	801028a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80102f6:	4684      	mov	ip, r0
 80102f8:	f04f 0800 	mov.w	r8, #0
 80102fc:	2c00      	cmp	r4, #0
 80102fe:	d0c6      	beq.n	801028e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010300:	b947      	cbnz	r7, 8010314 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8010302:	2801      	cmp	r0, #1
 8010304:	d106      	bne.n	8010314 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8010306:	8814      	ldrh	r4, [r2, #0]
 8010308:	2c30      	cmp	r4, #48	@ 0x30
 801030a:	bf02      	ittt	eq
 801030c:	3202      	addeq	r2, #2
 801030e:	f8cb 2000 	streq.w	r2, [fp]
 8010312:	4638      	moveq	r0, r7
 8010314:	45bc      	cmp	ip, r7
 8010316:	da14      	bge.n	8010342 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8010318:	b2bf      	uxth	r7, r7
 801031a:	eba7 040c 	sub.w	r4, r7, ip
 801031e:	b2a4      	uxth	r4, r4
 8010320:	46bc      	mov	ip, r7
 8010322:	2600      	movs	r6, #0
 8010324:	e7b3      	b.n	801028e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010326:	4684      	mov	ip, r0
 8010328:	b16c      	cbz	r4, 8010346 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801032a:	42b8      	cmp	r0, r7
 801032c:	dd00      	ble.n	8010330 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801032e:	b2b8      	uxth	r0, r7
 8010330:	2400      	movs	r4, #0
 8010332:	e003      	b.n	801033c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8010334:	f04f 0c01 	mov.w	ip, #1
 8010338:	2400      	movs	r4, #0
 801033a:	4660      	mov	r0, ip
 801033c:	4626      	mov	r6, r4
 801033e:	46a0      	mov	r8, r4
 8010340:	e7a5      	b.n	801028e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010342:	2400      	movs	r4, #0
 8010344:	e7ed      	b.n	8010322 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8010346:	4626      	mov	r6, r4
 8010348:	46a0      	mov	r8, r4
 801034a:	e7a0      	b.n	801028e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801034c:	2900      	cmp	r1, #0
 801034e:	d0b0      	beq.n	80102b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010350:	2720      	movs	r7, #32
 8010352:	682e      	ldr	r6, [r5, #0]
 8010354:	2900      	cmp	r1, #0
 8010356:	d0ac      	beq.n	80102b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010358:	3901      	subs	r1, #1
 801035a:	4296      	cmp	r6, r2
 801035c:	b289      	uxth	r1, r1
 801035e:	daa7      	bge.n	80102b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8010360:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8010364:	682b      	ldr	r3, [r5, #0]
 8010366:	3301      	adds	r3, #1
 8010368:	602b      	str	r3, [r5, #0]
 801036a:	e7f2      	b.n	8010352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801036c:	b188      	cbz	r0, 8010392 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	3801      	subs	r0, #1
 8010372:	429a      	cmp	r2, r3
 8010374:	b280      	uxth	r0, r0
 8010376:	dd0c      	ble.n	8010392 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8010378:	f8db 3000 	ldr.w	r3, [fp]
 801037c:	1c9c      	adds	r4, r3, #2
 801037e:	f8cb 4000 	str.w	r4, [fp]
 8010382:	881c      	ldrh	r4, [r3, #0]
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	3301      	adds	r3, #1
 801038e:	602b      	str	r3, [r5, #0]
 8010390:	e7ec      	b.n	801036c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8010392:	2620      	movs	r6, #32
 8010394:	b151      	cbz	r1, 80103ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010396:	6828      	ldr	r0, [r5, #0]
 8010398:	3901      	subs	r1, #1
 801039a:	4282      	cmp	r2, r0
 801039c:	b289      	uxth	r1, r1
 801039e:	dd05      	ble.n	80103ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80103a0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80103a4:	682b      	ldr	r3, [r5, #0]
 80103a6:	3301      	adds	r3, #1
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	e7f3      	b.n	8010394 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80103ac:	b005      	add	sp, #20
 80103ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80103b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103b6:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80103ba:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 80103be:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80103c2:	2400      	movs	r4, #0
 80103c4:	8014      	strh	r4, [r2, #0]
 80103c6:	701c      	strb	r4, [r3, #0]
 80103c8:	f888 4000 	strb.w	r4, [r8]
 80103cc:	f88c 4000 	strb.w	r4, [ip]
 80103d0:	f88e 4000 	strb.w	r4, [lr]
 80103d4:	703c      	strb	r4, [r7, #0]
 80103d6:	6804      	ldr	r4, [r0, #0]
 80103d8:	b1a4      	cbz	r4, 8010404 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 80103da:	8824      	ldrh	r4, [r4, #0]
 80103dc:	f04f 0901 	mov.w	r9, #1
 80103e0:	b314      	cbz	r4, 8010428 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80103e2:	2c2b      	cmp	r4, #43	@ 0x2b
 80103e4:	d001      	beq.n	80103ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 80103e6:	2c20      	cmp	r4, #32
 80103e8:	d110      	bne.n	801040c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 80103ea:	8014      	strh	r4, [r2, #0]
 80103ec:	6804      	ldr	r4, [r0, #0]
 80103ee:	b10c      	cbz	r4, 80103f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80103f0:	3402      	adds	r4, #2
 80103f2:	6004      	str	r4, [r0, #0]
 80103f4:	680c      	ldr	r4, [r1, #0]
 80103f6:	b10c      	cbz	r4, 80103fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80103f8:	3401      	adds	r4, #1
 80103fa:	600c      	str	r4, [r1, #0]
 80103fc:	6804      	ldr	r4, [r0, #0]
 80103fe:	b17c      	cbz	r4, 8010420 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8010400:	8824      	ldrh	r4, [r4, #0]
 8010402:	e7ed      	b.n	80103e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010404:	680c      	ldr	r4, [r1, #0]
 8010406:	b17c      	cbz	r4, 8010428 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010408:	7824      	ldrb	r4, [r4, #0]
 801040a:	e7e7      	b.n	80103dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801040c:	2c2d      	cmp	r4, #45	@ 0x2d
 801040e:	d102      	bne.n	8010416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8010410:	f883 9000 	strb.w	r9, [r3]
 8010414:	e7ea      	b.n	80103ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010416:	2c23      	cmp	r4, #35	@ 0x23
 8010418:	d107      	bne.n	801042a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801041a:	f888 9000 	strb.w	r9, [r8]
 801041e:	e7e5      	b.n	80103ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010420:	680c      	ldr	r4, [r1, #0]
 8010422:	b10c      	cbz	r4, 8010428 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010424:	7824      	ldrb	r4, [r4, #0]
 8010426:	e7db      	b.n	80103e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010428:	2400      	movs	r4, #0
 801042a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801042e:	2b09      	cmp	r3, #9
 8010430:	d901      	bls.n	8010436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8010432:	2c2a      	cmp	r4, #42	@ 0x2a
 8010434:	d122      	bne.n	801047c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8010436:	2301      	movs	r3, #1
 8010438:	2c30      	cmp	r4, #48	@ 0x30
 801043a:	f88e 3000 	strb.w	r3, [lr]
 801043e:	d10d      	bne.n	801045c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010440:	f88c 3000 	strb.w	r3, [ip]
 8010444:	6803      	ldr	r3, [r0, #0]
 8010446:	b10b      	cbz	r3, 801044c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8010448:	3302      	adds	r3, #2
 801044a:	6003      	str	r3, [r0, #0]
 801044c:	680b      	ldr	r3, [r1, #0]
 801044e:	b10b      	cbz	r3, 8010454 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8010450:	3301      	adds	r3, #1
 8010452:	600b      	str	r3, [r1, #0]
 8010454:	6803      	ldr	r3, [r0, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d02f      	beq.n	80104ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801045a:	881c      	ldrh	r4, [r3, #0]
 801045c:	2c2a      	cmp	r4, #42	@ 0x2a
 801045e:	d135      	bne.n	80104cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8010460:	f04f 33ff 	mov.w	r3, #4294967295
 8010464:	6033      	str	r3, [r6, #0]
 8010466:	6803      	ldr	r3, [r0, #0]
 8010468:	b10b      	cbz	r3, 801046e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801046a:	3302      	adds	r3, #2
 801046c:	6003      	str	r3, [r0, #0]
 801046e:	680b      	ldr	r3, [r1, #0]
 8010470:	b10b      	cbz	r3, 8010476 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8010472:	3301      	adds	r3, #1
 8010474:	600b      	str	r3, [r1, #0]
 8010476:	6803      	ldr	r3, [r0, #0]
 8010478:	b31b      	cbz	r3, 80104c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801047a:	881c      	ldrh	r4, [r3, #0]
 801047c:	2c2e      	cmp	r4, #46	@ 0x2e
 801047e:	d11a      	bne.n	80104b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010480:	2301      	movs	r3, #1
 8010482:	703b      	strb	r3, [r7, #0]
 8010484:	6803      	ldr	r3, [r0, #0]
 8010486:	b10b      	cbz	r3, 801048c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8010488:	3302      	adds	r3, #2
 801048a:	6003      	str	r3, [r0, #0]
 801048c:	680b      	ldr	r3, [r1, #0]
 801048e:	b10b      	cbz	r3, 8010494 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8010490:	3301      	adds	r3, #1
 8010492:	600b      	str	r3, [r1, #0]
 8010494:	6803      	ldr	r3, [r0, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d036      	beq.n	8010508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	2b2a      	cmp	r3, #42	@ 0x2a
 801049e:	d137      	bne.n	8010510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295
 80104a4:	602b      	str	r3, [r5, #0]
 80104a6:	6803      	ldr	r3, [r0, #0]
 80104a8:	b10b      	cbz	r3, 80104ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80104aa:	3302      	adds	r3, #2
 80104ac:	6003      	str	r3, [r0, #0]
 80104ae:	680b      	ldr	r3, [r1, #0]
 80104b0:	b10b      	cbz	r3, 80104b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80104b2:	3301      	adds	r3, #1
 80104b4:	600b      	str	r3, [r1, #0]
 80104b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104ba:	680c      	ldr	r4, [r1, #0]
 80104bc:	b134      	cbz	r4, 80104cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80104be:	7824      	ldrb	r4, [r4, #0]
 80104c0:	e7cc      	b.n	801045c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80104c2:	680b      	ldr	r3, [r1, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d0f6      	beq.n	80104b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80104c8:	781c      	ldrb	r4, [r3, #0]
 80104ca:	e7d7      	b.n	801047c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80104cc:	2300      	movs	r3, #0
 80104ce:	6033      	str	r3, [r6, #0]
 80104d0:	220a      	movs	r2, #10
 80104d2:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80104d6:	fa1f f38c 	uxth.w	r3, ip
 80104da:	2b09      	cmp	r3, #9
 80104dc:	d8ce      	bhi.n	801047c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80104de:	6833      	ldr	r3, [r6, #0]
 80104e0:	fb02 c303 	mla	r3, r2, r3, ip
 80104e4:	6033      	str	r3, [r6, #0]
 80104e6:	6803      	ldr	r3, [r0, #0]
 80104e8:	b10b      	cbz	r3, 80104ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 80104ea:	3302      	adds	r3, #2
 80104ec:	6003      	str	r3, [r0, #0]
 80104ee:	680b      	ldr	r3, [r1, #0]
 80104f0:	b10b      	cbz	r3, 80104f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80104f2:	3301      	adds	r3, #1
 80104f4:	600b      	str	r3, [r1, #0]
 80104f6:	6803      	ldr	r3, [r0, #0]
 80104f8:	b10b      	cbz	r3, 80104fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80104fa:	881c      	ldrh	r4, [r3, #0]
 80104fc:	e7e9      	b.n	80104d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80104fe:	680c      	ldr	r4, [r1, #0]
 8010500:	2c00      	cmp	r4, #0
 8010502:	d0e6      	beq.n	80104d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010504:	7824      	ldrb	r4, [r4, #0]
 8010506:	e7e4      	b.n	80104d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010508:	680b      	ldr	r3, [r1, #0]
 801050a:	b10b      	cbz	r3, 8010510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	e7c5      	b.n	801049c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8010510:	2200      	movs	r2, #0
 8010512:	602a      	str	r2, [r5, #0]
 8010514:	240a      	movs	r4, #10
 8010516:	3b30      	subs	r3, #48	@ 0x30
 8010518:	b29e      	uxth	r6, r3
 801051a:	2e09      	cmp	r6, #9
 801051c:	682a      	ldr	r2, [r5, #0]
 801051e:	d813      	bhi.n	8010548 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8010520:	fb04 3302 	mla	r3, r4, r2, r3
 8010524:	602b      	str	r3, [r5, #0]
 8010526:	6803      	ldr	r3, [r0, #0]
 8010528:	b10b      	cbz	r3, 801052e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801052a:	3302      	adds	r3, #2
 801052c:	6003      	str	r3, [r0, #0]
 801052e:	680b      	ldr	r3, [r1, #0]
 8010530:	b10b      	cbz	r3, 8010536 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8010532:	3301      	adds	r3, #1
 8010534:	600b      	str	r3, [r1, #0]
 8010536:	6803      	ldr	r3, [r0, #0]
 8010538:	b10b      	cbz	r3, 801053e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	e7eb      	b.n	8010516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801053e:	680b      	ldr	r3, [r1, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0e8      	beq.n	8010516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	e7e6      	b.n	8010516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010548:	2a06      	cmp	r2, #6
 801054a:	bfa8      	it	ge
 801054c:	2206      	movge	r2, #6
 801054e:	602a      	str	r2, [r5, #0]
 8010550:	e7b1      	b.n	80104b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08010552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8010552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010556:	b0a3      	sub	sp, #140	@ 0x8c
 8010558:	2600      	movs	r6, #0
 801055a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801055e:	4607      	mov	r7, r0
 8010560:	4688      	mov	r8, r1
 8010562:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010566:	4631      	mov	r1, r6
 8010568:	2242      	movs	r2, #66	@ 0x42
 801056a:	4648      	mov	r0, r9
 801056c:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801056e:	960d      	str	r6, [sp, #52]	@ 0x34
 8010570:	f003 fb25 	bl	8013bbe <memset>
 8010574:	b15f      	cbz	r7, 801058e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8010576:	f108 3aff 	add.w	sl, r8, #4294967295
 801057a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801057c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801057e:	b152      	cbz	r2, 8010596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8010580:	8812      	ldrh	r2, [r2, #0]
 8010582:	b10a      	cbz	r2, 8010588 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010584:	459a      	cmp	sl, r3
 8010586:	dc2e      	bgt.n	80105e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8010588:	2200      	movs	r2, #0
 801058a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801058e:	4638      	mov	r0, r7
 8010590:	b023      	add	sp, #140	@ 0x8c
 8010592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010596:	9a08      	ldr	r2, [sp, #32]
 8010598:	2a00      	cmp	r2, #0
 801059a:	d0f5      	beq.n	8010588 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801059c:	7812      	ldrb	r2, [r2, #0]
 801059e:	e7f0      	b.n	8010582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	d0ea      	beq.n	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80105a4:	782a      	ldrb	r2, [r5, #0]
 80105a6:	b142      	cbz	r2, 80105ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80105a8:	2a25      	cmp	r2, #37	@ 0x25
 80105aa:	d001      	beq.n	80105b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80105ac:	459a      	cmp	sl, r3
 80105ae:	dc08      	bgt.n	80105c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80105b0:	f1bb 0f00 	cmp.w	fp, #0
 80105b4:	d121      	bne.n	80105fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80105b6:	2d00      	cmp	r5, #0
 80105b8:	d0df      	beq.n	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80105ba:	782a      	ldrb	r2, [r5, #0]
 80105bc:	f04f 0b00 	mov.w	fp, #0
 80105c0:	e01d      	b.n	80105fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80105c2:	f1bb 0f00 	cmp.w	fp, #0
 80105c6:	d078      	beq.n	80106ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 80105c8:	f8bb 2000 	ldrh.w	r2, [fp]
 80105cc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80105d0:	f1bb 0f00 	cmp.w	fp, #0
 80105d4:	d002      	beq.n	80105dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80105d6:	f10b 0202 	add.w	r2, fp, #2
 80105da:	9209      	str	r2, [sp, #36]	@ 0x24
 80105dc:	b10d      	cbz	r5, 80105e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 80105de:	3501      	adds	r5, #1
 80105e0:	9508      	str	r5, [sp, #32]
 80105e2:	3301      	adds	r3, #1
 80105e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80105e6:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80105ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105ec:	f1bb 0f00 	cmp.w	fp, #0
 80105f0:	d0d6      	beq.n	80105a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80105f2:	f8bb 2000 	ldrh.w	r2, [fp]
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	d1d6      	bne.n	80105a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80105fa:	f8bb 2000 	ldrh.w	r2, [fp]
 80105fe:	2a00      	cmp	r2, #0
 8010600:	d0bb      	beq.n	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010602:	459a      	cmp	sl, r3
 8010604:	ddb9      	ble.n	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010606:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801060a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801060e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8010612:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8010616:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801061a:	960e      	str	r6, [sp, #56]	@ 0x38
 801061c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8010620:	960f      	str	r6, [sp, #60]	@ 0x3c
 8010622:	f1bb 0f00 	cmp.w	fp, #0
 8010626:	d002      	beq.n	801062e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8010628:	f10b 0302 	add.w	r3, fp, #2
 801062c:	9309      	str	r3, [sp, #36]	@ 0x24
 801062e:	b10d      	cbz	r5, 8010634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8010630:	1c6b      	adds	r3, r5, #1
 8010632:	9308      	str	r3, [sp, #32]
 8010634:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010636:	9305      	str	r3, [sp, #20]
 8010638:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801063c:	9304      	str	r3, [sp, #16]
 801063e:	ab0e      	add	r3, sp, #56	@ 0x38
 8010640:	9303      	str	r3, [sp, #12]
 8010642:	ab0c      	add	r3, sp, #48	@ 0x30
 8010644:	9302      	str	r3, [sp, #8]
 8010646:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801064a:	9301      	str	r3, [sp, #4]
 801064c:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010656:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801065a:	a908      	add	r1, sp, #32
 801065c:	a809      	add	r0, sp, #36	@ 0x24
 801065e:	f7ff fea8 	bl	80103b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8010662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010664:	2b00      	cmp	r3, #0
 8010666:	bfbe      	ittt	lt
 8010668:	6823      	ldrlt	r3, [r4, #0]
 801066a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801066e:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8010670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010672:	bfb8      	it	lt
 8010674:	3404      	addlt	r4, #4
 8010676:	2b00      	cmp	r3, #0
 8010678:	bfb8      	it	lt
 801067a:	6823      	ldrlt	r3, [r4, #0]
 801067c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010680:	bfbe      	ittt	lt
 8010682:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010686:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8010688:	3404      	addlt	r4, #4
 801068a:	b1d9      	cbz	r1, 80106c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801068c:	880b      	ldrh	r3, [r1, #0]
 801068e:	2b69      	cmp	r3, #105	@ 0x69
 8010690:	d01f      	beq.n	80106d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010692:	d82f      	bhi.n	80106f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8010694:	2b58      	cmp	r3, #88	@ 0x58
 8010696:	d01c      	beq.n	80106d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010698:	d818      	bhi.n	80106cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801069a:	2b25      	cmp	r3, #37	@ 0x25
 801069c:	d034      	beq.n	8010708 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801069e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80106a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106a4:	f1bb 0f00 	cmp.w	fp, #0
 80106a8:	f000 80b8 	beq.w	801081c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 80106ac:	f8bb 5000 	ldrh.w	r5, [fp]
 80106b0:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80106b4:	3301      	adds	r3, #1
 80106b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80106b8:	e029      	b.n	801070e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80106ba:	b10d      	cbz	r5, 80106c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 80106bc:	782a      	ldrb	r2, [r5, #0]
 80106be:	e785      	b.n	80105cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80106c0:	462a      	mov	r2, r5
 80106c2:	e783      	b.n	80105cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	d0ea      	beq.n	801069e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80106c8:	7813      	ldrb	r3, [r2, #0]
 80106ca:	e7e0      	b.n	801068e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 80106cc:	3b63      	subs	r3, #99	@ 0x63
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d8e5      	bhi.n	801069e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80106d2:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 80106d6:	b329      	cbz	r1, 8010724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 80106d8:	880b      	ldrh	r3, [r1, #0]
 80106da:	2b69      	cmp	r3, #105	@ 0x69
 80106dc:	d063      	beq.n	80107a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80106de:	d825      	bhi.n	801072c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 80106e0:	2b63      	cmp	r3, #99	@ 0x63
 80106e2:	d038      	beq.n	8010756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 80106e4:	2b64      	cmp	r3, #100	@ 0x64
 80106e6:	d05e      	beq.n	80107a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 80106e8:	2b58      	cmp	r3, #88	@ 0x58
 80106ea:	d07b      	beq.n	80107e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 80106ec:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 80106f0:	4625      	mov	r5, r4
 80106f2:	e036      	b.n	8010762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80106f4:	2b73      	cmp	r3, #115	@ 0x73
 80106f6:	d0ec      	beq.n	80106d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80106f8:	d802      	bhi.n	8010700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 80106fa:	2b6f      	cmp	r3, #111	@ 0x6f
 80106fc:	d1cf      	bne.n	801069e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80106fe:	e7e8      	b.n	80106d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010700:	2b75      	cmp	r3, #117	@ 0x75
 8010702:	d0e6      	beq.n	80106d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010704:	2b78      	cmp	r3, #120	@ 0x78
 8010706:	e7f9      	b.n	80106fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8010708:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801070a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801070e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010710:	b10b      	cbz	r3, 8010716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8010712:	3302      	adds	r3, #2
 8010714:	9309      	str	r3, [sp, #36]	@ 0x24
 8010716:	9b08      	ldr	r3, [sp, #32]
 8010718:	2b00      	cmp	r3, #0
 801071a:	f43f af2e 	beq.w	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801071e:	3301      	adds	r3, #1
 8010720:	9308      	str	r3, [sp, #32]
 8010722:	e72a      	b.n	801057a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010724:	2a00      	cmp	r2, #0
 8010726:	d0e1      	beq.n	80106ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010728:	7813      	ldrb	r3, [r2, #0]
 801072a:	e7d6      	b.n	80106da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801072c:	2b73      	cmp	r3, #115	@ 0x73
 801072e:	d036      	beq.n	801079e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8010730:	d807      	bhi.n	8010742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8010732:	2b6f      	cmp	r3, #111	@ 0x6f
 8010734:	d1da      	bne.n	80106ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010736:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010738:	1d25      	adds	r5, r4, #4
 801073a:	eba8 0202 	sub.w	r2, r8, r2
 801073e:	2308      	movs	r3, #8
 8010740:	e04a      	b.n	80107d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8010742:	2b75      	cmp	r3, #117	@ 0x75
 8010744:	d043      	beq.n	80107ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8010746:	2b78      	cmp	r3, #120	@ 0x78
 8010748:	d1d0      	bne.n	80106ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801074a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801074c:	1d25      	adds	r5, r4, #4
 801074e:	eba8 0202 	sub.w	r2, r8, r2
 8010752:	2310      	movs	r3, #16
 8010754:	e040      	b.n	80107d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8010756:	6823      	ldr	r3, [r4, #0]
 8010758:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801075c:	1d25      	adds	r5, r4, #4
 801075e:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8010762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010764:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010768:	2b00      	cmp	r3, #0
 801076a:	d052      	beq.n	8010812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801076c:	881a      	ldrh	r2, [r3, #0]
 801076e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8010772:	a80d      	add	r0, sp, #52	@ 0x34
 8010774:	9005      	str	r0, [sp, #20]
 8010776:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801077a:	9004      	str	r0, [sp, #16]
 801077c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801077e:	9003      	str	r0, [sp, #12]
 8010780:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8010784:	9002      	str	r0, [sp, #8]
 8010786:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010788:	9001      	str	r0, [sp, #4]
 801078a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801078e:	9000      	str	r0, [sp, #0]
 8010790:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8010794:	a810      	add	r0, sp, #64	@ 0x40
 8010796:	f7ff fd49 	bl	801022c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801079a:	462c      	mov	r4, r5
 801079c:	e7b7      	b.n	801070e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	1d25      	adds	r5, r4, #4
 80107a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80107a4:	e7dd      	b.n	8010762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80107a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107a8:	6820      	ldr	r0, [r4, #0]
 80107aa:	eba8 0202 	sub.w	r2, r8, r2
 80107ae:	230a      	movs	r3, #10
 80107b0:	b292      	uxth	r2, r2
 80107b2:	4649      	mov	r1, r9
 80107b4:	f7ff fcf0 	bl	8010198 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 80107b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80107bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80107be:	f104 0504 	add.w	r5, r4, #4
 80107c2:	d1ce      	bne.n	8010762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80107c4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80107c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107ca:	3302      	adds	r3, #2
 80107cc:	e7e9      	b.n	80107a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 80107ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107d0:	1d25      	adds	r5, r4, #4
 80107d2:	eba8 0202 	sub.w	r2, r8, r2
 80107d6:	230a      	movs	r3, #10
 80107d8:	b292      	uxth	r2, r2
 80107da:	4649      	mov	r1, r9
 80107dc:	6820      	ldr	r0, [r4, #0]
 80107de:	f7ff fd07 	bl	80101f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80107e2:	e7be      	b.n	8010762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80107e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107e6:	6820      	ldr	r0, [r4, #0]
 80107e8:	eba8 0202 	sub.w	r2, r8, r2
 80107ec:	b292      	uxth	r2, r2
 80107ee:	2310      	movs	r3, #16
 80107f0:	4649      	mov	r1, r9
 80107f2:	f7ff fcfd 	bl	80101f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 80107f6:	1d25      	adds	r5, r4, #4
 80107f8:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 80107fc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8010800:	2b00      	cmp	r3, #0
 8010802:	d0ae      	beq.n	8010762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010804:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8010808:	2919      	cmp	r1, #25
 801080a:	d8f7      	bhi.n	80107fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801080c:	3b20      	subs	r3, #32
 801080e:	8013      	strh	r3, [r2, #0]
 8010810:	e7f4      	b.n	80107fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8010812:	9a08      	ldr	r2, [sp, #32]
 8010814:	2a00      	cmp	r2, #0
 8010816:	d0aa      	beq.n	801076e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010818:	7812      	ldrb	r2, [r2, #0]
 801081a:	e7a8      	b.n	801076e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801081c:	2d00      	cmp	r5, #0
 801081e:	f43f af47 	beq.w	80106b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8010822:	782d      	ldrb	r5, [r5, #0]
 8010824:	e744      	b.n	80106b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08010826 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8010826:	b507      	push	{r0, r1, r2, lr}
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	4613      	mov	r3, r2
 801082c:	2200      	movs	r2, #0
 801082e:	f7ff fe90 	bl	8010552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8010832:	b003      	add	sp, #12
 8010834:	f85d fb04 	ldr.w	pc, [sp], #4

08010838 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8010838:	b40c      	push	{r2, r3}
 801083a:	b507      	push	{r0, r1, r2, lr}
 801083c:	ab04      	add	r3, sp, #16
 801083e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010842:	9301      	str	r3, [sp, #4]
 8010844:	f7ff ffef 	bl	8010826 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8010848:	b003      	add	sp, #12
 801084a:	f85d eb04 	ldr.w	lr, [sp], #4
 801084e:	b002      	add	sp, #8
 8010850:	4770      	bx	lr
	...

08010854 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010854:	4b01      	ldr	r3, [pc, #4]	@ (801085c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010856:	6018      	str	r0, [r3, #0]
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	20012640 	.word	0x20012640

08010860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8010860:	4b06      	ldr	r3, [pc, #24]	@ (801087c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8010862:	881a      	ldrh	r2, [r3, #0]
 8010864:	4282      	cmp	r2, r0
 8010866:	d807      	bhi.n	8010878 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8010868:	4b05      	ldr	r3, [pc, #20]	@ (8010880 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801086a:	881b      	ldrh	r3, [r3, #0]
 801086c:	4413      	add	r3, r2
 801086e:	4298      	cmp	r0, r3
 8010870:	bfac      	ite	ge
 8010872:	2000      	movge	r0, #0
 8010874:	2001      	movlt	r0, #1
 8010876:	4770      	bx	lr
 8010878:	2000      	movs	r0, #0
 801087a:	4770      	bx	lr
 801087c:	20012660 	.word	0x20012660
 8010880:	20012664 	.word	0x20012664

08010884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010884:	b508      	push	{r3, lr}
 8010886:	4601      	mov	r1, r0
 8010888:	f7ff ffea 	bl	8010860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801088c:	b118      	cbz	r0, 8010896 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801088e:	4b02      	ldr	r3, [pc, #8]	@ (8010898 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010896:	bd08      	pop	{r3, pc}
 8010898:	20012644 	.word	0x20012644

0801089c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801089e:	4c24      	ldr	r4, [pc, #144]	@ (8010930 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d042      	beq.n	801092c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80108a6:	4a23      	ldr	r2, [pc, #140]	@ (8010934 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80108a8:	4d23      	ldr	r5, [pc, #140]	@ (8010938 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80108aa:	8811      	ldrh	r1, [r2, #0]
 80108ac:	f8b5 c000 	ldrh.w	ip, [r5]
 80108b0:	4822      	ldr	r0, [pc, #136]	@ (801093c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80108b2:	4461      	add	r1, ip
 80108b4:	1c4a      	adds	r2, r1, #1
 80108b6:	f022 0201 	bic.w	r2, r2, #1
 80108ba:	008f      	lsls	r7, r1, #2
 80108bc:	0412      	lsls	r2, r2, #16
 80108be:	19de      	adds	r6, r3, r7
 80108c0:	0c12      	lsrs	r2, r2, #16
 80108c2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80108c6:	6006      	str	r6, [r0, #0]
 80108c8:	4e1d      	ldr	r6, [pc, #116]	@ (8010940 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80108ca:	19da      	adds	r2, r3, r7
 80108cc:	6032      	str	r2, [r6, #0]
 80108ce:	220e      	movs	r2, #14
 80108d0:	fb02 f20c 	mul.w	r2, r2, ip
 80108d4:	3203      	adds	r2, #3
 80108d6:	f022 0203 	bic.w	r2, r2, #3
 80108da:	443a      	add	r2, r7
 80108dc:	4f19      	ldr	r7, [pc, #100]	@ (8010944 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80108de:	4413      	add	r3, r2
 80108e0:	603b      	str	r3, [r7, #0]
 80108e2:	4f19      	ldr	r7, [pc, #100]	@ (8010948 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80108e4:	2300      	movs	r3, #0
 80108e6:	803b      	strh	r3, [r7, #0]
 80108e8:	4f18      	ldr	r7, [pc, #96]	@ (801094c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80108ea:	683f      	ldr	r7, [r7, #0]
 80108ec:	1aba      	subs	r2, r7, r2
 80108ee:	4f18      	ldr	r7, [pc, #96]	@ (8010950 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80108f0:	603a      	str	r2, [r7, #0]
 80108f2:	4a18      	ldr	r2, [pc, #96]	@ (8010954 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80108f4:	469c      	mov	ip, r3
 80108f6:	8013      	strh	r3, [r2, #0]
 80108f8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80108fc:	428b      	cmp	r3, r1
 80108fe:	d10d      	bne.n	801091c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010900:	882d      	ldrh	r5, [r5, #0]
 8010902:	6830      	ldr	r0, [r6, #0]
 8010904:	2300      	movs	r3, #0
 8010906:	240e      	movs	r4, #14
 8010908:	429d      	cmp	r5, r3
 801090a:	d90f      	bls.n	801092c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801090c:	fb04 0203 	mla	r2, r4, r3, r0
 8010910:	3301      	adds	r3, #1
 8010912:	7b11      	ldrb	r1, [r2, #12]
 8010914:	f36f 1145 	bfc	r1, #5, #1
 8010918:	7311      	strb	r1, [r2, #12]
 801091a:	e7f5      	b.n	8010908 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801091c:	6822      	ldr	r2, [r4, #0]
 801091e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010922:	6802      	ldr	r2, [r0, #0]
 8010924:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8010928:	3301      	adds	r3, #1
 801092a:	e7e7      	b.n	80108fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092e:	bf00      	nop
 8010930:	20012644 	.word	0x20012644
 8010934:	20012660 	.word	0x20012660
 8010938:	20012664 	.word	0x20012664
 801093c:	20012658 	.word	0x20012658
 8010940:	20012648 	.word	0x20012648
 8010944:	20012650 	.word	0x20012650
 8010948:	20012662 	.word	0x20012662
 801094c:	2001264c 	.word	0x2001264c
 8010950:	2001265c 	.word	0x2001265c
 8010954:	20012654 	.word	0x20012654

08010958 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010958:	4b06      	ldr	r3, [pc, #24]	@ (8010974 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	b943      	cbnz	r3, 8010970 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801095e:	b139      	cbz	r1, 8010970 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8010960:	4b05      	ldr	r3, [pc, #20]	@ (8010978 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8010962:	801a      	strh	r2, [r3, #0]
 8010964:	4b05      	ldr	r3, [pc, #20]	@ (801097c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8010966:	6019      	str	r1, [r3, #0]
 8010968:	4b05      	ldr	r3, [pc, #20]	@ (8010980 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801096a:	6018      	str	r0, [r3, #0]
 801096c:	f7ff bf96 	b.w	801089c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	20012650 	.word	0x20012650
 8010978:	20012664 	.word	0x20012664
 801097c:	2001264c 	.word	0x2001264c
 8010980:	20012644 	.word	0x20012644

08010984 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010984:	b470      	push	{r4, r5, r6}
 8010986:	4c07      	ldr	r4, [pc, #28]	@ (80109a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010988:	6826      	ldr	r6, [r4, #0]
 801098a:	4605      	mov	r5, r0
 801098c:	4610      	mov	r0, r2
 801098e:	9a03      	ldr	r2, [sp, #12]
 8010990:	b936      	cbnz	r6, 80109a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010992:	6025      	str	r5, [r4, #0]
 8010994:	4c04      	ldr	r4, [pc, #16]	@ (80109a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010996:	8021      	strh	r1, [r4, #0]
 8010998:	bc70      	pop	{r4, r5, r6}
 801099a:	4619      	mov	r1, r3
 801099c:	f7ff bfdc 	b.w	8010958 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80109a0:	bc70      	pop	{r4, r5, r6}
 80109a2:	4770      	bx	lr
 80109a4:	20012668 	.word	0x20012668
 80109a8:	20012660 	.word	0x20012660

080109ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80109ac:	4a12      	ldr	r2, [pc, #72]	@ (80109f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80109ae:	8803      	ldrh	r3, [r0, #0]
 80109b0:	8812      	ldrh	r2, [r2, #0]
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d207      	bcs.n	80109c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80109b6:	4a11      	ldr	r2, [pc, #68]	@ (80109fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80109b8:	6812      	ldr	r2, [r2, #0]
 80109ba:	2114      	movs	r1, #20
 80109bc:	fb01 2303 	mla	r3, r1, r3, r2
 80109c0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80109c4:	4770      	bx	lr
 80109c6:	490e      	ldr	r1, [pc, #56]	@ (8010a00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80109c8:	8809      	ldrh	r1, [r1, #0]
 80109ca:	4411      	add	r1, r2
 80109cc:	428b      	cmp	r3, r1
 80109ce:	da04      	bge.n	80109da <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80109d0:	1a9b      	subs	r3, r3, r2
 80109d2:	4a0c      	ldr	r2, [pc, #48]	@ (8010a04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80109d4:	210e      	movs	r1, #14
 80109d6:	6812      	ldr	r2, [r2, #0]
 80109d8:	e7f0      	b.n	80109bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80109da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80109de:	4293      	cmp	r3, r2
 80109e0:	d108      	bne.n	80109f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80109e2:	4b09      	ldr	r3, [pc, #36]	@ (8010a08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	b91b      	cbnz	r3, 80109f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80109e8:	4b08      	ldr	r3, [pc, #32]	@ (8010a0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80109ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80109ee:	4770      	bx	lr
 80109f0:	4b07      	ldr	r3, [pc, #28]	@ (8010a10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80109f2:	e7fa      	b.n	80109ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80109f4:	2000      	movs	r0, #0
 80109f6:	4770      	bx	lr
 80109f8:	20012660 	.word	0x20012660
 80109fc:	20012668 	.word	0x20012668
 8010a00:	20012664 	.word	0x20012664
 8010a04:	20012648 	.word	0x20012648
 8010a08:	200125d8 	.word	0x200125d8
 8010a0c:	200125da 	.word	0x200125da
 8010a10:	200125dc 	.word	0x200125dc

08010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010a14:	4a12      	ldr	r2, [pc, #72]	@ (8010a60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8010a16:	8803      	ldrh	r3, [r0, #0]
 8010a18:	8812      	ldrh	r2, [r2, #0]
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d207      	bcs.n	8010a2e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8010a1e:	4a11      	ldr	r2, [pc, #68]	@ (8010a64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8010a20:	6812      	ldr	r2, [r2, #0]
 8010a22:	2114      	movs	r1, #20
 8010a24:	fb01 2303 	mla	r3, r1, r3, r2
 8010a28:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8010a2c:	4770      	bx	lr
 8010a2e:	490e      	ldr	r1, [pc, #56]	@ (8010a68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8010a30:	8809      	ldrh	r1, [r1, #0]
 8010a32:	4411      	add	r1, r2
 8010a34:	428b      	cmp	r3, r1
 8010a36:	da04      	bge.n	8010a42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8010a38:	1a9b      	subs	r3, r3, r2
 8010a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8010a6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8010a3c:	210e      	movs	r1, #14
 8010a3e:	6812      	ldr	r2, [r2, #0]
 8010a40:	e7f0      	b.n	8010a24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8010a42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d108      	bne.n	8010a5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8010a4a:	4b09      	ldr	r3, [pc, #36]	@ (8010a70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	b91b      	cbnz	r3, 8010a58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8010a50:	4b08      	ldr	r3, [pc, #32]	@ (8010a74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010a52:	f9b3 0000 	ldrsh.w	r0, [r3]
 8010a56:	4770      	bx	lr
 8010a58:	4b07      	ldr	r3, [pc, #28]	@ (8010a78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8010a5a:	e7fa      	b.n	8010a52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	4770      	bx	lr
 8010a60:	20012660 	.word	0x20012660
 8010a64:	20012668 	.word	0x20012668
 8010a68:	20012664 	.word	0x20012664
 8010a6c:	20012648 	.word	0x20012648
 8010a70:	200125d8 	.word	0x200125d8
 8010a74:	200125dc 	.word	0x200125dc
 8010a78:	200125da 	.word	0x200125da

08010a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8010a7c:	b530      	push	{r4, r5, lr}
 8010a7e:	4a22      	ldr	r2, [pc, #136]	@ (8010b08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8010a80:	880b      	ldrh	r3, [r1, #0]
 8010a82:	8812      	ldrh	r2, [r2, #0]
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d213      	bcs.n	8010ab0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8010a88:	4a20      	ldr	r2, [pc, #128]	@ (8010b0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8010a8a:	6812      	ldr	r2, [r2, #0]
 8010a8c:	2114      	movs	r1, #20
 8010a8e:	fb01 2303 	mla	r3, r1, r3, r2
 8010a92:	8a1a      	ldrh	r2, [r3, #16]
 8010a94:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010a98:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010a9c:	8a5b      	ldrh	r3, [r3, #18]
 8010a9e:	8004      	strh	r4, [r0, #0]
 8010aa0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010aa8:	8041      	strh	r1, [r0, #2]
 8010aaa:	8082      	strh	r2, [r0, #4]
 8010aac:	80c3      	strh	r3, [r0, #6]
 8010aae:	e024      	b.n	8010afa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8010ab0:	4917      	ldr	r1, [pc, #92]	@ (8010b10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010ab2:	8809      	ldrh	r1, [r1, #0]
 8010ab4:	4411      	add	r1, r2
 8010ab6:	428b      	cmp	r3, r1
 8010ab8:	da10      	bge.n	8010adc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8010aba:	1a9b      	subs	r3, r3, r2
 8010abc:	220e      	movs	r2, #14
 8010abe:	4353      	muls	r3, r2
 8010ac0:	4a14      	ldr	r2, [pc, #80]	@ (8010b14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8010ac2:	6811      	ldr	r1, [r2, #0]
 8010ac4:	18ca      	adds	r2, r1, r3
 8010ac6:	5ecd      	ldrsh	r5, [r1, r3]
 8010ac8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8010acc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8010ad0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010ad4:	8005      	strh	r5, [r0, #0]
 8010ad6:	8044      	strh	r4, [r0, #2]
 8010ad8:	8081      	strh	r1, [r0, #4]
 8010ada:	e7e7      	b.n	8010aac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010adc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	d10b      	bne.n	8010afc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8010ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8010b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010ae6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010aea:	4b0c      	ldr	r3, [pc, #48]	@ (8010b1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010aec:	8081      	strh	r1, [r0, #4]
 8010aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010af2:	80c2      	strh	r2, [r0, #6]
 8010af4:	2300      	movs	r3, #0
 8010af6:	8003      	strh	r3, [r0, #0]
 8010af8:	8043      	strh	r3, [r0, #2]
 8010afa:	bd30      	pop	{r4, r5, pc}
 8010afc:	2300      	movs	r3, #0
 8010afe:	8003      	strh	r3, [r0, #0]
 8010b00:	8043      	strh	r3, [r0, #2]
 8010b02:	8083      	strh	r3, [r0, #4]
 8010b04:	e7d2      	b.n	8010aac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010b06:	bf00      	nop
 8010b08:	20012660 	.word	0x20012660
 8010b0c:	20012668 	.word	0x20012668
 8010b10:	20012664 	.word	0x20012664
 8010b14:	20012648 	.word	0x20012648
 8010b18:	200125d4 	.word	0x200125d4
 8010b1c:	200125d6 	.word	0x200125d6

08010b20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010b20:	4a17      	ldr	r2, [pc, #92]	@ (8010b80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8010b22:	8803      	ldrh	r3, [r0, #0]
 8010b24:	8812      	ldrh	r2, [r2, #0]
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d213      	bcs.n	8010b52 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8010b2a:	4a16      	ldr	r2, [pc, #88]	@ (8010b84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010b2c:	6812      	ldr	r2, [r2, #0]
 8010b2e:	2114      	movs	r1, #20
 8010b30:	fb01 2303 	mla	r3, r1, r3, r2
 8010b34:	8a1a      	ldrh	r2, [r3, #16]
 8010b36:	8919      	ldrh	r1, [r3, #8]
 8010b38:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010b3c:	428a      	cmp	r2, r1
 8010b3e:	db1d      	blt.n	8010b7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8010b40:	8a58      	ldrh	r0, [r3, #18]
 8010b42:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010b46:	895b      	ldrh	r3, [r3, #10]
 8010b48:	4298      	cmp	r0, r3
 8010b4a:	bfac      	ite	ge
 8010b4c:	2000      	movge	r0, #0
 8010b4e:	2001      	movlt	r0, #1
 8010b50:	4770      	bx	lr
 8010b52:	490d      	ldr	r1, [pc, #52]	@ (8010b88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8010b54:	8809      	ldrh	r1, [r1, #0]
 8010b56:	4411      	add	r1, r2
 8010b58:	428b      	cmp	r3, r1
 8010b5a:	da0d      	bge.n	8010b78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8010b5c:	1a9b      	subs	r3, r3, r2
 8010b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8010b8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8010b60:	6812      	ldr	r2, [r2, #0]
 8010b62:	210e      	movs	r1, #14
 8010b64:	fb01 2303 	mla	r3, r1, r3, r2
 8010b68:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010b6c:	891a      	ldrh	r2, [r3, #8]
 8010b6e:	4291      	cmp	r1, r2
 8010b70:	db04      	blt.n	8010b7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8010b72:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8010b76:	e7e6      	b.n	8010b46 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8010b78:	2000      	movs	r0, #0
 8010b7a:	4770      	bx	lr
 8010b7c:	2001      	movs	r0, #1
 8010b7e:	4770      	bx	lr
 8010b80:	20012660 	.word	0x20012660
 8010b84:	20012668 	.word	0x20012668
 8010b88:	20012664 	.word	0x20012664
 8010b8c:	20012648 	.word	0x20012648

08010b90 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010b90:	4a12      	ldr	r2, [pc, #72]	@ (8010bdc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010b92:	8803      	ldrh	r3, [r0, #0]
 8010b94:	8811      	ldrh	r1, [r2, #0]
 8010b96:	428b      	cmp	r3, r1
 8010b98:	d20b      	bcs.n	8010bb2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8010b9a:	4a11      	ldr	r2, [pc, #68]	@ (8010be0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010b9c:	6812      	ldr	r2, [r2, #0]
 8010b9e:	b112      	cbz	r2, 8010ba6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010ba0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ba4:	b9c0      	cbnz	r0, 8010bd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8010ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8010be4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010ba8:	6811      	ldr	r1, [r2, #0]
 8010baa:	2214      	movs	r2, #20
 8010bac:	4353      	muls	r3, r2
 8010bae:	58c8      	ldr	r0, [r1, r3]
 8010bb0:	4770      	bx	lr
 8010bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8010be8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010bb4:	8812      	ldrh	r2, [r2, #0]
 8010bb6:	440a      	add	r2, r1
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	da04      	bge.n	8010bc6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8010bbc:	4a08      	ldr	r2, [pc, #32]	@ (8010be0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010bbe:	6812      	ldr	r2, [r2, #0]
 8010bc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010bc4:	4770      	bx	lr
 8010bc6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d103      	bne.n	8010bd6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010bce:	4b07      	ldr	r3, [pc, #28]	@ (8010bec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010bd4:	4770      	bx	lr
 8010bd6:	2000      	movs	r0, #0
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	20012660 	.word	0x20012660
 8010be0:	20012644 	.word	0x20012644
 8010be4:	20012668 	.word	0x20012668
 8010be8:	20012664 	.word	0x20012664
 8010bec:	200125e0 	.word	0x200125e0

08010bf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010bf0:	4b24      	ldr	r3, [pc, #144]	@ (8010c84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010bf2:	8802      	ldrh	r2, [r0, #0]
 8010bf4:	8818      	ldrh	r0, [r3, #0]
 8010bf6:	4282      	cmp	r2, r0
 8010bf8:	d221      	bcs.n	8010c3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8010bfa:	4b23      	ldr	r3, [pc, #140]	@ (8010c88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010bfc:	6819      	ldr	r1, [r3, #0]
 8010bfe:	2314      	movs	r3, #20
 8010c00:	fb03 1302 	mla	r3, r3, r2, r1
 8010c04:	6858      	ldr	r0, [r3, #4]
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d03a      	beq.n	8010c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010c0a:	4920      	ldr	r1, [pc, #128]	@ (8010c8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010c0c:	6809      	ldr	r1, [r1, #0]
 8010c0e:	2900      	cmp	r1, #0
 8010c10:	d036      	beq.n	8010c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010c12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010c16:	2900      	cmp	r1, #0
 8010c18:	d032      	beq.n	8010c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010c1a:	891a      	ldrh	r2, [r3, #8]
 8010c1c:	8958      	ldrh	r0, [r3, #10]
 8010c1e:	4350      	muls	r0, r2
 8010c20:	7c5a      	ldrb	r2, [r3, #17]
 8010c22:	7cdb      	ldrb	r3, [r3, #19]
 8010c24:	0952      	lsrs	r2, r2, #5
 8010c26:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010c2e:	2b0b      	cmp	r3, #11
 8010c30:	bf18      	it	ne
 8010c32:	0040      	lslne	r0, r0, #1
 8010c34:	3003      	adds	r0, #3
 8010c36:	f020 0003 	bic.w	r0, r0, #3
 8010c3a:	4408      	add	r0, r1
 8010c3c:	4770      	bx	lr
 8010c3e:	4b14      	ldr	r3, [pc, #80]	@ (8010c90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	4403      	add	r3, r0
 8010c44:	429a      	cmp	r2, r3
 8010c46:	da1a      	bge.n	8010c7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010c48:	4b12      	ldr	r3, [pc, #72]	@ (8010c94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	1a10      	subs	r0, r2, r0
 8010c4e:	210e      	movs	r1, #14
 8010c50:	fb01 3000 	mla	r0, r1, r0, r3
 8010c54:	7b03      	ldrb	r3, [r0, #12]
 8010c56:	f003 031f 	and.w	r3, r3, #31
 8010c5a:	2b0b      	cmp	r3, #11
 8010c5c:	d10b      	bne.n	8010c76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8010c5e:	8903      	ldrh	r3, [r0, #8]
 8010c60:	8940      	ldrh	r0, [r0, #10]
 8010c62:	4358      	muls	r0, r3
 8010c64:	4b09      	ldr	r3, [pc, #36]	@ (8010c8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010c66:	6819      	ldr	r1, [r3, #0]
 8010c68:	3003      	adds	r0, #3
 8010c6a:	f020 0303 	bic.w	r3, r0, #3
 8010c6e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010c72:	4418      	add	r0, r3
 8010c74:	4770      	bx	lr
 8010c76:	2b0d      	cmp	r3, #13
 8010c78:	d101      	bne.n	8010c7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010c7a:	300d      	adds	r0, #13
 8010c7c:	4770      	bx	lr
 8010c7e:	2000      	movs	r0, #0
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	20012660 	.word	0x20012660
 8010c88:	20012668 	.word	0x20012668
 8010c8c:	20012644 	.word	0x20012644
 8010c90:	20012664 	.word	0x20012664
 8010c94:	20012648 	.word	0x20012648

08010c98 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010c98:	b510      	push	{r4, lr}
 8010c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8010d18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8010c9c:	8802      	ldrh	r2, [r0, #0]
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d21a      	bcs.n	8010cda <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8010ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8010d1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2114      	movs	r1, #20
 8010caa:	fb01 3102 	mla	r1, r1, r2, r3
 8010cae:	7c4b      	ldrb	r3, [r1, #17]
 8010cb0:	0958      	lsrs	r0, r3, #5
 8010cb2:	7ccb      	ldrb	r3, [r1, #19]
 8010cb4:	491a      	ldr	r1, [pc, #104]	@ (8010d20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8010cb6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010cba:	6809      	ldr	r1, [r1, #0]
 8010cbc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8010cc0:	b2d8      	uxtb	r0, r3
 8010cc2:	b149      	cbz	r1, 8010cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010cc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010cc8:	b132      	cbz	r2, 8010cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010cca:	2b0e      	cmp	r3, #14
 8010ccc:	d021      	beq.n	8010d12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010cce:	280f      	cmp	r0, #15
 8010cd0:	d01d      	beq.n	8010d0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8010cd2:	2810      	cmp	r0, #16
 8010cd4:	bf08      	it	eq
 8010cd6:	2002      	moveq	r0, #2
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	4912      	ldr	r1, [pc, #72]	@ (8010d24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8010cdc:	8809      	ldrh	r1, [r1, #0]
 8010cde:	4419      	add	r1, r3
 8010ce0:	428a      	cmp	r2, r1
 8010ce2:	da09      	bge.n	8010cf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	4a10      	ldr	r2, [pc, #64]	@ (8010d28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010ce8:	6812      	ldr	r2, [r2, #0]
 8010cea:	210e      	movs	r1, #14
 8010cec:	fb01 2303 	mla	r3, r1, r3, r2
 8010cf0:	7b18      	ldrb	r0, [r3, #12]
 8010cf2:	f000 001f 	and.w	r0, r0, #31
 8010cf6:	e7ef      	b.n	8010cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010cf8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d108      	bne.n	8010d12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010d00:	f7f8 fc2e 	bl	8009560 <_ZN8touchgfx3HAL3lcdEv>
 8010d04:	6803      	ldr	r3, [r0, #0]
 8010d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d0c:	4718      	bx	r3
 8010d0e:	2001      	movs	r0, #1
 8010d10:	e7e2      	b.n	8010cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010d12:	2000      	movs	r0, #0
 8010d14:	e7e0      	b.n	8010cd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010d16:	bf00      	nop
 8010d18:	20012660 	.word	0x20012660
 8010d1c:	20012668 	.word	0x20012668
 8010d20:	20012644 	.word	0x20012644
 8010d24:	20012664 	.word	0x20012664
 8010d28:	20012648 	.word	0x20012648

08010d2c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8010d2c:	2010      	movs	r0, #16
 8010d2e:	4770      	bx	lr

08010d30 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8010d30:	2000      	movs	r0, #0
 8010d32:	4770      	bx	lr

08010d34 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8010d34:	4b02      	ldr	r3, [pc, #8]	@ (8010d40 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8010d36:	8818      	ldrh	r0, [r3, #0]
 8010d38:	0040      	lsls	r0, r0, #1
 8010d3a:	b280      	uxth	r0, r0
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	200125da 	.word	0x200125da

08010d44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8010d44:	2bff      	cmp	r3, #255	@ 0xff
 8010d46:	d05e      	beq.n	8010e06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8010d48:	2a0b      	cmp	r2, #11
 8010d4a:	d058      	beq.n	8010dfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8010d4c:	d80e      	bhi.n	8010d6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8010d4e:	2a03      	cmp	r2, #3
 8010d50:	d04d      	beq.n	8010dee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 8010d52:	d804      	bhi.n	8010d5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8010d54:	2a01      	cmp	r2, #1
 8010d56:	d04c      	beq.n	8010df2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8010d58:	d94d      	bls.n	8010df6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8010d5a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010d5c:	e031      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010d5e:	2a09      	cmp	r2, #9
 8010d60:	d04d      	beq.n	8010dfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8010d62:	d84a      	bhi.n	8010dfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8010d64:	2a08      	cmp	r2, #8
 8010d66:	d048      	beq.n	8010dfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	e02a      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010d6c:	2a2f      	cmp	r2, #47	@ 0x2f
 8010d6e:	d02c      	beq.n	8010dca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8010d70:	d811      	bhi.n	8010d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8010d72:	2a2d      	cmp	r2, #45	@ 0x2d
 8010d74:	d018      	beq.n	8010da8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8010d76:	d831      	bhi.n	8010ddc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8010d78:	2a2c      	cmp	r2, #44	@ 0x2c
 8010d7a:	d1f5      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010d7c:	684a      	ldr	r2, [r1, #4]
 8010d7e:	7813      	ldrb	r3, [r2, #0]
 8010d80:	7852      	ldrb	r2, [r2, #1]
 8010d82:	2a00      	cmp	r2, #0
 8010d84:	d1f0      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d01d      	beq.n	8010dc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d02d      	beq.n	8010dea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8010d8e:	2b02      	cmp	r3, #2
 8010d90:	d1ea      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010d92:	68c3      	ldr	r3, [r0, #12]
 8010d94:	e015      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010d96:	2a31      	cmp	r2, #49	@ 0x31
 8010d98:	d004      	beq.n	8010da4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8010d9a:	d332      	bcc.n	8010e02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010d9c:	2a32      	cmp	r2, #50	@ 0x32
 8010d9e:	d030      	beq.n	8010e02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010da0:	2a33      	cmp	r2, #51	@ 0x33
 8010da2:	d1e1      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010da4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8010da6:	e00c      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010da8:	684a      	ldr	r2, [r1, #4]
 8010daa:	7813      	ldrb	r3, [r2, #0]
 8010dac:	7852      	ldrb	r2, [r2, #1]
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	d1da      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d004      	beq.n	8010dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8010db6:	d30f      	bcc.n	8010dd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010db8:	2b02      	cmp	r3, #2
 8010dba:	d1d5      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010dbc:	6943      	ldr	r3, [r0, #20]
 8010dbe:	e000      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dc0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	4770      	bx	lr
 8010dc6:	69c3      	ldr	r3, [r0, #28]
 8010dc8:	e7fb      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dca:	684b      	ldr	r3, [r1, #4]
 8010dcc:	781a      	ldrb	r2, [r3, #0]
 8010dce:	785b      	ldrb	r3, [r3, #1]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1c9      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010dd4:	2a00      	cmp	r2, #0
 8010dd6:	d1f4      	bne.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dd8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010dda:	e7f2      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ddc:	684b      	ldr	r3, [r1, #4]
 8010dde:	781a      	ldrb	r2, [r3, #0]
 8010de0:	785b      	ldrb	r3, [r3, #1]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1c0      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010de6:	2a00      	cmp	r2, #0
 8010de8:	d1eb      	bne.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010dec:	e7e9      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dee:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010df0:	e7e7      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010df2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8010df4:	e7e5      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010df6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010df8:	e7e3      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dfa:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010dfc:	e7e1      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010dfe:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010e00:	e7df      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e02:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8010e04:	e7dd      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e06:	2a0b      	cmp	r2, #11
 8010e08:	d059      	beq.n	8010ebe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010e0a:	d80e      	bhi.n	8010e2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010e0c:	2a03      	cmp	r2, #3
 8010e0e:	d050      	beq.n	8010eb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8010e10:	d804      	bhi.n	8010e1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8010e12:	2a01      	cmp	r2, #1
 8010e14:	d04f      	beq.n	8010eb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8010e16:	d950      	bls.n	8010eba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010e18:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010e1a:	e7d2      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e1c:	2a09      	cmp	r2, #9
 8010e1e:	d04e      	beq.n	8010ebe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010e20:	d801      	bhi.n	8010e26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8010e22:	2a08      	cmp	r2, #8
 8010e24:	d1a0      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e26:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010e28:	e7cb      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e2a:	2a2f      	cmp	r2, #47	@ 0x2f
 8010e2c:	d02d      	beq.n	8010e8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8010e2e:	d811      	bhi.n	8010e54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8010e30:	2a2d      	cmp	r2, #45	@ 0x2d
 8010e32:	d018      	beq.n	8010e66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8010e34:	d833      	bhi.n	8010e9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8010e36:	2a2c      	cmp	r2, #44	@ 0x2c
 8010e38:	d196      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e3a:	684a      	ldr	r2, [r1, #4]
 8010e3c:	7813      	ldrb	r3, [r2, #0]
 8010e3e:	7852      	ldrb	r2, [r2, #1]
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	d191      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d01e      	beq.n	8010e86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d030      	beq.n	8010eae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d18b      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e50:	6903      	ldr	r3, [r0, #16]
 8010e52:	e7b6      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e54:	2a31      	cmp	r2, #49	@ 0x31
 8010e56:	d004      	beq.n	8010e62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8010e58:	d333      	bcc.n	8010ec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010e5a:	2a32      	cmp	r2, #50	@ 0x32
 8010e5c:	d031      	beq.n	8010ec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010e5e:	2a33      	cmp	r2, #51	@ 0x33
 8010e60:	d182      	bne.n	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e62:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8010e64:	e7ad      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e66:	684a      	ldr	r2, [r1, #4]
 8010e68:	7813      	ldrb	r3, [r2, #0]
 8010e6a:	7852      	ldrb	r2, [r2, #1]
 8010e6c:	2a00      	cmp	r2, #0
 8010e6e:	f47f af7b 	bne.w	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d005      	beq.n	8010e82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8010e76:	d310      	bcc.n	8010e9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8010e78:	2b02      	cmp	r3, #2
 8010e7a:	f47f af75 	bne.w	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e7e:	6983      	ldr	r3, [r0, #24]
 8010e80:	e79f      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010e84:	e79d      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e86:	6a03      	ldr	r3, [r0, #32]
 8010e88:	e79b      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e8a:	684b      	ldr	r3, [r1, #4]
 8010e8c:	781a      	ldrb	r2, [r3, #0]
 8010e8e:	785b      	ldrb	r3, [r3, #1]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f47f af69 	bne.w	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	d193      	bne.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010e9c:	e791      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010e9e:	684b      	ldr	r3, [r1, #4]
 8010ea0:	781a      	ldrb	r2, [r3, #0]
 8010ea2:	785b      	ldrb	r3, [r3, #1]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f47f af5f 	bne.w	8010d68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	d189      	bne.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010eae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010eb0:	e787      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010eb2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010eb4:	e785      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010eb6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010eb8:	e783      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010eba:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010ebc:	e781      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ebe:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010ec0:	e77f      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ec2:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010ec4:	e77d      	b.n	8010dc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08010ec6 <_ZN8touchgfx8LCD16bppD1Ev>:
 8010ec6:	4770      	bx	lr

08010ec8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010ec8:	4770      	bx	lr

08010eca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	ac08      	add	r4, sp, #32
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4688      	mov	r8, r1
 8010edc:	4691      	mov	r9, r2
 8010ede:	f7ff fe57 	bl	8010b90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010ee2:	6833      	ldr	r3, [r6, #0]
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	699f      	ldr	r7, [r3, #24]
 8010eea:	f7ff fd5f 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010eee:	4682      	mov	sl, r0
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f7ff fd8f 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010ef6:	9500      	str	r5, [sp, #0]
 8010ef8:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010efc:	464b      	mov	r3, r9
 8010efe:	a806      	add	r0, sp, #24
 8010f00:	4642      	mov	r2, r8
 8010f02:	4631      	mov	r1, r6
 8010f04:	47b8      	blx	r7
 8010f06:	4628      	mov	r0, r5
 8010f08:	b008      	add	sp, #32
 8010f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010f10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8010f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f14:	2300      	movs	r3, #0
 8010f16:	9300      	str	r3, [sp, #0]
 8010f18:	4b3d      	ldr	r3, [pc, #244]	@ (8011010 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d137      	bne.n	8010f90 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8010f20:	4a3c      	ldr	r2, [pc, #240]	@ (8011014 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010f22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010f26:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d132      	bne.n	8010f94 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8010f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8011018 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f34:	6808      	ldr	r0, [r1, #0]
 8010f36:	6849      	ldr	r1, [r1, #4]
 8010f38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010f3c:	ac02      	add	r4, sp, #8
 8010f3e:	ab02      	add	r3, sp, #8
 8010f40:	c303      	stmia	r3!, {r0, r1}
 8010f42:	4669      	mov	r1, sp
 8010f44:	4620      	mov	r0, r4
 8010f46:	f7fb fd6f 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010f4a:	4668      	mov	r0, sp
 8010f4c:	f7fb fd44 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010f50:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010f54:	f8bd 2000 	ldrh.w	r2, [sp]
 8010f58:	4d30      	ldr	r5, [pc, #192]	@ (801101c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8010f5a:	4413      	add	r3, r2
 8010f5c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010f60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010f68:	6828      	ldr	r0, [r5, #0]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010f70:	6803      	ldr	r3, [r0, #0]
 8010f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f74:	4798      	blx	r3
 8010f76:	f010 0f01 	tst.w	r0, #1
 8010f7a:	462f      	mov	r7, r5
 8010f7c:	d00c      	beq.n	8010f98 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8010f7e:	6828      	ldr	r0, [r5, #0]
 8010f80:	6803      	ldr	r3, [r0, #0]
 8010f82:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010f88:	4798      	blx	r3
 8010f8a:	b004      	add	sp, #16
 8010f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f90:	4a21      	ldr	r2, [pc, #132]	@ (8011018 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010f92:	e7c6      	b.n	8010f22 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8010f94:	4b1f      	ldr	r3, [pc, #124]	@ (8011014 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010f96:	e7cb      	b.n	8010f30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8010f98:	6838      	ldr	r0, [r7, #0]
 8010f9a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010f9e:	6803      	ldr	r3, [r0, #0]
 8010fa0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8010fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fa6:	4798      	blx	r3
 8010fa8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010fac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010fb0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8010fb4:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010fb8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010fbc:	6838      	ldr	r0, [r7, #0]
 8010fbe:	6803      	ldr	r3, [r0, #0]
 8010fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc2:	4798      	blx	r3
 8010fc4:	4a13      	ldr	r2, [pc, #76]	@ (8011014 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010fc6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010fca:	8813      	ldrh	r3, [r2, #0]
 8010fcc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010fd0:	fb03 1404 	mla	r4, r3, r4, r1
 8010fd4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010fd8:	435d      	muls	r5, r3
 8010fda:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010fde:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010fe2:	4691      	mov	r9, r2
 8010fe4:	6838      	ldr	r0, [r7, #0]
 8010fe6:	42ac      	cmp	r4, r5
 8010fe8:	6803      	ldr	r3, [r0, #0]
 8010fea:	d20e      	bcs.n	801100a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010fec:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 8010ff0:	4632      	mov	r2, r6
 8010ff2:	4643      	mov	r3, r8
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	47d0      	blx	sl
 8010ff8:	f8b9 3000 	ldrh.w	r3, [r9]
 8010ffc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011000:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011004:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8011008:	e7ec      	b.n	8010fe4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801100c:	4798      	blx	r3
 801100e:	e7bc      	b.n	8010f8a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8011010:	200125d8 	.word	0x200125d8
 8011014:	200125da 	.word	0x200125da
 8011018:	200125dc 	.word	0x200125dc
 801101c:	200125e0 	.word	0x200125e0

08011020 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8011020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011024:	b08b      	sub	sp, #44	@ 0x2c
 8011026:	460f      	mov	r7, r1
 8011028:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801102c:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8011030:	4616      	mov	r6, r2
 8011032:	f1bb 0f00 	cmp.w	fp, #0
 8011036:	d04a      	beq.n	80110ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8011038:	6810      	ldr	r0, [r2, #0]
 801103a:	6851      	ldr	r1, [r2, #4]
 801103c:	ad06      	add	r5, sp, #24
 801103e:	c503      	stmia	r5!, {r0, r1}
 8011040:	6818      	ldr	r0, [r3, #0]
 8011042:	6859      	ldr	r1, [r3, #4]
 8011044:	ad08      	add	r5, sp, #32
 8011046:	c503      	stmia	r5!, {r0, r1}
 8011048:	a806      	add	r0, sp, #24
 801104a:	f7fb fcc5 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801104e:	4631      	mov	r1, r6
 8011050:	a808      	add	r0, sp, #32
 8011052:	f7fb fce9 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011056:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801105a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801105e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8011062:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8011066:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801106a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801106e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8011072:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011076:	4f5f      	ldr	r7, [pc, #380]	@ (80111f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8011078:	440a      	add	r2, r1
 801107a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801107e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011082:	6838      	ldr	r0, [r7, #0]
 8011084:	4413      	add	r3, r2
 8011086:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801108a:	6803      	ldr	r3, [r0, #0]
 801108c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801108e:	4798      	blx	r3
 8011090:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8011094:	46b9      	mov	r9, r7
 8011096:	d11d      	bne.n	80110d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8011098:	b9fc      	cbnz	r4, 80110da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801109a:	f010 0f01 	tst.w	r0, #1
 801109e:	d01c      	beq.n	80110da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80110a0:	f8d9 0000 	ldr.w	r0, [r9]
 80110a4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80110a8:	6801      	ldr	r1, [r0, #0]
 80110aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80110ae:	2700      	movs	r7, #0
 80110b0:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80110b4:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80110b8:	9402      	str	r4, [sp, #8]
 80110ba:	b2ad      	uxth	r5, r5
 80110bc:	fa1f f488 	uxth.w	r4, r8
 80110c0:	9501      	str	r5, [sp, #4]
 80110c2:	9400      	str	r4, [sp, #0]
 80110c4:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 80110c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80110ca:	4631      	mov	r1, r6
 80110cc:	47a0      	blx	r4
 80110ce:	b00b      	add	sp, #44	@ 0x2c
 80110d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d4:	f010 0f04 	tst.w	r0, #4
 80110d8:	e7e1      	b.n	801109e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80110da:	f8d9 0000 	ldr.w	r0, [r9]
 80110de:	6803      	ldr	r3, [r0, #0]
 80110e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e2:	4798      	blx	r3
 80110e4:	4b44      	ldr	r3, [pc, #272]	@ (80111f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80110e6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80110ea:	881a      	ldrh	r2, [r3, #0]
 80110ec:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80110f0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80110f4:	fb02 1404 	mla	r4, r2, r4, r1
 80110f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80110fc:	469a      	mov	sl, r3
 80110fe:	fb05 f502 	mul.w	r5, r5, r2
 8011102:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8011106:	d059      	beq.n	80111bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8011108:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801110c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8011110:	fa1f f28b 	uxth.w	r2, fp
 8011114:	fa1f f989 	uxth.w	r9, r9
 8011118:	469e      	mov	lr, r3
 801111a:	42ac      	cmp	r4, r5
 801111c:	d264      	bcs.n	80111e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801111e:	eb04 0a07 	add.w	sl, r4, r7
 8011122:	4554      	cmp	r4, sl
 8011124:	d23d      	bcs.n	80111a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8011126:	8821      	ldrh	r1, [r4, #0]
 8011128:	f836 3b02 	ldrh.w	r3, [r6], #2
 801112c:	1208      	asrs	r0, r1, #8
 801112e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011132:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011136:	fb10 f009 	smulbb	r0, r0, r9
 801113a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801113e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011142:	00c9      	lsls	r1, r1, #3
 8011144:	fb0c 0c02 	mla	ip, ip, r2, r0
 8011148:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801114c:	10d8      	asrs	r0, r3, #3
 801114e:	b2c9      	uxtb	r1, r1
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	fa1f fc8c 	uxth.w	ip, ip
 8011156:	fb1b fb09 	smulbb	fp, fp, r9
 801115a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801115e:	b2db      	uxtb	r3, r3
 8011160:	fb11 f109 	smulbb	r1, r1, r9
 8011164:	fb00 b002 	mla	r0, r0, r2, fp
 8011168:	fb03 1302 	mla	r3, r3, r2, r1
 801116c:	f10c 0b01 	add.w	fp, ip, #1
 8011170:	b29b      	uxth	r3, r3
 8011172:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011176:	b280      	uxth	r0, r0
 8011178:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801117c:	f103 0c01 	add.w	ip, r3, #1
 8011180:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801118a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801118e:	0940      	lsrs	r0, r0, #5
 8011190:	ea4c 0c0b 	orr.w	ip, ip, fp
 8011194:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8011198:	ea4c 0c00 	orr.w	ip, ip, r0
 801119c:	f824 cb02 	strh.w	ip, [r4], #2
 80111a0:	e7bf      	b.n	8011122 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80111a2:	f8be 3000 	ldrh.w	r3, [lr]
 80111a6:	eba3 0308 	sub.w	r3, r3, r8
 80111aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80111ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80111b2:	eba3 0308 	sub.w	r3, r3, r8
 80111b6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80111ba:	e7ae      	b.n	801111a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80111bc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80111c0:	f8d9 0000 	ldr.w	r0, [r9]
 80111c4:	42ac      	cmp	r4, r5
 80111c6:	6803      	ldr	r3, [r0, #0]
 80111c8:	d20e      	bcs.n	80111e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80111ca:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 80111ce:	4632      	mov	r2, r6
 80111d0:	463b      	mov	r3, r7
 80111d2:	4621      	mov	r1, r4
 80111d4:	47c0      	blx	r8
 80111d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80111da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80111de:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80111e2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80111e6:	e7eb      	b.n	80111c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80111e8:	4b02      	ldr	r3, [pc, #8]	@ (80111f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80111ea:	6818      	ldr	r0, [r3, #0]
 80111ec:	6803      	ldr	r3, [r0, #0]
 80111ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111f0:	4798      	blx	r3
 80111f2:	e76c      	b.n	80110ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80111f4:	200125e0 	.word	0x200125e0
 80111f8:	200125da 	.word	0x200125da

080111fc <_ZN8touchgfx8LCD16bppD0Ev>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	218c      	movs	r1, #140	@ 0x8c
 8011200:	4604      	mov	r4, r0
 8011202:	f002 faa7 	bl	8013754 <_ZdlPvj>
 8011206:	4620      	mov	r0, r4
 8011208:	bd10      	pop	{r4, pc}

0801120a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801120a:	b510      	push	{r4, lr}
 801120c:	2104      	movs	r1, #4
 801120e:	4604      	mov	r4, r0
 8011210:	f002 faa0 	bl	8013754 <_ZdlPvj>
 8011214:	4620      	mov	r0, r4
 8011216:	bd10      	pop	{r4, pc}

08011218 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	b091      	sub	sp, #68	@ 0x44
 801121e:	469b      	mov	fp, r3
 8011220:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8011224:	4616      	mov	r6, r2
 8011226:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801122a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801122e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8011232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011236:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801123a:	4604      	mov	r4, r0
 801123c:	460d      	mov	r5, r1
 801123e:	4640      	mov	r0, r8
 8011240:	4659      	mov	r1, fp
 8011242:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011246:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801124a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801124e:	f7f7 fea3 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 8011252:	4631      	mov	r1, r6
 8011254:	4640      	mov	r0, r8
 8011256:	f7f7 fe9f 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 801125a:	4b74      	ldr	r3, [pc, #464]	@ (801142c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801125c:	8818      	ldrh	r0, [r3, #0]
 801125e:	4b74      	ldr	r3, [pc, #464]	@ (8011430 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8011260:	8819      	ldrh	r1, [r3, #0]
 8011262:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8011266:	2b00      	cmp	r3, #0
 8011268:	b202      	sxth	r2, r0
 801126a:	b20e      	sxth	r6, r1
 801126c:	da07      	bge.n	801127e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801126e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8011272:	4463      	add	r3, ip
 8011274:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8011278:	2300      	movs	r3, #0
 801127a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801127e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8011282:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011286:	1ad2      	subs	r2, r2, r3
 8011288:	4594      	cmp	ip, r2
 801128a:	bfc4      	itt	gt
 801128c:	1ac2      	subgt	r2, r0, r3
 801128e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8011292:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011296:	2a00      	cmp	r2, #0
 8011298:	da07      	bge.n	80112aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801129a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801129e:	4462      	add	r2, ip
 80112a0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80112a4:	2200      	movs	r2, #0
 80112a6:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80112aa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 80112ae:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80112b2:	eba6 060a 	sub.w	r6, r6, sl
 80112b6:	42b2      	cmp	r2, r6
 80112b8:	bfc4      	itt	gt
 80112ba:	eba1 020a 	subgt.w	r2, r1, sl
 80112be:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80112c2:	4a5c      	ldr	r2, [pc, #368]	@ (8011434 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80112c4:	7812      	ldrb	r2, [r2, #0]
 80112c6:	b9a2      	cbnz	r2, 80112f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80112c8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80112cc:	4286      	cmp	r6, r0
 80112ce:	4640      	mov	r0, r8
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	bf14      	ite	ne
 80112d4:	2600      	movne	r6, #0
 80112d6:	2601      	moveq	r6, #1
 80112d8:	f7f7 fea1 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	b160      	cbz	r0, 80112fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80112e0:	2300      	movs	r3, #0
 80112e2:	8023      	strh	r3, [r4, #0]
 80112e4:	8063      	strh	r3, [r4, #2]
 80112e6:	80a3      	strh	r3, [r4, #4]
 80112e8:	4620      	mov	r0, r4
 80112ea:	80e3      	strh	r3, [r4, #6]
 80112ec:	b011      	add	sp, #68	@ 0x44
 80112ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80112f6:	428e      	cmp	r6, r1
 80112f8:	e7e9      	b.n	80112ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80112fa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80112fe:	9205      	str	r2, [sp, #20]
 8011300:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8011304:	9206      	str	r2, [sp, #24]
 8011306:	f8bb 2000 	ldrh.w	r2, [fp]
 801130a:	900e      	str	r0, [sp, #56]	@ 0x38
 801130c:	1a9b      	subs	r3, r3, r2
 801130e:	b21b      	sxth	r3, r3
 8011310:	9303      	str	r3, [sp, #12]
 8011312:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8011316:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801131a:	ebaa 0a03 	sub.w	sl, sl, r3
 801131e:	fa0f f38a 	sxth.w	r3, sl
 8011322:	9304      	str	r3, [sp, #16]
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801132a:	9b04      	ldr	r3, [sp, #16]
 801132c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011330:	9b05      	ldr	r3, [sp, #20]
 8011332:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8011336:	a90e      	add	r1, sp, #56	@ 0x38
 8011338:	9b06      	ldr	r3, [sp, #24]
 801133a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801133e:	a80c      	add	r0, sp, #48	@ 0x30
 8011340:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8011344:	f7fb fb70 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011348:	4640      	mov	r0, r8
 801134a:	f7fb fb45 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801134e:	a80e      	add	r0, sp, #56	@ 0x38
 8011350:	f7fb fb42 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011354:	4b38      	ldr	r3, [pc, #224]	@ (8011438 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8011356:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801135a:	881b      	ldrh	r3, [r3, #0]
 801135c:	9307      	str	r3, [sp, #28]
 801135e:	682b      	ldr	r3, [r5, #0]
 8011360:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801143c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011366:	4628      	mov	r0, r5
 8011368:	4798      	blx	r3
 801136a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801136e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011372:	4681      	mov	r9, r0
 8011374:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8011378:	f8db 0000 	ldr.w	r0, [fp]
 801137c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801137e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8011382:	6803      	ldr	r3, [r0, #0]
 8011384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011386:	4798      	blx	r3
 8011388:	4607      	mov	r7, r0
 801138a:	f8db 0000 	ldr.w	r0, [fp]
 801138e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8011392:	6803      	ldr	r3, [r0, #0]
 8011394:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011398:	9109      	str	r1, [sp, #36]	@ 0x24
 801139a:	9208      	str	r2, [sp, #32]
 801139c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801139e:	4798      	blx	r3
 80113a0:	f010 0f01 	tst.w	r0, #1
 80113a4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80113a8:	d012      	beq.n	80113d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80113aa:	f8db 0000 	ldr.w	r0, [fp]
 80113ae:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	9200      	str	r2, [sp, #0]
 80113b6:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80113b8:	e898 0006 	ldmia.w	r8, {r1, r2}
 80113bc:	462b      	mov	r3, r5
 80113be:	47b0      	blx	r6
 80113c0:	9b03      	ldr	r3, [sp, #12]
 80113c2:	8023      	strh	r3, [r4, #0]
 80113c4:	9b04      	ldr	r3, [sp, #16]
 80113c6:	8063      	strh	r3, [r4, #2]
 80113c8:	9b05      	ldr	r3, [sp, #20]
 80113ca:	80a3      	strh	r3, [r4, #4]
 80113cc:	9b06      	ldr	r3, [sp, #24]
 80113ce:	e78b      	b.n	80112e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80113d0:	fb09 f202 	mul.w	r2, r9, r2
 80113d4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80113d8:	440f      	add	r7, r1
 80113da:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 80113de:	b166      	cbz	r6, 80113fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80113e0:	9a07      	ldr	r2, [sp, #28]
 80113e2:	4592      	cmp	sl, r2
 80113e4:	d109      	bne.n	80113fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80113e6:	f8db 0000 	ldr.w	r0, [fp]
 80113ea:	6802      	ldr	r2, [r0, #0]
 80113ec:	fb09 f303 	mul.w	r3, r9, r3
 80113f0:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 80113f2:	4629      	mov	r1, r5
 80113f4:	463a      	mov	r2, r7
 80113f6:	47b0      	blx	r6
 80113f8:	e7e2      	b.n	80113c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80113fa:	fb0a f303 	mul.w	r3, sl, r3
 80113fe:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801143c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011402:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8011406:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801140a:	4545      	cmp	r5, r8
 801140c:	d2d8      	bcs.n	80113c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801140e:	f8db 0000 	ldr.w	r0, [fp]
 8011412:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011416:	6802      	ldr	r2, [r0, #0]
 8011418:	4629      	mov	r1, r5
 801141a:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	463a      	mov	r2, r7
 8011422:	47d0      	blx	sl
 8011424:	444f      	add	r7, r9
 8011426:	4435      	add	r5, r6
 8011428:	e7ef      	b.n	801140a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801142a:	bf00      	nop
 801142c:	200125d4 	.word	0x200125d4
 8011430:	200125d6 	.word	0x200125d6
 8011434:	200125d8 	.word	0x200125d8
 8011438:	200125da 	.word	0x200125da
 801143c:	200125e0 	.word	0x200125e0

08011440 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011442:	4606      	mov	r6, r0
 8011444:	b087      	sub	sp, #28
 8011446:	460c      	mov	r4, r1
 8011448:	4617      	mov	r7, r2
 801144a:	461d      	mov	r5, r3
 801144c:	b333      	cbz	r3, 801149c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801144e:	4608      	mov	r0, r1
 8011450:	f7f7 fde5 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011454:	bb10      	cbnz	r0, 801149c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011456:	6820      	ldr	r0, [r4, #0]
 8011458:	6861      	ldr	r1, [r4, #4]
 801145a:	4c1c      	ldr	r4, [pc, #112]	@ (80114cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801145c:	ab04      	add	r3, sp, #16
 801145e:	c303      	stmia	r3!, {r0, r1}
 8011460:	a804      	add	r0, sp, #16
 8011462:	f7fb fab9 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011466:	6820      	ldr	r0, [r4, #0]
 8011468:	6803      	ldr	r3, [r0, #0]
 801146a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801146c:	4798      	blx	r3
 801146e:	2dff      	cmp	r5, #255	@ 0xff
 8011470:	d016      	beq.n	80114a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8011472:	f010 0f08 	tst.w	r0, #8
 8011476:	6820      	ldr	r0, [r4, #0]
 8011478:	d015      	beq.n	80114a6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801147a:	2400      	movs	r4, #0
 801147c:	6801      	ldr	r1, [r0, #0]
 801147e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011482:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011486:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801148a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801148e:	9401      	str	r4, [sp, #4]
 8011490:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8011494:	9400      	str	r4, [sp, #0]
 8011496:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8011498:	4639      	mov	r1, r7
 801149a:	47a0      	blx	r4
 801149c:	b007      	add	sp, #28
 801149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a0:	f010 0f02 	tst.w	r0, #2
 80114a4:	e7e7      	b.n	8011476 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80114a6:	6803      	ldr	r3, [r0, #0]
 80114a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114aa:	4798      	blx	r3
 80114ac:	4b08      	ldr	r3, [pc, #32]	@ (80114d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80114ae:	881a      	ldrh	r2, [r3, #0]
 80114b0:	6833      	ldr	r3, [r6, #0]
 80114b2:	e9cd 7500 	strd	r7, r5, [sp]
 80114b6:	4601      	mov	r1, r0
 80114b8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80114ba:	4630      	mov	r0, r6
 80114bc:	ab04      	add	r3, sp, #16
 80114be:	47a8      	blx	r5
 80114c0:	6820      	ldr	r0, [r4, #0]
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114c6:	4798      	blx	r3
 80114c8:	e7e8      	b.n	801149c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80114ca:	bf00      	nop
 80114cc:	200125e0 	.word	0x200125e0
 80114d0:	200125da 	.word	0x200125da

080114d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80114d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d8:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 80114dc:	9e08      	ldr	r6, [sp, #32]
 80114de:	4688      	mov	r8, r1
 80114e0:	4614      	mov	r4, r2
 80114e2:	461d      	mov	r5, r3
 80114e4:	2f00      	cmp	r7, #0
 80114e6:	f000 80a9 	beq.w	801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7f7 fd97 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	f040 80a3 	bne.w	801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80114f6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80114fa:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80114fe:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8011502:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8011506:	fb04 1303 	mla	r3, r4, r3, r1
 801150a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801150e:	4365      	muls	r5, r4
 8011510:	2fff      	cmp	r7, #255	@ 0xff
 8011512:	eba4 0200 	sub.w	r2, r4, r0
 8011516:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801151a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801151e:	d04a      	beq.n	80115b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8011520:	b2bc      	uxth	r4, r7
 8011522:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8011526:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801152a:	fa5f f788 	uxtb.w	r7, r8
 801152e:	b2f3      	uxtb	r3, r6
 8011530:	0040      	lsls	r0, r0, #1
 8011532:	fb0e fe04 	mul.w	lr, lr, r4
 8011536:	4367      	muls	r7, r4
 8011538:	4363      	muls	r3, r4
 801153a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801153e:	fa1f fc8c 	uxth.w	ip, ip
 8011542:	42a9      	cmp	r1, r5
 8011544:	d27a      	bcs.n	801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011546:	eb01 0900 	add.w	r9, r1, r0
 801154a:	4549      	cmp	r1, r9
 801154c:	d231      	bcs.n	80115b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 801154e:	880a      	ldrh	r2, [r1, #0]
 8011550:	1214      	asrs	r4, r2, #8
 8011552:	10d6      	asrs	r6, r2, #3
 8011554:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8011558:	00d2      	lsls	r2, r2, #3
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011560:	fb14 f40c 	smulbb	r4, r4, ip
 8011564:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011568:	4474      	add	r4, lr
 801156a:	fb12 f20c 	smulbb	r2, r2, ip
 801156e:	b2a4      	uxth	r4, r4
 8011570:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011574:	441a      	add	r2, r3
 8011576:	b292      	uxth	r2, r2
 8011578:	f104 0a01 	add.w	sl, r4, #1
 801157c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8011580:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8011584:	fb16 f60c 	smulbb	r6, r6, ip
 8011588:	f102 0a01 	add.w	sl, r2, #1
 801158c:	443e      	add	r6, r7
 801158e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8011592:	b2b6      	uxth	r6, r6
 8011594:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8011598:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801159c:	4322      	orrs	r2, r4
 801159e:	1c74      	adds	r4, r6, #1
 80115a0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80115a4:	0976      	lsrs	r6, r6, #5
 80115a6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80115aa:	4332      	orrs	r2, r6
 80115ac:	f821 2b02 	strh.w	r2, [r1], #2
 80115b0:	e7cb      	b.n	801154a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 80115b2:	4441      	add	r1, r8
 80115b4:	e7c5      	b.n	8011542 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80115b6:	4f22      	ldr	r7, [pc, #136]	@ (8011640 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80115b8:	0973      	lsrs	r3, r6, #5
 80115ba:	ea08 0707 	and.w	r7, r8, r7
 80115be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80115c2:	433b      	orrs	r3, r7
 80115c4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80115c8:	4333      	orrs	r3, r6
 80115ca:	07e7      	lsls	r7, r4, #31
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	d50b      	bpl.n	80115e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80115d0:	0040      	lsls	r0, r0, #1
 80115d2:	0052      	lsls	r2, r2, #1
 80115d4:	42a9      	cmp	r1, r5
 80115d6:	d231      	bcs.n	801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80115d8:	180c      	adds	r4, r1, r0
 80115da:	42a1      	cmp	r1, r4
 80115dc:	d202      	bcs.n	80115e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80115de:	f821 3b02 	strh.w	r3, [r1], #2
 80115e2:	e7fa      	b.n	80115da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80115e4:	4411      	add	r1, r2
 80115e6:	e7f5      	b.n	80115d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80115e8:	078e      	lsls	r6, r1, #30
 80115ea:	d008      	beq.n	80115fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80115ec:	0066      	lsls	r6, r4, #1
 80115ee:	460a      	mov	r2, r1
 80115f0:	42aa      	cmp	r2, r5
 80115f2:	d202      	bcs.n	80115fa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80115f4:	8013      	strh	r3, [r2, #0]
 80115f6:	4432      	add	r2, r6
 80115f8:	e7fa      	b.n	80115f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80115fa:	3102      	adds	r1, #2
 80115fc:	3801      	subs	r0, #1
 80115fe:	07c2      	lsls	r2, r0, #31
 8011600:	d50b      	bpl.n	801161a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8011602:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8011606:	3a01      	subs	r2, #1
 8011608:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801160c:	0066      	lsls	r6, r4, #1
 801160e:	42aa      	cmp	r2, r5
 8011610:	d202      	bcs.n	8011618 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8011612:	8013      	strh	r3, [r2, #0]
 8011614:	4432      	add	r2, r6
 8011616:	e7fa      	b.n	801160e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8011618:	3801      	subs	r0, #1
 801161a:	b178      	cbz	r0, 801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801161c:	1040      	asrs	r0, r0, #1
 801161e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011622:	0080      	lsls	r0, r0, #2
 8011624:	0064      	lsls	r4, r4, #1
 8011626:	42a9      	cmp	r1, r5
 8011628:	d208      	bcs.n	801163c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801162a:	180e      	adds	r6, r1, r0
 801162c:	460a      	mov	r2, r1
 801162e:	42b2      	cmp	r2, r6
 8011630:	d202      	bcs.n	8011638 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8011632:	f842 3b04 	str.w	r3, [r2], #4
 8011636:	e7fa      	b.n	801162e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8011638:	4421      	add	r1, r4
 801163a:	e7f4      	b.n	8011626 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 801163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011640:	00fff800 	.word	0x00fff800

08011644 <_ZN8touchgfx8LCD16bppC1Ev>:
 8011644:	2200      	movs	r2, #0
 8011646:	4912      	ldr	r1, [pc, #72]	@ (8011690 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8011648:	6001      	str	r1, [r0, #0]
 801164a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801164e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011652:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011656:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801165a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801165e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8011662:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8011666:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801166a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801166e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8011672:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8011676:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801167a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801167e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8011682:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8011686:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801168a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801168e:	4770      	bx	lr
 8011690:	080160c8 	.word	0x080160c8

08011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	460d      	mov	r5, r1
 801169a:	b08d      	sub	sp, #52	@ 0x34
 801169c:	4604      	mov	r4, r0
 801169e:	6808      	ldr	r0, [r1, #0]
 80116a0:	6849      	ldr	r1, [r1, #4]
 80116a2:	4699      	mov	r9, r3
 80116a4:	ab08      	add	r3, sp, #32
 80116a6:	c303      	stmia	r3!, {r0, r1}
 80116a8:	6810      	ldr	r0, [r2, #0]
 80116aa:	6851      	ldr	r1, [r2, #4]
 80116ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80116ae:	c303      	stmia	r3!, {r0, r1}
 80116b0:	a808      	add	r0, sp, #32
 80116b2:	f7fb f991 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80116b6:	4629      	mov	r1, r5
 80116b8:	a80a      	add	r0, sp, #40	@ 0x28
 80116ba:	f7fb f9b5 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80116be:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80116c2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80116c6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80116ca:	4d63      	ldr	r5, [pc, #396]	@ (8011858 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80116cc:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 80116d0:	6828      	ldr	r0, [r5, #0]
 80116d2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80116d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80116da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80116de:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80116e2:	440a      	add	r2, r1
 80116e4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80116e8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80116ec:	4413      	add	r3, r2
 80116ee:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80116f2:	6803      	ldr	r3, [r0, #0]
 80116f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f6:	4798      	blx	r3
 80116f8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80116fc:	d119      	bne.n	8011732 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80116fe:	f010 0f20 	tst.w	r0, #32
 8011702:	6828      	ldr	r0, [r5, #0]
 8011704:	d018      	beq.n	8011738 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8011706:	2500      	movs	r5, #0
 8011708:	6801      	ldr	r1, [r0, #0]
 801170a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801170e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8011712:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8011716:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801171a:	9502      	str	r5, [sp, #8]
 801171c:	b2b6      	uxth	r6, r6
 801171e:	fa1f f588 	uxth.w	r5, r8
 8011722:	9601      	str	r6, [sp, #4]
 8011724:	9500      	str	r5, [sp, #0]
 8011726:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8011728:	4621      	mov	r1, r4
 801172a:	47a8      	blx	r5
 801172c:	b00d      	add	sp, #52	@ 0x34
 801172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011732:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8011736:	e7e4      	b.n	8011702 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8011738:	6803      	ldr	r3, [r0, #0]
 801173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801173c:	4798      	blx	r3
 801173e:	4947      	ldr	r1, [pc, #284]	@ (801185c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8011740:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011744:	880b      	ldrh	r3, [r1, #0]
 8011746:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801174a:	fb03 5202 	mla	r2, r3, r2, r5
 801174e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011752:	4373      	muls	r3, r6
 8011754:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011758:	9307      	str	r3, [sp, #28]
 801175a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801175e:	9306      	str	r3, [sp, #24]
 8011760:	468a      	mov	sl, r1
 8011762:	9b07      	ldr	r3, [sp, #28]
 8011764:	4298      	cmp	r0, r3
 8011766:	d270      	bcs.n	801184a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8011768:	9b06      	ldr	r3, [sp, #24]
 801176a:	4621      	mov	r1, r4
 801176c:	eb00 0b03 	add.w	fp, r0, r3
 8011770:	4558      	cmp	r0, fp
 8011772:	d25d      	bcs.n	8011830 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8011774:	f851 4b04 	ldr.w	r4, [r1], #4
 8011778:	0e23      	lsrs	r3, r4, #24
 801177a:	d014      	beq.n	80117a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801177c:	2bff      	cmp	r3, #255	@ 0xff
 801177e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8011782:	d112      	bne.n	80117aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011784:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011788:	d10f      	bne.n	80117aa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801178a:	0963      	lsrs	r3, r4, #5
 801178c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8011790:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011794:	f02c 0c07 	bic.w	ip, ip, #7
 8011798:	ea43 0c0c 	orr.w	ip, r3, ip
 801179c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80117a0:	ea4c 0404 	orr.w	r4, ip, r4
 80117a4:	8004      	strh	r4, [r0, #0]
 80117a6:	3002      	adds	r0, #2
 80117a8:	e7e2      	b.n	8011770 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80117aa:	fb09 f303 	mul.w	r3, r9, r3
 80117ae:	8807      	ldrh	r7, [r0, #0]
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80117b6:	1212      	asrs	r2, r2, #8
 80117b8:	123e      	asrs	r6, r7, #8
 80117ba:	b293      	uxth	r3, r2
 80117bc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80117c0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80117c4:	43d2      	mvns	r2, r2
 80117c6:	b2d2      	uxtb	r2, r2
 80117c8:	10fd      	asrs	r5, r7, #3
 80117ca:	fb1e fe03 	smulbb	lr, lr, r3
 80117ce:	00ff      	lsls	r7, r7, #3
 80117d0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80117d4:	fb06 e602 	mla	r6, r6, r2, lr
 80117d8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80117dc:	b2ff      	uxtb	r7, r7
 80117de:	fa5f fc8c 	uxtb.w	ip, ip
 80117e2:	b2e4      	uxtb	r4, r4
 80117e4:	b2b6      	uxth	r6, r6
 80117e6:	fb1c fc03 	smulbb	ip, ip, r3
 80117ea:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80117ee:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80117f2:	fb14 f403 	smulbb	r4, r4, r3
 80117f6:	fb05 c502 	mla	r5, r5, r2, ip
 80117fa:	f106 0e01 	add.w	lr, r6, #1
 80117fe:	fb07 4702 	mla	r7, r7, r2, r4
 8011802:	b2ad      	uxth	r5, r5
 8011804:	b2bf      	uxth	r7, r7
 8011806:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801180a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801180e:	f105 0c01 	add.w	ip, r5, #1
 8011812:	1c7e      	adds	r6, r7, #1
 8011814:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8011818:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801181c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8011820:	096d      	lsrs	r5, r5, #5
 8011822:	ea46 060e 	orr.w	r6, r6, lr
 8011826:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801182a:	432e      	orrs	r6, r5
 801182c:	8006      	strh	r6, [r0, #0]
 801182e:	e7ba      	b.n	80117a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8011830:	f8ba 3000 	ldrh.w	r3, [sl]
 8011834:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8011838:	eba3 0308 	sub.w	r3, r3, r8
 801183c:	eba4 0408 	sub.w	r4, r4, r8
 8011840:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011844:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8011848:	e78b      	b.n	8011762 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801184a:	4b03      	ldr	r3, [pc, #12]	@ (8011858 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801184c:	6818      	ldr	r0, [r3, #0]
 801184e:	6803      	ldr	r3, [r0, #0]
 8011850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011852:	4798      	blx	r3
 8011854:	e76a      	b.n	801172c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8011856:	bf00      	nop
 8011858:	200125e0 	.word	0x200125e0
 801185c:	200125da 	.word	0x200125da

08011860 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8011860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011864:	460c      	mov	r4, r1
 8011866:	b085      	sub	sp, #20
 8011868:	6810      	ldr	r0, [r2, #0]
 801186a:	6851      	ldr	r1, [r2, #4]
 801186c:	466d      	mov	r5, sp
 801186e:	c503      	stmia	r5!, {r0, r1}
 8011870:	6818      	ldr	r0, [r3, #0]
 8011872:	6859      	ldr	r1, [r3, #4]
 8011874:	4616      	mov	r6, r2
 8011876:	c503      	stmia	r5!, {r0, r1}
 8011878:	4668      	mov	r0, sp
 801187a:	f7fb f8ad 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801187e:	4631      	mov	r1, r6
 8011880:	a802      	add	r0, sp, #8
 8011882:	f7fb f8d1 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011886:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801188a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801188e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8011892:	4d28      	ldr	r5, [pc, #160]	@ (8011934 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8011894:	4e28      	ldr	r6, [pc, #160]	@ (8011938 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8011896:	6828      	ldr	r0, [r5, #0]
 8011898:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801189c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80118a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80118a4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80118a8:	f8bd 1000 	ldrh.w	r1, [sp]
 80118ac:	440a      	add	r2, r1
 80118ae:	f8ad 2008 	strh.w	r2, [sp, #8]
 80118b2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80118b6:	4413      	add	r3, r2
 80118b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80118bc:	6803      	ldr	r3, [r0, #0]
 80118be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118c0:	4798      	blx	r3
 80118c2:	8833      	ldrh	r3, [r6, #0]
 80118c4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80118c8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80118cc:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 801193c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80118d0:	fb03 1202 	mla	r2, r3, r2, r1
 80118d4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80118d8:	fb08 f303 	mul.w	r3, r8, r3
 80118dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80118e0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80118e4:	4298      	cmp	r0, r3
 80118e6:	d21d      	bcs.n	8011924 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80118e8:	eb00 080c 	add.w	r8, r0, ip
 80118ec:	4540      	cmp	r0, r8
 80118ee:	d20f      	bcs.n	8011910 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80118f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80118f4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80118f8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80118fc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011900:	ea42 0209 	orr.w	r2, r2, r9
 8011904:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011908:	430a      	orrs	r2, r1
 801190a:	f820 2b02 	strh.w	r2, [r0], #2
 801190e:	e7ed      	b.n	80118ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8011910:	8832      	ldrh	r2, [r6, #0]
 8011912:	1bd2      	subs	r2, r2, r7
 8011914:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011918:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801191c:	1bd2      	subs	r2, r2, r7
 801191e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8011922:	e7df      	b.n	80118e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8011924:	6828      	ldr	r0, [r5, #0]
 8011926:	6803      	ldr	r3, [r0, #0]
 8011928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801192a:	4798      	blx	r3
 801192c:	b005      	add	sp, #20
 801192e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011932:	bf00      	nop
 8011934:	200125e0 	.word	0x200125e0
 8011938:	200125da 	.word	0x200125da
 801193c:	fffff800 	.word	0xfffff800

08011940 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8011940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011944:	460e      	mov	r6, r1
 8011946:	b08e      	sub	sp, #56	@ 0x38
 8011948:	4604      	mov	r4, r0
 801194a:	6808      	ldr	r0, [r1, #0]
 801194c:	6849      	ldr	r1, [r1, #4]
 801194e:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8011b28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8011952:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8011b2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8011956:	461d      	mov	r5, r3
 8011958:	ab0a      	add	r3, sp, #40	@ 0x28
 801195a:	c303      	stmia	r3!, {r0, r1}
 801195c:	6810      	ldr	r0, [r2, #0]
 801195e:	6851      	ldr	r1, [r2, #4]
 8011960:	ab0c      	add	r3, sp, #48	@ 0x30
 8011962:	c303      	stmia	r3!, {r0, r1}
 8011964:	a80a      	add	r0, sp, #40	@ 0x28
 8011966:	f7fb f837 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801196a:	4631      	mov	r1, r6
 801196c:	a80c      	add	r0, sp, #48	@ 0x30
 801196e:	f7fb f85b 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011972:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8011976:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801197a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801197e:	f8d8 0000 	ldr.w	r0, [r8]
 8011982:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8011986:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801198a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801198e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011992:	440c      	add	r4, r1
 8011994:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8011998:	440a      	add	r2, r1
 801199a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801199e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80119a2:	4413      	add	r3, r2
 80119a4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80119a8:	6803      	ldr	r3, [r0, #0]
 80119aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119ac:	4798      	blx	r3
 80119ae:	2dff      	cmp	r5, #255	@ 0xff
 80119b0:	d124      	bne.n	80119fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80119b2:	f010 0f01 	tst.w	r0, #1
 80119b6:	f8d8 0000 	ldr.w	r0, [r8]
 80119ba:	d022      	beq.n	8011a02 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80119bc:	2100      	movs	r1, #0
 80119be:	f8d0 c000 	ldr.w	ip, [r0]
 80119c2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80119c6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80119ca:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80119ce:	f04f 0e01 	mov.w	lr, #1
 80119d2:	f8cd e018 	str.w	lr, [sp, #24]
 80119d6:	f8b9 e000 	ldrh.w	lr, [r9]
 80119da:	9503      	str	r5, [sp, #12]
 80119dc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80119e0:	b2b6      	uxth	r6, r6
 80119e2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80119e6:	9102      	str	r1, [sp, #8]
 80119e8:	b2bf      	uxth	r7, r7
 80119ea:	9601      	str	r6, [sp, #4]
 80119ec:	9700      	str	r7, [sp, #0]
 80119ee:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 80119f2:	4621      	mov	r1, r4
 80119f4:	47a8      	blx	r5
 80119f6:	b00e      	add	sp, #56	@ 0x38
 80119f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fc:	f010 0f04 	tst.w	r0, #4
 8011a00:	e7d9      	b.n	80119b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8011a02:	6803      	ldr	r3, [r0, #0]
 8011a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a06:	4798      	blx	r3
 8011a08:	f8b9 3000 	ldrh.w	r3, [r9]
 8011a0c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8011a10:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8011a14:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011a18:	fb03 1202 	mla	r2, r3, r2, r1
 8011a1c:	ebac 0c07 	sub.w	ip, ip, r7
 8011a20:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011a24:	435e      	muls	r6, r3
 8011a26:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8011a2a:	2dff      	cmp	r5, #255	@ 0xff
 8011a2c:	eba3 0707 	sub.w	r7, r3, r7
 8011a30:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8011a34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011a38:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8011a3c:	d049      	beq.n	8011ad2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8011a3e:	43eb      	mvns	r3, r5
 8011a40:	fa1f f985 	uxth.w	r9, r5
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	42b0      	cmp	r0, r6
 8011a48:	d266      	bcs.n	8011b18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011a4a:	eb00 0a0e 	add.w	sl, r0, lr
 8011a4e:	4550      	cmp	r0, sl
 8011a50:	4621      	mov	r1, r4
 8011a52:	f104 0403 	add.w	r4, r4, #3
 8011a56:	d25b      	bcs.n	8011b10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8011a58:	8802      	ldrh	r2, [r0, #0]
 8011a5a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8011a5e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8011a62:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8011a66:	fb11 f109 	smulbb	r1, r1, r9
 8011a6a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8011a6e:	10d5      	asrs	r5, r2, #3
 8011a70:	fb08 1803 	mla	r8, r8, r3, r1
 8011a74:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8011a78:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011a7c:	fb11 f109 	smulbb	r1, r1, r9
 8011a80:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8011a84:	fb05 1503 	mla	r5, r5, r3, r1
 8011a88:	00d2      	lsls	r2, r2, #3
 8011a8a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8011a8e:	b2d2      	uxtb	r2, r2
 8011a90:	fb11 f109 	smulbb	r1, r1, r9
 8011a94:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011a98:	fa1f f888 	uxth.w	r8, r8
 8011a9c:	fb02 1203 	mla	r2, r2, r3, r1
 8011aa0:	b292      	uxth	r2, r2
 8011aa2:	f108 0101 	add.w	r1, r8, #1
 8011aa6:	b2ad      	uxth	r5, r5
 8011aa8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8011aac:	1c51      	adds	r1, r2, #1
 8011aae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011ab2:	1c69      	adds	r1, r5, #1
 8011ab4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8011ab8:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8011abc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8011ac0:	096d      	lsrs	r5, r5, #5
 8011ac2:	ea42 0208 	orr.w	r2, r2, r8
 8011ac6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011aca:	432a      	orrs	r2, r5
 8011acc:	f820 2b02 	strh.w	r2, [r0], #2
 8011ad0:	e7bd      	b.n	8011a4e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8011ad2:	4a14      	ldr	r2, [pc, #80]	@ (8011b24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8011ad4:	42b0      	cmp	r0, r6
 8011ad6:	d21f      	bcs.n	8011b18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011ad8:	eb00 050e 	add.w	r5, r0, lr
 8011adc:	42a8      	cmp	r0, r5
 8011ade:	4621      	mov	r1, r4
 8011ae0:	f104 0403 	add.w	r4, r4, #3
 8011ae4:	d210      	bcs.n	8011b08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8011ae6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8011aea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8011af4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011af8:	430b      	orrs	r3, r1
 8011afa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8011afe:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8011b02:	f820 3b02 	strh.w	r3, [r0], #2
 8011b06:	e7e9      	b.n	8011adc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8011b08:	4438      	add	r0, r7
 8011b0a:	eb01 040c 	add.w	r4, r1, ip
 8011b0e:	e7e1      	b.n	8011ad4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8011b10:	4438      	add	r0, r7
 8011b12:	eb01 040c 	add.w	r4, r1, ip
 8011b16:	e796      	b.n	8011a46 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8011b18:	4b03      	ldr	r3, [pc, #12]	@ (8011b28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8011b1a:	6818      	ldr	r0, [r3, #0]
 8011b1c:	6803      	ldr	r3, [r0, #0]
 8011b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b20:	4798      	blx	r3
 8011b22:	e768      	b.n	80119f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8011b24:	fffff800 	.word	0xfffff800
 8011b28:	200125e0 	.word	0x200125e0
 8011b2c:	200125da 	.word	0x200125da

08011b30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8011b30:	b4f0      	push	{r4, r5, r6, r7}
 8011b32:	4616      	mov	r6, r2
 8011b34:	2e01      	cmp	r6, #1
 8011b36:	461c      	mov	r4, r3
 8011b38:	460d      	mov	r5, r1
 8011b3a:	9a04      	ldr	r2, [sp, #16]
 8011b3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011b40:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8011b44:	d012      	beq.n	8011b6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8011b46:	d303      	bcc.n	8011b50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8011b48:	2e02      	cmp	r6, #2
 8011b4a:	d00a      	beq.n	8011b62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8011b4c:	bcf0      	pop	{r4, r5, r6, r7}
 8011b4e:	4770      	bx	lr
 8011b50:	6805      	ldr	r5, [r0, #0]
 8011b52:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8011b56:	68ed      	ldr	r5, [r5, #12]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	46ac      	mov	ip, r5
 8011b5c:	4622      	mov	r2, r4
 8011b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8011b60:	4760      	bx	ip
 8011b62:	4621      	mov	r1, r4
 8011b64:	4628      	mov	r0, r5
 8011b66:	bcf0      	pop	{r4, r5, r6, r7}
 8011b68:	f7ff bd94 	b.w	8011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	4628      	mov	r0, r5
 8011b70:	bcf0      	pop	{r4, r5, r6, r7}
 8011b72:	f7ff bee5 	b.w	8011940 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08011b78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	4681      	mov	r9, r0
 8011b7e:	b093      	sub	sp, #76	@ 0x4c
 8011b80:	6810      	ldr	r0, [r2, #0]
 8011b82:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8011b86:	4f6d      	ldr	r7, [pc, #436]	@ (8011d3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8011b88:	4688      	mov	r8, r1
 8011b8a:	6851      	ldr	r1, [r2, #4]
 8011b8c:	ac0e      	add	r4, sp, #56	@ 0x38
 8011b8e:	c403      	stmia	r4!, {r0, r1}
 8011b90:	6818      	ldr	r0, [r3, #0]
 8011b92:	6859      	ldr	r1, [r3, #4]
 8011b94:	ac10      	add	r4, sp, #64	@ 0x40
 8011b96:	4616      	mov	r6, r2
 8011b98:	c403      	stmia	r4!, {r0, r1}
 8011b9a:	a80e      	add	r0, sp, #56	@ 0x38
 8011b9c:	f7fa ff1c 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011ba0:	4631      	mov	r1, r6
 8011ba2:	a810      	add	r0, sp, #64	@ 0x40
 8011ba4:	f7fa ff40 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011ba8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8011bac:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8011bb0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011bb4:	4e62      	ldr	r6, [pc, #392]	@ (8011d40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011bb6:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8011bba:	6830      	ldr	r0, [r6, #0]
 8011bbc:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8011bc0:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011bc4:	4489      	add	r9, r1
 8011bc6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8011bca:	440a      	add	r2, r1
 8011bcc:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011bd0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8011bda:	6803      	ldr	r3, [r0, #0]
 8011bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bde:	4798      	blx	r3
 8011be0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011be4:	6830      	ldr	r0, [r6, #0]
 8011be6:	d01d      	beq.n	8011c24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011be8:	2200      	movs	r2, #0
 8011bea:	6801      	ldr	r1, [r0, #0]
 8011bec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011bf0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011bf4:	220b      	movs	r2, #11
 8011bf6:	9207      	str	r2, [sp, #28]
 8011bf8:	883a      	ldrh	r2, [r7, #0]
 8011bfa:	9206      	str	r2, [sp, #24]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	e9cd a204 	strd	sl, r2, [sp, #16]
 8011c02:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8011c06:	9203      	str	r2, [sp, #12]
 8011c08:	b2a4      	uxth	r4, r4
 8011c0a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011c0e:	9200      	str	r2, [sp, #0]
 8011c10:	b2ad      	uxth	r5, r5
 8011c12:	9502      	str	r5, [sp, #8]
 8011c14:	9401      	str	r4, [sp, #4]
 8011c16:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8011c18:	4642      	mov	r2, r8
 8011c1a:	4649      	mov	r1, r9
 8011c1c:	47a0      	blx	r4
 8011c1e:	b013      	add	sp, #76	@ 0x4c
 8011c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c24:	6803      	ldr	r3, [r0, #0]
 8011c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c28:	4798      	blx	r3
 8011c2a:	883b      	ldrh	r3, [r7, #0]
 8011c2c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8011c30:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8011c34:	fb03 1202 	mla	r2, r3, r2, r1
 8011c38:	435d      	muls	r5, r3
 8011c3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011c3e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8011c42:	920c      	str	r2, [sp, #48]	@ 0x30
 8011c44:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8011c48:	1b12      	subs	r2, r2, r4
 8011c4a:	920d      	str	r2, [sp, #52]	@ 0x34
 8011c4c:	0062      	lsls	r2, r4, #1
 8011c4e:	1b1c      	subs	r4, r3, r4
 8011c50:	0063      	lsls	r3, r4, #1
 8011c52:	920a      	str	r2, [sp, #40]	@ 0x28
 8011c54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c56:	f04f 0e04 	mov.w	lr, #4
 8011c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c5c:	4298      	cmp	r0, r3
 8011c5e:	d266      	bcs.n	8011d2e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8011c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c62:	eb00 0b03 	add.w	fp, r0, r3
 8011c66:	4558      	cmp	r0, fp
 8011c68:	d25c      	bcs.n	8011d24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8011c6a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011c6e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8011c72:	f858 2003 	ldr.w	r2, [r8, r3]
 8011c76:	0e11      	lsrs	r1, r2, #24
 8011c78:	d012      	beq.n	8011ca0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011c7a:	29ff      	cmp	r1, #255	@ 0xff
 8011c7c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8011c80:	d110      	bne.n	8011ca4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011c82:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011c86:	d10d      	bne.n	8011ca4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011c88:	0953      	lsrs	r3, r2, #5
 8011c8a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8011c8e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011c92:	f027 0707 	bic.w	r7, r7, #7
 8011c96:	431f      	orrs	r7, r3
 8011c98:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011c9c:	433a      	orrs	r2, r7
 8011c9e:	8002      	strh	r2, [r0, #0]
 8011ca0:	3002      	adds	r0, #2
 8011ca2:	e7e0      	b.n	8011c66 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8011ca4:	fb0a f101 	mul.w	r1, sl, r1
 8011ca8:	8806      	ldrh	r6, [r0, #0]
 8011caa:	1c4b      	adds	r3, r1, #1
 8011cac:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8011cb0:	1235      	asrs	r5, r6, #8
 8011cb2:	10f4      	asrs	r4, r6, #3
 8011cb4:	121b      	asrs	r3, r3, #8
 8011cb6:	00f6      	lsls	r6, r6, #3
 8011cb8:	b299      	uxth	r1, r3
 8011cba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011cbe:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011cc2:	b2f6      	uxtb	r6, r6
 8011cc4:	43db      	mvns	r3, r3
 8011cc6:	b2d2      	uxtb	r2, r2
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	fb1c fc01 	smulbb	ip, ip, r1
 8011cce:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8011cd2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011cd6:	fb12 f201 	smulbb	r2, r2, r1
 8011cda:	fb05 c503 	mla	r5, r5, r3, ip
 8011cde:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8011ce2:	b2ff      	uxtb	r7, r7
 8011ce4:	fb06 2203 	mla	r2, r6, r3, r2
 8011ce8:	b2ad      	uxth	r5, r5
 8011cea:	fb17 f701 	smulbb	r7, r7, r1
 8011cee:	b292      	uxth	r2, r2
 8011cf0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8011cf4:	fb04 7403 	mla	r4, r4, r3, r7
 8011cf8:	f105 0c01 	add.w	ip, r5, #1
 8011cfc:	1c57      	adds	r7, r2, #1
 8011cfe:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8011d02:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011d06:	b2a4      	uxth	r4, r4
 8011d08:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011d0c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8011d10:	433d      	orrs	r5, r7
 8011d12:	1c67      	adds	r7, r4, #1
 8011d14:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8011d18:	0964      	lsrs	r4, r4, #5
 8011d1a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8011d1e:	4325      	orrs	r5, r4
 8011d20:	8005      	strh	r5, [r0, #0]
 8011d22:	e7bd      	b.n	8011ca0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d26:	4418      	add	r0, r3
 8011d28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d2a:	4499      	add	r9, r3
 8011d2c:	e795      	b.n	8011c5a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8011d2e:	4b04      	ldr	r3, [pc, #16]	@ (8011d40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011d30:	6818      	ldr	r0, [r3, #0]
 8011d32:	6803      	ldr	r3, [r0, #0]
 8011d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d36:	4798      	blx	r3
 8011d38:	e771      	b.n	8011c1e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8011d3a:	bf00      	nop
 8011d3c:	200125da 	.word	0x200125da
 8011d40:	200125e0 	.word	0x200125e0

08011d44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8011d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d48:	b087      	sub	sp, #28
 8011d4a:	4680      	mov	r8, r0
 8011d4c:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8011d50:	460d      	mov	r5, r1
 8011d52:	4614      	mov	r4, r2
 8011d54:	2e00      	cmp	r6, #0
 8011d56:	f000 80b9 	beq.w	8011ecc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8011d5a:	6810      	ldr	r0, [r2, #0]
 8011d5c:	6851      	ldr	r1, [r2, #4]
 8011d5e:	af02      	add	r7, sp, #8
 8011d60:	c703      	stmia	r7!, {r0, r1}
 8011d62:	6818      	ldr	r0, [r3, #0]
 8011d64:	6859      	ldr	r1, [r3, #4]
 8011d66:	af04      	add	r7, sp, #16
 8011d68:	c703      	stmia	r7!, {r0, r1}
 8011d6a:	a802      	add	r0, sp, #8
 8011d6c:	f7fa fe34 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011d70:	4621      	mov	r1, r4
 8011d72:	a804      	add	r0, sp, #16
 8011d74:	f7fa fe58 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011d78:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011d7c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011d80:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8011d84:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8011d88:	fb14 2103 	smlabb	r1, r4, r3, r2
 8011d8c:	eb08 0401 	add.w	r4, r8, r1
 8011d90:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011d94:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011d98:	440a      	add	r2, r1
 8011d9a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011d9e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011da2:	4413      	add	r3, r2
 8011da4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011da8:	4b4a      	ldr	r3, [pc, #296]	@ (8011ed4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	6803      	ldr	r3, [r0, #0]
 8011dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db0:	4798      	blx	r3
 8011db2:	4b49      	ldr	r3, [pc, #292]	@ (8011ed8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8011db4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011db8:	881a      	ldrh	r2, [r3, #0]
 8011dba:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011dbe:	2eff      	cmp	r6, #255	@ 0xff
 8011dc0:	fb02 c101 	mla	r1, r2, r1, ip
 8011dc4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011dc8:	fb02 f207 	mul.w	r2, r2, r7
 8011dcc:	f105 0104 	add.w	r1, r5, #4
 8011dd0:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8011dd4:	461d      	mov	r5, r3
 8011dd6:	d05a      	beq.n	8011e8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011dd8:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011ddc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011de0:	b2b6      	uxth	r6, r6
 8011de2:	fa1f fe8e 	uxth.w	lr, lr
 8011de6:	9301      	str	r3, [sp, #4]
 8011de8:	4282      	cmp	r2, r0
 8011dea:	d96a      	bls.n	8011ec2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011dec:	eb00 0b0a 	add.w	fp, r0, sl
 8011df0:	4583      	cmp	fp, r0
 8011df2:	d940      	bls.n	8011e76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8011df4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011df8:	8805      	ldrh	r5, [r0, #0]
 8011dfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011dfe:	122f      	asrs	r7, r5, #8
 8011e00:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011e04:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011e08:	fb17 f70e 	smulbb	r7, r7, lr
 8011e0c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8011e10:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011e14:	00ed      	lsls	r5, r5, #3
 8011e16:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011e1a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8011e1e:	10df      	asrs	r7, r3, #3
 8011e20:	b2ed      	uxtb	r5, r5
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	fa1f fc8c 	uxth.w	ip, ip
 8011e28:	fb19 f90e 	smulbb	r9, r9, lr
 8011e2c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	fb15 f50e 	smulbb	r5, r5, lr
 8011e36:	fb07 9706 	mla	r7, r7, r6, r9
 8011e3a:	fb03 5306 	mla	r3, r3, r6, r5
 8011e3e:	f10c 0901 	add.w	r9, ip, #1
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011e48:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8011e4c:	f103 0c01 	add.w	ip, r3, #1
 8011e50:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011e54:	b2bf      	uxth	r7, r7
 8011e56:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011e5a:	ea4c 0c09 	orr.w	ip, ip, r9
 8011e5e:	f107 0901 	add.w	r9, r7, #1
 8011e62:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011e66:	097f      	lsrs	r7, r7, #5
 8011e68:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8011e6c:	ea4c 0c07 	orr.w	ip, ip, r7
 8011e70:	f820 cb02 	strh.w	ip, [r0], #2
 8011e74:	e7bc      	b.n	8011df0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8011e76:	9b01      	ldr	r3, [sp, #4]
 8011e78:	881b      	ldrh	r3, [r3, #0]
 8011e7a:	eba3 0308 	sub.w	r3, r3, r8
 8011e7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011e82:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011e86:	eba3 0308 	sub.w	r3, r3, r8
 8011e8a:	441c      	add	r4, r3
 8011e8c:	e7ac      	b.n	8011de8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8011e8e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011e92:	4282      	cmp	r2, r0
 8011e94:	d915      	bls.n	8011ec2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011e96:	eb00 060a 	add.w	r6, r0, sl
 8011e9a:	4286      	cmp	r6, r0
 8011e9c:	d906      	bls.n	8011eac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8011e9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011ea2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011ea6:	f820 3b02 	strh.w	r3, [r0], #2
 8011eaa:	e7f6      	b.n	8011e9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8011eac:	882b      	ldrh	r3, [r5, #0]
 8011eae:	eba3 0308 	sub.w	r3, r3, r8
 8011eb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011eb6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011eba:	eba3 0308 	sub.w	r3, r3, r8
 8011ebe:	441c      	add	r4, r3
 8011ec0:	e7e7      	b.n	8011e92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8011ec2:	4b04      	ldr	r3, [pc, #16]	@ (8011ed4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011ec4:	6818      	ldr	r0, [r3, #0]
 8011ec6:	6803      	ldr	r3, [r0, #0]
 8011ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eca:	4798      	blx	r3
 8011ecc:	b007      	add	sp, #28
 8011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed2:	bf00      	nop
 8011ed4:	200125e0 	.word	0x200125e0
 8011ed8:	200125da 	.word	0x200125da

08011edc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee0:	b091      	sub	sp, #68	@ 0x44
 8011ee2:	4680      	mov	r8, r0
 8011ee4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011ee8:	460f      	mov	r7, r1
 8011eea:	4614      	mov	r4, r2
 8011eec:	2d00      	cmp	r5, #0
 8011eee:	d051      	beq.n	8011f94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011ef0:	6810      	ldr	r0, [r2, #0]
 8011ef2:	6851      	ldr	r1, [r2, #4]
 8011ef4:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 80120f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011ef8:	ae0c      	add	r6, sp, #48	@ 0x30
 8011efa:	c603      	stmia	r6!, {r0, r1}
 8011efc:	6818      	ldr	r0, [r3, #0]
 8011efe:	6859      	ldr	r1, [r3, #4]
 8011f00:	ae0e      	add	r6, sp, #56	@ 0x38
 8011f02:	c603      	stmia	r6!, {r0, r1}
 8011f04:	a80c      	add	r0, sp, #48	@ 0x30
 8011f06:	f7fa fd67 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	a80e      	add	r0, sp, #56	@ 0x38
 8011f0e:	f7fa fd8b 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011f12:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8011f16:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011f1a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011f1e:	f8d9 0000 	ldr.w	r0, [r9]
 8011f22:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8011f26:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8011f2a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011f2e:	eb08 0401 	add.w	r4, r8, r1
 8011f32:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8011f36:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 80120fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8011f3a:	440a      	add	r2, r1
 8011f3c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8011f40:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8011f44:	4413      	add	r3, r2
 8011f46:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8011f4a:	6803      	ldr	r3, [r0, #0]
 8011f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f4e:	4798      	blx	r3
 8011f50:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011f54:	f8d9 0000 	ldr.w	r0, [r9]
 8011f58:	d01f      	beq.n	8011f9a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	6801      	ldr	r1, [r0, #0]
 8011f5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8011f62:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011f66:	220b      	movs	r2, #11
 8011f68:	9207      	str	r2, [sp, #28]
 8011f6a:	f8b8 2000 	ldrh.w	r2, [r8]
 8011f6e:	9206      	str	r2, [sp, #24]
 8011f70:	2201      	movs	r2, #1
 8011f72:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8011f76:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8011f7a:	9203      	str	r2, [sp, #12]
 8011f7c:	fa1f f28a 	uxth.w	r2, sl
 8011f80:	9202      	str	r2, [sp, #8]
 8011f82:	b2b6      	uxth	r6, r6
 8011f84:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011f88:	9200      	str	r2, [sp, #0]
 8011f8a:	9601      	str	r6, [sp, #4]
 8011f8c:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 8011f8e:	463a      	mov	r2, r7
 8011f90:	4621      	mov	r1, r4
 8011f92:	47a8      	blx	r5
 8011f94:	b011      	add	sp, #68	@ 0x44
 8011f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9a:	6803      	ldr	r3, [r0, #0]
 8011f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f9e:	4798      	blx	r3
 8011fa0:	f8b8 2000 	ldrh.w	r2, [r8]
 8011fa4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011fa8:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8011fac:	2dff      	cmp	r5, #255	@ 0xff
 8011fae:	fb02 1303 	mla	r3, r2, r3, r1
 8011fb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011fb6:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011fba:	fb0a fa02 	mul.w	sl, sl, r2
 8011fbe:	d062      	beq.n	8012086 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8011fc0:	ea6f 0c05 	mvn.w	ip, r5
 8011fc4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fca:	b2ad      	uxth	r5, r5
 8011fcc:	fa5f fc8c 	uxtb.w	ip, ip
 8011fd0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8011fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fd6:	4298      	cmp	r0, r3
 8011fd8:	f080 8085 	bcs.w	80120e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011fdc:	eb00 0b09 	add.w	fp, r0, r9
 8011fe0:	4558      	cmp	r0, fp
 8011fe2:	d246      	bcs.n	8012072 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8011fe4:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011fe8:	2303      	movs	r3, #3
 8011fea:	2204      	movs	r2, #4
 8011fec:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8011ff0:	eb07 0a0e 	add.w	sl, r7, lr
 8011ff4:	8803      	ldrh	r3, [r0, #0]
 8011ff6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011ffa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011ffe:	1219      	asrs	r1, r3, #8
 8012000:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8012004:	fb18 f805 	smulbb	r8, r8, r5
 8012008:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801200c:	10da      	asrs	r2, r3, #3
 801200e:	fb01 810c 	mla	r1, r1, ip, r8
 8012012:	00db      	lsls	r3, r3, #3
 8012014:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8012018:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801201c:	b2db      	uxtb	r3, r3
 801201e:	fb18 f805 	smulbb	r8, r8, r5
 8012022:	fb1e fe05 	smulbb	lr, lr, r5
 8012026:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801202a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801202e:	b289      	uxth	r1, r1
 8012030:	fb02 820c 	mla	r2, r2, ip, r8
 8012034:	fb03 e30c 	mla	r3, r3, ip, lr
 8012038:	b292      	uxth	r2, r2
 801203a:	b29b      	uxth	r3, r3
 801203c:	f101 0801 	add.w	r8, r1, #1
 8012040:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012044:	f103 0e01 	add.w	lr, r3, #1
 8012048:	f102 0801 	add.w	r8, r2, #1
 801204c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8012050:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8012054:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8012058:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801205c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8012060:	ea4e 0101 	orr.w	r1, lr, r1
 8012064:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8012068:	ea41 0108 	orr.w	r1, r1, r8
 801206c:	f820 1b02 	strh.w	r1, [r0], #2
 8012070:	e7b6      	b.n	8011fe0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8012072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	1b9b      	subs	r3, r3, r6
 8012078:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801207c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012080:	1b9b      	subs	r3, r3, r6
 8012082:	441c      	add	r4, r3
 8012084:	e7a6      	b.n	8011fd4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8012086:	491b      	ldr	r1, [pc, #108]	@ (80120f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8012088:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801208c:	2203      	movs	r2, #3
 801208e:	2504      	movs	r5, #4
 8012090:	4550      	cmp	r0, sl
 8012092:	d228      	bcs.n	80120e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8012094:	eb00 0c09 	add.w	ip, r0, r9
 8012098:	4560      	cmp	r0, ip
 801209a:	4623      	mov	r3, r4
 801209c:	d219      	bcs.n	80120d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801209e:	f893 e000 	ldrb.w	lr, [r3]
 80120a2:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80120a6:	eb07 0b0e 	add.w	fp, r7, lr
 80120aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80120ae:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80120b2:	f89b b001 	ldrb.w	fp, [fp, #1]
 80120b6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80120ba:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80120be:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80120c2:	ea43 030b 	orr.w	r3, r3, fp
 80120c6:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80120ca:	3401      	adds	r4, #1
 80120cc:	f820 3b02 	strh.w	r3, [r0], #2
 80120d0:	e7e2      	b.n	8012098 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80120d2:	f8b8 3000 	ldrh.w	r3, [r8]
 80120d6:	1b9b      	subs	r3, r3, r6
 80120d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80120dc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80120e0:	1b9b      	subs	r3, r3, r6
 80120e2:	441c      	add	r4, r3
 80120e4:	e7d4      	b.n	8012090 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80120e6:	4b04      	ldr	r3, [pc, #16]	@ (80120f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80120e8:	6818      	ldr	r0, [r3, #0]
 80120ea:	6803      	ldr	r3, [r0, #0]
 80120ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120ee:	4798      	blx	r3
 80120f0:	e750      	b.n	8011f94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80120f2:	bf00      	nop
 80120f4:	fffff800 	.word	0xfffff800
 80120f8:	200125e0 	.word	0x200125e0
 80120fc:	200125da 	.word	0x200125da

08012100 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8012100:	b4f0      	push	{r4, r5, r6, r7}
 8012102:	460c      	mov	r4, r1
 8012104:	4611      	mov	r1, r2
 8012106:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801210a:	780f      	ldrb	r7, [r1, #0]
 801210c:	784e      	ldrb	r6, [r1, #1]
 801210e:	2f01      	cmp	r7, #1
 8012110:	461a      	mov	r2, r3
 8012112:	9b04      	ldr	r3, [sp, #16]
 8012114:	d038      	beq.n	8012188 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8012116:	d31f      	bcc.n	8012158 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8012118:	2f02      	cmp	r7, #2
 801211a:	d14d      	bne.n	80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801211c:	2e03      	cmp	r6, #3
 801211e:	d84b      	bhi.n	80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012120:	e8df f006 	tbb	[pc, r6]
 8012124:	17140702 	.word	0x17140702
 8012128:	9504      	str	r5, [sp, #16]
 801212a:	4620      	mov	r0, r4
 801212c:	bcf0      	pop	{r4, r5, r6, r7}
 801212e:	f7ff be09 	b.w	8011d44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8012132:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8012134:	2800      	cmp	r0, #0
 8012136:	d03f      	beq.n	80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012138:	6806      	ldr	r6, [r0, #0]
 801213a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801213e:	68b5      	ldr	r5, [r6, #8]
 8012140:	4613      	mov	r3, r2
 8012142:	46ac      	mov	ip, r5
 8012144:	460a      	mov	r2, r1
 8012146:	4621      	mov	r1, r4
 8012148:	bcf0      	pop	{r4, r5, r6, r7}
 801214a:	4760      	bx	ip
 801214c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8012150:	e7f0      	b.n	8012134 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8012152:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8012156:	e7ed      	b.n	8012134 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8012158:	2e03      	cmp	r6, #3
 801215a:	d82d      	bhi.n	80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801215c:	e8df f006 	tbb	[pc, r6]
 8012160:	110e0702 	.word	0x110e0702
 8012164:	9504      	str	r5, [sp, #16]
 8012166:	4620      	mov	r0, r4
 8012168:	bcf0      	pop	{r4, r5, r6, r7}
 801216a:	f7ff bd05 	b.w	8011b78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801216e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8012170:	b310      	cbz	r0, 80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012172:	6806      	ldr	r6, [r0, #0]
 8012174:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8012178:	68f5      	ldr	r5, [r6, #12]
 801217a:	e7e1      	b.n	8012140 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801217c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8012180:	e7f6      	b.n	8012170 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8012182:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8012186:	e7f3      	b.n	8012170 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8012188:	2e03      	cmp	r6, #3
 801218a:	d815      	bhi.n	80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801218c:	e8df f006 	tbb	[pc, r6]
 8012190:	110e0702 	.word	0x110e0702
 8012194:	9504      	str	r5, [sp, #16]
 8012196:	4620      	mov	r0, r4
 8012198:	bcf0      	pop	{r4, r5, r6, r7}
 801219a:	f7ff be9f 	b.w	8011edc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801219e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80121a0:	b150      	cbz	r0, 80121b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80121a2:	6806      	ldr	r6, [r0, #0]
 80121a4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80121a8:	6935      	ldr	r5, [r6, #16]
 80121aa:	e7c9      	b.n	8012140 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80121ac:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80121b0:	e7f6      	b.n	80121a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80121b2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80121b6:	e7f3      	b.n	80121a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80121b8:	bcf0      	pop	{r4, r5, r6, r7}
 80121ba:	4770      	bx	lr

080121bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80121bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c0:	4604      	mov	r4, r0
 80121c2:	b087      	sub	sp, #28
 80121c4:	6810      	ldr	r0, [r2, #0]
 80121c6:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80121ca:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8012404 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80121ce:	460e      	mov	r6, r1
 80121d0:	6851      	ldr	r1, [r2, #4]
 80121d2:	ad02      	add	r5, sp, #8
 80121d4:	c503      	stmia	r5!, {r0, r1}
 80121d6:	6818      	ldr	r0, [r3, #0]
 80121d8:	6859      	ldr	r1, [r3, #4]
 80121da:	ad04      	add	r5, sp, #16
 80121dc:	4617      	mov	r7, r2
 80121de:	c503      	stmia	r5!, {r0, r1}
 80121e0:	a802      	add	r0, sp, #8
 80121e2:	f7fa fbf9 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80121e6:	4639      	mov	r1, r7
 80121e8:	a804      	add	r0, sp, #16
 80121ea:	f7fa fc1d 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80121f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80121f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80121fa:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80121fe:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8012202:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012206:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801220a:	440e      	add	r6, r1
 801220c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012210:	440a      	add	r2, r1
 8012212:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012216:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801221a:	4413      	add	r3, r2
 801221c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012220:	4b77      	ldr	r3, [pc, #476]	@ (8012400 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	6803      	ldr	r3, [r0, #0]
 8012226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012228:	4798      	blx	r3
 801222a:	f8b9 b000 	ldrh.w	fp, [r9]
 801222e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012232:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012236:	fb0b 2303 	mla	r3, fp, r3, r2
 801223a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801223e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8012242:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8012246:	fb05 f50b 	mul.w	r5, r5, fp
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	d069      	beq.n	8012322 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801224e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8012252:	4558      	cmp	r0, fp
 8012254:	f080 80cc 	bcs.w	80123f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8012258:	9b00      	ldr	r3, [sp, #0]
 801225a:	18c3      	adds	r3, r0, r3
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	4631      	mov	r1, r6
 8012260:	9b01      	ldr	r3, [sp, #4]
 8012262:	4298      	cmp	r0, r3
 8012264:	d24f      	bcs.n	8012306 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8012266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801226a:	2a00      	cmp	r2, #0
 801226c:	d048      	beq.n	8012300 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801226e:	fb0a f202 	mul.w	r2, sl, r2
 8012272:	1c53      	adds	r3, r2, #1
 8012274:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012278:	121b      	asrs	r3, r3, #8
 801227a:	d041      	beq.n	8012300 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801227c:	8802      	ldrh	r2, [r0, #0]
 801227e:	f8b4 c000 	ldrh.w	ip, [r4]
 8012282:	b29e      	uxth	r6, r3
 8012284:	1215      	asrs	r5, r2, #8
 8012286:	43db      	mvns	r3, r3
 8012288:	b2db      	uxtb	r3, r3
 801228a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801228e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8012292:	fb15 f503 	smulbb	r5, r5, r3
 8012296:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801229a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801229e:	00d2      	lsls	r2, r2, #3
 80122a0:	fb07 5706 	mla	r7, r7, r6, r5
 80122a4:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80122a8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80122ac:	b2d2      	uxtb	r2, r2
 80122ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80122b2:	b2bf      	uxth	r7, r7
 80122b4:	fb1e fe03 	smulbb	lr, lr, r3
 80122b8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80122bc:	fa5f fc8c 	uxtb.w	ip, ip
 80122c0:	fb12 f203 	smulbb	r2, r2, r3
 80122c4:	fb05 e506 	mla	r5, r5, r6, lr
 80122c8:	fb0c 2c06 	mla	ip, ip, r6, r2
 80122cc:	f107 0e01 	add.w	lr, r7, #1
 80122d0:	fa1f fc8c 	uxth.w	ip, ip
 80122d4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80122d8:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 80122dc:	f10c 0701 	add.w	r7, ip, #1
 80122e0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80122e4:	b2ad      	uxth	r5, r5
 80122e6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80122ea:	ea47 070e 	orr.w	r7, r7, lr
 80122ee:	f105 0e01 	add.w	lr, r5, #1
 80122f2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80122f6:	096d      	lsrs	r5, r5, #5
 80122f8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80122fc:	432f      	orrs	r7, r5
 80122fe:	8007      	strh	r7, [r0, #0]
 8012300:	3002      	adds	r0, #2
 8012302:	3402      	adds	r4, #2
 8012304:	e7ac      	b.n	8012260 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8012306:	f8b9 3000 	ldrh.w	r3, [r9]
 801230a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801230e:	eba3 0308 	sub.w	r3, r3, r8
 8012312:	eba6 0608 	sub.w	r6, r6, r8
 8012316:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801231a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801231e:	440e      	add	r6, r1
 8012320:	e797      	b.n	8012252 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8012322:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012326:	42a8      	cmp	r0, r5
 8012328:	d262      	bcs.n	80123f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801232a:	9b00      	ldr	r3, [sp, #0]
 801232c:	4631      	mov	r1, r6
 801232e:	eb00 0b03 	add.w	fp, r0, r3
 8012332:	4558      	cmp	r0, fp
 8012334:	d24e      	bcs.n	80123d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8012336:	f811 3b01 	ldrb.w	r3, [r1], #1
 801233a:	b12b      	cbz	r3, 8012348 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801233c:	2bff      	cmp	r3, #255	@ 0xff
 801233e:	f8b4 e000 	ldrh.w	lr, [r4]
 8012342:	d104      	bne.n	801234e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8012344:	f8a0 e000 	strh.w	lr, [r0]
 8012348:	3002      	adds	r0, #2
 801234a:	3402      	adds	r4, #2
 801234c:	e7f1      	b.n	8012332 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801234e:	8802      	ldrh	r2, [r0, #0]
 8012350:	b29f      	uxth	r7, r3
 8012352:	1216      	asrs	r6, r2, #8
 8012354:	43db      	mvns	r3, r3
 8012356:	b2db      	uxtb	r3, r3
 8012358:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801235c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8012360:	fb16 f603 	smulbb	r6, r6, r3
 8012364:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8012368:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801236c:	00d2      	lsls	r2, r2, #3
 801236e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012372:	b2d2      	uxtb	r2, r2
 8012374:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012378:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801237c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012380:	fb1a fa03 	smulbb	sl, sl, r3
 8012384:	fa1f fc8c 	uxth.w	ip, ip
 8012388:	fb12 f303 	smulbb	r3, r2, r3
 801238c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012390:	fa5f fe8e 	uxtb.w	lr, lr
 8012394:	fb06 a607 	mla	r6, r6, r7, sl
 8012398:	f10c 0201 	add.w	r2, ip, #1
 801239c:	fb0e 3307 	mla	r3, lr, r7, r3
 80123a0:	b2b6      	uxth	r6, r6
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80123a8:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 80123ac:	f106 0a01 	add.w	sl, r6, #1
 80123b0:	f103 0c01 	add.w	ip, r3, #1
 80123b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80123b8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80123bc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80123c0:	0976      	lsrs	r6, r6, #5
 80123c2:	ea4c 0c02 	orr.w	ip, ip, r2
 80123c6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80123ca:	ea4c 0c06 	orr.w	ip, ip, r6
 80123ce:	f8a0 c000 	strh.w	ip, [r0]
 80123d2:	e7b9      	b.n	8012348 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80123d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80123d8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80123dc:	eba3 0308 	sub.w	r3, r3, r8
 80123e0:	eba6 0608 	sub.w	r6, r6, r8
 80123e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80123e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80123ec:	440e      	add	r6, r1
 80123ee:	e79a      	b.n	8012326 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80123f0:	4b03      	ldr	r3, [pc, #12]	@ (8012400 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80123f2:	6818      	ldr	r0, [r3, #0]
 80123f4:	6803      	ldr	r3, [r0, #0]
 80123f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123f8:	4798      	blx	r3
 80123fa:	b007      	add	sp, #28
 80123fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012400:	200125e0 	.word	0x200125e0
 8012404:	200125da 	.word	0x200125da

08012408 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	b089      	sub	sp, #36	@ 0x24
 801240e:	4607      	mov	r7, r0
 8012410:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8012414:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8012416:	4688      	mov	r8, r1
 8012418:	4692      	mov	sl, r2
 801241a:	4699      	mov	r9, r3
 801241c:	2e00      	cmp	r6, #0
 801241e:	d048      	beq.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012420:	4608      	mov	r0, r1
 8012422:	f7fe fac3 	bl	80109ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012426:	4605      	mov	r5, r0
 8012428:	4640      	mov	r0, r8
 801242a:	f7fe faf3 	bl	8010a14 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801242e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012432:	4640      	mov	r0, r8
 8012434:	f8ad a008 	strh.w	sl, [sp, #8]
 8012438:	f8ad 500c 	strh.w	r5, [sp, #12]
 801243c:	f8ad 900a 	strh.w	r9, [sp, #10]
 8012440:	f7fe fba6 	bl	8010b90 <_ZNK8touchgfx6Bitmap7getDataEv>
 8012444:	4605      	mov	r5, r0
 8012446:	4640      	mov	r0, r8
 8012448:	f7fe fbd2 	bl	8010bf0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801244c:	4682      	mov	sl, r0
 801244e:	4640      	mov	r0, r8
 8012450:	f7fe fc22 	bl	8010c98 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012454:	2810      	cmp	r0, #16
 8012456:	d82c      	bhi.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012458:	e8df f010 	tbh	[pc, r0, lsl #1]
 801245c:	00ba00ca 	.word	0x00ba00ca
 8012460:	002b0011 	.word	0x002b0011
 8012464:	002b002b 	.word	0x002b002b
 8012468:	002b002b 	.word	0x002b002b
 801246c:	002b002b 	.word	0x002b002b
 8012470:	00c1002b 	.word	0x00c1002b
 8012474:	002b002b 	.word	0x002b002b
 8012478:	002b0180 	.word	0x002b0180
 801247c:	0173      	.short	0x0173
 801247e:	4bbc      	ldr	r3, [pc, #752]	@ (8012770 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	6803      	ldr	r3, [r0, #0]
 8012484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012486:	4798      	blx	r3
 8012488:	2eff      	cmp	r6, #255	@ 0xff
 801248a:	d101      	bne.n	8012490 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801248c:	0683      	lsls	r3, r0, #26
 801248e:	d506      	bpl.n	801249e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8012490:	4633      	mov	r3, r6
 8012492:	4622      	mov	r2, r4
 8012494:	a902      	add	r1, sp, #8
 8012496:	4628      	mov	r0, r5
 8012498:	f7ff f8fc 	bl	8011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801249c:	e009      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801249e:	4640      	mov	r0, r8
 80124a0:	f7fe fb3e 	bl	8010b20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80124a4:	b940      	cbnz	r0, 80124b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 80124a6:	4623      	mov	r3, r4
 80124a8:	aa02      	add	r2, sp, #8
 80124aa:	4629      	mov	r1, r5
 80124ac:	4638      	mov	r0, r7
 80124ae:	f7ff f9d7 	bl	8011860 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80124b2:	b009      	add	sp, #36	@ 0x24
 80124b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b8:	f10d 0918 	add.w	r9, sp, #24
 80124bc:	4641      	mov	r1, r8
 80124be:	4648      	mov	r0, r9
 80124c0:	f7fe fadc 	bl	8010a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80124c4:	e899 0003 	ldmia.w	r9, {r0, r1}
 80124c8:	f10d 0810 	add.w	r8, sp, #16
 80124cc:	e888 0003 	stmia.w	r8, {r0, r1}
 80124d0:	4640      	mov	r0, r8
 80124d2:	4621      	mov	r1, r4
 80124d4:	f7f6 fd60 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 80124d8:	4640      	mov	r0, r8
 80124da:	f7f6 fda0 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 80124de:	2800      	cmp	r0, #0
 80124e0:	d1d6      	bne.n	8012490 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80124e2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80124e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80124ea:	4293      	cmp	r3, r2
 80124ec:	dd12      	ble.n	8012514 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 80124ee:	1a9b      	subs	r3, r3, r2
 80124f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80124f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80124f8:	f8ad 0018 	strh.w	r0, [sp, #24]
 80124fc:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012500:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012504:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012508:	464a      	mov	r2, r9
 801250a:	4633      	mov	r3, r6
 801250c:	a902      	add	r1, sp, #8
 801250e:	4628      	mov	r0, r5
 8012510:	f7ff f8c0 	bl	8011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012514:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012518:	f9b4 2000 	ldrsh.w	r2, [r4]
 801251c:	4293      	cmp	r3, r2
 801251e:	dd12      	ble.n	8012546 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8012520:	1a9b      	subs	r3, r3, r2
 8012522:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8012526:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801252a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801252e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012532:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012536:	f8ad 101e 	strh.w	r1, [sp, #30]
 801253a:	23ff      	movs	r3, #255	@ 0xff
 801253c:	464a      	mov	r2, r9
 801253e:	a902      	add	r1, sp, #8
 8012540:	4628      	mov	r0, r5
 8012542:	f7ff f8a7 	bl	8011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012546:	4643      	mov	r3, r8
 8012548:	aa02      	add	r2, sp, #8
 801254a:	4629      	mov	r1, r5
 801254c:	4638      	mov	r0, r7
 801254e:	f7ff f987 	bl	8011860 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8012552:	88a2      	ldrh	r2, [r4, #4]
 8012554:	8823      	ldrh	r3, [r4, #0]
 8012556:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801255a:	4413      	add	r3, r2
 801255c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012560:	440a      	add	r2, r1
 8012562:	b29b      	uxth	r3, r3
 8012564:	b292      	uxth	r2, r2
 8012566:	b211      	sxth	r1, r2
 8012568:	b218      	sxth	r0, r3
 801256a:	4288      	cmp	r0, r1
 801256c:	dd12      	ble.n	8012594 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 801256e:	1a9b      	subs	r3, r3, r2
 8012570:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012574:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8012578:	f8ad 1018 	strh.w	r1, [sp, #24]
 801257c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012580:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012584:	23ff      	movs	r3, #255	@ 0xff
 8012586:	464a      	mov	r2, r9
 8012588:	a902      	add	r1, sp, #8
 801258a:	4628      	mov	r0, r5
 801258c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012590:	f7ff f880 	bl	8011694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012594:	88e2      	ldrh	r2, [r4, #6]
 8012596:	8863      	ldrh	r3, [r4, #2]
 8012598:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801259c:	4413      	add	r3, r2
 801259e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80125a2:	440a      	add	r2, r1
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	b292      	uxth	r2, r2
 80125a8:	b211      	sxth	r1, r2
 80125aa:	b218      	sxth	r0, r3
 80125ac:	4288      	cmp	r0, r1
 80125ae:	dd80      	ble.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80125b0:	1a9b      	subs	r3, r3, r2
 80125b2:	f9b4 6000 	ldrsh.w	r6, [r4]
 80125b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80125ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80125be:	f8ad 6018 	strh.w	r6, [sp, #24]
 80125c2:	f8ad 101a 	strh.w	r1, [sp, #26]
 80125c6:	f8ad 001c 	strh.w	r0, [sp, #28]
 80125ca:	23ff      	movs	r3, #255	@ 0xff
 80125cc:	464a      	mov	r2, r9
 80125ce:	e761      	b.n	8012494 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80125d0:	4633      	mov	r3, r6
 80125d2:	4622      	mov	r2, r4
 80125d4:	a902      	add	r1, sp, #8
 80125d6:	4628      	mov	r0, r5
 80125d8:	f7ff f9b2 	bl	8011940 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80125dc:	e769      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80125de:	e9cd 4600 	strd	r4, r6, [sp]
 80125e2:	ab02      	add	r3, sp, #8
 80125e4:	4652      	mov	r2, sl
 80125e6:	4629      	mov	r1, r5
 80125e8:	4638      	mov	r0, r7
 80125ea:	f7ff fd89 	bl	8012100 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80125ee:	e760      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80125f0:	4640      	mov	r0, r8
 80125f2:	f7fe fa95 	bl	8010b20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80125f6:	b948      	cbnz	r0, 801260c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	e9cd 6000 	strd	r6, r0, [sp]
 80125fe:	aa02      	add	r2, sp, #8
 8012600:	68de      	ldr	r6, [r3, #12]
 8012602:	4629      	mov	r1, r5
 8012604:	4623      	mov	r3, r4
 8012606:	4638      	mov	r0, r7
 8012608:	47b0      	blx	r6
 801260a:	e752      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801260c:	f10d 0918 	add.w	r9, sp, #24
 8012610:	4641      	mov	r1, r8
 8012612:	4648      	mov	r0, r9
 8012614:	f7fe fa32 	bl	8010a7c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012618:	e899 0003 	ldmia.w	r9, {r0, r1}
 801261c:	f10d 0810 	add.w	r8, sp, #16
 8012620:	e888 0003 	stmia.w	r8, {r0, r1}
 8012624:	4640      	mov	r0, r8
 8012626:	4621      	mov	r1, r4
 8012628:	f7f6 fcb6 	bl	8008f98 <_ZN8touchgfx4RectaNERKS0_>
 801262c:	4640      	mov	r0, r8
 801262e:	f7f6 fcf6 	bl	800901e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012632:	b138      	cbz	r0, 8012644 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8012634:	9600      	str	r6, [sp, #0]
 8012636:	4623      	mov	r3, r4
 8012638:	aa02      	add	r2, sp, #8
 801263a:	4651      	mov	r1, sl
 801263c:	4628      	mov	r0, r5
 801263e:	f7ff fdbd 	bl	80121bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012642:	e736      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	e9cd 6000 	strd	r6, r0, [sp]
 801264a:	aa02      	add	r2, sp, #8
 801264c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8012650:	4629      	mov	r1, r5
 8012652:	4643      	mov	r3, r8
 8012654:	4638      	mov	r0, r7
 8012656:	47d8      	blx	fp
 8012658:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801265c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012660:	4293      	cmp	r3, r2
 8012662:	dd13      	ble.n	801268c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8012664:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012668:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801266c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012670:	1a9b      	subs	r3, r3, r2
 8012672:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012676:	f8ad 101c 	strh.w	r1, [sp, #28]
 801267a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801267e:	9600      	str	r6, [sp, #0]
 8012680:	464b      	mov	r3, r9
 8012682:	aa02      	add	r2, sp, #8
 8012684:	4651      	mov	r1, sl
 8012686:	4628      	mov	r0, r5
 8012688:	f7ff fd98 	bl	80121bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801268c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012690:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012694:	4293      	cmp	r3, r2
 8012696:	dd13      	ble.n	80126c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8012698:	1a9b      	subs	r3, r3, r2
 801269a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801269e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80126a2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80126a6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80126aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80126ae:	f8ad 101e 	strh.w	r1, [sp, #30]
 80126b2:	9600      	str	r6, [sp, #0]
 80126b4:	464b      	mov	r3, r9
 80126b6:	aa02      	add	r2, sp, #8
 80126b8:	4651      	mov	r1, sl
 80126ba:	4628      	mov	r0, r5
 80126bc:	f7ff fd7e 	bl	80121bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80126c0:	88a2      	ldrh	r2, [r4, #4]
 80126c2:	8823      	ldrh	r3, [r4, #0]
 80126c4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80126c8:	4413      	add	r3, r2
 80126ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80126ce:	440a      	add	r2, r1
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	b292      	uxth	r2, r2
 80126d4:	b211      	sxth	r1, r2
 80126d6:	b218      	sxth	r0, r3
 80126d8:	4288      	cmp	r0, r1
 80126da:	dd13      	ble.n	8012704 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 80126dc:	1a9b      	subs	r3, r3, r2
 80126de:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80126e2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80126e6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80126ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 80126ee:	f8ad 001e 	strh.w	r0, [sp, #30]
 80126f2:	9600      	str	r6, [sp, #0]
 80126f4:	464b      	mov	r3, r9
 80126f6:	aa02      	add	r2, sp, #8
 80126f8:	4651      	mov	r1, sl
 80126fa:	4628      	mov	r0, r5
 80126fc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8012700:	f7ff fd5c 	bl	80121bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012704:	88e2      	ldrh	r2, [r4, #6]
 8012706:	8863      	ldrh	r3, [r4, #2]
 8012708:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801270c:	4413      	add	r3, r2
 801270e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012712:	440a      	add	r2, r1
 8012714:	b29b      	uxth	r3, r3
 8012716:	b292      	uxth	r2, r2
 8012718:	b211      	sxth	r1, r2
 801271a:	b218      	sxth	r0, r3
 801271c:	4288      	cmp	r0, r1
 801271e:	f77f aec8 	ble.w	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012722:	f9b4 7000 	ldrsh.w	r7, [r4]
 8012726:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801272a:	f8ad 7018 	strh.w	r7, [sp, #24]
 801272e:	1a9b      	subs	r3, r3, r2
 8012730:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012734:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012738:	f8ad 001c 	strh.w	r0, [sp, #28]
 801273c:	9600      	str	r6, [sp, #0]
 801273e:	464b      	mov	r3, r9
 8012740:	e77a      	b.n	8012638 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8012742:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8012746:	2800      	cmp	r0, #0
 8012748:	f43f aeb3 	beq.w	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801274c:	6803      	ldr	r3, [r0, #0]
 801274e:	9600      	str	r6, [sp, #0]
 8012750:	68de      	ldr	r6, [r3, #12]
 8012752:	4623      	mov	r3, r4
 8012754:	aa02      	add	r2, sp, #8
 8012756:	4629      	mov	r1, r5
 8012758:	47b0      	blx	r6
 801275a:	e6aa      	b.n	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801275c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8012760:	2800      	cmp	r0, #0
 8012762:	f43f aea6 	beq.w	80124b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012766:	6803      	ldr	r3, [r0, #0]
 8012768:	9600      	str	r6, [sp, #0]
 801276a:	689e      	ldr	r6, [r3, #8]
 801276c:	e7f1      	b.n	8012752 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 801276e:	bf00      	nop
 8012770:	200125e0 	.word	0x200125e0

08012774 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8012774:	b180      	cbz	r0, 8012798 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8012776:	2903      	cmp	r1, #3
 8012778:	d81c      	bhi.n	80127b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801277a:	e8df f001 	tbb	[pc, r1]
 801277e:	1d02      	.short	0x1d02
 8012780:	1f08      	.short	0x1f08
 8012782:	4b10      	ldr	r3, [pc, #64]	@ (80127c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012784:	8818      	ldrh	r0, [r3, #0]
 8012786:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801278a:	4240      	negs	r0, r0
 801278c:	4770      	bx	lr
 801278e:	4b0d      	ldr	r3, [pc, #52]	@ (80127c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012790:	8818      	ldrh	r0, [r3, #0]
 8012792:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012796:	4770      	bx	lr
 8012798:	2903      	cmp	r1, #3
 801279a:	d80b      	bhi.n	80127b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801279c:	a301      	add	r3, pc, #4	@ (adr r3, 80127a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801279e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80127a2:	bf00      	nop
 80127a4:	080127b9 	.word	0x080127b9
 80127a8:	0801278f 	.word	0x0801278f
 80127ac:	080127bd 	.word	0x080127bd
 80127b0:	08012783 	.word	0x08012783
 80127b4:	2000      	movs	r0, #0
 80127b6:	4770      	bx	lr
 80127b8:	2001      	movs	r0, #1
 80127ba:	4770      	bx	lr
 80127bc:	f04f 30ff 	mov.w	r0, #4294967295
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	200125da 	.word	0x200125da

080127c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80127c8:	b180      	cbz	r0, 80127ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80127ca:	2903      	cmp	r1, #3
 80127cc:	d81c      	bhi.n	8012808 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80127ce:	e8df f001 	tbb	[pc, r1]
 80127d2:	021d      	.short	0x021d
 80127d4:	071f      	.short	0x071f
 80127d6:	4b10      	ldr	r3, [pc, #64]	@ (8012818 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80127d8:	8818      	ldrh	r0, [r3, #0]
 80127da:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80127de:	4770      	bx	lr
 80127e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012818 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80127e2:	8818      	ldrh	r0, [r3, #0]
 80127e4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80127e8:	4240      	negs	r0, r0
 80127ea:	4770      	bx	lr
 80127ec:	2903      	cmp	r1, #3
 80127ee:	d80b      	bhi.n	8012808 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80127f0:	a301      	add	r3, pc, #4	@ (adr r3, 80127f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80127f2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80127f6:	bf00      	nop
 80127f8:	080127d7 	.word	0x080127d7
 80127fc:	08012811 	.word	0x08012811
 8012800:	080127e1 	.word	0x080127e1
 8012804:	0801280d 	.word	0x0801280d
 8012808:	2000      	movs	r0, #0
 801280a:	4770      	bx	lr
 801280c:	2001      	movs	r0, #1
 801280e:	4770      	bx	lr
 8012810:	f04f 30ff 	mov.w	r0, #4294967295
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	200125da 	.word	0x200125da

0801281c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	b099      	sub	sp, #100	@ 0x64
 8012822:	910d      	str	r1, [sp, #52]	@ 0x34
 8012824:	a914      	add	r1, sp, #80	@ 0x50
 8012826:	e881 000c 	stmia.w	r1, {r2, r3}
 801282a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801282e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012830:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8012834:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8012838:	9310      	str	r3, [sp, #64]	@ 0x40
 801283a:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 801283e:	9308      	str	r3, [sp, #32]
 8012840:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8012844:	9309      	str	r3, [sp, #36]	@ 0x24
 8012846:	7b4b      	ldrb	r3, [r1, #13]
 8012848:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801284c:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8012850:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8012854:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8012856:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 801285a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 801285e:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8012862:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8012866:	f891 8006 	ldrb.w	r8, [r1, #6]
 801286a:	ea58 0800 	orrs.w	r8, r8, r0
 801286e:	f000 81ce 	beq.w	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012872:	011b      	lsls	r3, r3, #4
 8012874:	79c8      	ldrb	r0, [r1, #7]
 8012876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801287a:	4303      	orrs	r3, r0
 801287c:	930c      	str	r3, [sp, #48]	@ 0x30
 801287e:	f000 81c6 	beq.w	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012882:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012886:	b29b      	uxth	r3, r3
 8012888:	2d00      	cmp	r5, #0
 801288a:	f000 812c 	beq.w	8012ae6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801288e:	1aed      	subs	r5, r5, r3
 8012890:	b2ad      	uxth	r5, r5
 8012892:	0429      	lsls	r1, r5, #16
 8012894:	d502      	bpl.n	801289c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8012896:	1b64      	subs	r4, r4, r5
 8012898:	b224      	sxth	r4, r4
 801289a:	2500      	movs	r5, #0
 801289c:	f9b2 0000 	ldrsh.w	r0, [r2]
 80128a0:	8891      	ldrh	r1, [r2, #4]
 80128a2:	4284      	cmp	r4, r0
 80128a4:	b283      	uxth	r3, r0
 80128a6:	bfb8      	it	lt
 80128a8:	18ed      	addlt	r5, r5, r3
 80128aa:	440b      	add	r3, r1
 80128ac:	b21b      	sxth	r3, r3
 80128ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80128b0:	88d3      	ldrh	r3, [r2, #6]
 80128b2:	8852      	ldrh	r2, [r2, #2]
 80128b4:	4413      	add	r3, r2
 80128b6:	b21b      	sxth	r3, r3
 80128b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80128ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80128be:	bfb8      	it	lt
 80128c0:	1b2c      	sublt	r4, r5, r4
 80128c2:	4bb5      	ldr	r3, [pc, #724]	@ (8012b98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80128c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80128c6:	f893 b000 	ldrb.w	fp, [r3]
 80128ca:	bfbc      	itt	lt
 80128cc:	b2a5      	uxthlt	r5, r4
 80128ce:	4604      	movlt	r4, r0
 80128d0:	4653      	mov	r3, sl
 80128d2:	4621      	mov	r1, r4
 80128d4:	a814      	add	r0, sp, #80	@ 0x50
 80128d6:	f7f9 fef4 	bl	800c6c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80128da:	4621      	mov	r1, r4
 80128dc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80128e0:	4653      	mov	r3, sl
 80128e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80128e4:	a814      	add	r0, sp, #80	@ 0x50
 80128e6:	f7f9 ff09 	bl	800c6fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80128ea:	a918      	add	r1, sp, #96	@ 0x60
 80128ec:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80128f0:	a817      	add	r0, sp, #92	@ 0x5c
 80128f2:	f7fa f82f 	bl	800c954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80128f6:	f1ba 0f00 	cmp.w	sl, #0
 80128fa:	f040 80f7 	bne.w	8012aec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 80128fe:	f1bb 0f01 	cmp.w	fp, #1
 8012902:	f040 80fb 	bne.w	8012afc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8012906:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012908:	2b00      	cmp	r3, #0
 801290a:	f040 81a8 	bne.w	8012c5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x442>
 801290e:	fa1f f288 	uxth.w	r2, r8
 8012912:	b905      	cbnz	r5, 8012916 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 8012914:	b15e      	cbz	r6, 801292e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8012916:	9808      	ldr	r0, [sp, #32]
 8012918:	fb06 5302 	mla	r3, r6, r2, r5
 801291c:	4343      	muls	r3, r0
 801291e:	4631      	mov	r1, r6
 8012920:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8012924:	f003 0607 	and.w	r6, r3, #7
 8012928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801292a:	1a5b      	subs	r3, r3, r1
 801292c:	930e      	str	r3, [sp, #56]	@ 0x38
 801292e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8012932:	424b      	negs	r3, r1
 8012934:	414b      	adcs	r3, r1
 8012936:	4618      	mov	r0, r3
 8012938:	4651      	mov	r1, sl
 801293a:	930c      	str	r3, [sp, #48]	@ 0x30
 801293c:	f7ff ff1a 	bl	8012774 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8012940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012942:	4683      	mov	fp, r0
 8012944:	4618      	mov	r0, r3
 8012946:	f7ff ff3f 	bl	80127c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801294a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801294c:	4603      	mov	r3, r0
 801294e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012950:	eba1 0a00 	sub.w	sl, r1, r0
 8012954:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012956:	458a      	cmp	sl, r1
 8012958:	bfa8      	it	ge
 801295a:	468a      	movge	sl, r1
 801295c:	f1ba 0f00 	cmp.w	sl, #0
 8012960:	f340 8155 	ble.w	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012964:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012966:	1b64      	subs	r4, r4, r5
 8012968:	1b0c      	subs	r4, r1, r4
 801296a:	4544      	cmp	r4, r8
 801296c:	bfd4      	ite	le
 801296e:	ebc5 0504 	rsble	r5, r5, r4
 8012972:	ebc5 0508 	rsbgt	r5, r5, r8
 8012976:	2d00      	cmp	r5, #0
 8012978:	f340 8149 	ble.w	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 801297c:	9908      	ldr	r1, [sp, #32]
 801297e:	1b52      	subs	r2, r2, r5
 8012980:	434a      	muls	r2, r1
 8012982:	920e      	str	r2, [sp, #56]	@ 0x38
 8012984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012986:	2a00      	cmp	r2, #0
 8012988:	f040 8175 	bne.w	8012c76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 801298c:	4a83      	ldr	r2, [pc, #524]	@ (8012b9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801298e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012990:	6810      	ldr	r0, [r2, #0]
 8012992:	6802      	ldr	r2, [r0, #0]
 8012994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012996:	4790      	blx	r2
 8012998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801299a:	9908      	ldr	r1, [sp, #32]
 801299c:	2201      	movs	r2, #1
 801299e:	408a      	lsls	r2, r1
 80129a0:	3a01      	subs	r2, #1
 80129a2:	497f      	ldr	r1, [pc, #508]	@ (8012ba0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80129a4:	b2d2      	uxtb	r2, r2
 80129a6:	880c      	ldrh	r4, [r1, #0]
 80129a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80129aa:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 80129ae:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 80129b2:	fb04 1202 	mla	r2, r4, r2, r1
 80129b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80129ba:	ea4f 2419 	mov.w	r4, r9, lsr #8
 80129be:	920a      	str	r2, [sp, #40]	@ 0x28
 80129c0:	f3c9 4207 	ubfx	r2, r9, #16, #8
 80129c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80129c6:	b2e2      	uxtb	r2, r4
 80129c8:	9211      	str	r2, [sp, #68]	@ 0x44
 80129ca:	fa5f f289 	uxtb.w	r2, r9
 80129ce:	9210      	str	r2, [sp, #64]	@ 0x40
 80129d0:	4a74      	ldr	r2, [pc, #464]	@ (8012ba4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80129d2:	ea4f 1159 	mov.w	r1, r9, lsr #5
 80129d6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80129da:	4022      	ands	r2, r4
 80129dc:	430a      	orrs	r2, r1
 80129de:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 80129e2:	ea42 0209 	orr.w	r2, r2, r9
 80129e6:	ea4f 014b 	mov.w	r1, fp, lsl #1
 80129ea:	b292      	uxth	r2, r2
 80129ec:	fb05 3b1b 	mls	fp, r5, fp, r3
 80129f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80129f2:	460b      	mov	r3, r1
 80129f4:	783a      	ldrb	r2, [r7, #0]
 80129f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80129f8:	436b      	muls	r3, r5
 80129fa:	4132      	asrs	r2, r6
 80129fc:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8012a00:	b2d2      	uxtb	r2, r2
 8012a02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012a04:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8012a08:	f0c0 8149 	bcc.w	8012c9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x482>
 8012a0c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8012a10:	46a9      	mov	r9, r5
 8012a12:	f119 39ff 	adds.w	r9, r9, #4294967295
 8012a16:	f0c0 8132 	bcc.w	8012c7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 8012a1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a1c:	4013      	ands	r3, r2
 8012a1e:	d054      	beq.n	8012aca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 8012a20:	20ff      	movs	r0, #255	@ 0xff
 8012a22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a24:	fb90 f1f1 	sdiv	r1, r0, r1
 8012a28:	434b      	muls	r3, r1
 8012a2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a2c:	dd03      	ble.n	8012a36 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 8012a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a30:	4281      	cmp	r1, r0
 8012a32:	f000 8122 	beq.w	8012c7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 8012a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a38:	f8b8 4000 	ldrh.w	r4, [r8]
 8012a3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8012a3e:	fb11 f303 	smulbb	r3, r1, r3
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	1c59      	adds	r1, r3, #1
 8012a46:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8012a4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012a4e:	fa1f fe83 	uxth.w	lr, r3
 8012a52:	1221      	asrs	r1, r4, #8
 8012a54:	fb10 fb0e 	smulbb	fp, r0, lr
 8012a58:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8012a5c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012a5e:	43db      	mvns	r3, r3
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8012a66:	fb01 b103 	mla	r1, r1, r3, fp
 8012a6a:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8012a6e:	fb10 fb0e 	smulbb	fp, r0, lr
 8012a72:	00e4      	lsls	r4, r4, #3
 8012a74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012a76:	b2e4      	uxtb	r4, r4
 8012a78:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012a7c:	fb10 fe0e 	smulbb	lr, r0, lr
 8012a80:	fb04 e403 	mla	r4, r4, r3, lr
 8012a84:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8012a88:	b289      	uxth	r1, r1
 8012a8a:	b2a4      	uxth	r4, r4
 8012a8c:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8012a90:	fb0c bc03 	mla	ip, ip, r3, fp
 8012a94:	1c4b      	adds	r3, r1, #1
 8012a96:	f104 0b01 	add.w	fp, r4, #1
 8012a9a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8012a9e:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 8012aa2:	fa1f fc8c 	uxth.w	ip, ip
 8012aa6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8012aaa:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8012aae:	ea4b 0101 	orr.w	r1, fp, r1
 8012ab2:	f10c 0b01 	add.w	fp, ip, #1
 8012ab6:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8012aba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012abe:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8012ac2:	ea41 010b 	orr.w	r1, r1, fp
 8012ac6:	f8a8 1000 	strh.w	r1, [r8]
 8012aca:	9b08      	ldr	r3, [sp, #32]
 8012acc:	441e      	add	r6, r3
 8012ace:	b2b6      	uxth	r6, r6
 8012ad0:	2e07      	cmp	r6, #7
 8012ad2:	bf98      	it	ls
 8012ad4:	411a      	asrls	r2, r3
 8012ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ad8:	bf89      	itett	hi
 8012ada:	787a      	ldrbhi	r2, [r7, #1]
 8012adc:	b2d2      	uxtbls	r2, r2
 8012ade:	3701      	addhi	r7, #1
 8012ae0:	2600      	movhi	r6, #0
 8012ae2:	4498      	add	r8, r3
 8012ae4:	e795      	b.n	8012a12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 8012ae6:	441c      	add	r4, r3
 8012ae8:	b224      	sxth	r4, r4
 8012aea:	e6d7      	b.n	801289c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8012aec:	f1ba 0f01 	cmp.w	sl, #1
 8012af0:	f47f af09 	bne.w	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012af4:	f1bb 0f01 	cmp.w	fp, #1
 8012af8:	f47f af05 	bne.w	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012afe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b00:	1a99      	subs	r1, r3, r2
 8012b02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b04:	1b9b      	subs	r3, r3, r6
 8012b06:	4299      	cmp	r1, r3
 8012b08:	bfa8      	it	ge
 8012b0a:	4619      	movge	r1, r3
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	9112      	str	r1, [sp, #72]	@ 0x48
 8012b10:	dd7d      	ble.n	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012b12:	4a22      	ldr	r2, [pc, #136]	@ (8012b9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8012b14:	9211      	str	r2, [sp, #68]	@ 0x44
 8012b16:	6810      	ldr	r0, [r2, #0]
 8012b18:	6803      	ldr	r3, [r0, #0]
 8012b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b1c:	4798      	blx	r3
 8012b1e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8012b22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012b24:	d006      	beq.n	8012b34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012b26:	9b08      	ldr	r3, [sp, #32]
 8012b28:	2b04      	cmp	r3, #4
 8012b2a:	d133      	bne.n	8012b94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8012b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b2e:	3300      	adds	r3, #0
 8012b30:	bf18      	it	ne
 8012b32:	2301      	movne	r3, #1
 8012b34:	0582      	lsls	r2, r0, #22
 8012b36:	fa1f fc88 	uxth.w	ip, r8
 8012b3a:	f140 80b9 	bpl.w	8012cb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 8012b3e:	9808      	ldr	r0, [sp, #32]
 8012b40:	2808      	cmp	r0, #8
 8012b42:	f040 80b5 	bne.w	8012cb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d064      	beq.n	8012c14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f8>
 8012b4a:	f10c 0c01 	add.w	ip, ip, #1
 8012b4e:	f02c 0301 	bic.w	r3, ip, #1
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	bb45      	cbnz	r5, 8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8012b56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b58:	eb08 0004 	add.w	r0, r8, r4
 8012b5c:	4290      	cmp	r0, r2
 8012b5e:	dc23      	bgt.n	8012ba8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8012b60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012b62:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8012b66:	6810      	ldr	r0, [r2, #0]
 8012b68:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8012b6c:	6804      	ldr	r4, [r0, #0]
 8012b6e:	9506      	str	r5, [sp, #24]
 8012b70:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8012b74:	9505      	str	r5, [sp, #20]
 8012b76:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012b78:	9302      	str	r3, [sp, #8]
 8012b7a:	b289      	uxth	r1, r1
 8012b7c:	e9cd 3100 	strd	r3, r1, [sp]
 8012b80:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8012b84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012b88:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 8012b8a:	4673      	mov	r3, lr
 8012b8c:	fb06 710c 	mla	r1, r6, ip, r7
 8012b90:	47a0      	blx	r4
 8012b92:	e03c      	b.n	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012b94:	2300      	movs	r3, #0
 8012b96:	e7cd      	b.n	8012b34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012b98:	200125d8 	.word	0x200125d8
 8012b9c:	200125e0 	.word	0x200125e0
 8012ba0:	200125da 	.word	0x200125da
 8012ba4:	00fff800 	.word	0x00fff800
 8012ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012baa:	eba4 0e05 	sub.w	lr, r4, r5
 8012bae:	eba2 0e0e 	sub.w	lr, r2, lr
 8012bb2:	45c6      	cmp	lr, r8
 8012bb4:	bfd4      	ite	le
 8012bb6:	ebc5 0e0e 	rsble	lr, r5, lr
 8012bba:	ebc5 0e08 	rsbgt	lr, r5, r8
 8012bbe:	f1be 0f00 	cmp.w	lr, #0
 8012bc2:	d024      	beq.n	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012bc4:	07e8      	lsls	r0, r5, #31
 8012bc6:	f53f ae9e 	bmi.w	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012bca:	f01e 0001 	ands.w	r0, lr, #1
 8012bce:	f47f ae9a 	bne.w	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012bd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012bd4:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8012bd8:	6814      	ldr	r4, [r2, #0]
 8012bda:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8012bde:	086d      	lsrs	r5, r5, #1
 8012be0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012be4:	fb06 560c 	mla	r6, r6, ip, r5
 8012be8:	6825      	ldr	r5, [r4, #0]
 8012bea:	9006      	str	r0, [sp, #24]
 8012bec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8012bf0:	9005      	str	r0, [sp, #20]
 8012bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bf4:	9302      	str	r3, [sp, #8]
 8012bf6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8012bfa:	b289      	uxth	r1, r1
 8012bfc:	fa1f f38e 	uxth.w	r3, lr
 8012c00:	9101      	str	r1, [sp, #4]
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 8012c06:	4643      	mov	r3, r8
 8012c08:	19b9      	adds	r1, r7, r6
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	47a8      	blx	r5
 8012c0e:	b019      	add	sp, #100	@ 0x64
 8012c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c14:	4a28      	ldr	r2, [pc, #160]	@ (8012cb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 8012c16:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8012c1a:	6810      	ldr	r0, [r2, #0]
 8012c1c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8012c20:	f8d0 a000 	ldr.w	sl, [r0]
 8012c24:	9306      	str	r3, [sp, #24]
 8012c26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c2a:	9305      	str	r3, [sp, #20]
 8012c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c2e:	f8cd c008 	str.w	ip, [sp, #8]
 8012c32:	e9cd 9303 	strd	r9, r3, [sp, #12]
 8012c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c38:	1b64      	subs	r4, r4, r5
 8012c3a:	1b1c      	subs	r4, r3, r4
 8012c3c:	fb06 5608 	mla	r6, r6, r8, r5
 8012c40:	4544      	cmp	r4, r8
 8012c42:	bfd4      	ite	le
 8012c44:	ebc5 0504 	rsble	r5, r5, r4
 8012c48:	ebc5 0508 	rsbgt	r5, r5, r8
 8012c4c:	b289      	uxth	r1, r1
 8012c4e:	b2ad      	uxth	r5, r5
 8012c50:	9101      	str	r1, [sp, #4]
 8012c52:	9500      	str	r5, [sp, #0]
 8012c54:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 8012c58:	4673      	mov	r3, lr
 8012c5a:	19b9      	adds	r1, r7, r6
 8012c5c:	e798      	b.n	8012b90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8012c5e:	2208      	movs	r2, #8
 8012c60:	9b08      	ldr	r3, [sp, #32]
 8012c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8012c66:	1e5a      	subs	r2, r3, #1
 8012c68:	4442      	add	r2, r8
 8012c6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8012c6e:	fb12 f203 	smulbb	r2, r2, r3
 8012c72:	b292      	uxth	r2, r2
 8012c74:	e64d      	b.n	8012912 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 8012c76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012c78:	e68f      	b.n	801299a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 8012c7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012c7c:	e723      	b.n	8012ac6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8012c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c80:	b143      	cbz	r3, 8012c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x478>
 8012c82:	441e      	add	r6, r3
 8012c84:	b2b6      	uxth	r6, r6
 8012c86:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 8012c8a:	f006 0607 	and.w	r6, r6, #7
 8012c8e:	783a      	ldrb	r2, [r7, #0]
 8012c90:	4132      	asrs	r2, r6
 8012c92:	b2d2      	uxtb	r2, r2
 8012c94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012c98:	4419      	add	r1, r3
 8012c9a:	910a      	str	r1, [sp, #40]	@ 0x28
 8012c9c:	e6b2      	b.n	8012a04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 8012c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1b4      	bne.n	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012ca4:	4b04      	ldr	r3, [pc, #16]	@ (8012cb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 8012ca6:	6818      	ldr	r0, [r3, #0]
 8012ca8:	6803      	ldr	r3, [r0, #0]
 8012caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cac:	4798      	blx	r3
 8012cae:	e7ae      	b.n	8012c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f47f af4a 	bne.w	8012b4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32e>
 8012cb6:	e626      	b.n	8012906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 8012cb8:	200125e0 	.word	0x200125e0

08012cbc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8012cbc:	b538      	push	{r3, r4, r5, lr}
 8012cbe:	4c0b      	ldr	r4, [pc, #44]	@ (8012cec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8012cc0:	7823      	ldrb	r3, [r4, #0]
 8012cc2:	f3bf 8f5b 	dmb	ish
 8012cc6:	07db      	lsls	r3, r3, #31
 8012cc8:	4605      	mov	r5, r0
 8012cca:	d40b      	bmi.n	8012ce4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f000 fd43 	bl	8013758 <__cxa_guard_acquire>
 8012cd2:	b138      	cbz	r0, 8012ce4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f000 fd4b 	bl	8013770 <__cxa_guard_release>
 8012cda:	4a05      	ldr	r2, [pc, #20]	@ (8012cf0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8012cdc:	4905      	ldr	r1, [pc, #20]	@ (8012cf4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8012cde:	4806      	ldr	r0, [pc, #24]	@ (8012cf8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8012ce0:	f000 fd33 	bl	801374a <__aeabi_atexit>
 8012ce4:	4b04      	ldr	r3, [pc, #16]	@ (8012cf8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8012ce6:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8012ce8:	bd38      	pop	{r3, r4, r5, pc}
 8012cea:	bf00      	nop
 8012cec:	2001266c 	.word	0x2001266c
 8012cf0:	20000000 	.word	0x20000000
 8012cf4:	08010ec9 	.word	0x08010ec9
 8012cf8:	20000088 	.word	0x20000088

08012cfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	1208      	asrs	r0, r1, #8
 8012d00:	b29e      	uxth	r6, r3
 8012d02:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012d06:	1213      	asrs	r3, r2, #8
 8012d08:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8012d0c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8012d10:	fb13 f305 	smulbb	r3, r3, r5
 8012d14:	fb10 f006 	smulbb	r0, r0, r6
 8012d18:	4418      	add	r0, r3
 8012d1a:	10cc      	asrs	r4, r1, #3
 8012d1c:	10d3      	asrs	r3, r2, #3
 8012d1e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8012d22:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8012d26:	fb13 f305 	smulbb	r3, r3, r5
 8012d2a:	fb14 f406 	smulbb	r4, r4, r6
 8012d2e:	00c9      	lsls	r1, r1, #3
 8012d30:	00d2      	lsls	r2, r2, #3
 8012d32:	441c      	add	r4, r3
 8012d34:	b2d2      	uxtb	r2, r2
 8012d36:	b2cb      	uxtb	r3, r1
 8012d38:	fb12 f205 	smulbb	r2, r2, r5
 8012d3c:	b280      	uxth	r0, r0
 8012d3e:	fb13 f306 	smulbb	r3, r3, r6
 8012d42:	4413      	add	r3, r2
 8012d44:	1c42      	adds	r2, r0, #1
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8012d4c:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8012d50:	1c58      	adds	r0, r3, #1
 8012d52:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012d56:	b2a4      	uxth	r4, r4
 8012d58:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012d5c:	4310      	orrs	r0, r2
 8012d5e:	1c62      	adds	r2, r4, #1
 8012d60:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012d64:	0964      	lsrs	r4, r4, #5
 8012d66:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012d6a:	4320      	orrs	r0, r4
 8012d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012d70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8012d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d74:	b08f      	sub	sp, #60	@ 0x3c
 8012d76:	461c      	mov	r4, r3
 8012d78:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012d7c:	9004      	str	r0, [sp, #16]
 8012d7e:	460d      	mov	r5, r1
 8012d80:	4616      	mov	r6, r2
 8012d82:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012d84:	2f00      	cmp	r7, #0
 8012d86:	f000 80f6 	beq.w	8012f76 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8012d8a:	6820      	ldr	r0, [r4, #0]
 8012d8c:	6861      	ldr	r1, [r4, #4]
 8012d8e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012d90:	c203      	stmia	r2!, {r0, r1}
 8012d92:	6818      	ldr	r0, [r3, #0]
 8012d94:	6859      	ldr	r1, [r3, #4]
 8012d96:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d98:	c203      	stmia	r2!, {r0, r1}
 8012d9a:	a80a      	add	r0, sp, #40	@ 0x28
 8012d9c:	f7f9 fe1c 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012da0:	4621      	mov	r1, r4
 8012da2:	a80c      	add	r0, sp, #48	@ 0x30
 8012da4:	f7f9 fe40 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012da8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012dac:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012db0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012db4:	f002 0301 	and.w	r3, r2, #1
 8012db8:	9306      	str	r3, [sp, #24]
 8012dba:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012dbe:	f003 0101 	and.w	r1, r3, #1
 8012dc2:	9105      	str	r1, [sp, #20]
 8012dc4:	9805      	ldr	r0, [sp, #20]
 8012dc6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012dca:	4403      	add	r3, r0
 8012dcc:	fb01 2303 	mla	r3, r1, r3, r2
 8012dd0:	f04f 0802 	mov.w	r8, #2
 8012dd4:	fb93 f3f8 	sdiv	r3, r3, r8
 8012dd8:	441d      	add	r5, r3
 8012dda:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8012dde:	441a      	add	r2, r3
 8012de0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012de4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012de8:	4419      	add	r1, r3
 8012dea:	4b64      	ldr	r3, [pc, #400]	@ (8012f7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8012dec:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012df0:	6818      	ldr	r0, [r3, #0]
 8012df2:	6803      	ldr	r3, [r0, #0]
 8012df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df6:	4798      	blx	r3
 8012df8:	4a61      	ldr	r2, [pc, #388]	@ (8012f80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8012dfa:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012dfe:	8813      	ldrh	r3, [r2, #0]
 8012e00:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8012e04:	2fff      	cmp	r7, #255	@ 0xff
 8012e06:	fb03 a404 	mla	r4, r3, r4, sl
 8012e0a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012e0e:	f106 0604 	add.w	r6, r6, #4
 8012e12:	4611      	mov	r1, r2
 8012e14:	fb03 fb0b 	mul.w	fp, r3, fp
 8012e18:	d06b      	beq.n	8012ef2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8012e1a:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8012e1e:	9303      	str	r3, [sp, #12]
 8012e20:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8012e24:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012e28:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012e2c:	9b07      	ldr	r3, [sp, #28]
 8012e2e:	42a3      	cmp	r3, r4
 8012e30:	f240 809c 	bls.w	8012f6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012e34:	9b06      	ldr	r3, [sp, #24]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d039      	beq.n	8012eae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8012e3a:	782b      	ldrb	r3, [r5, #0]
 8012e3c:	8822      	ldrh	r2, [r4, #0]
 8012e3e:	9804      	ldr	r0, [sp, #16]
 8012e40:	f003 030f 	and.w	r3, r3, #15
 8012e44:	f105 0801 	add.w	r8, r5, #1
 8012e48:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	463b      	mov	r3, r7
 8012e52:	f7ff ff53 	bl	8012cfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012e56:	f824 0b02 	strh.w	r0, [r4], #2
 8012e5a:	f109 3bff 	add.w	fp, r9, #4294967295
 8012e5e:	f1bb 0f01 	cmp.w	fp, #1
 8012e62:	46a2      	mov	sl, r4
 8012e64:	f104 0404 	add.w	r4, r4, #4
 8012e68:	dd24      	ble.n	8012eb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8012e6a:	f898 3000 	ldrb.w	r3, [r8]
 8012e6e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012e72:	9804      	ldr	r0, [sp, #16]
 8012e74:	091b      	lsrs	r3, r3, #4
 8012e76:	f1ab 0b02 	sub.w	fp, fp, #2
 8012e7a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012e7e:	9b03      	ldr	r3, [sp, #12]
 8012e80:	9300      	str	r3, [sp, #0]
 8012e82:	463b      	mov	r3, r7
 8012e84:	f7ff ff3a 	bl	8012cfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012e88:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012e8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e90:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012e94:	9804      	ldr	r0, [sp, #16]
 8012e96:	f003 030f 	and.w	r3, r3, #15
 8012e9a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012e9e:	9b03      	ldr	r3, [sp, #12]
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	463b      	mov	r3, r7
 8012ea4:	f7ff ff2a 	bl	8012cfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012ea8:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012eac:	e7d7      	b.n	8012e5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012eae:	46a8      	mov	r8, r5
 8012eb0:	46cb      	mov	fp, r9
 8012eb2:	e7d4      	b.n	8012e5e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012eb4:	d10e      	bne.n	8012ed4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012eb6:	f898 3000 	ldrb.w	r3, [r8]
 8012eba:	f8ba 2000 	ldrh.w	r2, [sl]
 8012ebe:	9804      	ldr	r0, [sp, #16]
 8012ec0:	091b      	lsrs	r3, r3, #4
 8012ec2:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012ec6:	9b03      	ldr	r3, [sp, #12]
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	463b      	mov	r3, r7
 8012ecc:	f7ff ff16 	bl	8012cfc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012ed0:	f82a 0b02 	strh.w	r0, [sl], #2
 8012ed4:	9b08      	ldr	r3, [sp, #32]
 8012ed6:	9a05      	ldr	r2, [sp, #20]
 8012ed8:	881c      	ldrh	r4, [r3, #0]
 8012eda:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012ede:	eba4 0409 	sub.w	r4, r4, r9
 8012ee2:	4413      	add	r3, r2
 8012ee4:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8012ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8012eee:	441d      	add	r5, r3
 8012ef0:	e79c      	b.n	8012e2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8012ef2:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8012ef6:	45a3      	cmp	fp, r4
 8012ef8:	d938      	bls.n	8012f6c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012efa:	9b06      	ldr	r3, [sp, #24]
 8012efc:	b1f3      	cbz	r3, 8012f3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8012efe:	782b      	ldrb	r3, [r5, #0]
 8012f00:	f003 030f 	and.w	r3, r3, #15
 8012f04:	1c6a      	adds	r2, r5, #1
 8012f06:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012f0a:	8023      	strh	r3, [r4, #0]
 8012f0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8012f10:	3402      	adds	r4, #2
 8012f12:	2801      	cmp	r0, #1
 8012f14:	4623      	mov	r3, r4
 8012f16:	f104 0404 	add.w	r4, r4, #4
 8012f1a:	dd12      	ble.n	8012f42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8012f1c:	7813      	ldrb	r3, [r2, #0]
 8012f1e:	091b      	lsrs	r3, r3, #4
 8012f20:	3802      	subs	r0, #2
 8012f22:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012f26:	f824 3c04 	strh.w	r3, [r4, #-4]
 8012f2a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012f2e:	f003 030f 	and.w	r3, r3, #15
 8012f32:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012f36:	f824 3c02 	strh.w	r3, [r4, #-2]
 8012f3a:	e7ea      	b.n	8012f12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012f3c:	462a      	mov	r2, r5
 8012f3e:	4648      	mov	r0, r9
 8012f40:	e7e7      	b.n	8012f12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012f42:	d106      	bne.n	8012f52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8012f44:	7812      	ldrb	r2, [r2, #0]
 8012f46:	0912      	lsrs	r2, r2, #4
 8012f48:	3302      	adds	r3, #2
 8012f4a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8012f4e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012f52:	880c      	ldrh	r4, [r1, #0]
 8012f54:	9a05      	ldr	r2, [sp, #20]
 8012f56:	eba4 0409 	sub.w	r4, r4, r9
 8012f5a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8012f5e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012f62:	4413      	add	r3, r2
 8012f64:	fb93 f3f8 	sdiv	r3, r3, r8
 8012f68:	441d      	add	r5, r3
 8012f6a:	e7c4      	b.n	8012ef6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8012f6c:	4b03      	ldr	r3, [pc, #12]	@ (8012f7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8012f6e:	6818      	ldr	r0, [r3, #0]
 8012f70:	6803      	ldr	r3, [r0, #0]
 8012f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f74:	4798      	blx	r3
 8012f76:	b00f      	add	sp, #60	@ 0x3c
 8012f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f7c:	200125e0 	.word	0x200125e0
 8012f80:	200125da 	.word	0x200125da

08012f84 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f86:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012f8a:	2dff      	cmp	r5, #255	@ 0xff
 8012f8c:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8012f90:	d10c      	bne.n	8012fac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012f92:	2bff      	cmp	r3, #255	@ 0xff
 8012f94:	d10a      	bne.n	8012fac <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012f96:	4b25      	ldr	r3, [pc, #148]	@ (801302c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012f98:	0948      	lsrs	r0, r1, #5
 8012f9a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8012f9e:	403b      	ands	r3, r7
 8012fa0:	4318      	orrs	r0, r3
 8012fa2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012fa6:	4308      	orrs	r0, r1
 8012fa8:	b280      	uxth	r0, r0
 8012faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fac:	fb15 f503 	smulbb	r5, r5, r3
 8012fb0:	b2ab      	uxth	r3, r5
 8012fb2:	1c5d      	adds	r5, r3, #1
 8012fb4:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012fb8:	1214      	asrs	r4, r2, #8
 8012fba:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8012fbe:	fa1f fc85 	uxth.w	ip, r5
 8012fc2:	10d6      	asrs	r6, r2, #3
 8012fc4:	00d0      	lsls	r0, r2, #3
 8012fc6:	43ed      	mvns	r5, r5
 8012fc8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012fcc:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012fd0:	b2eb      	uxtb	r3, r5
 8012fd2:	b2c0      	uxtb	r0, r0
 8012fd4:	fb12 f20c 	smulbb	r2, r2, ip
 8012fd8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012fdc:	fb04 2403 	mla	r4, r4, r3, r2
 8012fe0:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8012fe4:	b2c8      	uxtb	r0, r1
 8012fe6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012fea:	b2fd      	uxtb	r5, r7
 8012fec:	fb10 f00c 	smulbb	r0, r0, ip
 8012ff0:	b2a4      	uxth	r4, r4
 8012ff2:	fb02 0003 	mla	r0, r2, r3, r0
 8012ff6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8012ffa:	fb15 f50c 	smulbb	r5, r5, ip
 8012ffe:	fb06 5503 	mla	r5, r6, r3, r5
 8013002:	b283      	uxth	r3, r0
 8013004:	1c60      	adds	r0, r4, #1
 8013006:	b2ad      	uxth	r5, r5
 8013008:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801300c:	1c58      	adds	r0, r3, #1
 801300e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8013012:	1c6b      	adds	r3, r5, #1
 8013014:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8013018:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801301c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8013020:	096d      	lsrs	r5, r5, #5
 8013022:	4320      	orrs	r0, r4
 8013024:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8013028:	4328      	orrs	r0, r5
 801302a:	e7be      	b.n	8012faa <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 801302c:	00fff800 	.word	0x00fff800

08013030 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8013030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013034:	461c      	mov	r4, r3
 8013036:	b08d      	sub	sp, #52	@ 0x34
 8013038:	460d      	mov	r5, r1
 801303a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801303c:	6861      	ldr	r1, [r4, #4]
 801303e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8013042:	4680      	mov	r8, r0
 8013044:	6820      	ldr	r0, [r4, #0]
 8013046:	4616      	mov	r6, r2
 8013048:	aa08      	add	r2, sp, #32
 801304a:	c203      	stmia	r2!, {r0, r1}
 801304c:	6818      	ldr	r0, [r3, #0]
 801304e:	6859      	ldr	r1, [r3, #4]
 8013050:	aa0a      	add	r2, sp, #40	@ 0x28
 8013052:	c203      	stmia	r2!, {r0, r1}
 8013054:	a808      	add	r0, sp, #32
 8013056:	f7f9 fcbf 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801305a:	4621      	mov	r1, r4
 801305c:	a80a      	add	r0, sp, #40	@ 0x28
 801305e:	f7f9 fce3 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013062:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8013066:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 801306a:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 801306e:	f002 0301 	and.w	r3, r2, #1
 8013072:	9303      	str	r3, [sp, #12]
 8013074:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8013078:	f003 0101 	and.w	r1, r3, #1
 801307c:	9102      	str	r1, [sp, #8]
 801307e:	9802      	ldr	r0, [sp, #8]
 8013080:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8013084:	4403      	add	r3, r0
 8013086:	fb01 2303 	mla	r3, r1, r3, r2
 801308a:	f04f 0a02 	mov.w	sl, #2
 801308e:	fb93 f3fa 	sdiv	r3, r3, sl
 8013092:	441d      	add	r5, r3
 8013094:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013098:	441a      	add	r2, r3
 801309a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801309e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80130a2:	4a3f      	ldr	r2, [pc, #252]	@ (80131a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80130a4:	9205      	str	r2, [sp, #20]
 80130a6:	4419      	add	r1, r3
 80130a8:	6810      	ldr	r0, [r2, #0]
 80130aa:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 80130ae:	6803      	ldr	r3, [r0, #0]
 80130b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130b2:	4798      	blx	r3
 80130b4:	4b3b      	ldr	r3, [pc, #236]	@ (80131a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 80130b6:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 80130ba:	8819      	ldrh	r1, [r3, #0]
 80130bc:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 80130c0:	fb01 c404 	mla	r4, r1, r4, ip
 80130c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80130c8:	434f      	muls	r7, r1
 80130ca:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 80130ce:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 80130d2:	3604      	adds	r6, #4
 80130d4:	9204      	str	r2, [sp, #16]
 80130d6:	9b04      	ldr	r3, [sp, #16]
 80130d8:	429c      	cmp	r4, r3
 80130da:	d258      	bcs.n	801318e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80130dc:	9b03      	ldr	r3, [sp, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d034      	beq.n	801314c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80130e2:	782b      	ldrb	r3, [r5, #0]
 80130e4:	f003 030f 	and.w	r3, r3, #15
 80130e8:	1c6f      	adds	r7, r5, #1
 80130ea:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80130ee:	0e0b      	lsrs	r3, r1, #24
 80130f0:	d006      	beq.n	8013100 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80130f2:	8822      	ldrh	r2, [r4, #0]
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	4640      	mov	r0, r8
 80130f8:	464b      	mov	r3, r9
 80130fa:	f7ff ff43 	bl	8012f84 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80130fe:	8020      	strh	r0, [r4, #0]
 8013100:	3402      	adds	r4, #2
 8013102:	f10b 3aff 	add.w	sl, fp, #4294967295
 8013106:	f1ba 0f01 	cmp.w	sl, #1
 801310a:	dd22      	ble.n	8013152 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801310c:	783b      	ldrb	r3, [r7, #0]
 801310e:	091b      	lsrs	r3, r3, #4
 8013110:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013114:	0e0b      	lsrs	r3, r1, #24
 8013116:	d006      	beq.n	8013126 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8013118:	8822      	ldrh	r2, [r4, #0]
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	4640      	mov	r0, r8
 801311e:	464b      	mov	r3, r9
 8013120:	f7ff ff30 	bl	8012f84 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8013124:	8020      	strh	r0, [r4, #0]
 8013126:	f817 3b01 	ldrb.w	r3, [r7], #1
 801312a:	f003 030f 	and.w	r3, r3, #15
 801312e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013132:	0e0b      	lsrs	r3, r1, #24
 8013134:	d006      	beq.n	8013144 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8013136:	8862      	ldrh	r2, [r4, #2]
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	4640      	mov	r0, r8
 801313c:	464b      	mov	r3, r9
 801313e:	f7ff ff21 	bl	8012f84 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8013142:	8060      	strh	r0, [r4, #2]
 8013144:	3404      	adds	r4, #4
 8013146:	f1aa 0a02 	sub.w	sl, sl, #2
 801314a:	e7dc      	b.n	8013106 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 801314c:	462f      	mov	r7, r5
 801314e:	46da      	mov	sl, fp
 8013150:	e7d9      	b.n	8013106 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8013152:	d10d      	bne.n	8013170 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8013154:	783b      	ldrb	r3, [r7, #0]
 8013156:	091b      	lsrs	r3, r3, #4
 8013158:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801315c:	0e0b      	lsrs	r3, r1, #24
 801315e:	d006      	beq.n	801316e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8013160:	8822      	ldrh	r2, [r4, #0]
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	4640      	mov	r0, r8
 8013166:	464b      	mov	r3, r9
 8013168:	f7ff ff0c 	bl	8012f84 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801316c:	8020      	strh	r0, [r4, #0]
 801316e:	3402      	adds	r4, #2
 8013170:	9b06      	ldr	r3, [sp, #24]
 8013172:	9a02      	ldr	r2, [sp, #8]
 8013174:	881b      	ldrh	r3, [r3, #0]
 8013176:	eba3 030b 	sub.w	r3, r3, fp
 801317a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801317e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8013182:	4413      	add	r3, r2
 8013184:	9a07      	ldr	r2, [sp, #28]
 8013186:	fb93 f3f2 	sdiv	r3, r3, r2
 801318a:	441d      	add	r5, r3
 801318c:	e7a3      	b.n	80130d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 801318e:	9b05      	ldr	r3, [sp, #20]
 8013190:	6818      	ldr	r0, [r3, #0]
 8013192:	6803      	ldr	r3, [r0, #0]
 8013194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013196:	4798      	blx	r3
 8013198:	b00d      	add	sp, #52	@ 0x34
 801319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319e:	bf00      	nop
 80131a0:	200125e0 	.word	0x200125e0
 80131a4:	200125da 	.word	0x200125da

080131a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80131a8:	b570      	push	{r4, r5, r6, lr}
 80131aa:	1214      	asrs	r4, r2, #8
 80131ac:	788d      	ldrb	r5, [r1, #2]
 80131ae:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80131b2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80131b6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80131ba:	fb15 f503 	smulbb	r5, r5, r3
 80131be:	fb04 5506 	mla	r5, r4, r6, r5
 80131c2:	10d0      	asrs	r0, r2, #3
 80131c4:	784c      	ldrb	r4, [r1, #1]
 80131c6:	7809      	ldrb	r1, [r1, #0]
 80131c8:	00d2      	lsls	r2, r2, #3
 80131ca:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80131ce:	b2d2      	uxtb	r2, r2
 80131d0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80131d4:	fb14 f403 	smulbb	r4, r4, r3
 80131d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80131dc:	fb11 f303 	smulbb	r3, r1, r3
 80131e0:	fb00 4406 	mla	r4, r0, r6, r4
 80131e4:	fb02 3306 	mla	r3, r2, r6, r3
 80131e8:	b2ad      	uxth	r5, r5
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	b2a4      	uxth	r4, r4
 80131ee:	1c68      	adds	r0, r5, #1
 80131f0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80131f4:	1c62      	adds	r2, r4, #1
 80131f6:	1c58      	adds	r0, r3, #1
 80131f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80131fc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8013200:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8013204:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8013208:	0964      	lsrs	r4, r4, #5
 801320a:	4328      	orrs	r0, r5
 801320c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013210:	4320      	orrs	r0, r4
 8013212:	bd70      	pop	{r4, r5, r6, pc}

08013214 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8013214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013218:	b08f      	sub	sp, #60	@ 0x3c
 801321a:	461c      	mov	r4, r3
 801321c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8013220:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013222:	4682      	mov	sl, r0
 8013224:	460e      	mov	r6, r1
 8013226:	4615      	mov	r5, r2
 8013228:	2f00      	cmp	r7, #0
 801322a:	f000 8142 	beq.w	80134b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 801322e:	6820      	ldr	r0, [r4, #0]
 8013230:	6861      	ldr	r1, [r4, #4]
 8013232:	aa0a      	add	r2, sp, #40	@ 0x28
 8013234:	c203      	stmia	r2!, {r0, r1}
 8013236:	6818      	ldr	r0, [r3, #0]
 8013238:	6859      	ldr	r1, [r3, #4]
 801323a:	aa0c      	add	r2, sp, #48	@ 0x30
 801323c:	c203      	stmia	r2!, {r0, r1}
 801323e:	a80a      	add	r0, sp, #40	@ 0x28
 8013240:	f7f9 fbca 	bl	800c9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013244:	4621      	mov	r1, r4
 8013246:	a80c      	add	r0, sp, #48	@ 0x30
 8013248:	f7f9 fbee 	bl	800ca28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801324c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8013250:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8013254:	f002 0301 	and.w	r3, r2, #1
 8013258:	9306      	str	r3, [sp, #24]
 801325a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801325e:	f003 0101 	and.w	r1, r3, #1
 8013262:	9105      	str	r1, [sp, #20]
 8013264:	9805      	ldr	r0, [sp, #20]
 8013266:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801326a:	4403      	add	r3, r0
 801326c:	fb01 2303 	mla	r3, r1, r3, r2
 8013270:	f04f 0802 	mov.w	r8, #2
 8013274:	fb93 f3f8 	sdiv	r3, r3, r8
 8013278:	441e      	add	r6, r3
 801327a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801327e:	441a      	add	r2, r3
 8013280:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8013284:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8013288:	4419      	add	r1, r3
 801328a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801328e:	9303      	str	r3, [sp, #12]
 8013290:	4b89      	ldr	r3, [pc, #548]	@ (80134b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8013292:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	6803      	ldr	r3, [r0, #0]
 801329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801329c:	4798      	blx	r3
 801329e:	4a87      	ldr	r2, [pc, #540]	@ (80134bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 80132a0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80132a4:	8813      	ldrh	r3, [r2, #0]
 80132a6:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 80132aa:	2fff      	cmp	r7, #255	@ 0xff
 80132ac:	fb03 9404 	mla	r4, r3, r4, r9
 80132b0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80132b4:	f105 0504 	add.w	r5, r5, #4
 80132b8:	4694      	mov	ip, r2
 80132ba:	fb03 f30b 	mul.w	r3, r3, fp
 80132be:	d071      	beq.n	80133a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 80132c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80132c4:	43f9      	mvns	r1, r7
 80132c6:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80132ca:	b2c9      	uxtb	r1, r1
 80132cc:	9104      	str	r1, [sp, #16]
 80132ce:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80132d2:	9b07      	ldr	r3, [sp, #28]
 80132d4:	42a3      	cmp	r3, r4
 80132d6:	f240 80e7 	bls.w	80134a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80132da:	9b06      	ldr	r3, [sp, #24]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d03d      	beq.n	801335c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 80132e0:	7831      	ldrb	r1, [r6, #0]
 80132e2:	9b04      	ldr	r3, [sp, #16]
 80132e4:	8822      	ldrh	r2, [r4, #0]
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	f001 010f 	and.w	r1, r1, #15
 80132ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80132f0:	463b      	mov	r3, r7
 80132f2:	4429      	add	r1, r5
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ff ff57 	bl	80131a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80132fa:	9b03      	ldr	r3, [sp, #12]
 80132fc:	f824 0b02 	strh.w	r0, [r4], #2
 8013300:	f106 0801 	add.w	r8, r6, #1
 8013304:	f103 3bff 	add.w	fp, r3, #4294967295
 8013308:	f1bb 0f01 	cmp.w	fp, #1
 801330c:	46a1      	mov	r9, r4
 801330e:	f104 0404 	add.w	r4, r4, #4
 8013312:	dd27      	ble.n	8013364 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8013314:	f898 1000 	ldrb.w	r1, [r8]
 8013318:	9b04      	ldr	r3, [sp, #16]
 801331a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	0909      	lsrs	r1, r1, #4
 8013322:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013326:	463b      	mov	r3, r7
 8013328:	4429      	add	r1, r5
 801332a:	4650      	mov	r0, sl
 801332c:	f7ff ff3c 	bl	80131a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8013330:	f824 0c04 	strh.w	r0, [r4, #-4]
 8013334:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013338:	9b04      	ldr	r3, [sp, #16]
 801333a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	f001 010f 	and.w	r1, r1, #15
 8013344:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013348:	463b      	mov	r3, r7
 801334a:	4429      	add	r1, r5
 801334c:	4650      	mov	r0, sl
 801334e:	f7ff ff2b 	bl	80131a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8013352:	f1ab 0b02 	sub.w	fp, fp, #2
 8013356:	f824 0c02 	strh.w	r0, [r4, #-2]
 801335a:	e7d5      	b.n	8013308 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801335c:	46b0      	mov	r8, r6
 801335e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013362:	e7d1      	b.n	8013308 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8013364:	d10f      	bne.n	8013386 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8013366:	f898 1000 	ldrb.w	r1, [r8]
 801336a:	9b04      	ldr	r3, [sp, #16]
 801336c:	f8b9 2000 	ldrh.w	r2, [r9]
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	0909      	lsrs	r1, r1, #4
 8013374:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013378:	463b      	mov	r3, r7
 801337a:	4429      	add	r1, r5
 801337c:	4650      	mov	r0, sl
 801337e:	f7ff ff13 	bl	80131a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8013382:	f829 0b02 	strh.w	r0, [r9], #2
 8013386:	9b08      	ldr	r3, [sp, #32]
 8013388:	9a05      	ldr	r2, [sp, #20]
 801338a:	881c      	ldrh	r4, [r3, #0]
 801338c:	9b03      	ldr	r3, [sp, #12]
 801338e:	1ae4      	subs	r4, r4, r3
 8013390:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8013394:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8013398:	4413      	add	r3, r2
 801339a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801339c:	fb93 f3f2 	sdiv	r3, r3, r2
 80133a0:	441e      	add	r6, r3
 80133a2:	e796      	b.n	80132d2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 80133a4:	4f46      	ldr	r7, [pc, #280]	@ (80134c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80133a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80133aa:	42a3      	cmp	r3, r4
 80133ac:	d97c      	bls.n	80134a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80133ae:	9a06      	ldr	r2, [sp, #24]
 80133b0:	2a00      	cmp	r2, #0
 80133b2:	d054      	beq.n	801345e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 80133b4:	7830      	ldrb	r0, [r6, #0]
 80133b6:	f000 000f 	and.w	r0, r0, #15
 80133ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80133be:	eb05 0e00 	add.w	lr, r5, r0
 80133c2:	5c28      	ldrb	r0, [r5, r0]
 80133c4:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80133c8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80133cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80133d0:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80133d4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80133d8:	ea42 020e 	orr.w	r2, r2, lr
 80133dc:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80133e0:	f824 2b02 	strh.w	r2, [r4], #2
 80133e4:	9a03      	ldr	r2, [sp, #12]
 80133e6:	1c71      	adds	r1, r6, #1
 80133e8:	f102 3eff 	add.w	lr, r2, #4294967295
 80133ec:	f1be 0f01 	cmp.w	lr, #1
 80133f0:	4620      	mov	r0, r4
 80133f2:	f104 0404 	add.w	r4, r4, #4
 80133f6:	dd36      	ble.n	8013466 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80133f8:	7808      	ldrb	r0, [r1, #0]
 80133fa:	0900      	lsrs	r0, r0, #4
 80133fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013400:	eb05 0a00 	add.w	sl, r5, r0
 8013404:	f1ae 0e02 	sub.w	lr, lr, #2
 8013408:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801340c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013410:	00d2      	lsls	r2, r2, #3
 8013412:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8013416:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801341a:	ea49 0202 	orr.w	r2, r9, r2
 801341e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013422:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8013426:	f824 2c04 	strh.w	r2, [r4, #-4]
 801342a:	f811 0b01 	ldrb.w	r0, [r1], #1
 801342e:	f000 000f 	and.w	r0, r0, #15
 8013432:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013436:	eb05 0a00 	add.w	sl, r5, r0
 801343a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801343e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013442:	00d2      	lsls	r2, r2, #3
 8013444:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8013448:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801344c:	ea49 0202 	orr.w	r2, r9, r2
 8013450:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013454:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8013458:	f824 2c02 	strh.w	r2, [r4, #-2]
 801345c:	e7c6      	b.n	80133ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 801345e:	4631      	mov	r1, r6
 8013460:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8013464:	e7c2      	b.n	80133ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8013466:	d111      	bne.n	801348c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8013468:	7809      	ldrb	r1, [r1, #0]
 801346a:	0909      	lsrs	r1, r1, #4
 801346c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013470:	186c      	adds	r4, r5, r1
 8013472:	5c69      	ldrb	r1, [r5, r1]
 8013474:	78a2      	ldrb	r2, [r4, #2]
 8013476:	7864      	ldrb	r4, [r4, #1]
 8013478:	00e4      	lsls	r4, r4, #3
 801347a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 801347e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013482:	4322      	orrs	r2, r4
 8013484:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8013488:	f820 2b02 	strh.w	r2, [r0], #2
 801348c:	9a03      	ldr	r2, [sp, #12]
 801348e:	f8bc 4000 	ldrh.w	r4, [ip]
 8013492:	9905      	ldr	r1, [sp, #20]
 8013494:	1aa4      	subs	r4, r4, r2
 8013496:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801349a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801349e:	440a      	add	r2, r1
 80134a0:	fb92 f2f8 	sdiv	r2, r2, r8
 80134a4:	4416      	add	r6, r2
 80134a6:	e780      	b.n	80133aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 80134a8:	4b03      	ldr	r3, [pc, #12]	@ (80134b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80134aa:	6818      	ldr	r0, [r3, #0]
 80134ac:	6803      	ldr	r3, [r0, #0]
 80134ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134b0:	4798      	blx	r3
 80134b2:	b00f      	add	sp, #60	@ 0x3c
 80134b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b8:	200125e0 	.word	0x200125e0
 80134bc:	200125da 	.word	0x200125da
 80134c0:	fffff800 	.word	0xfffff800

080134c4 <CRC_Lock>:
 80134c4:	b530      	push	{r4, r5, lr}
 80134c6:	4a2d      	ldr	r2, [pc, #180]	@ (801357c <CRC_Lock+0xb8>)
 80134c8:	6813      	ldr	r3, [r2, #0]
 80134ca:	f023 0301 	bic.w	r3, r3, #1
 80134ce:	6013      	str	r3, [r2, #0]
 80134d0:	4b2b      	ldr	r3, [pc, #172]	@ (8013580 <CRC_Lock+0xbc>)
 80134d2:	681c      	ldr	r4, [r3, #0]
 80134d4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80134d8:	4014      	ands	r4, r2
 80134da:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80134de:	42ac      	cmp	r4, r5
 80134e0:	d005      	beq.n	80134ee <CRC_Lock+0x2a>
 80134e2:	681c      	ldr	r4, [r3, #0]
 80134e4:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80134e8:	4014      	ands	r4, r2
 80134ea:	42ac      	cmp	r4, r5
 80134ec:	d125      	bne.n	801353a <CRC_Lock+0x76>
 80134ee:	4b25      	ldr	r3, [pc, #148]	@ (8013584 <CRC_Lock+0xc0>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d139      	bne.n	801356a <CRC_Lock+0xa6>
 80134f6:	4b24      	ldr	r3, [pc, #144]	@ (8013588 <CRC_Lock+0xc4>)
 80134f8:	681a      	ldr	r2, [r3, #0]
 80134fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80134fe:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8013502:	d00d      	beq.n	8013520 <CRC_Lock+0x5c>
 8013504:	681a      	ldr	r2, [r3, #0]
 8013506:	f240 4483 	movw	r4, #1155	@ 0x483
 801350a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801350e:	42a2      	cmp	r2, r4
 8013510:	d006      	beq.n	8013520 <CRC_Lock+0x5c>
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f240 4285 	movw	r2, #1157	@ 0x485
 8013518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801351c:	4293      	cmp	r3, r2
 801351e:	d124      	bne.n	801356a <CRC_Lock+0xa6>
 8013520:	4b1a      	ldr	r3, [pc, #104]	@ (801358c <CRC_Lock+0xc8>)
 8013522:	2201      	movs	r2, #1
 8013524:	601a      	str	r2, [r3, #0]
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	2a00      	cmp	r2, #0
 801352a:	d1fc      	bne.n	8013526 <CRC_Lock+0x62>
 801352c:	4b18      	ldr	r3, [pc, #96]	@ (8013590 <CRC_Lock+0xcc>)
 801352e:	6018      	str	r0, [r3, #0]
 8013530:	6818      	ldr	r0, [r3, #0]
 8013532:	1a43      	subs	r3, r0, r1
 8013534:	4258      	negs	r0, r3
 8013536:	4158      	adcs	r0, r3
 8013538:	e00e      	b.n	8013558 <CRC_Lock+0x94>
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4013      	ands	r3, r2
 801353e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8013542:	4293      	cmp	r3, r2
 8013544:	d111      	bne.n	801356a <CRC_Lock+0xa6>
 8013546:	4b13      	ldr	r3, [pc, #76]	@ (8013594 <CRC_Lock+0xd0>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f240 4286 	movw	r2, #1158	@ 0x486
 801354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013552:	4293      	cmp	r3, r2
 8013554:	d001      	beq.n	801355a <CRC_Lock+0x96>
 8013556:	2000      	movs	r0, #0
 8013558:	bd30      	pop	{r4, r5, pc}
 801355a:	4b0f      	ldr	r3, [pc, #60]	@ (8013598 <CRC_Lock+0xd4>)
 801355c:	2201      	movs	r2, #1
 801355e:	601a      	str	r2, [r3, #0]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	2a00      	cmp	r2, #0
 8013564:	d1fc      	bne.n	8013560 <CRC_Lock+0x9c>
 8013566:	4b0d      	ldr	r3, [pc, #52]	@ (801359c <CRC_Lock+0xd8>)
 8013568:	e7e1      	b.n	801352e <CRC_Lock+0x6a>
 801356a:	4b0d      	ldr	r3, [pc, #52]	@ (80135a0 <CRC_Lock+0xdc>)
 801356c:	2201      	movs	r2, #1
 801356e:	601a      	str	r2, [r3, #0]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	2a00      	cmp	r2, #0
 8013574:	d1fc      	bne.n	8013570 <CRC_Lock+0xac>
 8013576:	4b0b      	ldr	r3, [pc, #44]	@ (80135a4 <CRC_Lock+0xe0>)
 8013578:	e7d9      	b.n	801352e <CRC_Lock+0x6a>
 801357a:	bf00      	nop
 801357c:	e0002000 	.word	0xe0002000
 8013580:	e000ed00 	.word	0xe000ed00
 8013584:	e0042000 	.word	0xe0042000
 8013588:	5c001000 	.word	0x5c001000
 801358c:	58024c08 	.word	0x58024c08
 8013590:	58024c00 	.word	0x58024c00
 8013594:	46008ff0 	.word	0x46008ff0
 8013598:	46024c08 	.word	0x46024c08
 801359c:	46024c00 	.word	0x46024c00
 80135a0:	40023008 	.word	0x40023008
 80135a4:	40023000 	.word	0x40023000

080135a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80135a8:	6101      	str	r1, [r0, #16]
 80135aa:	4770      	bx	lr

080135ac <_ZN8touchgfx8Gestures4tickEv>:
 80135ac:	7b83      	ldrb	r3, [r0, #14]
 80135ae:	b14b      	cbz	r3, 80135c4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80135b0:	8903      	ldrh	r3, [r0, #8]
 80135b2:	3301      	adds	r3, #1
 80135b4:	b29b      	uxth	r3, r3
 80135b6:	2b07      	cmp	r3, #7
 80135b8:	8103      	strh	r3, [r0, #8]
 80135ba:	bf81      	itttt	hi
 80135bc:	2300      	movhi	r3, #0
 80135be:	8143      	strhhi	r3, [r0, #10]
 80135c0:	8183      	strhhi	r3, [r0, #12]
 80135c2:	7383      	strbhi	r3, [r0, #14]
 80135c4:	4770      	bx	lr
	...

080135c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80135c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80135cc:	4698      	mov	r8, r3
 80135ce:	8883      	ldrh	r3, [r0, #4]
 80135d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80135d4:	eba8 0303 	sub.w	r3, r8, r3
 80135d8:	b21b      	sxth	r3, r3
 80135da:	4604      	mov	r4, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	4617      	mov	r7, r2
 80135e0:	4a18      	ldr	r2, [pc, #96]	@ (8013644 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80135e2:	9200      	str	r2, [sp, #0]
 80135e4:	bfb8      	it	lt
 80135e6:	425b      	neglt	r3, r3
 80135e8:	8aa2      	ldrh	r2, [r4, #20]
 80135ea:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80135ee:	f8ad 800a 	strh.w	r8, [sp, #10]
 80135f2:	b21b      	sxth	r3, r3
 80135f4:	460e      	mov	r6, r1
 80135f6:	4293      	cmp	r3, r2
 80135f8:	88c1      	ldrh	r1, [r0, #6]
 80135fa:	f8ad 1008 	strh.w	r1, [sp, #8]
 80135fe:	f04f 0000 	mov.w	r0, #0
 8013602:	f88d 0004 	strb.w	r0, [sp, #4]
 8013606:	f8ad 500c 	strh.w	r5, [sp, #12]
 801360a:	dc07      	bgt.n	801361c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 801360c:	1a69      	subs	r1, r5, r1
 801360e:	b209      	sxth	r1, r1
 8013610:	2900      	cmp	r1, #0
 8013612:	bfb8      	it	lt
 8013614:	4249      	neglt	r1, r1
 8013616:	b209      	sxth	r1, r1
 8013618:	428a      	cmp	r2, r1
 801361a:	da10      	bge.n	801363e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 801361c:	6920      	ldr	r0, [r4, #16]
 801361e:	6803      	ldr	r3, [r0, #0]
 8013620:	4669      	mov	r1, sp
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	4798      	blx	r3
 8013626:	eba8 0606 	sub.w	r6, r8, r6
 801362a:	2300      	movs	r3, #0
 801362c:	1bef      	subs	r7, r5, r7
 801362e:	2001      	movs	r0, #1
 8013630:	8123      	strh	r3, [r4, #8]
 8013632:	8166      	strh	r6, [r4, #10]
 8013634:	81a7      	strh	r7, [r4, #12]
 8013636:	f8a4 8004 	strh.w	r8, [r4, #4]
 801363a:	80e5      	strh	r5, [r4, #6]
 801363c:	73a0      	strb	r0, [r4, #14]
 801363e:	b004      	add	sp, #16
 8013640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013644:	08016050 	.word	0x08016050

08013648 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8013648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801364a:	461e      	mov	r6, r3
 801364c:	1e4b      	subs	r3, r1, #1
 801364e:	2b01      	cmp	r3, #1
 8013650:	b085      	sub	sp, #20
 8013652:	4604      	mov	r4, r0
 8013654:	460d      	mov	r5, r1
 8013656:	4617      	mov	r7, r2
 8013658:	d84b      	bhi.n	80136f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801365a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801365e:	1cd3      	adds	r3, r2, #3
 8013660:	b29b      	uxth	r3, r3
 8013662:	2b06      	cmp	r3, #6
 8013664:	d916      	bls.n	8013694 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8013666:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8013708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801366a:	f8cd c004 	str.w	ip, [sp, #4]
 801366e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013672:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013676:	6900      	ldr	r0, [r0, #16]
 8013678:	f8ad 100c 	strh.w	r1, [sp, #12]
 801367c:	f04f 0c00 	mov.w	ip, #0
 8013680:	f88d c008 	strb.w	ip, [sp, #8]
 8013684:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013688:	f8ad 300e 	strh.w	r3, [sp, #14]
 801368c:	6803      	ldr	r3, [r0, #0]
 801368e:	a901      	add	r1, sp, #4
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	4798      	blx	r3
 8013694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013698:	1cd3      	adds	r3, r2, #3
 801369a:	b29b      	uxth	r3, r3
 801369c:	2b06      	cmp	r3, #6
 801369e:	d916      	bls.n	80136ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80136a0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8013708 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80136a4:	f8cd c004 	str.w	ip, [sp, #4]
 80136a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80136ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80136b0:	6920      	ldr	r0, [r4, #16]
 80136b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80136b6:	f04f 0c01 	mov.w	ip, #1
 80136ba:	f88d c008 	strb.w	ip, [sp, #8]
 80136be:	f8ad 200a 	strh.w	r2, [sp, #10]
 80136c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80136c6:	6803      	ldr	r3, [r0, #0]
 80136c8:	a901      	add	r1, sp, #4
 80136ca:	689b      	ldr	r3, [r3, #8]
 80136cc:	4798      	blx	r3
 80136ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013704 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80136d0:	9301      	str	r3, [sp, #4]
 80136d2:	6920      	ldr	r0, [r4, #16]
 80136d4:	f88d 5008 	strb.w	r5, [sp, #8]
 80136d8:	2300      	movs	r3, #0
 80136da:	f8ad 700a 	strh.w	r7, [sp, #10]
 80136de:	f8ad 600c 	strh.w	r6, [sp, #12]
 80136e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80136e6:	6803      	ldr	r3, [r0, #0]
 80136e8:	a901      	add	r1, sp, #4
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4798      	blx	r3
 80136ee:	b005      	add	sp, #20
 80136f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136f2:	2900      	cmp	r1, #0
 80136f4:	d1eb      	bne.n	80136ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80136f6:	80a2      	strh	r2, [r4, #4]
 80136f8:	80c6      	strh	r6, [r0, #6]
 80136fa:	60a1      	str	r1, [r4, #8]
 80136fc:	81a1      	strh	r1, [r4, #12]
 80136fe:	73a1      	strb	r1, [r4, #14]
 8013700:	e7e5      	b.n	80136ce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013702:	bf00      	nop
 8013704:	0801603c 	.word	0x0801603c
 8013708:	08016064 	.word	0x08016064

0801370c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801370c:	b570      	push	{r4, r5, r6, lr}
 801370e:	790b      	ldrb	r3, [r1, #4]
 8013710:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013714:	2b00      	cmp	r3, #0
 8013716:	bf0c      	ite	eq
 8013718:	2301      	moveq	r3, #1
 801371a:	2300      	movne	r3, #0
 801371c:	4604      	mov	r4, r0
 801371e:	460e      	mov	r6, r1
 8013720:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013724:	d109      	bne.n	801373a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013726:	b14d      	cbz	r5, 801373c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013728:	7933      	ldrb	r3, [r6, #4]
 801372a:	2b01      	cmp	r3, #1
 801372c:	d10c      	bne.n	8013748 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801372e:	6823      	ldr	r3, [r4, #0]
 8013730:	4620      	mov	r0, r4
 8013732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013738:	4718      	bx	r3
 801373a:	b12d      	cbz	r5, 8013748 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801373c:	6823      	ldr	r3, [r4, #0]
 801373e:	4620      	mov	r0, r4
 8013740:	695b      	ldr	r3, [r3, #20]
 8013742:	4798      	blx	r3
 8013744:	2d00      	cmp	r5, #0
 8013746:	d1ef      	bne.n	8013728 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013748:	bd70      	pop	{r4, r5, r6, pc}

0801374a <__aeabi_atexit>:
 801374a:	460b      	mov	r3, r1
 801374c:	4601      	mov	r1, r0
 801374e:	4618      	mov	r0, r3
 8013750:	f000 b910 	b.w	8013974 <__cxa_atexit>

08013754 <_ZdlPvj>:
 8013754:	f000 b812 	b.w	801377c <_ZdlPv>

08013758 <__cxa_guard_acquire>:
 8013758:	6802      	ldr	r2, [r0, #0]
 801375a:	07d2      	lsls	r2, r2, #31
 801375c:	4603      	mov	r3, r0
 801375e:	d405      	bmi.n	801376c <__cxa_guard_acquire+0x14>
 8013760:	7842      	ldrb	r2, [r0, #1]
 8013762:	b102      	cbz	r2, 8013766 <__cxa_guard_acquire+0xe>
 8013764:	deff      	udf	#255	@ 0xff
 8013766:	2001      	movs	r0, #1
 8013768:	7058      	strb	r0, [r3, #1]
 801376a:	4770      	bx	lr
 801376c:	2000      	movs	r0, #0
 801376e:	4770      	bx	lr

08013770 <__cxa_guard_release>:
 8013770:	2301      	movs	r3, #1
 8013772:	6003      	str	r3, [r0, #0]
 8013774:	4770      	bx	lr

08013776 <__cxa_pure_virtual>:
 8013776:	b508      	push	{r3, lr}
 8013778:	f000 f80e 	bl	8013798 <_ZSt9terminatev>

0801377c <_ZdlPv>:
 801377c:	f000 b844 	b.w	8013808 <free>

08013780 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013780:	b508      	push	{r3, lr}
 8013782:	4780      	blx	r0
 8013784:	f000 f80d 	bl	80137a2 <abort>

08013788 <_ZSt13get_terminatev>:
 8013788:	4b02      	ldr	r3, [pc, #8]	@ (8013794 <_ZSt13get_terminatev+0xc>)
 801378a:	6818      	ldr	r0, [r3, #0]
 801378c:	f3bf 8f5b 	dmb	ish
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop
 8013794:	2000008c 	.word	0x2000008c

08013798 <_ZSt9terminatev>:
 8013798:	b508      	push	{r3, lr}
 801379a:	f7ff fff5 	bl	8013788 <_ZSt13get_terminatev>
 801379e:	f7ff ffef 	bl	8013780 <_ZN10__cxxabiv111__terminateEPFvvE>

080137a2 <abort>:
 80137a2:	b508      	push	{r3, lr}
 80137a4:	2006      	movs	r0, #6
 80137a6:	f000 fa3b 	bl	8013c20 <raise>
 80137aa:	2001      	movs	r0, #1
 80137ac:	f7ee fc2a 	bl	8002004 <_exit>

080137b0 <__assert_func>:
 80137b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137b2:	4614      	mov	r4, r2
 80137b4:	461a      	mov	r2, r3
 80137b6:	4b09      	ldr	r3, [pc, #36]	@ (80137dc <__assert_func+0x2c>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	4605      	mov	r5, r0
 80137bc:	68d8      	ldr	r0, [r3, #12]
 80137be:	b14c      	cbz	r4, 80137d4 <__assert_func+0x24>
 80137c0:	4b07      	ldr	r3, [pc, #28]	@ (80137e0 <__assert_func+0x30>)
 80137c2:	9100      	str	r1, [sp, #0]
 80137c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137c8:	4906      	ldr	r1, [pc, #24]	@ (80137e4 <__assert_func+0x34>)
 80137ca:	462b      	mov	r3, r5
 80137cc:	f000 f984 	bl	8013ad8 <fiprintf>
 80137d0:	f7ff ffe7 	bl	80137a2 <abort>
 80137d4:	4b04      	ldr	r3, [pc, #16]	@ (80137e8 <__assert_func+0x38>)
 80137d6:	461c      	mov	r4, r3
 80137d8:	e7f3      	b.n	80137c2 <__assert_func+0x12>
 80137da:	bf00      	nop
 80137dc:	2000009c 	.word	0x2000009c
 80137e0:	0801543e 	.word	0x0801543e
 80137e4:	0801544b 	.word	0x0801544b
 80137e8:	08015479 	.word	0x08015479

080137ec <atexit>:
 80137ec:	2300      	movs	r3, #0
 80137ee:	4601      	mov	r1, r0
 80137f0:	461a      	mov	r2, r3
 80137f2:	4618      	mov	r0, r3
 80137f4:	f000 bac2 	b.w	8013d7c <__register_exitproc>

080137f8 <malloc>:
 80137f8:	4b02      	ldr	r3, [pc, #8]	@ (8013804 <malloc+0xc>)
 80137fa:	4601      	mov	r1, r0
 80137fc:	6818      	ldr	r0, [r3, #0]
 80137fe:	f000 b82d 	b.w	801385c <_malloc_r>
 8013802:	bf00      	nop
 8013804:	2000009c 	.word	0x2000009c

08013808 <free>:
 8013808:	4b02      	ldr	r3, [pc, #8]	@ (8013814 <free+0xc>)
 801380a:	4601      	mov	r1, r0
 801380c:	6818      	ldr	r0, [r3, #0]
 801380e:	f000 bb11 	b.w	8013e34 <_free_r>
 8013812:	bf00      	nop
 8013814:	2000009c 	.word	0x2000009c

08013818 <sbrk_aligned>:
 8013818:	b570      	push	{r4, r5, r6, lr}
 801381a:	4e0f      	ldr	r6, [pc, #60]	@ (8013858 <sbrk_aligned+0x40>)
 801381c:	460c      	mov	r4, r1
 801381e:	6831      	ldr	r1, [r6, #0]
 8013820:	4605      	mov	r5, r0
 8013822:	b911      	cbnz	r1, 801382a <sbrk_aligned+0x12>
 8013824:	f000 fa4c 	bl	8013cc0 <_sbrk_r>
 8013828:	6030      	str	r0, [r6, #0]
 801382a:	4621      	mov	r1, r4
 801382c:	4628      	mov	r0, r5
 801382e:	f000 fa47 	bl	8013cc0 <_sbrk_r>
 8013832:	1c43      	adds	r3, r0, #1
 8013834:	d103      	bne.n	801383e <sbrk_aligned+0x26>
 8013836:	f04f 34ff 	mov.w	r4, #4294967295
 801383a:	4620      	mov	r0, r4
 801383c:	bd70      	pop	{r4, r5, r6, pc}
 801383e:	1cc4      	adds	r4, r0, #3
 8013840:	f024 0403 	bic.w	r4, r4, #3
 8013844:	42a0      	cmp	r0, r4
 8013846:	d0f8      	beq.n	801383a <sbrk_aligned+0x22>
 8013848:	1a21      	subs	r1, r4, r0
 801384a:	4628      	mov	r0, r5
 801384c:	f000 fa38 	bl	8013cc0 <_sbrk_r>
 8013850:	3001      	adds	r0, #1
 8013852:	d1f2      	bne.n	801383a <sbrk_aligned+0x22>
 8013854:	e7ef      	b.n	8013836 <sbrk_aligned+0x1e>
 8013856:	bf00      	nop
 8013858:	20012670 	.word	0x20012670

0801385c <_malloc_r>:
 801385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013860:	1ccd      	adds	r5, r1, #3
 8013862:	f025 0503 	bic.w	r5, r5, #3
 8013866:	3508      	adds	r5, #8
 8013868:	2d0c      	cmp	r5, #12
 801386a:	bf38      	it	cc
 801386c:	250c      	movcc	r5, #12
 801386e:	2d00      	cmp	r5, #0
 8013870:	4606      	mov	r6, r0
 8013872:	db01      	blt.n	8013878 <_malloc_r+0x1c>
 8013874:	42a9      	cmp	r1, r5
 8013876:	d904      	bls.n	8013882 <_malloc_r+0x26>
 8013878:	230c      	movs	r3, #12
 801387a:	6033      	str	r3, [r6, #0]
 801387c:	2000      	movs	r0, #0
 801387e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013958 <_malloc_r+0xfc>
 8013886:	f000 f869 	bl	801395c <__malloc_lock>
 801388a:	f8d8 3000 	ldr.w	r3, [r8]
 801388e:	461c      	mov	r4, r3
 8013890:	bb44      	cbnz	r4, 80138e4 <_malloc_r+0x88>
 8013892:	4629      	mov	r1, r5
 8013894:	4630      	mov	r0, r6
 8013896:	f7ff ffbf 	bl	8013818 <sbrk_aligned>
 801389a:	1c43      	adds	r3, r0, #1
 801389c:	4604      	mov	r4, r0
 801389e:	d158      	bne.n	8013952 <_malloc_r+0xf6>
 80138a0:	f8d8 4000 	ldr.w	r4, [r8]
 80138a4:	4627      	mov	r7, r4
 80138a6:	2f00      	cmp	r7, #0
 80138a8:	d143      	bne.n	8013932 <_malloc_r+0xd6>
 80138aa:	2c00      	cmp	r4, #0
 80138ac:	d04b      	beq.n	8013946 <_malloc_r+0xea>
 80138ae:	6823      	ldr	r3, [r4, #0]
 80138b0:	4639      	mov	r1, r7
 80138b2:	4630      	mov	r0, r6
 80138b4:	eb04 0903 	add.w	r9, r4, r3
 80138b8:	f000 fa02 	bl	8013cc0 <_sbrk_r>
 80138bc:	4581      	cmp	r9, r0
 80138be:	d142      	bne.n	8013946 <_malloc_r+0xea>
 80138c0:	6821      	ldr	r1, [r4, #0]
 80138c2:	1a6d      	subs	r5, r5, r1
 80138c4:	4629      	mov	r1, r5
 80138c6:	4630      	mov	r0, r6
 80138c8:	f7ff ffa6 	bl	8013818 <sbrk_aligned>
 80138cc:	3001      	adds	r0, #1
 80138ce:	d03a      	beq.n	8013946 <_malloc_r+0xea>
 80138d0:	6823      	ldr	r3, [r4, #0]
 80138d2:	442b      	add	r3, r5
 80138d4:	6023      	str	r3, [r4, #0]
 80138d6:	f8d8 3000 	ldr.w	r3, [r8]
 80138da:	685a      	ldr	r2, [r3, #4]
 80138dc:	bb62      	cbnz	r2, 8013938 <_malloc_r+0xdc>
 80138de:	f8c8 7000 	str.w	r7, [r8]
 80138e2:	e00f      	b.n	8013904 <_malloc_r+0xa8>
 80138e4:	6822      	ldr	r2, [r4, #0]
 80138e6:	1b52      	subs	r2, r2, r5
 80138e8:	d420      	bmi.n	801392c <_malloc_r+0xd0>
 80138ea:	2a0b      	cmp	r2, #11
 80138ec:	d917      	bls.n	801391e <_malloc_r+0xc2>
 80138ee:	1961      	adds	r1, r4, r5
 80138f0:	42a3      	cmp	r3, r4
 80138f2:	6025      	str	r5, [r4, #0]
 80138f4:	bf18      	it	ne
 80138f6:	6059      	strne	r1, [r3, #4]
 80138f8:	6863      	ldr	r3, [r4, #4]
 80138fa:	bf08      	it	eq
 80138fc:	f8c8 1000 	streq.w	r1, [r8]
 8013900:	5162      	str	r2, [r4, r5]
 8013902:	604b      	str	r3, [r1, #4]
 8013904:	4630      	mov	r0, r6
 8013906:	f000 f82f 	bl	8013968 <__malloc_unlock>
 801390a:	f104 000b 	add.w	r0, r4, #11
 801390e:	1d23      	adds	r3, r4, #4
 8013910:	f020 0007 	bic.w	r0, r0, #7
 8013914:	1ac2      	subs	r2, r0, r3
 8013916:	bf1c      	itt	ne
 8013918:	1a1b      	subne	r3, r3, r0
 801391a:	50a3      	strne	r3, [r4, r2]
 801391c:	e7af      	b.n	801387e <_malloc_r+0x22>
 801391e:	6862      	ldr	r2, [r4, #4]
 8013920:	42a3      	cmp	r3, r4
 8013922:	bf0c      	ite	eq
 8013924:	f8c8 2000 	streq.w	r2, [r8]
 8013928:	605a      	strne	r2, [r3, #4]
 801392a:	e7eb      	b.n	8013904 <_malloc_r+0xa8>
 801392c:	4623      	mov	r3, r4
 801392e:	6864      	ldr	r4, [r4, #4]
 8013930:	e7ae      	b.n	8013890 <_malloc_r+0x34>
 8013932:	463c      	mov	r4, r7
 8013934:	687f      	ldr	r7, [r7, #4]
 8013936:	e7b6      	b.n	80138a6 <_malloc_r+0x4a>
 8013938:	461a      	mov	r2, r3
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	42a3      	cmp	r3, r4
 801393e:	d1fb      	bne.n	8013938 <_malloc_r+0xdc>
 8013940:	2300      	movs	r3, #0
 8013942:	6053      	str	r3, [r2, #4]
 8013944:	e7de      	b.n	8013904 <_malloc_r+0xa8>
 8013946:	230c      	movs	r3, #12
 8013948:	6033      	str	r3, [r6, #0]
 801394a:	4630      	mov	r0, r6
 801394c:	f000 f80c 	bl	8013968 <__malloc_unlock>
 8013950:	e794      	b.n	801387c <_malloc_r+0x20>
 8013952:	6005      	str	r5, [r0, #0]
 8013954:	e7d6      	b.n	8013904 <_malloc_r+0xa8>
 8013956:	bf00      	nop
 8013958:	20012674 	.word	0x20012674

0801395c <__malloc_lock>:
 801395c:	4801      	ldr	r0, [pc, #4]	@ (8013964 <__malloc_lock+0x8>)
 801395e:	f000 b9fc 	b.w	8013d5a <__retarget_lock_acquire_recursive>
 8013962:	bf00      	nop
 8013964:	200127b8 	.word	0x200127b8

08013968 <__malloc_unlock>:
 8013968:	4801      	ldr	r0, [pc, #4]	@ (8013970 <__malloc_unlock+0x8>)
 801396a:	f000 b9f7 	b.w	8013d5c <__retarget_lock_release_recursive>
 801396e:	bf00      	nop
 8013970:	200127b8 	.word	0x200127b8

08013974 <__cxa_atexit>:
 8013974:	b510      	push	{r4, lr}
 8013976:	4604      	mov	r4, r0
 8013978:	4804      	ldr	r0, [pc, #16]	@ (801398c <__cxa_atexit+0x18>)
 801397a:	4613      	mov	r3, r2
 801397c:	b120      	cbz	r0, 8013988 <__cxa_atexit+0x14>
 801397e:	460a      	mov	r2, r1
 8013980:	2002      	movs	r0, #2
 8013982:	4621      	mov	r1, r4
 8013984:	f000 f9fa 	bl	8013d7c <__register_exitproc>
 8013988:	bd10      	pop	{r4, pc}
 801398a:	bf00      	nop
 801398c:	08013d7d 	.word	0x08013d7d

08013990 <std>:
 8013990:	2300      	movs	r3, #0
 8013992:	b510      	push	{r4, lr}
 8013994:	4604      	mov	r4, r0
 8013996:	e9c0 3300 	strd	r3, r3, [r0]
 801399a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801399e:	6083      	str	r3, [r0, #8]
 80139a0:	8181      	strh	r1, [r0, #12]
 80139a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80139a4:	81c2      	strh	r2, [r0, #14]
 80139a6:	6183      	str	r3, [r0, #24]
 80139a8:	4619      	mov	r1, r3
 80139aa:	2208      	movs	r2, #8
 80139ac:	305c      	adds	r0, #92	@ 0x5c
 80139ae:	f000 f906 	bl	8013bbe <memset>
 80139b2:	4b0d      	ldr	r3, [pc, #52]	@ (80139e8 <std+0x58>)
 80139b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80139b6:	4b0d      	ldr	r3, [pc, #52]	@ (80139ec <std+0x5c>)
 80139b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80139ba:	4b0d      	ldr	r3, [pc, #52]	@ (80139f0 <std+0x60>)
 80139bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80139be:	4b0d      	ldr	r3, [pc, #52]	@ (80139f4 <std+0x64>)
 80139c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80139c2:	4b0d      	ldr	r3, [pc, #52]	@ (80139f8 <std+0x68>)
 80139c4:	6224      	str	r4, [r4, #32]
 80139c6:	429c      	cmp	r4, r3
 80139c8:	d006      	beq.n	80139d8 <std+0x48>
 80139ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80139ce:	4294      	cmp	r4, r2
 80139d0:	d002      	beq.n	80139d8 <std+0x48>
 80139d2:	33d0      	adds	r3, #208	@ 0xd0
 80139d4:	429c      	cmp	r4, r3
 80139d6:	d105      	bne.n	80139e4 <std+0x54>
 80139d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80139dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139e0:	f000 b9ba 	b.w	8013d58 <__retarget_lock_init_recursive>
 80139e4:	bd10      	pop	{r4, pc}
 80139e6:	bf00      	nop
 80139e8:	08013b39 	.word	0x08013b39
 80139ec:	08013b5b 	.word	0x08013b5b
 80139f0:	08013b93 	.word	0x08013b93
 80139f4:	08013bb7 	.word	0x08013bb7
 80139f8:	20012678 	.word	0x20012678

080139fc <stdio_exit_handler>:
 80139fc:	4a02      	ldr	r2, [pc, #8]	@ (8013a08 <stdio_exit_handler+0xc>)
 80139fe:	4903      	ldr	r1, [pc, #12]	@ (8013a0c <stdio_exit_handler+0x10>)
 8013a00:	4803      	ldr	r0, [pc, #12]	@ (8013a10 <stdio_exit_handler+0x14>)
 8013a02:	f000 b87b 	b.w	8013afc <_fwalk_sglue>
 8013a06:	bf00      	nop
 8013a08:	20000090 	.word	0x20000090
 8013a0c:	0801456d 	.word	0x0801456d
 8013a10:	200000a0 	.word	0x200000a0

08013a14 <cleanup_stdio>:
 8013a14:	6841      	ldr	r1, [r0, #4]
 8013a16:	4b0c      	ldr	r3, [pc, #48]	@ (8013a48 <cleanup_stdio+0x34>)
 8013a18:	4299      	cmp	r1, r3
 8013a1a:	b510      	push	{r4, lr}
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	d001      	beq.n	8013a24 <cleanup_stdio+0x10>
 8013a20:	f000 fda4 	bl	801456c <_fflush_r>
 8013a24:	68a1      	ldr	r1, [r4, #8]
 8013a26:	4b09      	ldr	r3, [pc, #36]	@ (8013a4c <cleanup_stdio+0x38>)
 8013a28:	4299      	cmp	r1, r3
 8013a2a:	d002      	beq.n	8013a32 <cleanup_stdio+0x1e>
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f000 fd9d 	bl	801456c <_fflush_r>
 8013a32:	68e1      	ldr	r1, [r4, #12]
 8013a34:	4b06      	ldr	r3, [pc, #24]	@ (8013a50 <cleanup_stdio+0x3c>)
 8013a36:	4299      	cmp	r1, r3
 8013a38:	d004      	beq.n	8013a44 <cleanup_stdio+0x30>
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a40:	f000 bd94 	b.w	801456c <_fflush_r>
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop
 8013a48:	20012678 	.word	0x20012678
 8013a4c:	200126e0 	.word	0x200126e0
 8013a50:	20012748 	.word	0x20012748

08013a54 <global_stdio_init.part.0>:
 8013a54:	b510      	push	{r4, lr}
 8013a56:	4b0b      	ldr	r3, [pc, #44]	@ (8013a84 <global_stdio_init.part.0+0x30>)
 8013a58:	4c0b      	ldr	r4, [pc, #44]	@ (8013a88 <global_stdio_init.part.0+0x34>)
 8013a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8013a8c <global_stdio_init.part.0+0x38>)
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	4620      	mov	r0, r4
 8013a60:	2200      	movs	r2, #0
 8013a62:	2104      	movs	r1, #4
 8013a64:	f7ff ff94 	bl	8013990 <std>
 8013a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	2109      	movs	r1, #9
 8013a70:	f7ff ff8e 	bl	8013990 <std>
 8013a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013a78:	2202      	movs	r2, #2
 8013a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a7e:	2112      	movs	r1, #18
 8013a80:	f7ff bf86 	b.w	8013990 <std>
 8013a84:	200127b0 	.word	0x200127b0
 8013a88:	20012678 	.word	0x20012678
 8013a8c:	080139fd 	.word	0x080139fd

08013a90 <__sfp_lock_acquire>:
 8013a90:	4801      	ldr	r0, [pc, #4]	@ (8013a98 <__sfp_lock_acquire+0x8>)
 8013a92:	f000 b962 	b.w	8013d5a <__retarget_lock_acquire_recursive>
 8013a96:	bf00      	nop
 8013a98:	200127ba 	.word	0x200127ba

08013a9c <__sfp_lock_release>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	@ (8013aa4 <__sfp_lock_release+0x8>)
 8013a9e:	f000 b95d 	b.w	8013d5c <__retarget_lock_release_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	200127ba 	.word	0x200127ba

08013aa8 <__sinit>:
 8013aa8:	b510      	push	{r4, lr}
 8013aaa:	4604      	mov	r4, r0
 8013aac:	f7ff fff0 	bl	8013a90 <__sfp_lock_acquire>
 8013ab0:	6a23      	ldr	r3, [r4, #32]
 8013ab2:	b11b      	cbz	r3, 8013abc <__sinit+0x14>
 8013ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ab8:	f7ff bff0 	b.w	8013a9c <__sfp_lock_release>
 8013abc:	4b04      	ldr	r3, [pc, #16]	@ (8013ad0 <__sinit+0x28>)
 8013abe:	6223      	str	r3, [r4, #32]
 8013ac0:	4b04      	ldr	r3, [pc, #16]	@ (8013ad4 <__sinit+0x2c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1f5      	bne.n	8013ab4 <__sinit+0xc>
 8013ac8:	f7ff ffc4 	bl	8013a54 <global_stdio_init.part.0>
 8013acc:	e7f2      	b.n	8013ab4 <__sinit+0xc>
 8013ace:	bf00      	nop
 8013ad0:	08013a15 	.word	0x08013a15
 8013ad4:	200127b0 	.word	0x200127b0

08013ad8 <fiprintf>:
 8013ad8:	b40e      	push	{r1, r2, r3}
 8013ada:	b503      	push	{r0, r1, lr}
 8013adc:	4601      	mov	r1, r0
 8013ade:	ab03      	add	r3, sp, #12
 8013ae0:	4805      	ldr	r0, [pc, #20]	@ (8013af8 <fiprintf+0x20>)
 8013ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ae6:	6800      	ldr	r0, [r0, #0]
 8013ae8:	9301      	str	r3, [sp, #4]
 8013aea:	f000 fa17 	bl	8013f1c <_vfiprintf_r>
 8013aee:	b002      	add	sp, #8
 8013af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013af4:	b003      	add	sp, #12
 8013af6:	4770      	bx	lr
 8013af8:	2000009c 	.word	0x2000009c

08013afc <_fwalk_sglue>:
 8013afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b00:	4607      	mov	r7, r0
 8013b02:	4688      	mov	r8, r1
 8013b04:	4614      	mov	r4, r2
 8013b06:	2600      	movs	r6, #0
 8013b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8013b10:	d505      	bpl.n	8013b1e <_fwalk_sglue+0x22>
 8013b12:	6824      	ldr	r4, [r4, #0]
 8013b14:	2c00      	cmp	r4, #0
 8013b16:	d1f7      	bne.n	8013b08 <_fwalk_sglue+0xc>
 8013b18:	4630      	mov	r0, r6
 8013b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b1e:	89ab      	ldrh	r3, [r5, #12]
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	d907      	bls.n	8013b34 <_fwalk_sglue+0x38>
 8013b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	d003      	beq.n	8013b34 <_fwalk_sglue+0x38>
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	4638      	mov	r0, r7
 8013b30:	47c0      	blx	r8
 8013b32:	4306      	orrs	r6, r0
 8013b34:	3568      	adds	r5, #104	@ 0x68
 8013b36:	e7e9      	b.n	8013b0c <_fwalk_sglue+0x10>

08013b38 <__sread>:
 8013b38:	b510      	push	{r4, lr}
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b40:	f000 f898 	bl	8013c74 <_read_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	bfab      	itete	ge
 8013b48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8013b4c:	181b      	addge	r3, r3, r0
 8013b4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013b52:	bfac      	ite	ge
 8013b54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013b56:	81a3      	strhlt	r3, [r4, #12]
 8013b58:	bd10      	pop	{r4, pc}

08013b5a <__swrite>:
 8013b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5e:	461f      	mov	r7, r3
 8013b60:	898b      	ldrh	r3, [r1, #12]
 8013b62:	05db      	lsls	r3, r3, #23
 8013b64:	4605      	mov	r5, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	4616      	mov	r6, r2
 8013b6a:	d505      	bpl.n	8013b78 <__swrite+0x1e>
 8013b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b70:	2302      	movs	r3, #2
 8013b72:	2200      	movs	r2, #0
 8013b74:	f000 f86c 	bl	8013c50 <_lseek_r>
 8013b78:	89a3      	ldrh	r3, [r4, #12]
 8013b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013b82:	81a3      	strh	r3, [r4, #12]
 8013b84:	4632      	mov	r2, r6
 8013b86:	463b      	mov	r3, r7
 8013b88:	4628      	mov	r0, r5
 8013b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8e:	f000 b8a7 	b.w	8013ce0 <_write_r>

08013b92 <__sseek>:
 8013b92:	b510      	push	{r4, lr}
 8013b94:	460c      	mov	r4, r1
 8013b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b9a:	f000 f859 	bl	8013c50 <_lseek_r>
 8013b9e:	1c43      	adds	r3, r0, #1
 8013ba0:	89a3      	ldrh	r3, [r4, #12]
 8013ba2:	bf15      	itete	ne
 8013ba4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013ba6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013baa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013bae:	81a3      	strheq	r3, [r4, #12]
 8013bb0:	bf18      	it	ne
 8013bb2:	81a3      	strhne	r3, [r4, #12]
 8013bb4:	bd10      	pop	{r4, pc}

08013bb6 <__sclose>:
 8013bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bba:	f000 b839 	b.w	8013c30 <_close_r>

08013bbe <memset>:
 8013bbe:	4402      	add	r2, r0
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d100      	bne.n	8013bc8 <memset+0xa>
 8013bc6:	4770      	bx	lr
 8013bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8013bcc:	e7f9      	b.n	8013bc2 <memset+0x4>

08013bce <_raise_r>:
 8013bce:	291f      	cmp	r1, #31
 8013bd0:	b538      	push	{r3, r4, r5, lr}
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	460c      	mov	r4, r1
 8013bd6:	d904      	bls.n	8013be2 <_raise_r+0x14>
 8013bd8:	2316      	movs	r3, #22
 8013bda:	6003      	str	r3, [r0, #0]
 8013bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013be0:	bd38      	pop	{r3, r4, r5, pc}
 8013be2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013be4:	b112      	cbz	r2, 8013bec <_raise_r+0x1e>
 8013be6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bea:	b94b      	cbnz	r3, 8013c00 <_raise_r+0x32>
 8013bec:	4628      	mov	r0, r5
 8013bee:	f000 f865 	bl	8013cbc <_getpid_r>
 8013bf2:	4622      	mov	r2, r4
 8013bf4:	4601      	mov	r1, r0
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bfc:	f000 b84c 	b.w	8013c98 <_kill_r>
 8013c00:	2b01      	cmp	r3, #1
 8013c02:	d00a      	beq.n	8013c1a <_raise_r+0x4c>
 8013c04:	1c59      	adds	r1, r3, #1
 8013c06:	d103      	bne.n	8013c10 <_raise_r+0x42>
 8013c08:	2316      	movs	r3, #22
 8013c0a:	6003      	str	r3, [r0, #0]
 8013c0c:	2001      	movs	r0, #1
 8013c0e:	e7e7      	b.n	8013be0 <_raise_r+0x12>
 8013c10:	2100      	movs	r1, #0
 8013c12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c16:	4620      	mov	r0, r4
 8013c18:	4798      	blx	r3
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	e7e0      	b.n	8013be0 <_raise_r+0x12>
	...

08013c20 <raise>:
 8013c20:	4b02      	ldr	r3, [pc, #8]	@ (8013c2c <raise+0xc>)
 8013c22:	4601      	mov	r1, r0
 8013c24:	6818      	ldr	r0, [r3, #0]
 8013c26:	f7ff bfd2 	b.w	8013bce <_raise_r>
 8013c2a:	bf00      	nop
 8013c2c:	2000009c 	.word	0x2000009c

08013c30 <_close_r>:
 8013c30:	b538      	push	{r3, r4, r5, lr}
 8013c32:	4d06      	ldr	r5, [pc, #24]	@ (8013c4c <_close_r+0x1c>)
 8013c34:	2300      	movs	r3, #0
 8013c36:	4604      	mov	r4, r0
 8013c38:	4608      	mov	r0, r1
 8013c3a:	602b      	str	r3, [r5, #0]
 8013c3c:	f7ee fa04 	bl	8002048 <_close>
 8013c40:	1c43      	adds	r3, r0, #1
 8013c42:	d102      	bne.n	8013c4a <_close_r+0x1a>
 8013c44:	682b      	ldr	r3, [r5, #0]
 8013c46:	b103      	cbz	r3, 8013c4a <_close_r+0x1a>
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	bd38      	pop	{r3, r4, r5, pc}
 8013c4c:	200127b4 	.word	0x200127b4

08013c50 <_lseek_r>:
 8013c50:	b538      	push	{r3, r4, r5, lr}
 8013c52:	4d07      	ldr	r5, [pc, #28]	@ (8013c70 <_lseek_r+0x20>)
 8013c54:	4604      	mov	r4, r0
 8013c56:	4608      	mov	r0, r1
 8013c58:	4611      	mov	r1, r2
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	602a      	str	r2, [r5, #0]
 8013c5e:	461a      	mov	r2, r3
 8013c60:	f7ee f9fc 	bl	800205c <_lseek>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d102      	bne.n	8013c6e <_lseek_r+0x1e>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	b103      	cbz	r3, 8013c6e <_lseek_r+0x1e>
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	bd38      	pop	{r3, r4, r5, pc}
 8013c70:	200127b4 	.word	0x200127b4

08013c74 <_read_r>:
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	4d07      	ldr	r5, [pc, #28]	@ (8013c94 <_read_r+0x20>)
 8013c78:	4604      	mov	r4, r0
 8013c7a:	4608      	mov	r0, r1
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	2200      	movs	r2, #0
 8013c80:	602a      	str	r2, [r5, #0]
 8013c82:	461a      	mov	r2, r3
 8013c84:	f7ee f9c4 	bl	8002010 <_read>
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	d102      	bne.n	8013c92 <_read_r+0x1e>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b103      	cbz	r3, 8013c92 <_read_r+0x1e>
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	200127b4 	.word	0x200127b4

08013c98 <_kill_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4d07      	ldr	r5, [pc, #28]	@ (8013cb8 <_kill_r+0x20>)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	4608      	mov	r0, r1
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	602b      	str	r3, [r5, #0]
 8013ca6:	f7ee f9a5 	bl	8001ff4 <_kill>
 8013caa:	1c43      	adds	r3, r0, #1
 8013cac:	d102      	bne.n	8013cb4 <_kill_r+0x1c>
 8013cae:	682b      	ldr	r3, [r5, #0]
 8013cb0:	b103      	cbz	r3, 8013cb4 <_kill_r+0x1c>
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	bd38      	pop	{r3, r4, r5, pc}
 8013cb6:	bf00      	nop
 8013cb8:	200127b4 	.word	0x200127b4

08013cbc <_getpid_r>:
 8013cbc:	f7ee b998 	b.w	8001ff0 <_getpid>

08013cc0 <_sbrk_r>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	4d06      	ldr	r5, [pc, #24]	@ (8013cdc <_sbrk_r+0x1c>)
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	4608      	mov	r0, r1
 8013cca:	602b      	str	r3, [r5, #0]
 8013ccc:	f7ee f9c8 	bl	8002060 <_sbrk>
 8013cd0:	1c43      	adds	r3, r0, #1
 8013cd2:	d102      	bne.n	8013cda <_sbrk_r+0x1a>
 8013cd4:	682b      	ldr	r3, [r5, #0]
 8013cd6:	b103      	cbz	r3, 8013cda <_sbrk_r+0x1a>
 8013cd8:	6023      	str	r3, [r4, #0]
 8013cda:	bd38      	pop	{r3, r4, r5, pc}
 8013cdc:	200127b4 	.word	0x200127b4

08013ce0 <_write_r>:
 8013ce0:	b538      	push	{r3, r4, r5, lr}
 8013ce2:	4d07      	ldr	r5, [pc, #28]	@ (8013d00 <_write_r+0x20>)
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	4608      	mov	r0, r1
 8013ce8:	4611      	mov	r1, r2
 8013cea:	2200      	movs	r2, #0
 8013cec:	602a      	str	r2, [r5, #0]
 8013cee:	461a      	mov	r2, r3
 8013cf0:	f7ee f99c 	bl	800202c <_write>
 8013cf4:	1c43      	adds	r3, r0, #1
 8013cf6:	d102      	bne.n	8013cfe <_write_r+0x1e>
 8013cf8:	682b      	ldr	r3, [r5, #0]
 8013cfa:	b103      	cbz	r3, 8013cfe <_write_r+0x1e>
 8013cfc:	6023      	str	r3, [r4, #0]
 8013cfe:	bd38      	pop	{r3, r4, r5, pc}
 8013d00:	200127b4 	.word	0x200127b4

08013d04 <__errno>:
 8013d04:	4b01      	ldr	r3, [pc, #4]	@ (8013d0c <__errno+0x8>)
 8013d06:	6818      	ldr	r0, [r3, #0]
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop
 8013d0c:	2000009c 	.word	0x2000009c

08013d10 <__libc_init_array>:
 8013d10:	b570      	push	{r4, r5, r6, lr}
 8013d12:	4d0d      	ldr	r5, [pc, #52]	@ (8013d48 <__libc_init_array+0x38>)
 8013d14:	4c0d      	ldr	r4, [pc, #52]	@ (8013d4c <__libc_init_array+0x3c>)
 8013d16:	1b64      	subs	r4, r4, r5
 8013d18:	10a4      	asrs	r4, r4, #2
 8013d1a:	2600      	movs	r6, #0
 8013d1c:	42a6      	cmp	r6, r4
 8013d1e:	d109      	bne.n	8013d34 <__libc_init_array+0x24>
 8013d20:	4d0b      	ldr	r5, [pc, #44]	@ (8013d50 <__libc_init_array+0x40>)
 8013d22:	4c0c      	ldr	r4, [pc, #48]	@ (8013d54 <__libc_init_array+0x44>)
 8013d24:	f000 fd62 	bl	80147ec <_init>
 8013d28:	1b64      	subs	r4, r4, r5
 8013d2a:	10a4      	asrs	r4, r4, #2
 8013d2c:	2600      	movs	r6, #0
 8013d2e:	42a6      	cmp	r6, r4
 8013d30:	d105      	bne.n	8013d3e <__libc_init_array+0x2e>
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
 8013d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d38:	4798      	blx	r3
 8013d3a:	3601      	adds	r6, #1
 8013d3c:	e7ee      	b.n	8013d1c <__libc_init_array+0xc>
 8013d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d42:	4798      	blx	r3
 8013d44:	3601      	adds	r6, #1
 8013d46:	e7f2      	b.n	8013d2e <__libc_init_array+0x1e>
 8013d48:	080f1a88 	.word	0x080f1a88
 8013d4c:	080f1a88 	.word	0x080f1a88
 8013d50:	080f1a88 	.word	0x080f1a88
 8013d54:	080f1a9c 	.word	0x080f1a9c

08013d58 <__retarget_lock_init_recursive>:
 8013d58:	4770      	bx	lr

08013d5a <__retarget_lock_acquire_recursive>:
 8013d5a:	4770      	bx	lr

08013d5c <__retarget_lock_release_recursive>:
 8013d5c:	4770      	bx	lr

08013d5e <memcpy>:
 8013d5e:	440a      	add	r2, r1
 8013d60:	4291      	cmp	r1, r2
 8013d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d66:	d100      	bne.n	8013d6a <memcpy+0xc>
 8013d68:	4770      	bx	lr
 8013d6a:	b510      	push	{r4, lr}
 8013d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d74:	4291      	cmp	r1, r2
 8013d76:	d1f9      	bne.n	8013d6c <memcpy+0xe>
 8013d78:	bd10      	pop	{r4, pc}
	...

08013d7c <__register_exitproc>:
 8013d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d80:	4d27      	ldr	r5, [pc, #156]	@ (8013e20 <__register_exitproc+0xa4>)
 8013d82:	4607      	mov	r7, r0
 8013d84:	6828      	ldr	r0, [r5, #0]
 8013d86:	4691      	mov	r9, r2
 8013d88:	460e      	mov	r6, r1
 8013d8a:	4698      	mov	r8, r3
 8013d8c:	f7ff ffe5 	bl	8013d5a <__retarget_lock_acquire_recursive>
 8013d90:	4a24      	ldr	r2, [pc, #144]	@ (8013e24 <__register_exitproc+0xa8>)
 8013d92:	6814      	ldr	r4, [r2, #0]
 8013d94:	b93c      	cbnz	r4, 8013da6 <__register_exitproc+0x2a>
 8013d96:	4b24      	ldr	r3, [pc, #144]	@ (8013e28 <__register_exitproc+0xac>)
 8013d98:	6013      	str	r3, [r2, #0]
 8013d9a:	4a24      	ldr	r2, [pc, #144]	@ (8013e2c <__register_exitproc+0xb0>)
 8013d9c:	b112      	cbz	r2, 8013da4 <__register_exitproc+0x28>
 8013d9e:	6812      	ldr	r2, [r2, #0]
 8013da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013da4:	4c20      	ldr	r4, [pc, #128]	@ (8013e28 <__register_exitproc+0xac>)
 8013da6:	6863      	ldr	r3, [r4, #4]
 8013da8:	2b1f      	cmp	r3, #31
 8013daa:	dd06      	ble.n	8013dba <__register_exitproc+0x3e>
 8013dac:	6828      	ldr	r0, [r5, #0]
 8013dae:	f7ff ffd5 	bl	8013d5c <__retarget_lock_release_recursive>
 8013db2:	f04f 30ff 	mov.w	r0, #4294967295
 8013db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dba:	b32f      	cbz	r7, 8013e08 <__register_exitproc+0x8c>
 8013dbc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8013dc0:	b968      	cbnz	r0, 8013dde <__register_exitproc+0x62>
 8013dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e30 <__register_exitproc+0xb4>)
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d0f1      	beq.n	8013dac <__register_exitproc+0x30>
 8013dc8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8013dcc:	f7ff fd14 	bl	80137f8 <malloc>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d0eb      	beq.n	8013dac <__register_exitproc+0x30>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8013dda:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8013dde:	6863      	ldr	r3, [r4, #4]
 8013de0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013de4:	2201      	movs	r2, #1
 8013de6:	409a      	lsls	r2, r3
 8013de8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013dec:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8013df0:	4313      	orrs	r3, r2
 8013df2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8013df6:	2f02      	cmp	r7, #2
 8013df8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8013dfc:	bf02      	ittt	eq
 8013dfe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8013e02:	4313      	orreq	r3, r2
 8013e04:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8013e08:	6863      	ldr	r3, [r4, #4]
 8013e0a:	6828      	ldr	r0, [r5, #0]
 8013e0c:	1c5a      	adds	r2, r3, #1
 8013e0e:	3302      	adds	r3, #2
 8013e10:	6062      	str	r2, [r4, #4]
 8013e12:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8013e16:	f7ff ffa1 	bl	8013d5c <__retarget_lock_release_recursive>
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	e7cb      	b.n	8013db6 <__register_exitproc+0x3a>
 8013e1e:	bf00      	nop
 8013e20:	200000ec 	.word	0x200000ec
 8013e24:	20012848 	.word	0x20012848
 8013e28:	200127bc 	.word	0x200127bc
 8013e2c:	08016118 	.word	0x08016118
 8013e30:	080137f9 	.word	0x080137f9

08013e34 <_free_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	4605      	mov	r5, r0
 8013e38:	2900      	cmp	r1, #0
 8013e3a:	d041      	beq.n	8013ec0 <_free_r+0x8c>
 8013e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e40:	1f0c      	subs	r4, r1, #4
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	bfb8      	it	lt
 8013e46:	18e4      	addlt	r4, r4, r3
 8013e48:	f7ff fd88 	bl	801395c <__malloc_lock>
 8013e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8013ec4 <_free_r+0x90>)
 8013e4e:	6813      	ldr	r3, [r2, #0]
 8013e50:	b933      	cbnz	r3, 8013e60 <_free_r+0x2c>
 8013e52:	6063      	str	r3, [r4, #4]
 8013e54:	6014      	str	r4, [r2, #0]
 8013e56:	4628      	mov	r0, r5
 8013e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e5c:	f7ff bd84 	b.w	8013968 <__malloc_unlock>
 8013e60:	42a3      	cmp	r3, r4
 8013e62:	d908      	bls.n	8013e76 <_free_r+0x42>
 8013e64:	6820      	ldr	r0, [r4, #0]
 8013e66:	1821      	adds	r1, r4, r0
 8013e68:	428b      	cmp	r3, r1
 8013e6a:	bf01      	itttt	eq
 8013e6c:	6819      	ldreq	r1, [r3, #0]
 8013e6e:	685b      	ldreq	r3, [r3, #4]
 8013e70:	1809      	addeq	r1, r1, r0
 8013e72:	6021      	streq	r1, [r4, #0]
 8013e74:	e7ed      	b.n	8013e52 <_free_r+0x1e>
 8013e76:	461a      	mov	r2, r3
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	b10b      	cbz	r3, 8013e80 <_free_r+0x4c>
 8013e7c:	42a3      	cmp	r3, r4
 8013e7e:	d9fa      	bls.n	8013e76 <_free_r+0x42>
 8013e80:	6811      	ldr	r1, [r2, #0]
 8013e82:	1850      	adds	r0, r2, r1
 8013e84:	42a0      	cmp	r0, r4
 8013e86:	d10b      	bne.n	8013ea0 <_free_r+0x6c>
 8013e88:	6820      	ldr	r0, [r4, #0]
 8013e8a:	4401      	add	r1, r0
 8013e8c:	1850      	adds	r0, r2, r1
 8013e8e:	4283      	cmp	r3, r0
 8013e90:	6011      	str	r1, [r2, #0]
 8013e92:	d1e0      	bne.n	8013e56 <_free_r+0x22>
 8013e94:	6818      	ldr	r0, [r3, #0]
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	6053      	str	r3, [r2, #4]
 8013e9a:	4408      	add	r0, r1
 8013e9c:	6010      	str	r0, [r2, #0]
 8013e9e:	e7da      	b.n	8013e56 <_free_r+0x22>
 8013ea0:	d902      	bls.n	8013ea8 <_free_r+0x74>
 8013ea2:	230c      	movs	r3, #12
 8013ea4:	602b      	str	r3, [r5, #0]
 8013ea6:	e7d6      	b.n	8013e56 <_free_r+0x22>
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	1821      	adds	r1, r4, r0
 8013eac:	428b      	cmp	r3, r1
 8013eae:	bf04      	itt	eq
 8013eb0:	6819      	ldreq	r1, [r3, #0]
 8013eb2:	685b      	ldreq	r3, [r3, #4]
 8013eb4:	6063      	str	r3, [r4, #4]
 8013eb6:	bf04      	itt	eq
 8013eb8:	1809      	addeq	r1, r1, r0
 8013eba:	6021      	streq	r1, [r4, #0]
 8013ebc:	6054      	str	r4, [r2, #4]
 8013ebe:	e7ca      	b.n	8013e56 <_free_r+0x22>
 8013ec0:	bd38      	pop	{r3, r4, r5, pc}
 8013ec2:	bf00      	nop
 8013ec4:	20012674 	.word	0x20012674

08013ec8 <__sfputc_r>:
 8013ec8:	6893      	ldr	r3, [r2, #8]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	b410      	push	{r4}
 8013ed0:	6093      	str	r3, [r2, #8]
 8013ed2:	da08      	bge.n	8013ee6 <__sfputc_r+0x1e>
 8013ed4:	6994      	ldr	r4, [r2, #24]
 8013ed6:	42a3      	cmp	r3, r4
 8013ed8:	db01      	blt.n	8013ede <__sfputc_r+0x16>
 8013eda:	290a      	cmp	r1, #10
 8013edc:	d103      	bne.n	8013ee6 <__sfputc_r+0x1e>
 8013ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ee2:	f000 bb6b 	b.w	80145bc <__swbuf_r>
 8013ee6:	6813      	ldr	r3, [r2, #0]
 8013ee8:	1c58      	adds	r0, r3, #1
 8013eea:	6010      	str	r0, [r2, #0]
 8013eec:	7019      	strb	r1, [r3, #0]
 8013eee:	4608      	mov	r0, r1
 8013ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ef4:	4770      	bx	lr

08013ef6 <__sfputs_r>:
 8013ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ef8:	4606      	mov	r6, r0
 8013efa:	460f      	mov	r7, r1
 8013efc:	4614      	mov	r4, r2
 8013efe:	18d5      	adds	r5, r2, r3
 8013f00:	42ac      	cmp	r4, r5
 8013f02:	d101      	bne.n	8013f08 <__sfputs_r+0x12>
 8013f04:	2000      	movs	r0, #0
 8013f06:	e007      	b.n	8013f18 <__sfputs_r+0x22>
 8013f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f0c:	463a      	mov	r2, r7
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7ff ffda 	bl	8013ec8 <__sfputc_r>
 8013f14:	1c43      	adds	r3, r0, #1
 8013f16:	d1f3      	bne.n	8013f00 <__sfputs_r+0xa>
 8013f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f1c <_vfiprintf_r>:
 8013f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f20:	460d      	mov	r5, r1
 8013f22:	b09d      	sub	sp, #116	@ 0x74
 8013f24:	4614      	mov	r4, r2
 8013f26:	4698      	mov	r8, r3
 8013f28:	4606      	mov	r6, r0
 8013f2a:	b118      	cbz	r0, 8013f34 <_vfiprintf_r+0x18>
 8013f2c:	6a03      	ldr	r3, [r0, #32]
 8013f2e:	b90b      	cbnz	r3, 8013f34 <_vfiprintf_r+0x18>
 8013f30:	f7ff fdba 	bl	8013aa8 <__sinit>
 8013f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f36:	07d9      	lsls	r1, r3, #31
 8013f38:	d405      	bmi.n	8013f46 <_vfiprintf_r+0x2a>
 8013f3a:	89ab      	ldrh	r3, [r5, #12]
 8013f3c:	059a      	lsls	r2, r3, #22
 8013f3e:	d402      	bmi.n	8013f46 <_vfiprintf_r+0x2a>
 8013f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f42:	f7ff ff0a 	bl	8013d5a <__retarget_lock_acquire_recursive>
 8013f46:	89ab      	ldrh	r3, [r5, #12]
 8013f48:	071b      	lsls	r3, r3, #28
 8013f4a:	d501      	bpl.n	8013f50 <_vfiprintf_r+0x34>
 8013f4c:	692b      	ldr	r3, [r5, #16]
 8013f4e:	b99b      	cbnz	r3, 8013f78 <_vfiprintf_r+0x5c>
 8013f50:	4629      	mov	r1, r5
 8013f52:	4630      	mov	r0, r6
 8013f54:	f000 fb70 	bl	8014638 <__swsetup_r>
 8013f58:	b170      	cbz	r0, 8013f78 <_vfiprintf_r+0x5c>
 8013f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f5c:	07dc      	lsls	r4, r3, #31
 8013f5e:	d504      	bpl.n	8013f6a <_vfiprintf_r+0x4e>
 8013f60:	f04f 30ff 	mov.w	r0, #4294967295
 8013f64:	b01d      	add	sp, #116	@ 0x74
 8013f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f6a:	89ab      	ldrh	r3, [r5, #12]
 8013f6c:	0598      	lsls	r0, r3, #22
 8013f6e:	d4f7      	bmi.n	8013f60 <_vfiprintf_r+0x44>
 8013f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f72:	f7ff fef3 	bl	8013d5c <__retarget_lock_release_recursive>
 8013f76:	e7f3      	b.n	8013f60 <_vfiprintf_r+0x44>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f7c:	2320      	movs	r3, #32
 8013f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f86:	2330      	movs	r3, #48	@ 0x30
 8013f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014138 <_vfiprintf_r+0x21c>
 8013f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f90:	f04f 0901 	mov.w	r9, #1
 8013f94:	4623      	mov	r3, r4
 8013f96:	469a      	mov	sl, r3
 8013f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f9c:	b10a      	cbz	r2, 8013fa2 <_vfiprintf_r+0x86>
 8013f9e:	2a25      	cmp	r2, #37	@ 0x25
 8013fa0:	d1f9      	bne.n	8013f96 <_vfiprintf_r+0x7a>
 8013fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8013fa6:	d00b      	beq.n	8013fc0 <_vfiprintf_r+0xa4>
 8013fa8:	465b      	mov	r3, fp
 8013faa:	4622      	mov	r2, r4
 8013fac:	4629      	mov	r1, r5
 8013fae:	4630      	mov	r0, r6
 8013fb0:	f7ff ffa1 	bl	8013ef6 <__sfputs_r>
 8013fb4:	3001      	adds	r0, #1
 8013fb6:	f000 80a7 	beq.w	8014108 <_vfiprintf_r+0x1ec>
 8013fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fbc:	445a      	add	r2, fp
 8013fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 809f 	beq.w	8014108 <_vfiprintf_r+0x1ec>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fd4:	f10a 0a01 	add.w	sl, sl, #1
 8013fd8:	9304      	str	r3, [sp, #16]
 8013fda:	9307      	str	r3, [sp, #28]
 8013fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fe2:	4654      	mov	r4, sl
 8013fe4:	2205      	movs	r2, #5
 8013fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fea:	4853      	ldr	r0, [pc, #332]	@ (8014138 <_vfiprintf_r+0x21c>)
 8013fec:	f7ec f900 	bl	80001f0 <memchr>
 8013ff0:	9a04      	ldr	r2, [sp, #16]
 8013ff2:	b9d8      	cbnz	r0, 801402c <_vfiprintf_r+0x110>
 8013ff4:	06d1      	lsls	r1, r2, #27
 8013ff6:	bf44      	itt	mi
 8013ff8:	2320      	movmi	r3, #32
 8013ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ffe:	0713      	lsls	r3, r2, #28
 8014000:	bf44      	itt	mi
 8014002:	232b      	movmi	r3, #43	@ 0x2b
 8014004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014008:	f89a 3000 	ldrb.w	r3, [sl]
 801400c:	2b2a      	cmp	r3, #42	@ 0x2a
 801400e:	d015      	beq.n	801403c <_vfiprintf_r+0x120>
 8014010:	9a07      	ldr	r2, [sp, #28]
 8014012:	4654      	mov	r4, sl
 8014014:	2000      	movs	r0, #0
 8014016:	f04f 0c0a 	mov.w	ip, #10
 801401a:	4621      	mov	r1, r4
 801401c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014020:	3b30      	subs	r3, #48	@ 0x30
 8014022:	2b09      	cmp	r3, #9
 8014024:	d94b      	bls.n	80140be <_vfiprintf_r+0x1a2>
 8014026:	b1b0      	cbz	r0, 8014056 <_vfiprintf_r+0x13a>
 8014028:	9207      	str	r2, [sp, #28]
 801402a:	e014      	b.n	8014056 <_vfiprintf_r+0x13a>
 801402c:	eba0 0308 	sub.w	r3, r0, r8
 8014030:	fa09 f303 	lsl.w	r3, r9, r3
 8014034:	4313      	orrs	r3, r2
 8014036:	9304      	str	r3, [sp, #16]
 8014038:	46a2      	mov	sl, r4
 801403a:	e7d2      	b.n	8013fe2 <_vfiprintf_r+0xc6>
 801403c:	9b03      	ldr	r3, [sp, #12]
 801403e:	1d19      	adds	r1, r3, #4
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	9103      	str	r1, [sp, #12]
 8014044:	2b00      	cmp	r3, #0
 8014046:	bfbb      	ittet	lt
 8014048:	425b      	neglt	r3, r3
 801404a:	f042 0202 	orrlt.w	r2, r2, #2
 801404e:	9307      	strge	r3, [sp, #28]
 8014050:	9307      	strlt	r3, [sp, #28]
 8014052:	bfb8      	it	lt
 8014054:	9204      	strlt	r2, [sp, #16]
 8014056:	7823      	ldrb	r3, [r4, #0]
 8014058:	2b2e      	cmp	r3, #46	@ 0x2e
 801405a:	d10a      	bne.n	8014072 <_vfiprintf_r+0x156>
 801405c:	7863      	ldrb	r3, [r4, #1]
 801405e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014060:	d132      	bne.n	80140c8 <_vfiprintf_r+0x1ac>
 8014062:	9b03      	ldr	r3, [sp, #12]
 8014064:	1d1a      	adds	r2, r3, #4
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	9203      	str	r2, [sp, #12]
 801406a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801406e:	3402      	adds	r4, #2
 8014070:	9305      	str	r3, [sp, #20]
 8014072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014148 <_vfiprintf_r+0x22c>
 8014076:	7821      	ldrb	r1, [r4, #0]
 8014078:	2203      	movs	r2, #3
 801407a:	4650      	mov	r0, sl
 801407c:	f7ec f8b8 	bl	80001f0 <memchr>
 8014080:	b138      	cbz	r0, 8014092 <_vfiprintf_r+0x176>
 8014082:	9b04      	ldr	r3, [sp, #16]
 8014084:	eba0 000a 	sub.w	r0, r0, sl
 8014088:	2240      	movs	r2, #64	@ 0x40
 801408a:	4082      	lsls	r2, r0
 801408c:	4313      	orrs	r3, r2
 801408e:	3401      	adds	r4, #1
 8014090:	9304      	str	r3, [sp, #16]
 8014092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014096:	4829      	ldr	r0, [pc, #164]	@ (801413c <_vfiprintf_r+0x220>)
 8014098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801409c:	2206      	movs	r2, #6
 801409e:	f7ec f8a7 	bl	80001f0 <memchr>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d03f      	beq.n	8014126 <_vfiprintf_r+0x20a>
 80140a6:	4b26      	ldr	r3, [pc, #152]	@ (8014140 <_vfiprintf_r+0x224>)
 80140a8:	bb1b      	cbnz	r3, 80140f2 <_vfiprintf_r+0x1d6>
 80140aa:	9b03      	ldr	r3, [sp, #12]
 80140ac:	3307      	adds	r3, #7
 80140ae:	f023 0307 	bic.w	r3, r3, #7
 80140b2:	3308      	adds	r3, #8
 80140b4:	9303      	str	r3, [sp, #12]
 80140b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140b8:	443b      	add	r3, r7
 80140ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80140bc:	e76a      	b.n	8013f94 <_vfiprintf_r+0x78>
 80140be:	fb0c 3202 	mla	r2, ip, r2, r3
 80140c2:	460c      	mov	r4, r1
 80140c4:	2001      	movs	r0, #1
 80140c6:	e7a8      	b.n	801401a <_vfiprintf_r+0xfe>
 80140c8:	2300      	movs	r3, #0
 80140ca:	3401      	adds	r4, #1
 80140cc:	9305      	str	r3, [sp, #20]
 80140ce:	4619      	mov	r1, r3
 80140d0:	f04f 0c0a 	mov.w	ip, #10
 80140d4:	4620      	mov	r0, r4
 80140d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140da:	3a30      	subs	r2, #48	@ 0x30
 80140dc:	2a09      	cmp	r2, #9
 80140de:	d903      	bls.n	80140e8 <_vfiprintf_r+0x1cc>
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d0c6      	beq.n	8014072 <_vfiprintf_r+0x156>
 80140e4:	9105      	str	r1, [sp, #20]
 80140e6:	e7c4      	b.n	8014072 <_vfiprintf_r+0x156>
 80140e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80140ec:	4604      	mov	r4, r0
 80140ee:	2301      	movs	r3, #1
 80140f0:	e7f0      	b.n	80140d4 <_vfiprintf_r+0x1b8>
 80140f2:	ab03      	add	r3, sp, #12
 80140f4:	9300      	str	r3, [sp, #0]
 80140f6:	462a      	mov	r2, r5
 80140f8:	4b12      	ldr	r3, [pc, #72]	@ (8014144 <_vfiprintf_r+0x228>)
 80140fa:	a904      	add	r1, sp, #16
 80140fc:	4630      	mov	r0, r6
 80140fe:	f3af 8000 	nop.w
 8014102:	4607      	mov	r7, r0
 8014104:	1c78      	adds	r0, r7, #1
 8014106:	d1d6      	bne.n	80140b6 <_vfiprintf_r+0x19a>
 8014108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801410a:	07d9      	lsls	r1, r3, #31
 801410c:	d405      	bmi.n	801411a <_vfiprintf_r+0x1fe>
 801410e:	89ab      	ldrh	r3, [r5, #12]
 8014110:	059a      	lsls	r2, r3, #22
 8014112:	d402      	bmi.n	801411a <_vfiprintf_r+0x1fe>
 8014114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014116:	f7ff fe21 	bl	8013d5c <__retarget_lock_release_recursive>
 801411a:	89ab      	ldrh	r3, [r5, #12]
 801411c:	065b      	lsls	r3, r3, #25
 801411e:	f53f af1f 	bmi.w	8013f60 <_vfiprintf_r+0x44>
 8014122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014124:	e71e      	b.n	8013f64 <_vfiprintf_r+0x48>
 8014126:	ab03      	add	r3, sp, #12
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	462a      	mov	r2, r5
 801412c:	4b05      	ldr	r3, [pc, #20]	@ (8014144 <_vfiprintf_r+0x228>)
 801412e:	a904      	add	r1, sp, #16
 8014130:	4630      	mov	r0, r6
 8014132:	f000 f879 	bl	8014228 <_printf_i>
 8014136:	e7e4      	b.n	8014102 <_vfiprintf_r+0x1e6>
 8014138:	0801547a 	.word	0x0801547a
 801413c:	08015484 	.word	0x08015484
 8014140:	00000000 	.word	0x00000000
 8014144:	08013ef7 	.word	0x08013ef7
 8014148:	08015480 	.word	0x08015480

0801414c <_printf_common>:
 801414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014150:	4616      	mov	r6, r2
 8014152:	4698      	mov	r8, r3
 8014154:	688a      	ldr	r2, [r1, #8]
 8014156:	690b      	ldr	r3, [r1, #16]
 8014158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801415c:	4293      	cmp	r3, r2
 801415e:	bfb8      	it	lt
 8014160:	4613      	movlt	r3, r2
 8014162:	6033      	str	r3, [r6, #0]
 8014164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014168:	4607      	mov	r7, r0
 801416a:	460c      	mov	r4, r1
 801416c:	b10a      	cbz	r2, 8014172 <_printf_common+0x26>
 801416e:	3301      	adds	r3, #1
 8014170:	6033      	str	r3, [r6, #0]
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	0699      	lsls	r1, r3, #26
 8014176:	bf42      	ittt	mi
 8014178:	6833      	ldrmi	r3, [r6, #0]
 801417a:	3302      	addmi	r3, #2
 801417c:	6033      	strmi	r3, [r6, #0]
 801417e:	6825      	ldr	r5, [r4, #0]
 8014180:	f015 0506 	ands.w	r5, r5, #6
 8014184:	d106      	bne.n	8014194 <_printf_common+0x48>
 8014186:	f104 0a19 	add.w	sl, r4, #25
 801418a:	68e3      	ldr	r3, [r4, #12]
 801418c:	6832      	ldr	r2, [r6, #0]
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	42ab      	cmp	r3, r5
 8014192:	dc26      	bgt.n	80141e2 <_printf_common+0x96>
 8014194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014198:	6822      	ldr	r2, [r4, #0]
 801419a:	3b00      	subs	r3, #0
 801419c:	bf18      	it	ne
 801419e:	2301      	movne	r3, #1
 80141a0:	0692      	lsls	r2, r2, #26
 80141a2:	d42b      	bmi.n	80141fc <_printf_common+0xb0>
 80141a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80141a8:	4641      	mov	r1, r8
 80141aa:	4638      	mov	r0, r7
 80141ac:	47c8      	blx	r9
 80141ae:	3001      	adds	r0, #1
 80141b0:	d01e      	beq.n	80141f0 <_printf_common+0xa4>
 80141b2:	6823      	ldr	r3, [r4, #0]
 80141b4:	6922      	ldr	r2, [r4, #16]
 80141b6:	f003 0306 	and.w	r3, r3, #6
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	bf02      	ittt	eq
 80141be:	68e5      	ldreq	r5, [r4, #12]
 80141c0:	6833      	ldreq	r3, [r6, #0]
 80141c2:	1aed      	subeq	r5, r5, r3
 80141c4:	68a3      	ldr	r3, [r4, #8]
 80141c6:	bf0c      	ite	eq
 80141c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141cc:	2500      	movne	r5, #0
 80141ce:	4293      	cmp	r3, r2
 80141d0:	bfc4      	itt	gt
 80141d2:	1a9b      	subgt	r3, r3, r2
 80141d4:	18ed      	addgt	r5, r5, r3
 80141d6:	2600      	movs	r6, #0
 80141d8:	341a      	adds	r4, #26
 80141da:	42b5      	cmp	r5, r6
 80141dc:	d11a      	bne.n	8014214 <_printf_common+0xc8>
 80141de:	2000      	movs	r0, #0
 80141e0:	e008      	b.n	80141f4 <_printf_common+0xa8>
 80141e2:	2301      	movs	r3, #1
 80141e4:	4652      	mov	r2, sl
 80141e6:	4641      	mov	r1, r8
 80141e8:	4638      	mov	r0, r7
 80141ea:	47c8      	blx	r9
 80141ec:	3001      	adds	r0, #1
 80141ee:	d103      	bne.n	80141f8 <_printf_common+0xac>
 80141f0:	f04f 30ff 	mov.w	r0, #4294967295
 80141f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141f8:	3501      	adds	r5, #1
 80141fa:	e7c6      	b.n	801418a <_printf_common+0x3e>
 80141fc:	18e1      	adds	r1, r4, r3
 80141fe:	1c5a      	adds	r2, r3, #1
 8014200:	2030      	movs	r0, #48	@ 0x30
 8014202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014206:	4422      	add	r2, r4
 8014208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801420c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014210:	3302      	adds	r3, #2
 8014212:	e7c7      	b.n	80141a4 <_printf_common+0x58>
 8014214:	2301      	movs	r3, #1
 8014216:	4622      	mov	r2, r4
 8014218:	4641      	mov	r1, r8
 801421a:	4638      	mov	r0, r7
 801421c:	47c8      	blx	r9
 801421e:	3001      	adds	r0, #1
 8014220:	d0e6      	beq.n	80141f0 <_printf_common+0xa4>
 8014222:	3601      	adds	r6, #1
 8014224:	e7d9      	b.n	80141da <_printf_common+0x8e>
	...

08014228 <_printf_i>:
 8014228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801422c:	7e0f      	ldrb	r7, [r1, #24]
 801422e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014230:	2f78      	cmp	r7, #120	@ 0x78
 8014232:	4691      	mov	r9, r2
 8014234:	4680      	mov	r8, r0
 8014236:	460c      	mov	r4, r1
 8014238:	469a      	mov	sl, r3
 801423a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801423e:	d807      	bhi.n	8014250 <_printf_i+0x28>
 8014240:	2f62      	cmp	r7, #98	@ 0x62
 8014242:	d80a      	bhi.n	801425a <_printf_i+0x32>
 8014244:	2f00      	cmp	r7, #0
 8014246:	f000 80d1 	beq.w	80143ec <_printf_i+0x1c4>
 801424a:	2f58      	cmp	r7, #88	@ 0x58
 801424c:	f000 80b8 	beq.w	80143c0 <_printf_i+0x198>
 8014250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014258:	e03a      	b.n	80142d0 <_printf_i+0xa8>
 801425a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801425e:	2b15      	cmp	r3, #21
 8014260:	d8f6      	bhi.n	8014250 <_printf_i+0x28>
 8014262:	a101      	add	r1, pc, #4	@ (adr r1, 8014268 <_printf_i+0x40>)
 8014264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014268:	080142c1 	.word	0x080142c1
 801426c:	080142d5 	.word	0x080142d5
 8014270:	08014251 	.word	0x08014251
 8014274:	08014251 	.word	0x08014251
 8014278:	08014251 	.word	0x08014251
 801427c:	08014251 	.word	0x08014251
 8014280:	080142d5 	.word	0x080142d5
 8014284:	08014251 	.word	0x08014251
 8014288:	08014251 	.word	0x08014251
 801428c:	08014251 	.word	0x08014251
 8014290:	08014251 	.word	0x08014251
 8014294:	080143d3 	.word	0x080143d3
 8014298:	080142ff 	.word	0x080142ff
 801429c:	0801438d 	.word	0x0801438d
 80142a0:	08014251 	.word	0x08014251
 80142a4:	08014251 	.word	0x08014251
 80142a8:	080143f5 	.word	0x080143f5
 80142ac:	08014251 	.word	0x08014251
 80142b0:	080142ff 	.word	0x080142ff
 80142b4:	08014251 	.word	0x08014251
 80142b8:	08014251 	.word	0x08014251
 80142bc:	08014395 	.word	0x08014395
 80142c0:	6833      	ldr	r3, [r6, #0]
 80142c2:	1d1a      	adds	r2, r3, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	6032      	str	r2, [r6, #0]
 80142c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80142cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80142d0:	2301      	movs	r3, #1
 80142d2:	e09c      	b.n	801440e <_printf_i+0x1e6>
 80142d4:	6833      	ldr	r3, [r6, #0]
 80142d6:	6820      	ldr	r0, [r4, #0]
 80142d8:	1d19      	adds	r1, r3, #4
 80142da:	6031      	str	r1, [r6, #0]
 80142dc:	0606      	lsls	r6, r0, #24
 80142de:	d501      	bpl.n	80142e4 <_printf_i+0xbc>
 80142e0:	681d      	ldr	r5, [r3, #0]
 80142e2:	e003      	b.n	80142ec <_printf_i+0xc4>
 80142e4:	0645      	lsls	r5, r0, #25
 80142e6:	d5fb      	bpl.n	80142e0 <_printf_i+0xb8>
 80142e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80142ec:	2d00      	cmp	r5, #0
 80142ee:	da03      	bge.n	80142f8 <_printf_i+0xd0>
 80142f0:	232d      	movs	r3, #45	@ 0x2d
 80142f2:	426d      	negs	r5, r5
 80142f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142f8:	4858      	ldr	r0, [pc, #352]	@ (801445c <_printf_i+0x234>)
 80142fa:	230a      	movs	r3, #10
 80142fc:	e011      	b.n	8014322 <_printf_i+0xfa>
 80142fe:	6821      	ldr	r1, [r4, #0]
 8014300:	6833      	ldr	r3, [r6, #0]
 8014302:	0608      	lsls	r0, r1, #24
 8014304:	f853 5b04 	ldr.w	r5, [r3], #4
 8014308:	d402      	bmi.n	8014310 <_printf_i+0xe8>
 801430a:	0649      	lsls	r1, r1, #25
 801430c:	bf48      	it	mi
 801430e:	b2ad      	uxthmi	r5, r5
 8014310:	2f6f      	cmp	r7, #111	@ 0x6f
 8014312:	4852      	ldr	r0, [pc, #328]	@ (801445c <_printf_i+0x234>)
 8014314:	6033      	str	r3, [r6, #0]
 8014316:	bf14      	ite	ne
 8014318:	230a      	movne	r3, #10
 801431a:	2308      	moveq	r3, #8
 801431c:	2100      	movs	r1, #0
 801431e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014322:	6866      	ldr	r6, [r4, #4]
 8014324:	60a6      	str	r6, [r4, #8]
 8014326:	2e00      	cmp	r6, #0
 8014328:	db05      	blt.n	8014336 <_printf_i+0x10e>
 801432a:	6821      	ldr	r1, [r4, #0]
 801432c:	432e      	orrs	r6, r5
 801432e:	f021 0104 	bic.w	r1, r1, #4
 8014332:	6021      	str	r1, [r4, #0]
 8014334:	d04b      	beq.n	80143ce <_printf_i+0x1a6>
 8014336:	4616      	mov	r6, r2
 8014338:	fbb5 f1f3 	udiv	r1, r5, r3
 801433c:	fb03 5711 	mls	r7, r3, r1, r5
 8014340:	5dc7      	ldrb	r7, [r0, r7]
 8014342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014346:	462f      	mov	r7, r5
 8014348:	42bb      	cmp	r3, r7
 801434a:	460d      	mov	r5, r1
 801434c:	d9f4      	bls.n	8014338 <_printf_i+0x110>
 801434e:	2b08      	cmp	r3, #8
 8014350:	d10b      	bne.n	801436a <_printf_i+0x142>
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	07df      	lsls	r7, r3, #31
 8014356:	d508      	bpl.n	801436a <_printf_i+0x142>
 8014358:	6923      	ldr	r3, [r4, #16]
 801435a:	6861      	ldr	r1, [r4, #4]
 801435c:	4299      	cmp	r1, r3
 801435e:	bfde      	ittt	le
 8014360:	2330      	movle	r3, #48	@ 0x30
 8014362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014366:	f106 36ff 	addle.w	r6, r6, #4294967295
 801436a:	1b92      	subs	r2, r2, r6
 801436c:	6122      	str	r2, [r4, #16]
 801436e:	f8cd a000 	str.w	sl, [sp]
 8014372:	464b      	mov	r3, r9
 8014374:	aa03      	add	r2, sp, #12
 8014376:	4621      	mov	r1, r4
 8014378:	4640      	mov	r0, r8
 801437a:	f7ff fee7 	bl	801414c <_printf_common>
 801437e:	3001      	adds	r0, #1
 8014380:	d14a      	bne.n	8014418 <_printf_i+0x1f0>
 8014382:	f04f 30ff 	mov.w	r0, #4294967295
 8014386:	b004      	add	sp, #16
 8014388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801438c:	6823      	ldr	r3, [r4, #0]
 801438e:	f043 0320 	orr.w	r3, r3, #32
 8014392:	6023      	str	r3, [r4, #0]
 8014394:	4832      	ldr	r0, [pc, #200]	@ (8014460 <_printf_i+0x238>)
 8014396:	2778      	movs	r7, #120	@ 0x78
 8014398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801439c:	6823      	ldr	r3, [r4, #0]
 801439e:	6831      	ldr	r1, [r6, #0]
 80143a0:	061f      	lsls	r7, r3, #24
 80143a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80143a6:	d402      	bmi.n	80143ae <_printf_i+0x186>
 80143a8:	065f      	lsls	r7, r3, #25
 80143aa:	bf48      	it	mi
 80143ac:	b2ad      	uxthmi	r5, r5
 80143ae:	6031      	str	r1, [r6, #0]
 80143b0:	07d9      	lsls	r1, r3, #31
 80143b2:	bf44      	itt	mi
 80143b4:	f043 0320 	orrmi.w	r3, r3, #32
 80143b8:	6023      	strmi	r3, [r4, #0]
 80143ba:	b11d      	cbz	r5, 80143c4 <_printf_i+0x19c>
 80143bc:	2310      	movs	r3, #16
 80143be:	e7ad      	b.n	801431c <_printf_i+0xf4>
 80143c0:	4826      	ldr	r0, [pc, #152]	@ (801445c <_printf_i+0x234>)
 80143c2:	e7e9      	b.n	8014398 <_printf_i+0x170>
 80143c4:	6823      	ldr	r3, [r4, #0]
 80143c6:	f023 0320 	bic.w	r3, r3, #32
 80143ca:	6023      	str	r3, [r4, #0]
 80143cc:	e7f6      	b.n	80143bc <_printf_i+0x194>
 80143ce:	4616      	mov	r6, r2
 80143d0:	e7bd      	b.n	801434e <_printf_i+0x126>
 80143d2:	6833      	ldr	r3, [r6, #0]
 80143d4:	6825      	ldr	r5, [r4, #0]
 80143d6:	6961      	ldr	r1, [r4, #20]
 80143d8:	1d18      	adds	r0, r3, #4
 80143da:	6030      	str	r0, [r6, #0]
 80143dc:	062e      	lsls	r6, r5, #24
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	d501      	bpl.n	80143e6 <_printf_i+0x1be>
 80143e2:	6019      	str	r1, [r3, #0]
 80143e4:	e002      	b.n	80143ec <_printf_i+0x1c4>
 80143e6:	0668      	lsls	r0, r5, #25
 80143e8:	d5fb      	bpl.n	80143e2 <_printf_i+0x1ba>
 80143ea:	8019      	strh	r1, [r3, #0]
 80143ec:	2300      	movs	r3, #0
 80143ee:	6123      	str	r3, [r4, #16]
 80143f0:	4616      	mov	r6, r2
 80143f2:	e7bc      	b.n	801436e <_printf_i+0x146>
 80143f4:	6833      	ldr	r3, [r6, #0]
 80143f6:	1d1a      	adds	r2, r3, #4
 80143f8:	6032      	str	r2, [r6, #0]
 80143fa:	681e      	ldr	r6, [r3, #0]
 80143fc:	6862      	ldr	r2, [r4, #4]
 80143fe:	2100      	movs	r1, #0
 8014400:	4630      	mov	r0, r6
 8014402:	f7eb fef5 	bl	80001f0 <memchr>
 8014406:	b108      	cbz	r0, 801440c <_printf_i+0x1e4>
 8014408:	1b80      	subs	r0, r0, r6
 801440a:	6060      	str	r0, [r4, #4]
 801440c:	6863      	ldr	r3, [r4, #4]
 801440e:	6123      	str	r3, [r4, #16]
 8014410:	2300      	movs	r3, #0
 8014412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014416:	e7aa      	b.n	801436e <_printf_i+0x146>
 8014418:	6923      	ldr	r3, [r4, #16]
 801441a:	4632      	mov	r2, r6
 801441c:	4649      	mov	r1, r9
 801441e:	4640      	mov	r0, r8
 8014420:	47d0      	blx	sl
 8014422:	3001      	adds	r0, #1
 8014424:	d0ad      	beq.n	8014382 <_printf_i+0x15a>
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	079b      	lsls	r3, r3, #30
 801442a:	d413      	bmi.n	8014454 <_printf_i+0x22c>
 801442c:	68e0      	ldr	r0, [r4, #12]
 801442e:	9b03      	ldr	r3, [sp, #12]
 8014430:	4298      	cmp	r0, r3
 8014432:	bfb8      	it	lt
 8014434:	4618      	movlt	r0, r3
 8014436:	e7a6      	b.n	8014386 <_printf_i+0x15e>
 8014438:	2301      	movs	r3, #1
 801443a:	4632      	mov	r2, r6
 801443c:	4649      	mov	r1, r9
 801443e:	4640      	mov	r0, r8
 8014440:	47d0      	blx	sl
 8014442:	3001      	adds	r0, #1
 8014444:	d09d      	beq.n	8014382 <_printf_i+0x15a>
 8014446:	3501      	adds	r5, #1
 8014448:	68e3      	ldr	r3, [r4, #12]
 801444a:	9903      	ldr	r1, [sp, #12]
 801444c:	1a5b      	subs	r3, r3, r1
 801444e:	42ab      	cmp	r3, r5
 8014450:	dcf2      	bgt.n	8014438 <_printf_i+0x210>
 8014452:	e7eb      	b.n	801442c <_printf_i+0x204>
 8014454:	2500      	movs	r5, #0
 8014456:	f104 0619 	add.w	r6, r4, #25
 801445a:	e7f5      	b.n	8014448 <_printf_i+0x220>
 801445c:	0801548b 	.word	0x0801548b
 8014460:	0801549c 	.word	0x0801549c

08014464 <__sflush_r>:
 8014464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446c:	0716      	lsls	r6, r2, #28
 801446e:	4605      	mov	r5, r0
 8014470:	460c      	mov	r4, r1
 8014472:	d454      	bmi.n	801451e <__sflush_r+0xba>
 8014474:	684b      	ldr	r3, [r1, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	dc02      	bgt.n	8014480 <__sflush_r+0x1c>
 801447a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801447c:	2b00      	cmp	r3, #0
 801447e:	dd48      	ble.n	8014512 <__sflush_r+0xae>
 8014480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014482:	2e00      	cmp	r6, #0
 8014484:	d045      	beq.n	8014512 <__sflush_r+0xae>
 8014486:	2300      	movs	r3, #0
 8014488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801448c:	682f      	ldr	r7, [r5, #0]
 801448e:	6a21      	ldr	r1, [r4, #32]
 8014490:	602b      	str	r3, [r5, #0]
 8014492:	d030      	beq.n	80144f6 <__sflush_r+0x92>
 8014494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014496:	89a3      	ldrh	r3, [r4, #12]
 8014498:	0759      	lsls	r1, r3, #29
 801449a:	d505      	bpl.n	80144a8 <__sflush_r+0x44>
 801449c:	6863      	ldr	r3, [r4, #4]
 801449e:	1ad2      	subs	r2, r2, r3
 80144a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80144a2:	b10b      	cbz	r3, 80144a8 <__sflush_r+0x44>
 80144a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144a6:	1ad2      	subs	r2, r2, r3
 80144a8:	2300      	movs	r3, #0
 80144aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144ac:	6a21      	ldr	r1, [r4, #32]
 80144ae:	4628      	mov	r0, r5
 80144b0:	47b0      	blx	r6
 80144b2:	1c43      	adds	r3, r0, #1
 80144b4:	89a3      	ldrh	r3, [r4, #12]
 80144b6:	d106      	bne.n	80144c6 <__sflush_r+0x62>
 80144b8:	6829      	ldr	r1, [r5, #0]
 80144ba:	291d      	cmp	r1, #29
 80144bc:	d82b      	bhi.n	8014516 <__sflush_r+0xb2>
 80144be:	4a2a      	ldr	r2, [pc, #168]	@ (8014568 <__sflush_r+0x104>)
 80144c0:	40ca      	lsrs	r2, r1
 80144c2:	07d6      	lsls	r6, r2, #31
 80144c4:	d527      	bpl.n	8014516 <__sflush_r+0xb2>
 80144c6:	2200      	movs	r2, #0
 80144c8:	6062      	str	r2, [r4, #4]
 80144ca:	04d9      	lsls	r1, r3, #19
 80144cc:	6922      	ldr	r2, [r4, #16]
 80144ce:	6022      	str	r2, [r4, #0]
 80144d0:	d504      	bpl.n	80144dc <__sflush_r+0x78>
 80144d2:	1c42      	adds	r2, r0, #1
 80144d4:	d101      	bne.n	80144da <__sflush_r+0x76>
 80144d6:	682b      	ldr	r3, [r5, #0]
 80144d8:	b903      	cbnz	r3, 80144dc <__sflush_r+0x78>
 80144da:	6560      	str	r0, [r4, #84]	@ 0x54
 80144dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144de:	602f      	str	r7, [r5, #0]
 80144e0:	b1b9      	cbz	r1, 8014512 <__sflush_r+0xae>
 80144e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144e6:	4299      	cmp	r1, r3
 80144e8:	d002      	beq.n	80144f0 <__sflush_r+0x8c>
 80144ea:	4628      	mov	r0, r5
 80144ec:	f7ff fca2 	bl	8013e34 <_free_r>
 80144f0:	2300      	movs	r3, #0
 80144f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80144f4:	e00d      	b.n	8014512 <__sflush_r+0xae>
 80144f6:	2301      	movs	r3, #1
 80144f8:	4628      	mov	r0, r5
 80144fa:	47b0      	blx	r6
 80144fc:	4602      	mov	r2, r0
 80144fe:	1c50      	adds	r0, r2, #1
 8014500:	d1c9      	bne.n	8014496 <__sflush_r+0x32>
 8014502:	682b      	ldr	r3, [r5, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d0c6      	beq.n	8014496 <__sflush_r+0x32>
 8014508:	2b1d      	cmp	r3, #29
 801450a:	d001      	beq.n	8014510 <__sflush_r+0xac>
 801450c:	2b16      	cmp	r3, #22
 801450e:	d11e      	bne.n	801454e <__sflush_r+0xea>
 8014510:	602f      	str	r7, [r5, #0]
 8014512:	2000      	movs	r0, #0
 8014514:	e022      	b.n	801455c <__sflush_r+0xf8>
 8014516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801451a:	b21b      	sxth	r3, r3
 801451c:	e01b      	b.n	8014556 <__sflush_r+0xf2>
 801451e:	690f      	ldr	r7, [r1, #16]
 8014520:	2f00      	cmp	r7, #0
 8014522:	d0f6      	beq.n	8014512 <__sflush_r+0xae>
 8014524:	0793      	lsls	r3, r2, #30
 8014526:	680e      	ldr	r6, [r1, #0]
 8014528:	bf08      	it	eq
 801452a:	694b      	ldreq	r3, [r1, #20]
 801452c:	600f      	str	r7, [r1, #0]
 801452e:	bf18      	it	ne
 8014530:	2300      	movne	r3, #0
 8014532:	eba6 0807 	sub.w	r8, r6, r7
 8014536:	608b      	str	r3, [r1, #8]
 8014538:	f1b8 0f00 	cmp.w	r8, #0
 801453c:	dde9      	ble.n	8014512 <__sflush_r+0xae>
 801453e:	6a21      	ldr	r1, [r4, #32]
 8014540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014542:	4643      	mov	r3, r8
 8014544:	463a      	mov	r2, r7
 8014546:	4628      	mov	r0, r5
 8014548:	47b0      	blx	r6
 801454a:	2800      	cmp	r0, #0
 801454c:	dc08      	bgt.n	8014560 <__sflush_r+0xfc>
 801454e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014556:	81a3      	strh	r3, [r4, #12]
 8014558:	f04f 30ff 	mov.w	r0, #4294967295
 801455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014560:	4407      	add	r7, r0
 8014562:	eba8 0800 	sub.w	r8, r8, r0
 8014566:	e7e7      	b.n	8014538 <__sflush_r+0xd4>
 8014568:	20400001 	.word	0x20400001

0801456c <_fflush_r>:
 801456c:	b538      	push	{r3, r4, r5, lr}
 801456e:	690b      	ldr	r3, [r1, #16]
 8014570:	4605      	mov	r5, r0
 8014572:	460c      	mov	r4, r1
 8014574:	b913      	cbnz	r3, 801457c <_fflush_r+0x10>
 8014576:	2500      	movs	r5, #0
 8014578:	4628      	mov	r0, r5
 801457a:	bd38      	pop	{r3, r4, r5, pc}
 801457c:	b118      	cbz	r0, 8014586 <_fflush_r+0x1a>
 801457e:	6a03      	ldr	r3, [r0, #32]
 8014580:	b90b      	cbnz	r3, 8014586 <_fflush_r+0x1a>
 8014582:	f7ff fa91 	bl	8013aa8 <__sinit>
 8014586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d0f3      	beq.n	8014576 <_fflush_r+0xa>
 801458e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014590:	07d0      	lsls	r0, r2, #31
 8014592:	d404      	bmi.n	801459e <_fflush_r+0x32>
 8014594:	0599      	lsls	r1, r3, #22
 8014596:	d402      	bmi.n	801459e <_fflush_r+0x32>
 8014598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801459a:	f7ff fbde 	bl	8013d5a <__retarget_lock_acquire_recursive>
 801459e:	4628      	mov	r0, r5
 80145a0:	4621      	mov	r1, r4
 80145a2:	f7ff ff5f 	bl	8014464 <__sflush_r>
 80145a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145a8:	07da      	lsls	r2, r3, #31
 80145aa:	4605      	mov	r5, r0
 80145ac:	d4e4      	bmi.n	8014578 <_fflush_r+0xc>
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	059b      	lsls	r3, r3, #22
 80145b2:	d4e1      	bmi.n	8014578 <_fflush_r+0xc>
 80145b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145b6:	f7ff fbd1 	bl	8013d5c <__retarget_lock_release_recursive>
 80145ba:	e7dd      	b.n	8014578 <_fflush_r+0xc>

080145bc <__swbuf_r>:
 80145bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145be:	460e      	mov	r6, r1
 80145c0:	4614      	mov	r4, r2
 80145c2:	4605      	mov	r5, r0
 80145c4:	b118      	cbz	r0, 80145ce <__swbuf_r+0x12>
 80145c6:	6a03      	ldr	r3, [r0, #32]
 80145c8:	b90b      	cbnz	r3, 80145ce <__swbuf_r+0x12>
 80145ca:	f7ff fa6d 	bl	8013aa8 <__sinit>
 80145ce:	69a3      	ldr	r3, [r4, #24]
 80145d0:	60a3      	str	r3, [r4, #8]
 80145d2:	89a3      	ldrh	r3, [r4, #12]
 80145d4:	071a      	lsls	r2, r3, #28
 80145d6:	d501      	bpl.n	80145dc <__swbuf_r+0x20>
 80145d8:	6923      	ldr	r3, [r4, #16]
 80145da:	b943      	cbnz	r3, 80145ee <__swbuf_r+0x32>
 80145dc:	4621      	mov	r1, r4
 80145de:	4628      	mov	r0, r5
 80145e0:	f000 f82a 	bl	8014638 <__swsetup_r>
 80145e4:	b118      	cbz	r0, 80145ee <__swbuf_r+0x32>
 80145e6:	f04f 37ff 	mov.w	r7, #4294967295
 80145ea:	4638      	mov	r0, r7
 80145ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ee:	6823      	ldr	r3, [r4, #0]
 80145f0:	6922      	ldr	r2, [r4, #16]
 80145f2:	1a98      	subs	r0, r3, r2
 80145f4:	6963      	ldr	r3, [r4, #20]
 80145f6:	b2f6      	uxtb	r6, r6
 80145f8:	4283      	cmp	r3, r0
 80145fa:	4637      	mov	r7, r6
 80145fc:	dc05      	bgt.n	801460a <__swbuf_r+0x4e>
 80145fe:	4621      	mov	r1, r4
 8014600:	4628      	mov	r0, r5
 8014602:	f7ff ffb3 	bl	801456c <_fflush_r>
 8014606:	2800      	cmp	r0, #0
 8014608:	d1ed      	bne.n	80145e6 <__swbuf_r+0x2a>
 801460a:	68a3      	ldr	r3, [r4, #8]
 801460c:	3b01      	subs	r3, #1
 801460e:	60a3      	str	r3, [r4, #8]
 8014610:	6823      	ldr	r3, [r4, #0]
 8014612:	1c5a      	adds	r2, r3, #1
 8014614:	6022      	str	r2, [r4, #0]
 8014616:	701e      	strb	r6, [r3, #0]
 8014618:	6962      	ldr	r2, [r4, #20]
 801461a:	1c43      	adds	r3, r0, #1
 801461c:	429a      	cmp	r2, r3
 801461e:	d004      	beq.n	801462a <__swbuf_r+0x6e>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	07db      	lsls	r3, r3, #31
 8014624:	d5e1      	bpl.n	80145ea <__swbuf_r+0x2e>
 8014626:	2e0a      	cmp	r6, #10
 8014628:	d1df      	bne.n	80145ea <__swbuf_r+0x2e>
 801462a:	4621      	mov	r1, r4
 801462c:	4628      	mov	r0, r5
 801462e:	f7ff ff9d 	bl	801456c <_fflush_r>
 8014632:	2800      	cmp	r0, #0
 8014634:	d0d9      	beq.n	80145ea <__swbuf_r+0x2e>
 8014636:	e7d6      	b.n	80145e6 <__swbuf_r+0x2a>

08014638 <__swsetup_r>:
 8014638:	b538      	push	{r3, r4, r5, lr}
 801463a:	4b29      	ldr	r3, [pc, #164]	@ (80146e0 <__swsetup_r+0xa8>)
 801463c:	4605      	mov	r5, r0
 801463e:	6818      	ldr	r0, [r3, #0]
 8014640:	460c      	mov	r4, r1
 8014642:	b118      	cbz	r0, 801464c <__swsetup_r+0x14>
 8014644:	6a03      	ldr	r3, [r0, #32]
 8014646:	b90b      	cbnz	r3, 801464c <__swsetup_r+0x14>
 8014648:	f7ff fa2e 	bl	8013aa8 <__sinit>
 801464c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014650:	0719      	lsls	r1, r3, #28
 8014652:	d422      	bmi.n	801469a <__swsetup_r+0x62>
 8014654:	06da      	lsls	r2, r3, #27
 8014656:	d407      	bmi.n	8014668 <__swsetup_r+0x30>
 8014658:	2209      	movs	r2, #9
 801465a:	602a      	str	r2, [r5, #0]
 801465c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014660:	81a3      	strh	r3, [r4, #12]
 8014662:	f04f 30ff 	mov.w	r0, #4294967295
 8014666:	e033      	b.n	80146d0 <__swsetup_r+0x98>
 8014668:	0758      	lsls	r0, r3, #29
 801466a:	d512      	bpl.n	8014692 <__swsetup_r+0x5a>
 801466c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801466e:	b141      	cbz	r1, 8014682 <__swsetup_r+0x4a>
 8014670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014674:	4299      	cmp	r1, r3
 8014676:	d002      	beq.n	801467e <__swsetup_r+0x46>
 8014678:	4628      	mov	r0, r5
 801467a:	f7ff fbdb 	bl	8013e34 <_free_r>
 801467e:	2300      	movs	r3, #0
 8014680:	6363      	str	r3, [r4, #52]	@ 0x34
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014688:	81a3      	strh	r3, [r4, #12]
 801468a:	2300      	movs	r3, #0
 801468c:	6063      	str	r3, [r4, #4]
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	6023      	str	r3, [r4, #0]
 8014692:	89a3      	ldrh	r3, [r4, #12]
 8014694:	f043 0308 	orr.w	r3, r3, #8
 8014698:	81a3      	strh	r3, [r4, #12]
 801469a:	6923      	ldr	r3, [r4, #16]
 801469c:	b94b      	cbnz	r3, 80146b2 <__swsetup_r+0x7a>
 801469e:	89a3      	ldrh	r3, [r4, #12]
 80146a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80146a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80146a8:	d003      	beq.n	80146b2 <__swsetup_r+0x7a>
 80146aa:	4621      	mov	r1, r4
 80146ac:	4628      	mov	r0, r5
 80146ae:	f000 f83f 	bl	8014730 <__smakebuf_r>
 80146b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146b6:	f013 0201 	ands.w	r2, r3, #1
 80146ba:	d00a      	beq.n	80146d2 <__swsetup_r+0x9a>
 80146bc:	2200      	movs	r2, #0
 80146be:	60a2      	str	r2, [r4, #8]
 80146c0:	6962      	ldr	r2, [r4, #20]
 80146c2:	4252      	negs	r2, r2
 80146c4:	61a2      	str	r2, [r4, #24]
 80146c6:	6922      	ldr	r2, [r4, #16]
 80146c8:	b942      	cbnz	r2, 80146dc <__swsetup_r+0xa4>
 80146ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146ce:	d1c5      	bne.n	801465c <__swsetup_r+0x24>
 80146d0:	bd38      	pop	{r3, r4, r5, pc}
 80146d2:	0799      	lsls	r1, r3, #30
 80146d4:	bf58      	it	pl
 80146d6:	6962      	ldrpl	r2, [r4, #20]
 80146d8:	60a2      	str	r2, [r4, #8]
 80146da:	e7f4      	b.n	80146c6 <__swsetup_r+0x8e>
 80146dc:	2000      	movs	r0, #0
 80146de:	e7f7      	b.n	80146d0 <__swsetup_r+0x98>
 80146e0:	2000009c 	.word	0x2000009c

080146e4 <__swhatbuf_r>:
 80146e4:	b570      	push	{r4, r5, r6, lr}
 80146e6:	460c      	mov	r4, r1
 80146e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146ec:	2900      	cmp	r1, #0
 80146ee:	b096      	sub	sp, #88	@ 0x58
 80146f0:	4615      	mov	r5, r2
 80146f2:	461e      	mov	r6, r3
 80146f4:	da0d      	bge.n	8014712 <__swhatbuf_r+0x2e>
 80146f6:	89a3      	ldrh	r3, [r4, #12]
 80146f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146fc:	f04f 0100 	mov.w	r1, #0
 8014700:	bf14      	ite	ne
 8014702:	2340      	movne	r3, #64	@ 0x40
 8014704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014708:	2000      	movs	r0, #0
 801470a:	6031      	str	r1, [r6, #0]
 801470c:	602b      	str	r3, [r5, #0]
 801470e:	b016      	add	sp, #88	@ 0x58
 8014710:	bd70      	pop	{r4, r5, r6, pc}
 8014712:	466a      	mov	r2, sp
 8014714:	f000 f848 	bl	80147a8 <_fstat_r>
 8014718:	2800      	cmp	r0, #0
 801471a:	dbec      	blt.n	80146f6 <__swhatbuf_r+0x12>
 801471c:	9901      	ldr	r1, [sp, #4]
 801471e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014726:	4259      	negs	r1, r3
 8014728:	4159      	adcs	r1, r3
 801472a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801472e:	e7eb      	b.n	8014708 <__swhatbuf_r+0x24>

08014730 <__smakebuf_r>:
 8014730:	898b      	ldrh	r3, [r1, #12]
 8014732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014734:	079d      	lsls	r5, r3, #30
 8014736:	4606      	mov	r6, r0
 8014738:	460c      	mov	r4, r1
 801473a:	d507      	bpl.n	801474c <__smakebuf_r+0x1c>
 801473c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	6123      	str	r3, [r4, #16]
 8014744:	2301      	movs	r3, #1
 8014746:	6163      	str	r3, [r4, #20]
 8014748:	b003      	add	sp, #12
 801474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801474c:	ab01      	add	r3, sp, #4
 801474e:	466a      	mov	r2, sp
 8014750:	f7ff ffc8 	bl	80146e4 <__swhatbuf_r>
 8014754:	9f00      	ldr	r7, [sp, #0]
 8014756:	4605      	mov	r5, r0
 8014758:	4639      	mov	r1, r7
 801475a:	4630      	mov	r0, r6
 801475c:	f7ff f87e 	bl	801385c <_malloc_r>
 8014760:	b948      	cbnz	r0, 8014776 <__smakebuf_r+0x46>
 8014762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014766:	059a      	lsls	r2, r3, #22
 8014768:	d4ee      	bmi.n	8014748 <__smakebuf_r+0x18>
 801476a:	f023 0303 	bic.w	r3, r3, #3
 801476e:	f043 0302 	orr.w	r3, r3, #2
 8014772:	81a3      	strh	r3, [r4, #12]
 8014774:	e7e2      	b.n	801473c <__smakebuf_r+0xc>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	6020      	str	r0, [r4, #0]
 801477a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801477e:	81a3      	strh	r3, [r4, #12]
 8014780:	9b01      	ldr	r3, [sp, #4]
 8014782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014786:	b15b      	cbz	r3, 80147a0 <__smakebuf_r+0x70>
 8014788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801478c:	4630      	mov	r0, r6
 801478e:	f000 f81d 	bl	80147cc <_isatty_r>
 8014792:	b128      	cbz	r0, 80147a0 <__smakebuf_r+0x70>
 8014794:	89a3      	ldrh	r3, [r4, #12]
 8014796:	f023 0303 	bic.w	r3, r3, #3
 801479a:	f043 0301 	orr.w	r3, r3, #1
 801479e:	81a3      	strh	r3, [r4, #12]
 80147a0:	89a3      	ldrh	r3, [r4, #12]
 80147a2:	431d      	orrs	r5, r3
 80147a4:	81a5      	strh	r5, [r4, #12]
 80147a6:	e7cf      	b.n	8014748 <__smakebuf_r+0x18>

080147a8 <_fstat_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4d07      	ldr	r5, [pc, #28]	@ (80147c8 <_fstat_r+0x20>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	4611      	mov	r1, r2
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	f7ed fc4a 	bl	800204e <_fstat>
 80147ba:	1c43      	adds	r3, r0, #1
 80147bc:	d102      	bne.n	80147c4 <_fstat_r+0x1c>
 80147be:	682b      	ldr	r3, [r5, #0]
 80147c0:	b103      	cbz	r3, 80147c4 <_fstat_r+0x1c>
 80147c2:	6023      	str	r3, [r4, #0]
 80147c4:	bd38      	pop	{r3, r4, r5, pc}
 80147c6:	bf00      	nop
 80147c8:	200127b4 	.word	0x200127b4

080147cc <_isatty_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d06      	ldr	r5, [pc, #24]	@ (80147e8 <_isatty_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	602b      	str	r3, [r5, #0]
 80147d8:	f7ed fc3e 	bl	8002058 <_isatty>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_isatty_r+0x1a>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_isatty_r+0x1a>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	200127b4 	.word	0x200127b4

080147ec <_init>:
 80147ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ee:	bf00      	nop
 80147f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147f2:	bc08      	pop	{r3}
 80147f4:	469e      	mov	lr, r3
 80147f6:	4770      	bx	lr

080147f8 <_fini>:
 80147f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fa:	bf00      	nop
 80147fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147fe:	bc08      	pop	{r3}
 8014800:	469e      	mov	lr, r3
 8014802:	4770      	bx	lr
